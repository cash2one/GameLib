<?xml version="1.0" encoding="UTF-8"?>

<!--
	使用方法:DBDIDL.GameDB Interface description language
		DefaultParams和LongDefaultParams:
			功能:
				系统默认参数值.
			填写方法:
				如果需要增加新的类型.这个新类型必须包含默认参数.
				默认参数需要在<DefaultParams />中声明类型和值.类型只能为1个单字.不能出现const char * 或者Msg::Chunk这种.一行可以填写多个
				多个字节的默认参数通过LongDefaultParams方式填写.
				Param中涉及到 [] 中括号的是用来表示 <> 尖括号,是因为xml支持不好<>
		
		SpecialDefaultParams:
			功能:
				系统默认参数值.针对一些模板类的非常特殊的参数.
			填写方法:
				type:
					参数的类型.
				suffix:
					生成默认参数时,在type的后面加上后缀
				prefix:
					生成默认参数时,在type的最前面加上后缀				
				specialType:
					根据不同的规则生成不同的默认参数.
					0代表的是标准库中的容器,默认是根据模板,加上后缀即可.
		
		Config:
			功能:
				用于配置一些数据库输出路径的.当然也可以添加一些其他的内容
		Tables:
			在这里定义各个表
			struct:
				定义一些结构体.用于数据库数据
			table:
				定义一张表和里面的字段
				属性:
					name:
						表的名字
					slaveTable:
						作为某个表的从表数组存在
					slaveFrom:
						作为某个表唯一的从表存在
					ignore_reflection_define:
						会针对从表的情况会自动生成一张反射关系的代码.但是有时候又不需要这个反射.那么则不生成.建议生成.
					ignore_collection:
						会针对从表的情况会自动生成收集从表的代码.某些从表不想要在这个收集器里面.那么则不生成.
				字段:
					field:
						代表这张表中的各个字段.
						name:
							字段的名字
						type:
							字段的类型.可以是默认类型,也可以是自定义的结构体类型.
						masterID:
							作为从表的主ID.如果是slaveFrom.那么则是master的ID.如果是slaveTable,那么还需要primaryKey.作为自己的ID.
						primaryKey:
							有这个的代表当前的field为主键.slavetable需要.一般的表也需要.slaveFrom不需要,在同一个field中.不能有primaryKey和masterID.
						bitmask:
							代表当前field是掩码操作.可以通过函数Is(id2(字段名字))Include的方式判断是否有这个掩码.Include(id2)增加掩码,exclude(id2)的方式去除掩码
						count:
							代表当前field是计数操作.可以通过函数Plus(id2)增加值,Minus(id2)的方式减去某个值
						autoIncr:
							表示自增字段,只能放在第一个字段，一个表只能有一个
						oldName:
							有时候需要给某个字段改名.可以通过oldName标明原有的名字是什么.且不要删除.可以添加多个.
							
	备注:
		XML常用转义字符:
			< 	&lt;	小于号 
			> 	&gt;	大于号 
			&	&amp;	逻辑与 
			'	&apos;	单引号 
			"	&quot;	双引号 

		
-->


<GameDB>	 
	<!--
		以下为基本类型,在Parameter中含有的.也可以在代码中定义,不过需要的是只能为一个单词.当然也可以自定义Struct
		默认值的定义的优先级非常高,千万不要将默认值放在其他地方定义,这里也是给出GameDB支持的类型.
	-->		
	<DefaultParams int='0'/>
	<DefaultParams short='0'/>
	<DefaultParams long='0'/>
	<DefaultParams char='char(0)'/>
	<LongDefaultParams type="unsigned int"  default="0"/>
	<LongDefaultParams type="unsigned short"  default="0"/>
	<LongDefaultParams type="unsigned char" default="0"/> 
	<LongDefaultParams type="std::string" default="std::string()"/> 
	<LongDefaultParams type="time_t" default="0"/>
	<SpecialDefaultParam type="std::vector" defaultSuffix="(1)" specialType="0"/>
	<SpecialDefaultParam type="std::set" defaultSuffix="()" specialType="0"/>
	<SpecialDefaultParam type="std::map" defaultSuffix="()" specialType="0"/>
	<SpecialDefaultParam type="std::list" defaultSuffix="()" specialType="0"/>
	<DefaultParams SINT8='0'  UINT8='0'/>
	<DefaultParams INT16='0' UINT16='0'/>
	<DefaultParams INT32='0' UINT32='0'/>
	<DefaultParams INT64='0' UINT64='0'/> 
	<DefaultParams double='0.0f' float='0.0f'/> 
	<DefaultParams std_string='std::string()'/> 
	<DefaultParams CUtilChunk='CUtil::Chunk()'/>
	
	<Config outputPath="../../../Tools/src/GameDBCommon/src/OrmTest/"/>
	
	<Tables>
		<Struct name="TestStruct">
			<Param type="inT" name="p1" default="111"/>
			<Param type="unsigned iNt" name="p2" default="21"/> 
			<Param type="chAr" name="p3" default="0"/>
			<Param type="unsiGned char" name="p4" default="0"/>  
			<Param type="std::vector[INT32]" name="p5" unrefer="!" default="std::vector[INT32](1)"/> 
			<Param type="lOng" name="p6" default="0"/> 
			<Param type="tiMe_t" name="p7" default="0"/>
			<Param type="shoRt" name="p8" default="0"/> 
			<Param type="unsIgned short" name="p9" default="0"/>
			<Param type="Double" name="p10" default="1.0f"/> 
			<Param type="Float" name="p11" default="1.0f"/> 
			<Param type="Std_string" name="p12" /> 
			<Param type="CUtilChunk" name="p13" /> 
		</Struct>
		
		<Table name = "Test_OldName" ignore_reflection_define="" ignore_collection="" >    
			<Field name="id" type="INT64" masterID=""  />
			<Field name="p1" type="std::string" oldName2="p3" oldName3="p4" />
		</Table>
		
		<Table name = "Test_PrimaryKey">    
			<Field name="id" type="INT64" primaryKey="" autoIncr="" />
			<Field name="p2" type="std::string" />
		</Table>
		
		<Table name = "TestSlave">    
			<Field name="id" type="INT64" primaryKey=""/> 
			<Field name="value" type="INT64" /> 
		</Table>
		
		<Table name = "TestSlaveFrom" slaveFrom="TestSlave" >    
			<Field name="id" type="INT64" masterID="" /> 
			<Field name="value" type="INT64" /> 
		</Table>
		
		<Table name = "TestSlaveTable" slaveTable="TestSlave"> 
			<Field name="id" type="INT64" masterID="" />   
			<Field name="id2" type="std::string" primaryKey=""/> 
			<Field name="id3" type="TestStruct"  /> 
			<Field name="id4" type="INT64" bitmask="" count="" /> 
		</Table>
	</Tables>
	
</GameDB>
