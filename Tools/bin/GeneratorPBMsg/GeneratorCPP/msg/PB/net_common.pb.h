// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PB/net_common.proto

#ifndef PROTOBUF_PB_2fnet_5fcommon_2eproto__INCLUDED
#define PROTOBUF_PB_2fnet_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

class a3d_pos;
class player_id_name;
class general_list;
class general_list_item_data;
class simple_list;
class test_data;
class other_player_profile_from_gs;
class corp_chariot;
class corp_chariot_chariot_info;
class corp_repu;
class ipt_mirror_info;
class zhaojiling_info;
class corps_member;
class corps_apply_t;
class corp_attribute;
class corp_attribute_corp_skill_room;
class corps_struct;
class facebook_str;
class face_book;
class idip_role_info;
class role_list_custom;
class gs_role_mutable_data;
class nation_war_history;
class blessing_info;
class card_info;
class greeting_info;
class ask_help_info;
class roam_match_info;
class db_roam_record_info;
class db_roam_record_data;
class instance_extend_info;
class corp_farmland;
class enter_instance_config;
class enter_instance_config_client_config;
class enter_instance_config_server_config;
class player_corps_attr_config;
class player_corps_attr_config_rent_chariot_info;
class player_stune_config;
class player_stune_config_player_rune_prop_config;
class player_stune_config_player_rune_config;
class player_stune_config_config_set;
class black_shop_info;
class black_shop_info_black_shop_goods_info;
class climbtower_magic_shop_info;
class climbtower_magic_shop_info_magic_shop_goods_info;
class db_hero_trial_config;
class level_shopid;
class db_strategy_info;
class db_strategy_vectors;
class db_surface_soul;
class db_wing_refine_soul;
class db_refine_surfaces;
class db_equip_soul;
class db_equip_fixed_data;
class db_magic_weapon;
class db_magic_weapon_property;
class db_magic_weapon_refine_group;
class db_magic_weapon_refine_group_refine;
class db_magic_weapons;
class db_general_soul;
class db_general_souls;
class wine_game_history;
class pixiu_service_buy_record;
class npt_test;
class npt_response;
class npt_corps_appoint;
class npt_apply_corps;
class npt_corps_data;
class name_ruid;
class npt_common_search;
class npt_common_search_search_corps_key;
class npt_common_search_search_player_key;
class npt_zhaojiling;
class npt_sync_mirror_info;
class npt_sync_nation_war_info;
class npt_sync_nation_war_info_nwar_npc_info;
class npt_get_corp_name;
class npt_nation_war_operate;
class npt_nation_war_operate_info;
class npt_nation_war_operate_info_re;
class npt_team_invite;
class npt_friend_invite;
class npt_team_info;
class npt_team_info_team_info;
class other_player_profile;
class npt_get_player_profile;
class npt_blessing_info;
class npt_nationwar_event;
class npt_nation_shutup;
class npt_nation_shutup_info;
class npt_nation_commander_appoint;
class npt_nation_commander_notify;
class npt_nation_war_history;
class npt_request_info;
class npt_nation_shutup_reply;
class npt_greeting_info_sync;
class npt_greeting_reply;
class npt_ask_help;
class npt_send_server_midas_info;
class npt_send_tencent_secure_info;
class npt_send_client_midas_info;
class npt_send_midas_bad_token;
class npt_officer_gift_get;
class npt_officer_gift_notify;
class npt_weak_nation_gift_get;
class npt_weak_nation_gift_notify;
class npt_server_info_notify;
class npt_team_recruit_operate;
class recruit_info;
class npt_team_recruit_operate_reply;
class npt_update_grc_info;
class npt_grc_get_friend_info;
class npt_grc_send_gift;
class npt_grc_rcv_gift;
class grc_friend_info;
class npt_grc_friend_list;
class grc_gift_info;
class grc_user_gift_info;
class npt_grc_gift_list;
class npt_grc_send_gift_re;
class npt_grc_rcv_gift_re;
class npt_grc_turn_on_off;
class npt_grc_turn_on_off_re;
class npt_midas_activity_get;
class npt_battle_auto_match;
class npt_battle_match_result;
class npt_battle_match_prepare;
class npt_get_battle_match_rank;
class npt_midas_activity_get_re;
class npt_die_elite_tid;
class npt_query_die_elite_tid;
class grc_passed_friend_info;
class npt_grc_exceed_friend_list;
class npt_top_reward;
class npt_top_reward_player;
class npt_nest_common_operation;
class npt_nation_reputation;
class nation_reputation_info;
class npt_nation_reputation_re;
class npt_nation_reputation_change;
class nation_lantern_info;
class npt_nation_lantern_info;
class npt_nation_lantern_info_re;
class npt_receive_lantern_gift;
class zoneid_info;
class npt_notify_zoneid_list;
class npt_broadcast_match_info;
class npt_exchange_activity;
class npt_exchange_activity_re;
class npt_award_activity;
class npt_change_zone_response;
class npt_roam_zhaoji;
class npt_roam_zhaoji_info;
class npt_roam_inst_result;
class npt_req_backflow_data;
class npt_req_backflow_data_re;
class npt_share_backflow_code;
class npt_share_backflow_code_re;
class npt_rece_invite_award;
class npt_rece_invite_award_re;
class npt_rece_convene_award;
class npt_rece_convene_award_re;
class npt_rece_backflow_award;
class npt_rece_backflow_award_re;
class GP_Begin;
class equip_location;
class gp_equip_grade_and_quality_up;
class gp_create_corps;
class gp_equip_attach_gem;
class gp_equip_detach_gem;
class gp_equip_attach_gem_upgrade;
class gp_equip_xilian;
class gp_equip_open_addon;
class tool_bind_info;
class gp_equip_lianxing;
class gp_equip_train;
class gp_equip_switch_surface;
class gp_equip_transfer;
class gp_equip_refine;
class gp_item_combine;
class gp_nation_escort_op;
class gp_escort_change_speed;
class gp_minigame_operate;
class gp_card_operate;
class gp_get_broadcast_buff;
class gp_set_pk_setting;
class gp_nation_donate;
class gp_auto_reward_op;
class gp_get_achievement_award;
class gp_mount_operation;
class gp_guaji;
class gp_vip_operation;
class auto_combat_config;
class gp_auto_combat_config_c2s;
class gp_upgrade_bingfa;
class gp_start_attack_loop;
class gp_cg_player_op;
class gp_wine_sitdown;
class gp_cancel_action;
class gp_stunt_config;
class gp_black_shop_command;
class gp_climbtower_shop_command;
class gp_duke_command;
class gp_hero_trial_command;
class gp_corp_config;
class gp_enter_instance;
class gp_buy_instance;
class gp_buy_backpack;
class gp_jieyun_skill;
class gp_corp_farm_op;
class gp_climb_tower_op;
class gp_gs_ping;
class gp_get_list_info;
class gp_camp_fire;
class gp_ask_help;
class gp_find_way;
class gp_change_mirror;
class gp_buy_force;
class gp_plant;
class gp_equip_chaijie;
class gp_client_print_info;
class gp_retrieve_op;
class gp_fashion_mode;
class gp_sweep_instance;
class gp_get_red_packet;
class gp_common_operation;
class gp_compensation;
class gp_upgrade_chariot;
class gp_rent_chariot;
class gp_transform_chariot;
class gp_fix_chariot;
class gp_wuhun_open;
class gp_wuhun_upgrade;
class use_item_batch;
class gp_wine_game;
class gp_strategy_level_up;
class gp_strategy_star_up;
class gp_surface_train;
class gp_region_war_cheer;
class gp_lantern;
class gp_exchange_activity;
class gp_equip_attach_mingwen;
class gp_equip_detach_mingwen;
class gp_magic_weapon_train;
class gp_magic_weapon_summon;
class gp_magic_weapon_refine;
class gp_pet_operate;
class gp_decompose_batch;
class gp_change_prof;
class gp_crack_wuzhuang;
class gp_roam;
class gp_diamond_repu_exchange;
class gp_equip_soul;
class gp_equip_soul_equip;
class gp_query_roam_battle_target;
class gp_richman_operate;
class gp_roam_zhaoji;
class gp_general_soul_op;
class gp_general_soul_equip_op;
class gp_self_enter_world;
class gp_scene_info;
class gp_scene_info_param_t;
class gp_creature_base_info;
class gp_player_extend_state;
class gp_player_definite_info;
class gp_equip_refresh_result;
class gp_equip_gradeup_result;
class gp_equip_starup_result;
class gp_equip_train_result;
class gp_equip_switch_surface_result;
class gp_gain_surface;
class gp_revive_times_info;
class gp_item_combine_result;
class gp_nation_escort_mount;
class gp_nation_escort_locate;
class gp_escort_speed_state;
class gp_transform_state;
class gp_nation_officer_state;
class gp_broadcast_value_change;
class gp_object_change_faction;
class gp_wine_info;
class gp_minigame_operate_notify;
class gp_equip_transfer_reulst;
class gp_equip_refine_reulst;
class gp_equip_attach_gem_result;
class gp_equip_detach_gem_result;
class gp_equip_attach_gem_upgrade_result;
class gp_bingfa_info;
class gp_bingfa_info_bingfa_cell;
class gp_wuhun_info;
class gp_wuhun_info_wuhun_cell;
class gp_wuhun_info_wuhun_upgrade;
class gp_pk_man;
class gp_fight_back_list;
class gp_auto_reward_list;
class gp_auto_reward_list_reward_entry;
class gp_vip_info;
class gp_vip_info_online_info;
class gp_object_state;
class gp_hero_defined_info;
class gp_hero_defined_info_hero_info;
class gp_hero_incre_info;
class enemy_info;
class gp_enemy_list;
class gp_auto_combat_config_s2c;
class gp_lottery_prize;
class gp_lottery_prize_repu_str;
class gp_lottery_prize_item_str;
class gp_suit_info;
class gp_attack_loop;
class gp_operation_result;
class gp_start_cg;
class gp_stop_cg;
class gp_player_stune_config;
class gp_stunt_config_res;
class gp_card_data_notify;
class gp_load_protoc_finish;
class gp_magicshop_notify;
class gp_blackshop_notify;
class gp_hero_trial_config;
class gp_duke_notify;
class gp_player_corp_config;
class gp_net_error_message;
class gp_gs_error_message;
class instance_info_t;
class gp_instance_info;
class gp_inventory_size;
class gp_level_result;
class modify_corps_data;
class gp_ipt_container;
class db_corp_farm_data;
class gp_farm_data;
class gp_climb_tower;
class gp_s2c_gs_ping;
class gp_level_score;
class gp_player_list_info;
class gp_level_info;
class gp_notify_ask_help;
class gp_find_way_result;
class gp_npc_info;
class gp_easy_mall_service_end;
class gp_notify_plant;
class gp_notify_plant_gp_seed;
class gp_notify_cash_change;
class gp_notify_monitor_blood;
class gp_notify_prop_ready;
class retrieve_info_str;
class retrieve_info;
class gp_retrieve_info;
class gp_red_packet;
class gp_secure_idip;
class gp_multi_exp;
class gp_refuse_fight;
class gp_old_prof_skill_level;
class gp_deliver_compensation;
class level_sorted_info;
class gp_send_level_sorted_info;
class gp_send_level_info_with_time;
class gp_notify_strategy_vectors;
class gp_notify_strategy_levelup;
class gp_notify_strategy_starup;
class gp_notify_surface_train;
class gp_punishment_time;
class faction_battle_player_info;
class gp_faction_battle_player_info;
class gp_equip_attach_mingwen_result;
class gp_equip_detach_mingwen_result;
class gp_notify_magic_weapon;
class gp_notify_magic_weapon_train_result;
class gp_notify_magic_weapon_summon_result;
class gp_notify_magic_weapon_refine_result;
class gp_notify_magic_weapon_change;
class gp_equip_soul_result;
class gp_crack_wuzhuang_result;
class achievement_info;
class gp_roam_battle_achievement;
class gp_richman_operate_re;
class richman_passby_award;
class richman_data;
class gp_richman_data;
class gp_roam_zhaoji_notify;
class hero_event;
class gp_hero_event;
class gp_notify_general_souls;
class gp_gain_general_soul;
class gp_notify_general_soul;
class gp_synthetize_result;
class gp_dynamic_move_map;
class level_object_info;
class gp_level_object_info;
class gp_self_leave_scene;
class gp_self_misc_property;
class db_player_misc;
class db_player_misc_revive_data;
class npt_get_qqgroup_openid_req;
class npt_get_qqgroup_openid_resp;
class npt_get_http_req;
class npt_get_http_resp;
class npt_unbind_qqgroup_req;
class npt_unbind_qqgroup_resp;
class npt_recharge_plat_vip;
class npt_send_tlog_info;
class npt_qqgroup_joinkey_req;
class npt_qqgroup_joinkey_resp;
class npt_grc_get_self_plat_vip_info;
class greet_investor_info_cl;
class greet_investee_info_cl;
class greet_reward_info_cl;
class npt_greet_invest_info;
class npt_greet_invest_award;
class npt_wine_game_operate;
class npt_wine_game_sync_data;
class npt_wine_game_history;
class npt_wine_game_history_re;
class region_history;
class region_info_t;
class region_war_t;
class region_bid_t;
class region_bid_t_bid_t;
class region_war_data;
class int32_pair;
class npt_region_war_operate;
class npt_region_war_get_info_re;
class npt_region_war_operate_re;
class npt_region_war_begin_notify;
class gmshutdownserver_notify;
class npt_notify_regionwar_deltatime;
class npt_notify_regionwar_dailybonus;
class npt_get_corps_info;
class npt_get_region_cheer_info;
class npt_get_region_cheer_info_re;
class item_data;
class item_list_data;
class xiulian_data;
class pet_data;
class pet_list_data;
class gp_pet_list_info;
class gp_pet_info;
class gp_pet_operate_re;
class gp_level_extern_info;
class gp_buff_broken;
class npt_pixiu_buy_records;
class gp_pet_object_fight;
class gp_zone_sn;
class gp_zonelist;

enum zhaojiling_info_ZHAOJI_TYPE {
  zhaojiling_info_ZHAOJI_TYPE_ZT_ITEM = 0,
  zhaojiling_info_ZHAOJI_TYPE_ZT_NATION_WAR_START = 1,
  zhaojiling_info_ZHAOJI_TYPE_ZT_NATION_WAR_ROLE = 2,
  zhaojiling_info_ZHAOJI_TYPE_ZT_SUCCOR = 3
};
bool zhaojiling_info_ZHAOJI_TYPE_IsValid(int value);
const zhaojiling_info_ZHAOJI_TYPE zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_MIN = zhaojiling_info_ZHAOJI_TYPE_ZT_ITEM;
const zhaojiling_info_ZHAOJI_TYPE zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_MAX = zhaojiling_info_ZHAOJI_TYPE_ZT_SUCCOR;
const int zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_ARRAYSIZE = zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* zhaojiling_info_ZHAOJI_TYPE_descriptor();
inline const ::std::string& zhaojiling_info_ZHAOJI_TYPE_Name(zhaojiling_info_ZHAOJI_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    zhaojiling_info_ZHAOJI_TYPE_descriptor(), value);
}
inline bool zhaojiling_info_ZHAOJI_TYPE_Parse(
    const ::std::string& name, zhaojiling_info_ZHAOJI_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<zhaojiling_info_ZHAOJI_TYPE>(
    zhaojiling_info_ZHAOJI_TYPE_descriptor(), name, value);
}
enum greeting_info_GREETING_TYPE {
  greeting_info_GREETING_TYPE_GREETING_INVITE = 1,
  greeting_info_GREETING_TYPE_GREETING_GRANT = 2,
  greeting_info_GREETING_TYPE_GREETING_THANKS = 3
};
bool greeting_info_GREETING_TYPE_IsValid(int value);
const greeting_info_GREETING_TYPE greeting_info_GREETING_TYPE_GREETING_TYPE_MIN = greeting_info_GREETING_TYPE_GREETING_INVITE;
const greeting_info_GREETING_TYPE greeting_info_GREETING_TYPE_GREETING_TYPE_MAX = greeting_info_GREETING_TYPE_GREETING_THANKS;
const int greeting_info_GREETING_TYPE_GREETING_TYPE_ARRAYSIZE = greeting_info_GREETING_TYPE_GREETING_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* greeting_info_GREETING_TYPE_descriptor();
inline const ::std::string& greeting_info_GREETING_TYPE_Name(greeting_info_GREETING_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    greeting_info_GREETING_TYPE_descriptor(), value);
}
inline bool greeting_info_GREETING_TYPE_Parse(
    const ::std::string& name, greeting_info_GREETING_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<greeting_info_GREETING_TYPE>(
    greeting_info_GREETING_TYPE_descriptor(), name, value);
}
enum ask_help_info_relation_type {
  ask_help_info_relation_type_RT_STRANGER = 0,
  ask_help_info_relation_type_RT_CORP = 1,
  ask_help_info_relation_type_RT_NATION = 2
};
bool ask_help_info_relation_type_IsValid(int value);
const ask_help_info_relation_type ask_help_info_relation_type_relation_type_MIN = ask_help_info_relation_type_RT_STRANGER;
const ask_help_info_relation_type ask_help_info_relation_type_relation_type_MAX = ask_help_info_relation_type_RT_NATION;
const int ask_help_info_relation_type_relation_type_ARRAYSIZE = ask_help_info_relation_type_relation_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ask_help_info_relation_type_descriptor();
inline const ::std::string& ask_help_info_relation_type_Name(ask_help_info_relation_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ask_help_info_relation_type_descriptor(), value);
}
inline bool ask_help_info_relation_type_Parse(
    const ::std::string& name, ask_help_info_relation_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ask_help_info_relation_type>(
    ask_help_info_relation_type_descriptor(), name, value);
}
enum npt_corps_appoint_CORPS_APPOINT_OP {
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ADD = 1,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_DEL = 2,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT = 3,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_DISMISS = 4,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_QUIT = 5,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ANNOUNCE = 6,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE = 7,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ABDICATE = 8,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ACTIVITY = 9,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_INVITE = 10,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_REJECT = 11,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_AGREE = 12,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_GETDATA = 13,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_BRIEF = 14,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_CONTRI = 15,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE_SKILL = 16,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE_SHOP = 17,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE_SKILL2 = 18,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ATTR = 19,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_SUMMON = 20,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_FIRE = 21,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_CHARIOT = 22,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UP_CHA = 23,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_RECL_CHA = 24
};
bool npt_corps_appoint_CORPS_APPOINT_OP_IsValid(int value);
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_MIN = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ADD;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_MAX = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_RECL_CHA;
const int npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_ARRAYSIZE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_corps_appoint_CORPS_APPOINT_OP_descriptor();
inline const ::std::string& npt_corps_appoint_CORPS_APPOINT_OP_Name(npt_corps_appoint_CORPS_APPOINT_OP value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_corps_appoint_CORPS_APPOINT_OP_descriptor(), value);
}
inline bool npt_corps_appoint_CORPS_APPOINT_OP_Parse(
    const ::std::string& name, npt_corps_appoint_CORPS_APPOINT_OP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_corps_appoint_CORPS_APPOINT_OP>(
    npt_corps_appoint_CORPS_APPOINT_OP_descriptor(), name, value);
}
enum npt_sync_mirror_info_MIRROR_STATE_MASK {
  npt_sync_mirror_info_MIRROR_STATE_MASK_MS_FORBIT_MIRROR_STATE = 1,
  npt_sync_mirror_info_MIRROR_STATE_MASK_MS_IN_NATION_WAR = 2
};
bool npt_sync_mirror_info_MIRROR_STATE_MASK_IsValid(int value);
const npt_sync_mirror_info_MIRROR_STATE_MASK npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_MIN = npt_sync_mirror_info_MIRROR_STATE_MASK_MS_FORBIT_MIRROR_STATE;
const npt_sync_mirror_info_MIRROR_STATE_MASK npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_MAX = npt_sync_mirror_info_MIRROR_STATE_MASK_MS_IN_NATION_WAR;
const int npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_ARRAYSIZE = npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor();
inline const ::std::string& npt_sync_mirror_info_MIRROR_STATE_MASK_Name(npt_sync_mirror_info_MIRROR_STATE_MASK value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor(), value);
}
inline bool npt_sync_mirror_info_MIRROR_STATE_MASK_Parse(
    const ::std::string& name, npt_sync_mirror_info_MIRROR_STATE_MASK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_sync_mirror_info_MIRROR_STATE_MASK>(
    npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor(), name, value);
}
enum npt_get_player_profile_GET_PROFILE_MASK {
  npt_get_player_profile_GET_PROFILE_MASK_GET_ALL_PROFILE = 0,
  npt_get_player_profile_GET_PROFILE_MASK_GET_SNS = 1,
  npt_get_player_profile_GET_PROFILE_MASK_GET_EQUIP = 2,
  npt_get_player_profile_GET_PROFILE_MASK_GET_PROPERTY = 4
};
bool npt_get_player_profile_GET_PROFILE_MASK_IsValid(int value);
const npt_get_player_profile_GET_PROFILE_MASK npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_MIN = npt_get_player_profile_GET_PROFILE_MASK_GET_ALL_PROFILE;
const npt_get_player_profile_GET_PROFILE_MASK npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_MAX = npt_get_player_profile_GET_PROFILE_MASK_GET_PROPERTY;
const int npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_ARRAYSIZE = npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_get_player_profile_GET_PROFILE_MASK_descriptor();
inline const ::std::string& npt_get_player_profile_GET_PROFILE_MASK_Name(npt_get_player_profile_GET_PROFILE_MASK value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_get_player_profile_GET_PROFILE_MASK_descriptor(), value);
}
inline bool npt_get_player_profile_GET_PROFILE_MASK_Parse(
    const ::std::string& name, npt_get_player_profile_GET_PROFILE_MASK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_get_player_profile_GET_PROFILE_MASK>(
    npt_get_player_profile_GET_PROFILE_MASK_descriptor(), name, value);
}
enum npt_nationwar_event_NNE_TYPE {
  npt_nationwar_event_NNE_TYPE_NATION_WAR_KILL_COUNT = 1,
  npt_nationwar_event_NNE_TYPE_NATION_WAR_JIHUO = 2,
  npt_nationwar_event_NNE_TYPE_NATION_WAR_JIHUO_COOLDOWN = 3
};
bool npt_nationwar_event_NNE_TYPE_IsValid(int value);
const npt_nationwar_event_NNE_TYPE npt_nationwar_event_NNE_TYPE_NNE_TYPE_MIN = npt_nationwar_event_NNE_TYPE_NATION_WAR_KILL_COUNT;
const npt_nationwar_event_NNE_TYPE npt_nationwar_event_NNE_TYPE_NNE_TYPE_MAX = npt_nationwar_event_NNE_TYPE_NATION_WAR_JIHUO_COOLDOWN;
const int npt_nationwar_event_NNE_TYPE_NNE_TYPE_ARRAYSIZE = npt_nationwar_event_NNE_TYPE_NNE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_nationwar_event_NNE_TYPE_descriptor();
inline const ::std::string& npt_nationwar_event_NNE_TYPE_Name(npt_nationwar_event_NNE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_nationwar_event_NNE_TYPE_descriptor(), value);
}
inline bool npt_nationwar_event_NNE_TYPE_Parse(
    const ::std::string& name, npt_nationwar_event_NNE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_nationwar_event_NNE_TYPE>(
    npt_nationwar_event_NNE_TYPE_descriptor(), name, value);
}
enum npt_request_info_INFO_TYPE {
  npt_request_info_INFO_TYPE_NATION_WAR_HISTORY = 1
};
bool npt_request_info_INFO_TYPE_IsValid(int value);
const npt_request_info_INFO_TYPE npt_request_info_INFO_TYPE_INFO_TYPE_MIN = npt_request_info_INFO_TYPE_NATION_WAR_HISTORY;
const npt_request_info_INFO_TYPE npt_request_info_INFO_TYPE_INFO_TYPE_MAX = npt_request_info_INFO_TYPE_NATION_WAR_HISTORY;
const int npt_request_info_INFO_TYPE_INFO_TYPE_ARRAYSIZE = npt_request_info_INFO_TYPE_INFO_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_request_info_INFO_TYPE_descriptor();
inline const ::std::string& npt_request_info_INFO_TYPE_Name(npt_request_info_INFO_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_request_info_INFO_TYPE_descriptor(), value);
}
inline bool npt_request_info_INFO_TYPE_Parse(
    const ::std::string& name, npt_request_info_INFO_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_request_info_INFO_TYPE>(
    npt_request_info_INFO_TYPE_descriptor(), name, value);
}
enum npt_nation_shutup_reply_RESULT_TYPE {
  npt_nation_shutup_reply_RESULT_TYPE_RESULT_SUCCEED = 1,
  npt_nation_shutup_reply_RESULT_TYPE_RESULT_OFFLINE = 2,
  npt_nation_shutup_reply_RESULT_TYPE_RESULT_ALREADY_SHUTUP = 3
};
bool npt_nation_shutup_reply_RESULT_TYPE_IsValid(int value);
const npt_nation_shutup_reply_RESULT_TYPE npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_MIN = npt_nation_shutup_reply_RESULT_TYPE_RESULT_SUCCEED;
const npt_nation_shutup_reply_RESULT_TYPE npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_MAX = npt_nation_shutup_reply_RESULT_TYPE_RESULT_ALREADY_SHUTUP;
const int npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_ARRAYSIZE = npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_nation_shutup_reply_RESULT_TYPE_descriptor();
inline const ::std::string& npt_nation_shutup_reply_RESULT_TYPE_Name(npt_nation_shutup_reply_RESULT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_nation_shutup_reply_RESULT_TYPE_descriptor(), value);
}
inline bool npt_nation_shutup_reply_RESULT_TYPE_Parse(
    const ::std::string& name, npt_nation_shutup_reply_RESULT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_nation_shutup_reply_RESULT_TYPE>(
    npt_nation_shutup_reply_RESULT_TYPE_descriptor(), name, value);
}
enum npt_greeting_info_sync_SYNC_TYPE {
  npt_greeting_info_sync_SYNC_TYPE_SYNC_ALL = 1,
  npt_greeting_info_sync_SYNC_TYPE_SYNC_ADD = 2,
  npt_greeting_info_sync_SYNC_TYPE_SYNC_DEL = 3
};
bool npt_greeting_info_sync_SYNC_TYPE_IsValid(int value);
const npt_greeting_info_sync_SYNC_TYPE npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_MIN = npt_greeting_info_sync_SYNC_TYPE_SYNC_ALL;
const npt_greeting_info_sync_SYNC_TYPE npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_MAX = npt_greeting_info_sync_SYNC_TYPE_SYNC_DEL;
const int npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_ARRAYSIZE = npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_greeting_info_sync_SYNC_TYPE_descriptor();
inline const ::std::string& npt_greeting_info_sync_SYNC_TYPE_Name(npt_greeting_info_sync_SYNC_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_greeting_info_sync_SYNC_TYPE_descriptor(), value);
}
inline bool npt_greeting_info_sync_SYNC_TYPE_Parse(
    const ::std::string& name, npt_greeting_info_sync_SYNC_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_greeting_info_sync_SYNC_TYPE>(
    npt_greeting_info_sync_SYNC_TYPE_descriptor(), name, value);
}
enum npt_team_recruit_operate_OPERATE_TYPE {
  npt_team_recruit_operate_OPERATE_TYPE_CREATE = 1,
  npt_team_recruit_operate_OPERATE_TYPE_LIST = 2,
  npt_team_recruit_operate_OPERATE_TYPE_PUBLISH = 3,
  npt_team_recruit_operate_OPERATE_TYPE_CANCEL = 4,
  npt_team_recruit_operate_OPERATE_TYPE_REQ_COOLDOWN = 5,
  npt_team_recruit_operate_OPERATE_TYPE_MODIFY = 6,
  npt_team_recruit_operate_OPERATE_TYPE_REQ_LEADER_POS = 7,
  npt_team_recruit_operate_OPERATE_TYPE_GATHER = 8
};
bool npt_team_recruit_operate_OPERATE_TYPE_IsValid(int value);
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_MIN = npt_team_recruit_operate_OPERATE_TYPE_CREATE;
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_MAX = npt_team_recruit_operate_OPERATE_TYPE_GATHER;
const int npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_ARRAYSIZE = npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_team_recruit_operate_OPERATE_TYPE_descriptor();
inline const ::std::string& npt_team_recruit_operate_OPERATE_TYPE_Name(npt_team_recruit_operate_OPERATE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_team_recruit_operate_OPERATE_TYPE_descriptor(), value);
}
inline bool npt_team_recruit_operate_OPERATE_TYPE_Parse(
    const ::std::string& name, npt_team_recruit_operate_OPERATE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_team_recruit_operate_OPERATE_TYPE>(
    npt_team_recruit_operate_OPERATE_TYPE_descriptor(), name, value);
}
enum npt_team_recruit_operate_reply_RESULT {
  npt_team_recruit_operate_reply_RESULT_SUCCEED = 0,
  npt_team_recruit_operate_reply_RESULT_MAX_SIZE = 1,
  npt_team_recruit_operate_reply_RESULT_MIN_LEVEL = 2,
  npt_team_recruit_operate_reply_RESULT_COOLDOWN = 3,
  npt_team_recruit_operate_reply_RESULT_TIME_OUT = 4,
  npt_team_recruit_operate_reply_RESULT_IN_INSTANCE = 5
};
bool npt_team_recruit_operate_reply_RESULT_IsValid(int value);
const npt_team_recruit_operate_reply_RESULT npt_team_recruit_operate_reply_RESULT_RESULT_MIN = npt_team_recruit_operate_reply_RESULT_SUCCEED;
const npt_team_recruit_operate_reply_RESULT npt_team_recruit_operate_reply_RESULT_RESULT_MAX = npt_team_recruit_operate_reply_RESULT_IN_INSTANCE;
const int npt_team_recruit_operate_reply_RESULT_RESULT_ARRAYSIZE = npt_team_recruit_operate_reply_RESULT_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_team_recruit_operate_reply_RESULT_descriptor();
inline const ::std::string& npt_team_recruit_operate_reply_RESULT_Name(npt_team_recruit_operate_reply_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_team_recruit_operate_reply_RESULT_descriptor(), value);
}
inline bool npt_team_recruit_operate_reply_RESULT_Parse(
    const ::std::string& name, npt_team_recruit_operate_reply_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_team_recruit_operate_reply_RESULT>(
    npt_team_recruit_operate_reply_RESULT_descriptor(), name, value);
}
enum npt_battle_auto_match_OP_TYPE {
  npt_battle_auto_match_OP_TYPE_OT_MATCH_START = 1,
  npt_battle_auto_match_OP_TYPE_OT_MATCH_CANCEL = 2,
  npt_battle_auto_match_OP_TYPE_OT_INST_START = 3,
  npt_battle_auto_match_OP_TYPE_OT_INST_CANCEL = 4
};
bool npt_battle_auto_match_OP_TYPE_IsValid(int value);
const npt_battle_auto_match_OP_TYPE npt_battle_auto_match_OP_TYPE_OP_TYPE_MIN = npt_battle_auto_match_OP_TYPE_OT_MATCH_START;
const npt_battle_auto_match_OP_TYPE npt_battle_auto_match_OP_TYPE_OP_TYPE_MAX = npt_battle_auto_match_OP_TYPE_OT_INST_CANCEL;
const int npt_battle_auto_match_OP_TYPE_OP_TYPE_ARRAYSIZE = npt_battle_auto_match_OP_TYPE_OP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_battle_auto_match_OP_TYPE_descriptor();
inline const ::std::string& npt_battle_auto_match_OP_TYPE_Name(npt_battle_auto_match_OP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_battle_auto_match_OP_TYPE_descriptor(), value);
}
inline bool npt_battle_auto_match_OP_TYPE_Parse(
    const ::std::string& name, npt_battle_auto_match_OP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_battle_auto_match_OP_TYPE>(
    npt_battle_auto_match_OP_TYPE_descriptor(), name, value);
}
enum npt_nest_common_operation_NEST_OP {
  npt_nest_common_operation_NEST_OP_NO_PLAYE_DS_LOGIN_FINISH = 1
};
bool npt_nest_common_operation_NEST_OP_IsValid(int value);
const npt_nest_common_operation_NEST_OP npt_nest_common_operation_NEST_OP_NEST_OP_MIN = npt_nest_common_operation_NEST_OP_NO_PLAYE_DS_LOGIN_FINISH;
const npt_nest_common_operation_NEST_OP npt_nest_common_operation_NEST_OP_NEST_OP_MAX = npt_nest_common_operation_NEST_OP_NO_PLAYE_DS_LOGIN_FINISH;
const int npt_nest_common_operation_NEST_OP_NEST_OP_ARRAYSIZE = npt_nest_common_operation_NEST_OP_NEST_OP_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_nest_common_operation_NEST_OP_descriptor();
inline const ::std::string& npt_nest_common_operation_NEST_OP_Name(npt_nest_common_operation_NEST_OP value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_nest_common_operation_NEST_OP_descriptor(), value);
}
inline bool npt_nest_common_operation_NEST_OP_Parse(
    const ::std::string& name, npt_nest_common_operation_NEST_OP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_nest_common_operation_NEST_OP>(
    npt_nest_common_operation_NEST_OP_descriptor(), name, value);
}
enum gp_card_operate_OP_TYPE {
  gp_card_operate_OP_TYPE_OT_ACTIVE_SUIT = 1,
  gp_card_operate_OP_TYPE_OT_DECOMPOSE_CARD = 2,
  gp_card_operate_OP_TYPE_OT_DECOMPOSE_QUICK = 3,
  gp_card_operate_OP_TYPE_OT_COMPOSE_CARD = 4
};
bool gp_card_operate_OP_TYPE_IsValid(int value);
const gp_card_operate_OP_TYPE gp_card_operate_OP_TYPE_OP_TYPE_MIN = gp_card_operate_OP_TYPE_OT_ACTIVE_SUIT;
const gp_card_operate_OP_TYPE gp_card_operate_OP_TYPE_OP_TYPE_MAX = gp_card_operate_OP_TYPE_OT_COMPOSE_CARD;
const int gp_card_operate_OP_TYPE_OP_TYPE_ARRAYSIZE = gp_card_operate_OP_TYPE_OP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_card_operate_OP_TYPE_descriptor();
inline const ::std::string& gp_card_operate_OP_TYPE_Name(gp_card_operate_OP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_card_operate_OP_TYPE_descriptor(), value);
}
inline bool gp_card_operate_OP_TYPE_Parse(
    const ::std::string& name, gp_card_operate_OP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_card_operate_OP_TYPE>(
    gp_card_operate_OP_TYPE_descriptor(), name, value);
}
enum gp_auto_reward_op_OP_TYPE {
  gp_auto_reward_op_OP_TYPE_OP_GET_REWARD = 1,
  gp_auto_reward_op_OP_TYPE_OP_BUY_FUND = 2,
  gp_auto_reward_op_OP_TYPE_OP_BUY_SPECAIL_FUND1 = 3,
  gp_auto_reward_op_OP_TYPE_OP_BUY_SPECAIL_FUND2 = 4,
  gp_auto_reward_op_OP_TYPE_OP_BUY_SPECAIL_FUND3 = 5,
  gp_auto_reward_op_OP_TYPE_OP_REFRESH_STAT = 6
};
bool gp_auto_reward_op_OP_TYPE_IsValid(int value);
const gp_auto_reward_op_OP_TYPE gp_auto_reward_op_OP_TYPE_OP_TYPE_MIN = gp_auto_reward_op_OP_TYPE_OP_GET_REWARD;
const gp_auto_reward_op_OP_TYPE gp_auto_reward_op_OP_TYPE_OP_TYPE_MAX = gp_auto_reward_op_OP_TYPE_OP_REFRESH_STAT;
const int gp_auto_reward_op_OP_TYPE_OP_TYPE_ARRAYSIZE = gp_auto_reward_op_OP_TYPE_OP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_auto_reward_op_OP_TYPE_descriptor();
inline const ::std::string& gp_auto_reward_op_OP_TYPE_Name(gp_auto_reward_op_OP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_auto_reward_op_OP_TYPE_descriptor(), value);
}
inline bool gp_auto_reward_op_OP_TYPE_Parse(
    const ::std::string& name, gp_auto_reward_op_OP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_auto_reward_op_OP_TYPE>(
    gp_auto_reward_op_OP_TYPE_descriptor(), name, value);
}
enum gp_mount_operation_OP_TYPE {
  gp_mount_operation_OP_TYPE_MOT_MOUNT = 1,
  gp_mount_operation_OP_TYPE_MOT_SUMMON = 2,
  gp_mount_operation_OP_TYPE_MOT_INC_EXP = 3
};
bool gp_mount_operation_OP_TYPE_IsValid(int value);
const gp_mount_operation_OP_TYPE gp_mount_operation_OP_TYPE_OP_TYPE_MIN = gp_mount_operation_OP_TYPE_MOT_MOUNT;
const gp_mount_operation_OP_TYPE gp_mount_operation_OP_TYPE_OP_TYPE_MAX = gp_mount_operation_OP_TYPE_MOT_INC_EXP;
const int gp_mount_operation_OP_TYPE_OP_TYPE_ARRAYSIZE = gp_mount_operation_OP_TYPE_OP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_mount_operation_OP_TYPE_descriptor();
inline const ::std::string& gp_mount_operation_OP_TYPE_Name(gp_mount_operation_OP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_mount_operation_OP_TYPE_descriptor(), value);
}
inline bool gp_mount_operation_OP_TYPE_Parse(
    const ::std::string& name, gp_mount_operation_OP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_mount_operation_OP_TYPE>(
    gp_mount_operation_OP_TYPE_descriptor(), name, value);
}
enum gp_vip_operation_OP_TYPE {
  gp_vip_operation_OP_TYPE_VOT_GET_LOGOUT_EXP = 1
};
bool gp_vip_operation_OP_TYPE_IsValid(int value);
const gp_vip_operation_OP_TYPE gp_vip_operation_OP_TYPE_OP_TYPE_MIN = gp_vip_operation_OP_TYPE_VOT_GET_LOGOUT_EXP;
const gp_vip_operation_OP_TYPE gp_vip_operation_OP_TYPE_OP_TYPE_MAX = gp_vip_operation_OP_TYPE_VOT_GET_LOGOUT_EXP;
const int gp_vip_operation_OP_TYPE_OP_TYPE_ARRAYSIZE = gp_vip_operation_OP_TYPE_OP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_vip_operation_OP_TYPE_descriptor();
inline const ::std::string& gp_vip_operation_OP_TYPE_Name(gp_vip_operation_OP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_vip_operation_OP_TYPE_descriptor(), value);
}
inline bool gp_vip_operation_OP_TYPE_Parse(
    const ::std::string& name, gp_vip_operation_OP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_vip_operation_OP_TYPE>(
    gp_vip_operation_OP_TYPE_descriptor(), name, value);
}
enum gp_vip_operation_LOGOUT_EXP_TYPE {
  gp_vip_operation_LOGOUT_EXP_TYPE_LET_FREE = 1,
  gp_vip_operation_LOGOUT_EXP_TYPE_LET_BIND_MONEY = 2,
  gp_vip_operation_LOGOUT_EXP_TYPE_LET_TRADE_MONEY = 3
};
bool gp_vip_operation_LOGOUT_EXP_TYPE_IsValid(int value);
const gp_vip_operation_LOGOUT_EXP_TYPE gp_vip_operation_LOGOUT_EXP_TYPE_LOGOUT_EXP_TYPE_MIN = gp_vip_operation_LOGOUT_EXP_TYPE_LET_FREE;
const gp_vip_operation_LOGOUT_EXP_TYPE gp_vip_operation_LOGOUT_EXP_TYPE_LOGOUT_EXP_TYPE_MAX = gp_vip_operation_LOGOUT_EXP_TYPE_LET_TRADE_MONEY;
const int gp_vip_operation_LOGOUT_EXP_TYPE_LOGOUT_EXP_TYPE_ARRAYSIZE = gp_vip_operation_LOGOUT_EXP_TYPE_LOGOUT_EXP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_vip_operation_LOGOUT_EXP_TYPE_descriptor();
inline const ::std::string& gp_vip_operation_LOGOUT_EXP_TYPE_Name(gp_vip_operation_LOGOUT_EXP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_vip_operation_LOGOUT_EXP_TYPE_descriptor(), value);
}
inline bool gp_vip_operation_LOGOUT_EXP_TYPE_Parse(
    const ::std::string& name, gp_vip_operation_LOGOUT_EXP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_vip_operation_LOGOUT_EXP_TYPE>(
    gp_vip_operation_LOGOUT_EXP_TYPE_descriptor(), name, value);
}
enum gp_black_shop_command_BS_CMD_TYPE {
  gp_black_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_REFRESH = 1,
  gp_black_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_BUY = 2
};
bool gp_black_shop_command_BS_CMD_TYPE_IsValid(int value);
const gp_black_shop_command_BS_CMD_TYPE gp_black_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_MIN = gp_black_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_REFRESH;
const gp_black_shop_command_BS_CMD_TYPE gp_black_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_MAX = gp_black_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_BUY;
const int gp_black_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_ARRAYSIZE = gp_black_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_black_shop_command_BS_CMD_TYPE_descriptor();
inline const ::std::string& gp_black_shop_command_BS_CMD_TYPE_Name(gp_black_shop_command_BS_CMD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_black_shop_command_BS_CMD_TYPE_descriptor(), value);
}
inline bool gp_black_shop_command_BS_CMD_TYPE_Parse(
    const ::std::string& name, gp_black_shop_command_BS_CMD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_black_shop_command_BS_CMD_TYPE>(
    gp_black_shop_command_BS_CMD_TYPE_descriptor(), name, value);
}
enum gp_climbtower_shop_command_BS_CMD_TYPE {
  gp_climbtower_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_REFRESH = 1,
  gp_climbtower_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_BUY = 2
};
bool gp_climbtower_shop_command_BS_CMD_TYPE_IsValid(int value);
const gp_climbtower_shop_command_BS_CMD_TYPE gp_climbtower_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_MIN = gp_climbtower_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_REFRESH;
const gp_climbtower_shop_command_BS_CMD_TYPE gp_climbtower_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_MAX = gp_climbtower_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_BUY;
const int gp_climbtower_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_ARRAYSIZE = gp_climbtower_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_climbtower_shop_command_BS_CMD_TYPE_descriptor();
inline const ::std::string& gp_climbtower_shop_command_BS_CMD_TYPE_Name(gp_climbtower_shop_command_BS_CMD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_climbtower_shop_command_BS_CMD_TYPE_descriptor(), value);
}
inline bool gp_climbtower_shop_command_BS_CMD_TYPE_Parse(
    const ::std::string& name, gp_climbtower_shop_command_BS_CMD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_climbtower_shop_command_BS_CMD_TYPE>(
    gp_climbtower_shop_command_BS_CMD_TYPE_descriptor(), name, value);
}
enum gp_duke_command_DUKE_CMD_TYPE {
  gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_GET_REWARD = 1,
  gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_UPGRADE = 2,
  gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_ACTIVE_SKILL = 3
};
bool gp_duke_command_DUKE_CMD_TYPE_IsValid(int value);
const gp_duke_command_DUKE_CMD_TYPE gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_TYPE_MIN = gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_GET_REWARD;
const gp_duke_command_DUKE_CMD_TYPE gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_TYPE_MAX = gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_ACTIVE_SKILL;
const int gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_TYPE_ARRAYSIZE = gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_duke_command_DUKE_CMD_TYPE_descriptor();
inline const ::std::string& gp_duke_command_DUKE_CMD_TYPE_Name(gp_duke_command_DUKE_CMD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_duke_command_DUKE_CMD_TYPE_descriptor(), value);
}
inline bool gp_duke_command_DUKE_CMD_TYPE_Parse(
    const ::std::string& name, gp_duke_command_DUKE_CMD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_duke_command_DUKE_CMD_TYPE>(
    gp_duke_command_DUKE_CMD_TYPE_descriptor(), name, value);
}
enum gp_hero_trial_command_CMD_TYPE {
  gp_hero_trial_command_CMD_TYPE_CT_REFRESH_HERO = 1
};
bool gp_hero_trial_command_CMD_TYPE_IsValid(int value);
const gp_hero_trial_command_CMD_TYPE gp_hero_trial_command_CMD_TYPE_CMD_TYPE_MIN = gp_hero_trial_command_CMD_TYPE_CT_REFRESH_HERO;
const gp_hero_trial_command_CMD_TYPE gp_hero_trial_command_CMD_TYPE_CMD_TYPE_MAX = gp_hero_trial_command_CMD_TYPE_CT_REFRESH_HERO;
const int gp_hero_trial_command_CMD_TYPE_CMD_TYPE_ARRAYSIZE = gp_hero_trial_command_CMD_TYPE_CMD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_hero_trial_command_CMD_TYPE_descriptor();
inline const ::std::string& gp_hero_trial_command_CMD_TYPE_Name(gp_hero_trial_command_CMD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_hero_trial_command_CMD_TYPE_descriptor(), value);
}
inline bool gp_hero_trial_command_CMD_TYPE_Parse(
    const ::std::string& name, gp_hero_trial_command_CMD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_hero_trial_command_CMD_TYPE>(
    gp_hero_trial_command_CMD_TYPE_descriptor(), name, value);
}
enum gp_corp_farm_op_FARM_OP {
  gp_corp_farm_op_FARM_OP_FO_PLANT = 1,
  gp_corp_farm_op_FARM_OP_FO_SPEED = 2,
  gp_corp_farm_op_FARM_OP_FO_HARVEST = 3
};
bool gp_corp_farm_op_FARM_OP_IsValid(int value);
const gp_corp_farm_op_FARM_OP gp_corp_farm_op_FARM_OP_FARM_OP_MIN = gp_corp_farm_op_FARM_OP_FO_PLANT;
const gp_corp_farm_op_FARM_OP gp_corp_farm_op_FARM_OP_FARM_OP_MAX = gp_corp_farm_op_FARM_OP_FO_HARVEST;
const int gp_corp_farm_op_FARM_OP_FARM_OP_ARRAYSIZE = gp_corp_farm_op_FARM_OP_FARM_OP_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_corp_farm_op_FARM_OP_descriptor();
inline const ::std::string& gp_corp_farm_op_FARM_OP_Name(gp_corp_farm_op_FARM_OP value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_corp_farm_op_FARM_OP_descriptor(), value);
}
inline bool gp_corp_farm_op_FARM_OP_Parse(
    const ::std::string& name, gp_corp_farm_op_FARM_OP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_corp_farm_op_FARM_OP>(
    gp_corp_farm_op_FARM_OP_descriptor(), name, value);
}
enum gp_climb_tower_op_CLIMB_OP {
  gp_climb_tower_op_CLIMB_OP_CO_MANUAL_FIGHT = 1,
  gp_climb_tower_op_CLIMB_OP_CO_AUTO_FIGHT_BEGIN = 2,
  gp_climb_tower_op_CLIMB_OP_CO_AUTO_FIGHT_RUSH = 3,
  gp_climb_tower_op_CLIMB_OP_CO_AUTO_FIGHT_STOP = 4,
  gp_climb_tower_op_CLIMB_OP_CO_AUTO_FIGHT_AWARD = 5,
  gp_climb_tower_op_CLIMB_OP_CO_RESET = 6
};
bool gp_climb_tower_op_CLIMB_OP_IsValid(int value);
const gp_climb_tower_op_CLIMB_OP gp_climb_tower_op_CLIMB_OP_CLIMB_OP_MIN = gp_climb_tower_op_CLIMB_OP_CO_MANUAL_FIGHT;
const gp_climb_tower_op_CLIMB_OP gp_climb_tower_op_CLIMB_OP_CLIMB_OP_MAX = gp_climb_tower_op_CLIMB_OP_CO_RESET;
const int gp_climb_tower_op_CLIMB_OP_CLIMB_OP_ARRAYSIZE = gp_climb_tower_op_CLIMB_OP_CLIMB_OP_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_climb_tower_op_CLIMB_OP_descriptor();
inline const ::std::string& gp_climb_tower_op_CLIMB_OP_Name(gp_climb_tower_op_CLIMB_OP value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_climb_tower_op_CLIMB_OP_descriptor(), value);
}
inline bool gp_climb_tower_op_CLIMB_OP_Parse(
    const ::std::string& name, gp_climb_tower_op_CLIMB_OP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_climb_tower_op_CLIMB_OP>(
    gp_climb_tower_op_CLIMB_OP_descriptor(), name, value);
}
enum gp_plant_PLANT_OP {
  gp_plant_PLANT_OP_FO_PLANT = 1,
  gp_plant_PLANT_OP_FO_IMMEDIATE = 2,
  gp_plant_PLANT_OP_FO_HARVEST = 3
};
bool gp_plant_PLANT_OP_IsValid(int value);
const gp_plant_PLANT_OP gp_plant_PLANT_OP_PLANT_OP_MIN = gp_plant_PLANT_OP_FO_PLANT;
const gp_plant_PLANT_OP gp_plant_PLANT_OP_PLANT_OP_MAX = gp_plant_PLANT_OP_FO_HARVEST;
const int gp_plant_PLANT_OP_PLANT_OP_ARRAYSIZE = gp_plant_PLANT_OP_PLANT_OP_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_plant_PLANT_OP_descriptor();
inline const ::std::string& gp_plant_PLANT_OP_Name(gp_plant_PLANT_OP value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_plant_PLANT_OP_descriptor(), value);
}
inline bool gp_plant_PLANT_OP_Parse(
    const ::std::string& name, gp_plant_PLANT_OP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_plant_PLANT_OP>(
    gp_plant_PLANT_OP_descriptor(), name, value);
}
enum gp_common_operation_COMMON_OP {
  gp_common_operation_COMMON_OP_CO_END_REFUSE_FIGHT = 1
};
bool gp_common_operation_COMMON_OP_IsValid(int value);
const gp_common_operation_COMMON_OP gp_common_operation_COMMON_OP_COMMON_OP_MIN = gp_common_operation_COMMON_OP_CO_END_REFUSE_FIGHT;
const gp_common_operation_COMMON_OP gp_common_operation_COMMON_OP_COMMON_OP_MAX = gp_common_operation_COMMON_OP_CO_END_REFUSE_FIGHT;
const int gp_common_operation_COMMON_OP_COMMON_OP_ARRAYSIZE = gp_common_operation_COMMON_OP_COMMON_OP_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_common_operation_COMMON_OP_descriptor();
inline const ::std::string& gp_common_operation_COMMON_OP_Name(gp_common_operation_COMMON_OP value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_common_operation_COMMON_OP_descriptor(), value);
}
inline bool gp_common_operation_COMMON_OP_Parse(
    const ::std::string& name, gp_common_operation_COMMON_OP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_common_operation_COMMON_OP>(
    gp_common_operation_COMMON_OP_descriptor(), name, value);
}
enum gp_upgrade_chariot_UPGRADE_TYPE {
  gp_upgrade_chariot_UPGRADE_TYPE_UT_DIAMOND = 1,
  gp_upgrade_chariot_UPGRADE_TYPE_UT_REPU = 2,
  gp_upgrade_chariot_UPGRADE_TYPE_UT_MONEY = 3
};
bool gp_upgrade_chariot_UPGRADE_TYPE_IsValid(int value);
const gp_upgrade_chariot_UPGRADE_TYPE gp_upgrade_chariot_UPGRADE_TYPE_UPGRADE_TYPE_MIN = gp_upgrade_chariot_UPGRADE_TYPE_UT_DIAMOND;
const gp_upgrade_chariot_UPGRADE_TYPE gp_upgrade_chariot_UPGRADE_TYPE_UPGRADE_TYPE_MAX = gp_upgrade_chariot_UPGRADE_TYPE_UT_MONEY;
const int gp_upgrade_chariot_UPGRADE_TYPE_UPGRADE_TYPE_ARRAYSIZE = gp_upgrade_chariot_UPGRADE_TYPE_UPGRADE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_upgrade_chariot_UPGRADE_TYPE_descriptor();
inline const ::std::string& gp_upgrade_chariot_UPGRADE_TYPE_Name(gp_upgrade_chariot_UPGRADE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_upgrade_chariot_UPGRADE_TYPE_descriptor(), value);
}
inline bool gp_upgrade_chariot_UPGRADE_TYPE_Parse(
    const ::std::string& name, gp_upgrade_chariot_UPGRADE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_upgrade_chariot_UPGRADE_TYPE>(
    gp_upgrade_chariot_UPGRADE_TYPE_descriptor(), name, value);
}
enum gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE {
  gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UP_EXP = 1,
  gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UP_DIAMOND = 2,
  gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UP_TASK = 3,
  gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UP_TASK_FINISH = 4
};
bool gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_IsValid(int value);
const gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UPGRADE_TYPE_MIN = gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UP_EXP;
const gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UPGRADE_TYPE_MAX = gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UP_TASK_FINISH;
const int gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UPGRADE_TYPE_ARRAYSIZE = gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UPGRADE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_descriptor();
inline const ::std::string& gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_Name(gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_descriptor(), value);
}
inline bool gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_Parse(
    const ::std::string& name, gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE>(
    gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_descriptor(), name, value);
}
enum gp_lantern_LANTERN_TYPE {
  gp_lantern_LANTERN_TYPE_LT_INVALID = 0,
  gp_lantern_LANTERN_TYPE_LT_MONEY = 1,
  gp_lantern_LANTERN_TYPE_LT_DIAMOND = 2,
  gp_lantern_LANTERN_TYPE_LT_ITEM = 3,
  gp_lantern_LANTERN_TYPE_LT_HELP = 4
};
bool gp_lantern_LANTERN_TYPE_IsValid(int value);
const gp_lantern_LANTERN_TYPE gp_lantern_LANTERN_TYPE_LANTERN_TYPE_MIN = gp_lantern_LANTERN_TYPE_LT_INVALID;
const gp_lantern_LANTERN_TYPE gp_lantern_LANTERN_TYPE_LANTERN_TYPE_MAX = gp_lantern_LANTERN_TYPE_LT_HELP;
const int gp_lantern_LANTERN_TYPE_LANTERN_TYPE_ARRAYSIZE = gp_lantern_LANTERN_TYPE_LANTERN_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_lantern_LANTERN_TYPE_descriptor();
inline const ::std::string& gp_lantern_LANTERN_TYPE_Name(gp_lantern_LANTERN_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_lantern_LANTERN_TYPE_descriptor(), value);
}
inline bool gp_lantern_LANTERN_TYPE_Parse(
    const ::std::string& name, gp_lantern_LANTERN_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_lantern_LANTERN_TYPE>(
    gp_lantern_LANTERN_TYPE_descriptor(), name, value);
}
enum gp_exchange_activity_EXCHANGE_TYPE {
  gp_exchange_activity_EXCHANGE_TYPE_ET_INVALID = 0,
  gp_exchange_activity_EXCHANGE_TYPE_ET_MONEY = 1,
  gp_exchange_activity_EXCHANGE_TYPE_ET_DIAMOND = 2,
  gp_exchange_activity_EXCHANGE_TYPE_ET_ITEM = 3,
  gp_exchange_activity_EXCHANGE_TYPE_ET_HELP = 4
};
bool gp_exchange_activity_EXCHANGE_TYPE_IsValid(int value);
const gp_exchange_activity_EXCHANGE_TYPE gp_exchange_activity_EXCHANGE_TYPE_EXCHANGE_TYPE_MIN = gp_exchange_activity_EXCHANGE_TYPE_ET_INVALID;
const gp_exchange_activity_EXCHANGE_TYPE gp_exchange_activity_EXCHANGE_TYPE_EXCHANGE_TYPE_MAX = gp_exchange_activity_EXCHANGE_TYPE_ET_HELP;
const int gp_exchange_activity_EXCHANGE_TYPE_EXCHANGE_TYPE_ARRAYSIZE = gp_exchange_activity_EXCHANGE_TYPE_EXCHANGE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_exchange_activity_EXCHANGE_TYPE_descriptor();
inline const ::std::string& gp_exchange_activity_EXCHANGE_TYPE_Name(gp_exchange_activity_EXCHANGE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_exchange_activity_EXCHANGE_TYPE_descriptor(), value);
}
inline bool gp_exchange_activity_EXCHANGE_TYPE_Parse(
    const ::std::string& name, gp_exchange_activity_EXCHANGE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_exchange_activity_EXCHANGE_TYPE>(
    gp_exchange_activity_EXCHANGE_TYPE_descriptor(), name, value);
}
enum gp_pet_operate_OPERATE_TYPE {
  gp_pet_operate_OPERATE_TYPE_OT_MODIFY_FIGHT_STATE = 1,
  gp_pet_operate_OPERATE_TYPE_OT_XISUI = 2,
  gp_pet_operate_OPERATE_TYPE_OT_FENJIE = 3,
  gp_pet_operate_OPERATE_TYPE_OT_INC_STAR = 4,
  gp_pet_operate_OPERATE_TYPE_OT_COMPOSE = 5,
  gp_pet_operate_OPERATE_TYPE_OT_UNLOCK_SKILL = 6,
  gp_pet_operate_OPERATE_TYPE_OT_RESET_LIANYAO = 7
};
bool gp_pet_operate_OPERATE_TYPE_IsValid(int value);
const gp_pet_operate_OPERATE_TYPE gp_pet_operate_OPERATE_TYPE_OPERATE_TYPE_MIN = gp_pet_operate_OPERATE_TYPE_OT_MODIFY_FIGHT_STATE;
const gp_pet_operate_OPERATE_TYPE gp_pet_operate_OPERATE_TYPE_OPERATE_TYPE_MAX = gp_pet_operate_OPERATE_TYPE_OT_RESET_LIANYAO;
const int gp_pet_operate_OPERATE_TYPE_OPERATE_TYPE_ARRAYSIZE = gp_pet_operate_OPERATE_TYPE_OPERATE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_pet_operate_OPERATE_TYPE_descriptor();
inline const ::std::string& gp_pet_operate_OPERATE_TYPE_Name(gp_pet_operate_OPERATE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_pet_operate_OPERATE_TYPE_descriptor(), value);
}
inline bool gp_pet_operate_OPERATE_TYPE_Parse(
    const ::std::string& name, gp_pet_operate_OPERATE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_pet_operate_OPERATE_TYPE>(
    gp_pet_operate_OPERATE_TYPE_descriptor(), name, value);
}
enum gp_general_soul_op_soul_operation {
  gp_general_soul_op_soul_operation_Summon = 1,
  gp_general_soul_op_soul_operation_Gobble = 2,
  gp_general_soul_op_soul_operation_Synthetize = 3
};
bool gp_general_soul_op_soul_operation_IsValid(int value);
const gp_general_soul_op_soul_operation gp_general_soul_op_soul_operation_soul_operation_MIN = gp_general_soul_op_soul_operation_Summon;
const gp_general_soul_op_soul_operation gp_general_soul_op_soul_operation_soul_operation_MAX = gp_general_soul_op_soul_operation_Synthetize;
const int gp_general_soul_op_soul_operation_soul_operation_ARRAYSIZE = gp_general_soul_op_soul_operation_soul_operation_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_general_soul_op_soul_operation_descriptor();
inline const ::std::string& gp_general_soul_op_soul_operation_Name(gp_general_soul_op_soul_operation value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_general_soul_op_soul_operation_descriptor(), value);
}
inline bool gp_general_soul_op_soul_operation_Parse(
    const ::std::string& name, gp_general_soul_op_soul_operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_general_soul_op_soul_operation>(
    gp_general_soul_op_soul_operation_descriptor(), name, value);
}
enum gp_general_soul_equip_op_soul_operation {
  gp_general_soul_equip_op_soul_operation_On = 1,
  gp_general_soul_equip_op_soul_operation_Off = 2,
  gp_general_soul_equip_op_soul_operation_Lock = 3,
  gp_general_soul_equip_op_soul_operation_Unlock = 4
};
bool gp_general_soul_equip_op_soul_operation_IsValid(int value);
const gp_general_soul_equip_op_soul_operation gp_general_soul_equip_op_soul_operation_soul_operation_MIN = gp_general_soul_equip_op_soul_operation_On;
const gp_general_soul_equip_op_soul_operation gp_general_soul_equip_op_soul_operation_soul_operation_MAX = gp_general_soul_equip_op_soul_operation_Unlock;
const int gp_general_soul_equip_op_soul_operation_soul_operation_ARRAYSIZE = gp_general_soul_equip_op_soul_operation_soul_operation_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_general_soul_equip_op_soul_operation_descriptor();
inline const ::std::string& gp_general_soul_equip_op_soul_operation_Name(gp_general_soul_equip_op_soul_operation value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_general_soul_equip_op_soul_operation_descriptor(), value);
}
inline bool gp_general_soul_equip_op_soul_operation_Parse(
    const ::std::string& name, gp_general_soul_equip_op_soul_operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_general_soul_equip_op_soul_operation>(
    gp_general_soul_equip_op_soul_operation_descriptor(), name, value);
}
enum gp_broadcast_value_change_VALUE_TYPE {
  gp_broadcast_value_change_VALUE_TYPE_VT_DUKE_LEVEL = 1
};
bool gp_broadcast_value_change_VALUE_TYPE_IsValid(int value);
const gp_broadcast_value_change_VALUE_TYPE gp_broadcast_value_change_VALUE_TYPE_VALUE_TYPE_MIN = gp_broadcast_value_change_VALUE_TYPE_VT_DUKE_LEVEL;
const gp_broadcast_value_change_VALUE_TYPE gp_broadcast_value_change_VALUE_TYPE_VALUE_TYPE_MAX = gp_broadcast_value_change_VALUE_TYPE_VT_DUKE_LEVEL;
const int gp_broadcast_value_change_VALUE_TYPE_VALUE_TYPE_ARRAYSIZE = gp_broadcast_value_change_VALUE_TYPE_VALUE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_broadcast_value_change_VALUE_TYPE_descriptor();
inline const ::std::string& gp_broadcast_value_change_VALUE_TYPE_Name(gp_broadcast_value_change_VALUE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_broadcast_value_change_VALUE_TYPE_descriptor(), value);
}
inline bool gp_broadcast_value_change_VALUE_TYPE_Parse(
    const ::std::string& name, gp_broadcast_value_change_VALUE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_broadcast_value_change_VALUE_TYPE>(
    gp_broadcast_value_change_VALUE_TYPE_descriptor(), name, value);
}
enum gp_bingfa_info_BINGFA_INFO_TYPE {
  gp_bingfa_info_BINGFA_INFO_TYPE_BINGFA_INFO_SYNC = 1,
  gp_bingfa_info_BINGFA_INFO_TYPE_BINGFA_INFO_UPDATE = 2
};
bool gp_bingfa_info_BINGFA_INFO_TYPE_IsValid(int value);
const gp_bingfa_info_BINGFA_INFO_TYPE gp_bingfa_info_BINGFA_INFO_TYPE_BINGFA_INFO_TYPE_MIN = gp_bingfa_info_BINGFA_INFO_TYPE_BINGFA_INFO_SYNC;
const gp_bingfa_info_BINGFA_INFO_TYPE gp_bingfa_info_BINGFA_INFO_TYPE_BINGFA_INFO_TYPE_MAX = gp_bingfa_info_BINGFA_INFO_TYPE_BINGFA_INFO_UPDATE;
const int gp_bingfa_info_BINGFA_INFO_TYPE_BINGFA_INFO_TYPE_ARRAYSIZE = gp_bingfa_info_BINGFA_INFO_TYPE_BINGFA_INFO_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_bingfa_info_BINGFA_INFO_TYPE_descriptor();
inline const ::std::string& gp_bingfa_info_BINGFA_INFO_TYPE_Name(gp_bingfa_info_BINGFA_INFO_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_bingfa_info_BINGFA_INFO_TYPE_descriptor(), value);
}
inline bool gp_bingfa_info_BINGFA_INFO_TYPE_Parse(
    const ::std::string& name, gp_bingfa_info_BINGFA_INFO_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_bingfa_info_BINGFA_INFO_TYPE>(
    gp_bingfa_info_BINGFA_INFO_TYPE_descriptor(), name, value);
}
enum gp_wuhun_info_WUHUN_INFO_TYPE {
  gp_wuhun_info_WUHUN_INFO_TYPE_WUHUN_INFO_SYNC = 1,
  gp_wuhun_info_WUHUN_INFO_TYPE_WUHUN_INFO_UPDATE = 2
};
bool gp_wuhun_info_WUHUN_INFO_TYPE_IsValid(int value);
const gp_wuhun_info_WUHUN_INFO_TYPE gp_wuhun_info_WUHUN_INFO_TYPE_WUHUN_INFO_TYPE_MIN = gp_wuhun_info_WUHUN_INFO_TYPE_WUHUN_INFO_SYNC;
const gp_wuhun_info_WUHUN_INFO_TYPE gp_wuhun_info_WUHUN_INFO_TYPE_WUHUN_INFO_TYPE_MAX = gp_wuhun_info_WUHUN_INFO_TYPE_WUHUN_INFO_UPDATE;
const int gp_wuhun_info_WUHUN_INFO_TYPE_WUHUN_INFO_TYPE_ARRAYSIZE = gp_wuhun_info_WUHUN_INFO_TYPE_WUHUN_INFO_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_wuhun_info_WUHUN_INFO_TYPE_descriptor();
inline const ::std::string& gp_wuhun_info_WUHUN_INFO_TYPE_Name(gp_wuhun_info_WUHUN_INFO_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_wuhun_info_WUHUN_INFO_TYPE_descriptor(), value);
}
inline bool gp_wuhun_info_WUHUN_INFO_TYPE_Parse(
    const ::std::string& name, gp_wuhun_info_WUHUN_INFO_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_wuhun_info_WUHUN_INFO_TYPE>(
    gp_wuhun_info_WUHUN_INFO_TYPE_descriptor(), name, value);
}
enum gp_wuhun_info_WUHUN_UPGRADE_STATE {
  gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UP_NONE = 0,
  gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UP_EXP = 1,
  gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UP_DIAMOND = 2,
  gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UP_TASK = 3,
  gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UP_TASK_FINISH = 4
};
bool gp_wuhun_info_WUHUN_UPGRADE_STATE_IsValid(int value);
const gp_wuhun_info_WUHUN_UPGRADE_STATE gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UPGRADE_STATE_MIN = gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UP_NONE;
const gp_wuhun_info_WUHUN_UPGRADE_STATE gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UPGRADE_STATE_MAX = gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UP_TASK_FINISH;
const int gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UPGRADE_STATE_ARRAYSIZE = gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UPGRADE_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_wuhun_info_WUHUN_UPGRADE_STATE_descriptor();
inline const ::std::string& gp_wuhun_info_WUHUN_UPGRADE_STATE_Name(gp_wuhun_info_WUHUN_UPGRADE_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_wuhun_info_WUHUN_UPGRADE_STATE_descriptor(), value);
}
inline bool gp_wuhun_info_WUHUN_UPGRADE_STATE_Parse(
    const ::std::string& name, gp_wuhun_info_WUHUN_UPGRADE_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_wuhun_info_WUHUN_UPGRADE_STATE>(
    gp_wuhun_info_WUHUN_UPGRADE_STATE_descriptor(), name, value);
}
enum gp_hero_incre_info_CMD_TYPE {
  gp_hero_incre_info_CMD_TYPE_MODIFY_PROF_EXP = 1,
  gp_hero_incre_info_CMD_TYPE_MODIFY_EXP = 2,
  gp_hero_incre_info_CMD_TYPE_PROF_LEVEL_UP = 3,
  gp_hero_incre_info_CMD_TYPE_SUMMON_HERO = 4
};
bool gp_hero_incre_info_CMD_TYPE_IsValid(int value);
const gp_hero_incre_info_CMD_TYPE gp_hero_incre_info_CMD_TYPE_CMD_TYPE_MIN = gp_hero_incre_info_CMD_TYPE_MODIFY_PROF_EXP;
const gp_hero_incre_info_CMD_TYPE gp_hero_incre_info_CMD_TYPE_CMD_TYPE_MAX = gp_hero_incre_info_CMD_TYPE_SUMMON_HERO;
const int gp_hero_incre_info_CMD_TYPE_CMD_TYPE_ARRAYSIZE = gp_hero_incre_info_CMD_TYPE_CMD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_hero_incre_info_CMD_TYPE_descriptor();
inline const ::std::string& gp_hero_incre_info_CMD_TYPE_Name(gp_hero_incre_info_CMD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_hero_incre_info_CMD_TYPE_descriptor(), value);
}
inline bool gp_hero_incre_info_CMD_TYPE_Parse(
    const ::std::string& name, gp_hero_incre_info_CMD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_hero_incre_info_CMD_TYPE>(
    gp_hero_incre_info_CMD_TYPE_descriptor(), name, value);
}
enum gp_operation_result_OPER_TYPE {
  gp_operation_result_OPER_TYPE_OT_NATION_DONATE = 1
};
bool gp_operation_result_OPER_TYPE_IsValid(int value);
const gp_operation_result_OPER_TYPE gp_operation_result_OPER_TYPE_OPER_TYPE_MIN = gp_operation_result_OPER_TYPE_OT_NATION_DONATE;
const gp_operation_result_OPER_TYPE gp_operation_result_OPER_TYPE_OPER_TYPE_MAX = gp_operation_result_OPER_TYPE_OT_NATION_DONATE;
const int gp_operation_result_OPER_TYPE_OPER_TYPE_ARRAYSIZE = gp_operation_result_OPER_TYPE_OPER_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_operation_result_OPER_TYPE_descriptor();
inline const ::std::string& gp_operation_result_OPER_TYPE_Name(gp_operation_result_OPER_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_operation_result_OPER_TYPE_descriptor(), value);
}
inline bool gp_operation_result_OPER_TYPE_Parse(
    const ::std::string& name, gp_operation_result_OPER_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_operation_result_OPER_TYPE>(
    gp_operation_result_OPER_TYPE_descriptor(), name, value);
}
enum gp_operation_result_OPER_RESULT {
  gp_operation_result_OPER_RESULT_OR_NATION_DONATE_SUCCESS = 1,
  gp_operation_result_OPER_RESULT_OR_NATION_DONATE_FAIL = 2
};
bool gp_operation_result_OPER_RESULT_IsValid(int value);
const gp_operation_result_OPER_RESULT gp_operation_result_OPER_RESULT_OPER_RESULT_MIN = gp_operation_result_OPER_RESULT_OR_NATION_DONATE_SUCCESS;
const gp_operation_result_OPER_RESULT gp_operation_result_OPER_RESULT_OPER_RESULT_MAX = gp_operation_result_OPER_RESULT_OR_NATION_DONATE_FAIL;
const int gp_operation_result_OPER_RESULT_OPER_RESULT_ARRAYSIZE = gp_operation_result_OPER_RESULT_OPER_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_operation_result_OPER_RESULT_descriptor();
inline const ::std::string& gp_operation_result_OPER_RESULT_Name(gp_operation_result_OPER_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_operation_result_OPER_RESULT_descriptor(), value);
}
inline bool gp_operation_result_OPER_RESULT_Parse(
    const ::std::string& name, gp_operation_result_OPER_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_operation_result_OPER_RESULT>(
    gp_operation_result_OPER_RESULT_descriptor(), name, value);
}
enum gp_card_data_notify_N_TYPE {
  gp_card_data_notify_N_TYPE_N_TYPE_SYNCALL = 1,
  gp_card_data_notify_N_TYPE_N_TYPE_ADDCARD = 2,
  gp_card_data_notify_N_TYPE_N_TYPE_ACTIVESUIT = 3,
  gp_card_data_notify_N_TYPE_N_TYPE_DECOMPOSE = 4
};
bool gp_card_data_notify_N_TYPE_IsValid(int value);
const gp_card_data_notify_N_TYPE gp_card_data_notify_N_TYPE_N_TYPE_MIN = gp_card_data_notify_N_TYPE_N_TYPE_SYNCALL;
const gp_card_data_notify_N_TYPE gp_card_data_notify_N_TYPE_N_TYPE_MAX = gp_card_data_notify_N_TYPE_N_TYPE_DECOMPOSE;
const int gp_card_data_notify_N_TYPE_N_TYPE_ARRAYSIZE = gp_card_data_notify_N_TYPE_N_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_card_data_notify_N_TYPE_descriptor();
inline const ::std::string& gp_card_data_notify_N_TYPE_Name(gp_card_data_notify_N_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_card_data_notify_N_TYPE_descriptor(), value);
}
inline bool gp_card_data_notify_N_TYPE_Parse(
    const ::std::string& name, gp_card_data_notify_N_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_card_data_notify_N_TYPE>(
    gp_card_data_notify_N_TYPE_descriptor(), name, value);
}
enum gp_magicshop_notify_NOTIFY_TYPE {
  gp_magicshop_notify_NOTIFY_TYPE_NT_SYNCALL = 1,
  gp_magicshop_notify_NOTIFY_TYPE_NT_UPDATE_SHOP = 2,
  gp_magicshop_notify_NOTIFY_TYPE_NT_UPDATE_GOODS = 3
};
bool gp_magicshop_notify_NOTIFY_TYPE_IsValid(int value);
const gp_magicshop_notify_NOTIFY_TYPE gp_magicshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_MIN = gp_magicshop_notify_NOTIFY_TYPE_NT_SYNCALL;
const gp_magicshop_notify_NOTIFY_TYPE gp_magicshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_MAX = gp_magicshop_notify_NOTIFY_TYPE_NT_UPDATE_GOODS;
const int gp_magicshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_ARRAYSIZE = gp_magicshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_magicshop_notify_NOTIFY_TYPE_descriptor();
inline const ::std::string& gp_magicshop_notify_NOTIFY_TYPE_Name(gp_magicshop_notify_NOTIFY_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_magicshop_notify_NOTIFY_TYPE_descriptor(), value);
}
inline bool gp_magicshop_notify_NOTIFY_TYPE_Parse(
    const ::std::string& name, gp_magicshop_notify_NOTIFY_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_magicshop_notify_NOTIFY_TYPE>(
    gp_magicshop_notify_NOTIFY_TYPE_descriptor(), name, value);
}
enum gp_blackshop_notify_NOTIFY_TYPE {
  gp_blackshop_notify_NOTIFY_TYPE_NT_SYNCALL = 1,
  gp_blackshop_notify_NOTIFY_TYPE_NT_UPDATE_SHOP = 2,
  gp_blackshop_notify_NOTIFY_TYPE_NT_UPDATE_GOODS = 3
};
bool gp_blackshop_notify_NOTIFY_TYPE_IsValid(int value);
const gp_blackshop_notify_NOTIFY_TYPE gp_blackshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_MIN = gp_blackshop_notify_NOTIFY_TYPE_NT_SYNCALL;
const gp_blackshop_notify_NOTIFY_TYPE gp_blackshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_MAX = gp_blackshop_notify_NOTIFY_TYPE_NT_UPDATE_GOODS;
const int gp_blackshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_ARRAYSIZE = gp_blackshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_blackshop_notify_NOTIFY_TYPE_descriptor();
inline const ::std::string& gp_blackshop_notify_NOTIFY_TYPE_Name(gp_blackshop_notify_NOTIFY_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_blackshop_notify_NOTIFY_TYPE_descriptor(), value);
}
inline bool gp_blackshop_notify_NOTIFY_TYPE_Parse(
    const ::std::string& name, gp_blackshop_notify_NOTIFY_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_blackshop_notify_NOTIFY_TYPE>(
    gp_blackshop_notify_NOTIFY_TYPE_descriptor(), name, value);
}
enum gp_duke_notify_NOTIFY_TYPE {
  gp_duke_notify_NOTIFY_TYPE_NT_SYNCALL = 1
};
bool gp_duke_notify_NOTIFY_TYPE_IsValid(int value);
const gp_duke_notify_NOTIFY_TYPE gp_duke_notify_NOTIFY_TYPE_NOTIFY_TYPE_MIN = gp_duke_notify_NOTIFY_TYPE_NT_SYNCALL;
const gp_duke_notify_NOTIFY_TYPE gp_duke_notify_NOTIFY_TYPE_NOTIFY_TYPE_MAX = gp_duke_notify_NOTIFY_TYPE_NT_SYNCALL;
const int gp_duke_notify_NOTIFY_TYPE_NOTIFY_TYPE_ARRAYSIZE = gp_duke_notify_NOTIFY_TYPE_NOTIFY_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_duke_notify_NOTIFY_TYPE_descriptor();
inline const ::std::string& gp_duke_notify_NOTIFY_TYPE_Name(gp_duke_notify_NOTIFY_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_duke_notify_NOTIFY_TYPE_descriptor(), value);
}
inline bool gp_duke_notify_NOTIFY_TYPE_Parse(
    const ::std::string& name, gp_duke_notify_NOTIFY_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_duke_notify_NOTIFY_TYPE>(
    gp_duke_notify_NOTIFY_TYPE_descriptor(), name, value);
}
enum gp_notify_cash_change_CC_TYPE {
  gp_notify_cash_change_CC_TYPE_CASH_CHANGE_TYPE_USE = 1,
  gp_notify_cash_change_CC_TYPE_CASH_CHANGE_TYPE_RETURN = 2,
  gp_notify_cash_change_CC_TYPE_CASH_CHANGE_TYPE_PRESENT = 3
};
bool gp_notify_cash_change_CC_TYPE_IsValid(int value);
const gp_notify_cash_change_CC_TYPE gp_notify_cash_change_CC_TYPE_CC_TYPE_MIN = gp_notify_cash_change_CC_TYPE_CASH_CHANGE_TYPE_USE;
const gp_notify_cash_change_CC_TYPE gp_notify_cash_change_CC_TYPE_CC_TYPE_MAX = gp_notify_cash_change_CC_TYPE_CASH_CHANGE_TYPE_PRESENT;
const int gp_notify_cash_change_CC_TYPE_CC_TYPE_ARRAYSIZE = gp_notify_cash_change_CC_TYPE_CC_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gp_notify_cash_change_CC_TYPE_descriptor();
inline const ::std::string& gp_notify_cash_change_CC_TYPE_Name(gp_notify_cash_change_CC_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gp_notify_cash_change_CC_TYPE_descriptor(), value);
}
inline bool gp_notify_cash_change_CC_TYPE_Parse(
    const ::std::string& name, gp_notify_cash_change_CC_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gp_notify_cash_change_CC_TYPE>(
    gp_notify_cash_change_CC_TYPE_descriptor(), name, value);
}
enum npt_send_tlog_info_TLOG_TYPE {
  npt_send_tlog_info_TLOG_TYPE_TLOG_TYPE_GUIDE = 1,
  npt_send_tlog_info_TLOG_TYPE_TLOG_TYPE_ACTIVITY = 2
};
bool npt_send_tlog_info_TLOG_TYPE_IsValid(int value);
const npt_send_tlog_info_TLOG_TYPE npt_send_tlog_info_TLOG_TYPE_TLOG_TYPE_MIN = npt_send_tlog_info_TLOG_TYPE_TLOG_TYPE_GUIDE;
const npt_send_tlog_info_TLOG_TYPE npt_send_tlog_info_TLOG_TYPE_TLOG_TYPE_MAX = npt_send_tlog_info_TLOG_TYPE_TLOG_TYPE_ACTIVITY;
const int npt_send_tlog_info_TLOG_TYPE_TLOG_TYPE_ARRAYSIZE = npt_send_tlog_info_TLOG_TYPE_TLOG_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_send_tlog_info_TLOG_TYPE_descriptor();
inline const ::std::string& npt_send_tlog_info_TLOG_TYPE_Name(npt_send_tlog_info_TLOG_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_send_tlog_info_TLOG_TYPE_descriptor(), value);
}
inline bool npt_send_tlog_info_TLOG_TYPE_Parse(
    const ::std::string& name, npt_send_tlog_info_TLOG_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_send_tlog_info_TLOG_TYPE>(
    npt_send_tlog_info_TLOG_TYPE_descriptor(), name, value);
}
enum npt_greet_invest_award_AWARD_TYPE {
  npt_greet_invest_award_AWARD_TYPE_INVESTOR = 1,
  npt_greet_invest_award_AWARD_TYPE_INVESTEE = 2
};
bool npt_greet_invest_award_AWARD_TYPE_IsValid(int value);
const npt_greet_invest_award_AWARD_TYPE npt_greet_invest_award_AWARD_TYPE_AWARD_TYPE_MIN = npt_greet_invest_award_AWARD_TYPE_INVESTOR;
const npt_greet_invest_award_AWARD_TYPE npt_greet_invest_award_AWARD_TYPE_AWARD_TYPE_MAX = npt_greet_invest_award_AWARD_TYPE_INVESTEE;
const int npt_greet_invest_award_AWARD_TYPE_AWARD_TYPE_ARRAYSIZE = npt_greet_invest_award_AWARD_TYPE_AWARD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_greet_invest_award_AWARD_TYPE_descriptor();
inline const ::std::string& npt_greet_invest_award_AWARD_TYPE_Name(npt_greet_invest_award_AWARD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_greet_invest_award_AWARD_TYPE_descriptor(), value);
}
inline bool npt_greet_invest_award_AWARD_TYPE_Parse(
    const ::std::string& name, npt_greet_invest_award_AWARD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_greet_invest_award_AWARD_TYPE>(
    npt_greet_invest_award_AWARD_TYPE_descriptor(), name, value);
}
enum npt_wine_game_operate_OPER_TYPE {
  npt_wine_game_operate_OPER_TYPE_CHANGE_PEER = 1,
  npt_wine_game_operate_OPER_TYPE_BEGIN_GAME = 2,
  npt_wine_game_operate_OPER_TYPE_GAME_HUAQUAN = 3,
  npt_wine_game_operate_OPER_TYPE_GAME_GANBEI = 4,
  npt_wine_game_operate_OPER_TYPE_GAME_GUAN = 5,
  npt_wine_game_operate_OPER_TYPE_GAME_INIT = 6,
  npt_wine_game_operate_OPER_TYPE_GAME_END = 7
};
bool npt_wine_game_operate_OPER_TYPE_IsValid(int value);
const npt_wine_game_operate_OPER_TYPE npt_wine_game_operate_OPER_TYPE_OPER_TYPE_MIN = npt_wine_game_operate_OPER_TYPE_CHANGE_PEER;
const npt_wine_game_operate_OPER_TYPE npt_wine_game_operate_OPER_TYPE_OPER_TYPE_MAX = npt_wine_game_operate_OPER_TYPE_GAME_END;
const int npt_wine_game_operate_OPER_TYPE_OPER_TYPE_ARRAYSIZE = npt_wine_game_operate_OPER_TYPE_OPER_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_wine_game_operate_OPER_TYPE_descriptor();
inline const ::std::string& npt_wine_game_operate_OPER_TYPE_Name(npt_wine_game_operate_OPER_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_wine_game_operate_OPER_TYPE_descriptor(), value);
}
inline bool npt_wine_game_operate_OPER_TYPE_Parse(
    const ::std::string& name, npt_wine_game_operate_OPER_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_wine_game_operate_OPER_TYPE>(
    npt_wine_game_operate_OPER_TYPE_descriptor(), name, value);
}
enum region_history_EVNET_TYPE {
  region_history_EVNET_TYPE_OWNER_CHANGE = 1
};
bool region_history_EVNET_TYPE_IsValid(int value);
const region_history_EVNET_TYPE region_history_EVNET_TYPE_EVNET_TYPE_MIN = region_history_EVNET_TYPE_OWNER_CHANGE;
const region_history_EVNET_TYPE region_history_EVNET_TYPE_EVNET_TYPE_MAX = region_history_EVNET_TYPE_OWNER_CHANGE;
const int region_history_EVNET_TYPE_EVNET_TYPE_ARRAYSIZE = region_history_EVNET_TYPE_EVNET_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* region_history_EVNET_TYPE_descriptor();
inline const ::std::string& region_history_EVNET_TYPE_Name(region_history_EVNET_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    region_history_EVNET_TYPE_descriptor(), value);
}
inline bool region_history_EVNET_TYPE_Parse(
    const ::std::string& name, region_history_EVNET_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<region_history_EVNET_TYPE>(
    region_history_EVNET_TYPE_descriptor(), name, value);
}
enum npt_region_war_operate_OPER_TYPE {
  npt_region_war_operate_OPER_TYPE_WAR_QUERY_REGION = 1,
  npt_region_war_operate_OPER_TYPE_WAR_QUERY_BID = 2,
  npt_region_war_operate_OPER_TYPE_WAR_BID = 3,
  npt_region_war_operate_OPER_TYPE_WAR_BID_ADD = 4,
  npt_region_war_operate_OPER_TYPE_WAR_QUERY_WAR = 5,
  npt_region_war_operate_OPER_TYPE_WAR_GET_DAILY_BONUS = 6,
  npt_region_war_operate_OPER_TYPE_WAR_QUERY_REGION_BID = 7,
  npt_region_war_operate_OPER_TYPE_WAR_RECIEVE_COMPENSATION_TASK = 8,
  npt_region_war_operate_OPER_TYPE_WAR_GET_SELF_BID_REGION = 9
};
bool npt_region_war_operate_OPER_TYPE_IsValid(int value);
const npt_region_war_operate_OPER_TYPE npt_region_war_operate_OPER_TYPE_OPER_TYPE_MIN = npt_region_war_operate_OPER_TYPE_WAR_QUERY_REGION;
const npt_region_war_operate_OPER_TYPE npt_region_war_operate_OPER_TYPE_OPER_TYPE_MAX = npt_region_war_operate_OPER_TYPE_WAR_GET_SELF_BID_REGION;
const int npt_region_war_operate_OPER_TYPE_OPER_TYPE_ARRAYSIZE = npt_region_war_operate_OPER_TYPE_OPER_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_region_war_operate_OPER_TYPE_descriptor();
inline const ::std::string& npt_region_war_operate_OPER_TYPE_Name(npt_region_war_operate_OPER_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_region_war_operate_OPER_TYPE_descriptor(), value);
}
inline bool npt_region_war_operate_OPER_TYPE_Parse(
    const ::std::string& name, npt_region_war_operate_OPER_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_region_war_operate_OPER_TYPE>(
    npt_region_war_operate_OPER_TYPE_descriptor(), name, value);
}
enum npt_region_war_get_info_re_OPER_TYPE {
  npt_region_war_get_info_re_OPER_TYPE_WAR_QUERY_REGION_RE = 1,
  npt_region_war_get_info_re_OPER_TYPE_WAR_QUERY_BID_RE = 2,
  npt_region_war_get_info_re_OPER_TYPE_WAR_BID_RE = 3,
  npt_region_war_get_info_re_OPER_TYPE_WAR_BID_ADD_RE = 4,
  npt_region_war_get_info_re_OPER_TYPE_WAR_QUERY_WAR_RE = 5,
  npt_region_war_get_info_re_OPER_TYPE_WAR_GET_DAILY_BONUS_RE = 6,
  npt_region_war_get_info_re_OPER_TYPE_WAR_QUERY_REGION_BID_RE = 7,
  npt_region_war_get_info_re_OPER_TYPE_WAR_RECIEVE_COMPENSATION_TASK_RE = 8,
  npt_region_war_get_info_re_OPER_TYPE_WAR_GET_SELF_BID_REGION_RE = 9
};
bool npt_region_war_get_info_re_OPER_TYPE_IsValid(int value);
const npt_region_war_get_info_re_OPER_TYPE npt_region_war_get_info_re_OPER_TYPE_OPER_TYPE_MIN = npt_region_war_get_info_re_OPER_TYPE_WAR_QUERY_REGION_RE;
const npt_region_war_get_info_re_OPER_TYPE npt_region_war_get_info_re_OPER_TYPE_OPER_TYPE_MAX = npt_region_war_get_info_re_OPER_TYPE_WAR_GET_SELF_BID_REGION_RE;
const int npt_region_war_get_info_re_OPER_TYPE_OPER_TYPE_ARRAYSIZE = npt_region_war_get_info_re_OPER_TYPE_OPER_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_region_war_get_info_re_OPER_TYPE_descriptor();
inline const ::std::string& npt_region_war_get_info_re_OPER_TYPE_Name(npt_region_war_get_info_re_OPER_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_region_war_get_info_re_OPER_TYPE_descriptor(), value);
}
inline bool npt_region_war_get_info_re_OPER_TYPE_Parse(
    const ::std::string& name, npt_region_war_get_info_re_OPER_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_region_war_get_info_re_OPER_TYPE>(
    npt_region_war_get_info_re_OPER_TYPE_descriptor(), name, value);
}
enum npt_region_war_operate_re_OPER_TYPE {
  npt_region_war_operate_re_OPER_TYPE_OPERATE_WAR_BID_RE = 1,
  npt_region_war_operate_re_OPER_TYPE_OPERATE_WAR_CHEER_RE = 2,
  npt_region_war_operate_re_OPER_TYPE_OPERATE_WAR_QUERY_REGION_BID_RE = 3,
  npt_region_war_operate_re_OPER_TYPE_OPERATE_WAR_QUERY_SELF_REGION_RE = 4
};
bool npt_region_war_operate_re_OPER_TYPE_IsValid(int value);
const npt_region_war_operate_re_OPER_TYPE npt_region_war_operate_re_OPER_TYPE_OPER_TYPE_MIN = npt_region_war_operate_re_OPER_TYPE_OPERATE_WAR_BID_RE;
const npt_region_war_operate_re_OPER_TYPE npt_region_war_operate_re_OPER_TYPE_OPER_TYPE_MAX = npt_region_war_operate_re_OPER_TYPE_OPERATE_WAR_QUERY_SELF_REGION_RE;
const int npt_region_war_operate_re_OPER_TYPE_OPER_TYPE_ARRAYSIZE = npt_region_war_operate_re_OPER_TYPE_OPER_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_region_war_operate_re_OPER_TYPE_descriptor();
inline const ::std::string& npt_region_war_operate_re_OPER_TYPE_Name(npt_region_war_operate_re_OPER_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_region_war_operate_re_OPER_TYPE_descriptor(), value);
}
inline bool npt_region_war_operate_re_OPER_TYPE_Parse(
    const ::std::string& name, npt_region_war_operate_re_OPER_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_region_war_operate_re_OPER_TYPE>(
    npt_region_war_operate_re_OPER_TYPE_descriptor(), name, value);
}
enum pet_data_PET_STATE {
  pet_data_PET_STATE_ST_PET_NONE = 0,
  pet_data_PET_STATE_ST_PET_FIGHT = 1,
  pet_data_PET_STATE_ST_PET_ASSIST = 2
};
bool pet_data_PET_STATE_IsValid(int value);
const pet_data_PET_STATE pet_data_PET_STATE_PET_STATE_MIN = pet_data_PET_STATE_ST_PET_NONE;
const pet_data_PET_STATE pet_data_PET_STATE_PET_STATE_MAX = pet_data_PET_STATE_ST_PET_ASSIST;
const int pet_data_PET_STATE_PET_STATE_ARRAYSIZE = pet_data_PET_STATE_PET_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* pet_data_PET_STATE_descriptor();
inline const ::std::string& pet_data_PET_STATE_Name(pet_data_PET_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    pet_data_PET_STATE_descriptor(), value);
}
inline bool pet_data_PET_STATE_Parse(
    const ::std::string& name, pet_data_PET_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<pet_data_PET_STATE>(
    pet_data_PET_STATE_descriptor(), name, value);
}
enum GPS_TYPE {
  GUT_UNDEFIED = 0,
  GUT_TEST_DATA = 1,
  GUT_CORPS_STRUCT = 2,
  GUT_CORPS_MEMBER = 3,
  GUT_FACEBOOK = 4,
  GUT_PLAYER_MEMSSAGE = 5,
  GUT_DB_TABLE = 6,
  GUT_NATION = 7,
  GUT_NATION_WAR = 8,
  GUT_ROLE_PBINFO = 9,
  GUT_HERO_PBINFOS = 10,
  GUT_GREETING_DATA = 11,
  GUT_PLAYER_MISC = 12,
  GUT_CARD_DATA = 13,
  GUT_BLACK_SHOP_DATA = 14,
  GUT_DUKE_DATA = 15,
  GUT_CLIMBTOWER_SHOP_DATA = 16,
  GUT_ACCOUNT_DS_DATA = 17,
  GUT_ACCOUNT_GS_DATA = 18,
  GUT_MIDAS_USER_FAIL = 19,
  GUT_MIDAS_MULTI_FAIL = 20,
  GUT_MIDAS_PIXIU = 21,
  GUT_SECURE_IDIP = 22,
  GUT_TOP_REWARD = 23,
  GUT_DS_SAVE_PLAYER_DATA = 24,
  GUT_STRATEGIES = 25,
  GUT_WING_REFINE_SOUL = 26,
  GUT_PET_DATA = 27,
  GUT_PET_LIST_DATA = 28,
  GUT_ITEM_DATA = 29,
  GUT_ITEM_LIST_DATA = 30,
  GUT_ZONELIST = 31,
  GUT_RICHMAN_DATA = 32,
  GUT_ROAM_RECORD = 33
};
bool GPS_TYPE_IsValid(int value);
const GPS_TYPE GPS_TYPE_MIN = GUT_UNDEFIED;
const GPS_TYPE GPS_TYPE_MAX = GUT_ROAM_RECORD;
const int GPS_TYPE_ARRAYSIZE = GPS_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GPS_TYPE_descriptor();
inline const ::std::string& GPS_TYPE_Name(GPS_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GPS_TYPE_descriptor(), value);
}
inline bool GPS_TYPE_Parse(
    const ::std::string& name, GPS_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GPS_TYPE>(
    GPS_TYPE_descriptor(), name, value);
}
enum CORPS_POSITION {
  CP_NORMAL = 0,
  CP_MASTER = 1,
  CP_VICE_MASTER = 2,
  CP_ZHANGLAO1 = 3,
  CP_ZHANGLAO2 = 4
};
bool CORPS_POSITION_IsValid(int value);
const CORPS_POSITION CORPS_POSITION_MIN = CP_NORMAL;
const CORPS_POSITION CORPS_POSITION_MAX = CP_ZHANGLAO2;
const int CORPS_POSITION_ARRAYSIZE = CORPS_POSITION_MAX + 1;

const ::google::protobuf::EnumDescriptor* CORPS_POSITION_descriptor();
inline const ::std::string& CORPS_POSITION_Name(CORPS_POSITION value) {
  return ::google::protobuf::internal::NameOfEnum(
    CORPS_POSITION_descriptor(), value);
}
inline bool CORPS_POSITION_Parse(
    const ::std::string& name, CORPS_POSITION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CORPS_POSITION>(
    CORPS_POSITION_descriptor(), name, value);
}
enum MIRROR_STATE {
  MIRROR_S_CREATING = 1,
  MIRROR_S_OK = 2,
  MIRROR_S_CLOSING = 3,
  MIRROR_S_CLOSED = 4
};
bool MIRROR_STATE_IsValid(int value);
const MIRROR_STATE MIRROR_STATE_MIN = MIRROR_S_CREATING;
const MIRROR_STATE MIRROR_STATE_MAX = MIRROR_S_CLOSED;
const int MIRROR_STATE_ARRAYSIZE = MIRROR_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MIRROR_STATE_descriptor();
inline const ::std::string& MIRROR_STATE_Name(MIRROR_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MIRROR_STATE_descriptor(), value);
}
inline bool MIRROR_STATE_Parse(
    const ::std::string& name, MIRROR_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MIRROR_STATE>(
    MIRROR_STATE_descriptor(), name, value);
}
enum ask_help_info_type {
  AT_ASK_HELP = 0
};
bool ask_help_info_type_IsValid(int value);
const ask_help_info_type ask_help_info_type_MIN = AT_ASK_HELP;
const ask_help_info_type ask_help_info_type_MAX = AT_ASK_HELP;
const int ask_help_info_type_ARRAYSIZE = ask_help_info_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ask_help_info_type_descriptor();
inline const ::std::string& ask_help_info_type_Name(ask_help_info_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ask_help_info_type_descriptor(), value);
}
inline bool ask_help_info_type_Parse(
    const ::std::string& name, ask_help_info_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ask_help_info_type>(
    ask_help_info_type_descriptor(), name, value);
}
enum NET_PROTOCBUF_TYPE {
  NPT_TEST = 1,
  NPT_CORPS_APPOINT = 2,
  NPT_RESPONSE = 3,
  NPT_APPLY_CORPS = 4,
  NPT_CORPS_DATA = 5,
  NPT_COMMON_SEARCH = 6,
  NPT_ZHAOJILING = 7,
  NPT_SYNC_MIRROR_INFO = 8,
  NPT_SYNC_NATION_WAR_INFO = 9,
  NPT_NATION_WAR_OPERATE = 10,
  NPT_GET_CORP_NAME = 11,
  NPT_NATION_WAR_OPERATE_INFO = 12,
  NPT_NATION_WAR_OPERATE_INFO_RE = 13,
  NPT_TEAM_INVITE = 14,
  NPT_TEAM_INFO = 15,
  NPT_FRIEND_INVITE = 16,
  NPT_GET_PLAYER_PROFILE = 18,
  NPT_GREETING_INFO_SYNC = 19,
  NPT_GREETING_REPLY = 20,
  NPT_BLESSING_INFO = 21,
  NPT_NATIONWAR_EVENT = 22,
  NPT_NATION_SHUTUP = 23,
  NPT_NATION_SHUTUP_INFO = 24,
  NPT_NATION_SHUTUP_REPLY = 25,
  NPT_NATION_COMMANDER_APPOINT = 26,
  NPT_NATION_COMMANDER_NOTIFY = 27,
  NPT_NATION_WAR_HISTORY = 28,
  NPT_REQUEST_INFO = 29,
  NPT_ASK_HELP = 30,
  NPT_SEND_SERVER_MIDAS_INFO = 31,
  NPT_SEND_CLIENT_MIDAS_INFO = 32,
  NPT_SEND_TENCENT_SECURE_INFO = 33,
  NPT_OFFICER_GIFT_GET = 34,
  NPT_OFFICER_GIFT_NOTIFY = 35,
  NPT_SEND_MIDAS_BAD_TOKEN = 36,
  NPT_TEAM_RECRUIT_OPERATE = 37,
  NPT_TEAM_RECRUIT_OPERATE_REPLY = 38,
  NPT_UPDATE_GRC_INFO = 39,
  NPT_GRC_GET_FRIEND_INFO = 40,
  NPT_GRC_SEND_GIFT = 41,
  NPT_GRC_RCV_GIFT = 42,
  NPT_GRC_FRIEND_LIST = 43,
  NPT_GRC_GIFT_LIST = 44,
  NPT_GRC_SEND_GIFT_RE = 45,
  NPT_GRC_RCV_GIFT_RE = 46,
  NPT_MIDAS_ACTIVITY_GET = 47,
  NPT_MIDAS_ACTIVITY_GET_RE = 48,
  NPT_WEAK_NATION_GIFT_NOTIFY = 49,
  NPT_WEAK_NATION_GIFT_GET = 50,
  NPT_SERVER_INFO_NOTIFY = 51,
  NPT_GET_QQGROUP_OPENID = 52,
  NPT_RESP_QQGROUP_OPENID = 53,
  NPT_GRC_TURN_ON_OFF = 54,
  NPT_GRC_TURN_ON_OFF_RE = 55,
  NPT_DIE_ELITE_TID = 56,
  NPT_GET_DIE_ELITE_TID = 57,
  NPT_GRC_EXCEED_FRIEND_LIST = 58,
  NPT_GET_HTTP_REQ = 59,
  NPT_GET_HTTP_RESP = 60,
  NPT_SEND_TLOG_INFO = 61,
  NPT_UNBIND_QQGROUP_REQ = 63,
  NPT_UNBIND_QQGROUP_RESP = 64,
  NPT_RECHARGE_PLAT_VIP = 65,
  NPT_QQGROUP_JOINKEY_REQ = 66,
  NPT_QQGROUP_JOINKEY_RESP = 67,
  NPT_TOP_REWARD = 68,
  NPT_GRC_GET_SELF_PLAT_VIP_INFO = 69,
  NPT_GREET_INVEST_INFO = 70,
  NPT_GREET_INVEST_AWARD = 71,
  NPT_SEND_LEVEL_SORTED_INFO = 72,
  NPT_WINE_GAME_OPERATE = 73,
  NPT_WINE_GAME_SYNC_DATA = 74,
  NPT_WINE_GAME_HISTORY = 75,
  NPT_WINE_GAME_HISTORY_RE = 76,
  NPT_REGION_WAR_OPERATE = 77,
  NPT_REGION_WAR_GET_INFO_RE = 78,
  NPT_GM_SHUT_DOWN_SERVER = 79,
  NPT_NOTIFY_REGIONWAR_DELTATIME = 80,
  NPT_NOTIFY_REGIONWAR_DAILYBONUS = 81,
  NPT_GET_CORPS_INFO = 82,
  NPT_GET_REGION_CHEER_INFO = 83,
  NPT_GET_REGION_CHEER_INFO_RE = 84,
  NPT_REGION_WAR_OPERATE_RE = 85,
  NPT_REGION_WAR_BEGIN_NOTIFY = 86,
  NPT_NEST_COMMON_OPERATION = 87,
  NPT_NATION_REPUTATION = 88,
  NPT_NATION_REPUTATION_RE = 89,
  NPT_NATION_LANTERN_INFO = 90,
  NPT_NATION_LANTERN_INFO_RE = 91,
  NPT_NATION_REPUTATION_CHANGE = 92,
  NPT_RECEIVE_NATION_GIFT = 93,
  NPT_NOTIFY_ZONE_LIST = 94,
  NPT_NOTIFY_ROAM_MATCH_INFO = 95,
  NPT_BATTLE_AUTO_MATCH = 96,
  NPT_EXCHANGE_ACTIVITY = 97,
  NPT_EXCHANGE_ACTIVITY_RE = 98,
  NPT_EXCHANGE_AWARD = 99,
  NPT_BATTLE_MATCH_RESULT = 100,
  NPT_BATTLE_MATCH_PREPARE = 101,
  NPT_GET_BATTLE_MATCH_RANK = 102,
  NPT_CHANGE_ZONE_RESPONSE = 103,
  NPT_ROAM_ZHAOJI = 104,
  NPT_ROAM_ZHAOJI_INFO = 105,
  NPT_ROAM_INST_RESULT = 106,
  NPT_REQ_BACKFLOW_DATA = 107,
  NPT_REQ_BACKFLOW_DATA_RE = 108,
  NPT_SHARE_BACKFLOW_CODE = 109,
  NPT_RECE_INVITE_AWARD = 110,
  NPT_RECE_INVITE_AWARD_RE = 111,
  NPT_RECE_CONVENE_AWARD = 112,
  NPT_RECE_CONVENE_AWARD_RE = 113,
  NPT_RECE_BACKFLOW_AWARD = 114,
  NPT_RECE_BACKFLOW_AWARD_RE = 115,
  NPT_RESET_DOUBLERECHAGE = 116,
  NPT_SHARE_BACKFLOW_CODE_RE = 117
};
bool NET_PROTOCBUF_TYPE_IsValid(int value);
const NET_PROTOCBUF_TYPE NET_PROTOCBUF_TYPE_MIN = NPT_TEST;
const NET_PROTOCBUF_TYPE NET_PROTOCBUF_TYPE_MAX = NPT_SHARE_BACKFLOW_CODE_RE;
const int NET_PROTOCBUF_TYPE_ARRAYSIZE = NET_PROTOCBUF_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* NET_PROTOCBUF_TYPE_descriptor();
inline const ::std::string& NET_PROTOCBUF_TYPE_Name(NET_PROTOCBUF_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    NET_PROTOCBUF_TYPE_descriptor(), value);
}
inline bool NET_PROTOCBUF_TYPE_Parse(
    const ::std::string& name, NET_PROTOCBUF_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NET_PROTOCBUF_TYPE>(
    NET_PROTOCBUF_TYPE_descriptor(), name, value);
}
enum C2S_GS_PROTOC_TYPE {
  GPROTOC_BEGIN_T = 130,
  GPROTOC_EQUIP_GRADE_AND_QUALITY_UP = 131,
  GPROTOC_CREATE_CORPS = 132,
  GPROTOC_EQUIP_ATTACH_GEM = 133,
  GPROTOC_EQUIP_DETACH_GEM = 134,
  GPROTOC_EQUIP_XILIAN = 135,
  GPROTOC_EQUIP_LIANXING = 136,
  GPROTOC_EQUIP_TRANSFER = 137,
  GPROTOC_ITEM_COMBINE = 138,
  GPROTOC_NATION_ESCORT_OP = 139,
  GPROTOC_GET_BROADCAST_BUFF = 140,
  GPROTOC_SET_PK_SETTING = 141,
  GPROTOC_NATION_DONATE = 142,
  GPROTOC_AUTO_REWARD_OP = 143,
  GPROTOC_GET_ACHIEVEMENT_AWARD = 144,
  GPROTOC_MOUNT_OPERATION = 145,
  GPROTOC_GUAJI = 146,
  GPROTOC_VIP_OPERATION = 147,
  GPROTOC_AUTO_COMBAT_CONFIG = 148,
  GPROTOC_UPGRADE_BINGFA = 149,
  GPROTOC_START_ATTACK_LOOP = 150,
  GPROTOC_CG_PLAYER_OP = 151,
  GPROTOC_WINE_SITDOWN = 152,
  GPROTOC_CANCEL_ACTION = 153,
  GPROTOC_ESCORT_CHANGE_SPEED = 154,
  GPROTOC_MINIGAME_OPERATE = 155,
  GPROTOC_CARD_OPERATE = 156,
  GPROTOC_STUNT_CONFIG = 157,
  GPROTOC_BLACK_SHOP_COMMAND = 158,
  GPROTOC_DUKE_COMMAND = 159,
  GPROTOC_HERO_TRIAL = 160,
  GPROTOC_CORP_CONFIG = 161,
  GPROTOC_ENTER_INSTANCE = 162,
  GPROTOC_BUY_INSTANCE = 163,
  GPROTOC_BUY_BACKPACK = 164,
  GPROTOC_EQUIP_OPEN_ADDON = 165,
  GPROTOC_JIEYUN_SKILL = 166,
  GPROTOC_EQUIP_TRAIN = 167,
  GPROTOC_EQUIP_SWITCH_SURFACE = 168,
  GPROTOC_CORP_FARM_OP = 169,
  GPROTOC_CLIMB_TOWER_OP = 170,
  GPROTOC_GS_PING = 171,
  GPROTOC_EQUIP_REFINE = 172,
  GPROTOC_GET_LIST_INFO = 173,
  GPROTOC_CAMP_FIRE = 174,
  GPROTOC_CLIMBTOWER_SHOP_COMMAND = 175,
  GPROTOC_ASK_HELP = 176,
  GPROTOC_EQUIP_ATTACH_GEM_UPGRADE = 177,
  GPROTOC_FIND_WAY = 178,
  GPROTOC_CHANGE_MIRROR = 179,
  GPROTOC_BUY_FORCE = 180,
  GPROTOC_PLANT = 181,
  GPROTOC_EQUIP_CHAIJIE = 182,
  GPROTOC_CLIENT_PRINT_INFO = 183,
  GPROTOC_RETRIEVE_OP = 184,
  GPROTOC_FASHION_MODE = 185,
  GPROTOC_SWEEP_INSTANCE = 186,
  GPROTOC_GET_RED_PACKET = 187,
  GPROTOC_COMMON_OPERATION = 188,
  GPROTOC_COMPENSATION = 189,
  GPROTOC_UPGRADE_CHARIOT = 190,
  GPROTOC_WUHUN_OPEN = 191,
  GPROTOC_WUHUN_UPGRADE = 192,
  GPROTOC_RENT_CHARIOT = 193,
  GPROTOC_TRANSFORM_CHARIOT = 194,
  GPROTOC_FIX_CHARIOT = 195,
  GPROTOC_USE_ITEM_BATCH = 196,
  GPROTOC_STRATEGY_LEVEL_UP = 197,
  GPROTOC_STRATEGY_STAR_UP = 198,
  GPROTOC_WINE_GAME = 199,
  GPROTOC_SURFACE_TRAIN = 200,
  GPROTOC_REGION_WAR_CHEER = 201,
  GPROTOC_LANTERN = 202,
  GPROTOC_EXCHANGE_ACTIVITY = 203,
  GPROTOC_EQUIP_ATTACH_MINGWEN = 204,
  GPROTOC_EQUIP_DEATTACH_MINGWEN = 205,
  GPROTOC_MAGIC_WEAPON_TRAIN = 206,
  GPROTOC_MAGIC_WEAPON_SUMMON = 207,
  GPROTOC_MAGIC_WEAPON_REFINE = 208,
  GPROTOC_PET_OPERATE = 209,
  GPROTOC_DECOMPOSE_BATCH = 210,
  GPROTOC_CHANGE_PROF = 211,
  GPROTOC_CRACK_WUZHUANG = 212,
  GPROTOC_ROAM = 213,
  GPROTOC_DIAMOND_REPU_EXCHANGE = 214,
  GPROTOC_EQUIP_SOUL = 215,
  GPROTOC_QUERY_ROAM_BATTLE_TARGET = 216,
  GPROTOC_ROAM_ZHAOJI = 217,
  GPROTOC_RICHMAN_OPERATE = 218,
  GPROTOC_GENERAL_SOUL_OP = 219,
  GPROTOC_GENERAL_SOUL_EQUIP_OP = 220,
  GPROTOC_END_T = 499
};
bool C2S_GS_PROTOC_TYPE_IsValid(int value);
const C2S_GS_PROTOC_TYPE C2S_GS_PROTOC_TYPE_MIN = GPROTOC_BEGIN_T;
const C2S_GS_PROTOC_TYPE C2S_GS_PROTOC_TYPE_MAX = GPROTOC_END_T;
const int C2S_GS_PROTOC_TYPE_ARRAYSIZE = C2S_GS_PROTOC_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* C2S_GS_PROTOC_TYPE_descriptor();
inline const ::std::string& C2S_GS_PROTOC_TYPE_Name(C2S_GS_PROTOC_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    C2S_GS_PROTOC_TYPE_descriptor(), value);
}
inline bool C2S_GS_PROTOC_TYPE_Parse(
    const ::std::string& name, C2S_GS_PROTOC_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<C2S_GS_PROTOC_TYPE>(
    C2S_GS_PROTOC_TYPE_descriptor(), name, value);
}
enum use_money_type {
  USE_M_BIND = 1,
  USE_M_TRADE = 2,
  USE_M_MIX = 3
};
bool use_money_type_IsValid(int value);
const use_money_type use_money_type_MIN = USE_M_BIND;
const use_money_type use_money_type_MAX = USE_M_MIX;
const int use_money_type_ARRAYSIZE = use_money_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* use_money_type_descriptor();
inline const ::std::string& use_money_type_Name(use_money_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    use_money_type_descriptor(), value);
}
inline bool use_money_type_Parse(
    const ::std::string& name, use_money_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<use_money_type>(
    use_money_type_descriptor(), name, value);
}
enum STUNT_CONFIG_TYPE {
  SCT_UNLOCK_RUNE = 0,
  SCT_SET_RUNE_SET = 1,
  SCT_ACTIVE_RUNE = 2,
  SCT_UPGRADE_RUNE_PROP = 3,
  SCT_RESET_RUNE_PROP = 4,
  SCT_UPGRADE_RUNE_SET = 5
};
bool STUNT_CONFIG_TYPE_IsValid(int value);
const STUNT_CONFIG_TYPE STUNT_CONFIG_TYPE_MIN = SCT_UNLOCK_RUNE;
const STUNT_CONFIG_TYPE STUNT_CONFIG_TYPE_MAX = SCT_UPGRADE_RUNE_SET;
const int STUNT_CONFIG_TYPE_ARRAYSIZE = STUNT_CONFIG_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* STUNT_CONFIG_TYPE_descriptor();
inline const ::std::string& STUNT_CONFIG_TYPE_Name(STUNT_CONFIG_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    STUNT_CONFIG_TYPE_descriptor(), value);
}
inline bool STUNT_CONFIG_TYPE_Parse(
    const ::std::string& name, STUNT_CONFIG_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<STUNT_CONFIG_TYPE>(
    STUNT_CONFIG_TYPE_descriptor(), name, value);
}
enum S2C_GS_PROTOC_TYPE {
  type_gp_self_enter_world = 506,
  type_gp_scene_info = 507,
  type_gp_player_definite_info = 508,
  type_gp_equip_refresh_result = 509,
  type_gp_equip_starup_result = 510,
  type_gp_revive_times_info = 511,
  type_gp_item_combine_result = 512,
  type_gp_nation_escort_mount = 513,
  type_gp_equip_transfer_result = 514,
  type_gp_pk_man = 515,
  type_gp_fight_back_list = 516,
  type_gp_auto_reward_list = 517,
  type_gp_vip_info = 518,
  type_gp_object_state = 519,
  type_gp_hero_defined_info = 520,
  type_gp_enemy_list = 521,
  type_gp_hero_incre_info = 522,
  type_auto_combat_config = 523,
  type_gp_lottery_prize = 533,
  type_gp_suit_info = 534,
  type_gp_nation_escort_locate = 535,
  type_gp_bingfa_info = 536,
  type_gp_attack_loop = 537,
  type_gp_operation_result = 538,
  type_gp_start_cg = 539,
  type_gp_stop_cg = 540,
  type_gp_escort_speed_state = 541,
  type_gp_wine_info = 542,
  type_gp_minigame_operate_notify = 543,
  type_gp_card_data_notify = 544,
  type_gp_stunt_config_res = 545,
  type_gp_stunt_config = 546,
  type_gp_load_protoc_finish = 547,
  type_gp_blackshop_notify = 548,
  type_gp_duke_notify = 549,
  type_gp_hero_trial_config = 550,
  type_gp_player_crop_config = 551,
  type_gp_transform_state = 552,
  type_gp_object_change_faction = 553,
  type_gp_broadcast_value_change = 554,
  type_gp_net_error_message = 555,
  type_gp_instance_info = 556,
  type_gp_inventory_size = 557,
  type_gp_level_result = 558,
  type_gp_equip_gradeup_result = 559,
  type_gp_ipt_container = 560,
  type_gp_farm_data = 561,
  type_gp_climb_tower = 562,
  type_gp_equip_attach_gem_result = 563,
  type_gp_gs_ping = 564,
  type_gp_equip_refine_result = 565,
  type_gp_level_score = 566,
  type_gp_player_list_info = 567,
  type_gp_level_info = 568,
  type_gp_equip_train_result = 569,
  type_gp_climbtower_magic_shop = 570,
  type_gp_notify_ask_help = 571,
  type_gp_equip_switch_surface_result = 572,
  type_gp_gain_surface = 573,
  type_gp_equip_attach_gem_upgrade_result = 574,
  type_gp_find_way_result = 575,
  type_gp_equip_detach_gem_result = 576,
  type_gp_nation_officer_state = 577,
  type_gp_npc_info = 578,
  type_gp_easy_mall_service_end = 579,
  type_gp_notify_plant = 580,
  type_gp_notify_cash_change = 581,
  type_gp_notify_monitor_blood = 582,
  type_gp_notify_prop_ready = 583,
  type_gp_retrieve_info = 584,
  type_gp_red_packet = 585,
  type_gp_secure_idip = 586,
  type_gp_gs_error_message = 587,
  type_gp_multi_exp = 588,
  type_gp_refuse_fight = 589,
  type_gp_deliver_compensation = 590,
  type_gp_send_level_sorted_info = 591,
  type_gp_wuhun_info = 592,
  type_gp_send_level_info_with_time = 593,
  type_gp_notify_strategis = 594,
  type_gp_notify_strategy_levelup = 595,
  type_gp_notify_strategy_starup = 596,
  type_gp_notify_surface_train = 597,
  type_gp_punishment_time = 598,
  type_gp_faction_battle_player_info = 599,
  type_gp_equip_attach_mingwen_result = 600,
  type_gp_equip_detach_mingwen_result = 601,
  type_gp_notify_magic_weapon = 602,
  type_gp_notify_magic_weapon_train_result = 603,
  type_gp_notify_magic_weapon_summon_result = 604,
  type_gp_notify_magic_weapon_refine_result = 605,
  type_gp_notify_magic_weapon_change = 606,
  type_gp_pet_list_info = 607,
  type_gp_pet_info = 608,
  type_gp_pet_operate_re = 609,
  type_gp_level_extern_info = 610,
  type_gp_def_buff_broken = 611,
  type_gp_pet_object_fight = 613,
  type_gp_old_prof_skill_level = 614,
  type_gp_equip_soul_result = 615,
  type_gp_crack_wuzhuang_result = 616,
  type_gp_roam_battle_achievement = 617,
  type_gp_roam_zhaoji = 618,
  type_gp_richman_operate_re = 619,
  type_gp_richman_data = 620,
  type_gp_hero_event = 621,
  type_gp_general_soul = 622,
  type_gp_gain_general_soul = 623,
  type_gp_notify_general_soul = 624,
  type_gp_synthetize_result = 625,
  type_gp_dynamic_move_map = 626,
  type_gp_level_object_info = 627,
  type_gp_self_leave_scene = 628,
  type_gp_self_misc_property = 629,
  GP_END_T = 700
};
bool S2C_GS_PROTOC_TYPE_IsValid(int value);
const S2C_GS_PROTOC_TYPE S2C_GS_PROTOC_TYPE_MIN = type_gp_self_enter_world;
const S2C_GS_PROTOC_TYPE S2C_GS_PROTOC_TYPE_MAX = GP_END_T;
const int S2C_GS_PROTOC_TYPE_ARRAYSIZE = S2C_GS_PROTOC_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_GS_PROTOC_TYPE_descriptor();
inline const ::std::string& S2C_GS_PROTOC_TYPE_Name(S2C_GS_PROTOC_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_GS_PROTOC_TYPE_descriptor(), value);
}
inline bool S2C_GS_PROTOC_TYPE_Parse(
    const ::std::string& name, S2C_GS_PROTOC_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_GS_PROTOC_TYPE>(
    S2C_GS_PROTOC_TYPE_descriptor(), name, value);
}
// ===================================================================

class a3d_pos : public ::google::protobuf::Message {
 public:
  a3d_pos();
  virtual ~a3d_pos();

  a3d_pos(const a3d_pos& from);

  inline a3d_pos& operator=(const a3d_pos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const a3d_pos& default_instance();

  void Swap(a3d_pos* other);

  // implements Message ----------------------------------------------

  a3d_pos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const a3d_pos& from);
  void MergeFrom(const a3d_pos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float z = 2;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 2;
  inline float z() const;
  inline void set_z(float value);

  // optional float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:PB.a3d_pos)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float z_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static a3d_pos* default_instance_;
};
// -------------------------------------------------------------------

class player_id_name : public ::google::protobuf::Message {
 public:
  player_id_name();
  virtual ~player_id_name();

  player_id_name(const player_id_name& from);

  inline player_id_name& operator=(const player_id_name& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_id_name& default_instance();

  void Swap(player_id_name* other);

  // implements Message ----------------------------------------------

  player_id_name* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_id_name& from);
  void MergeFrom(const player_id_name& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PB.player_id_name)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_id_name* default_instance_;
};
// -------------------------------------------------------------------

class general_list_item_data : public ::google::protobuf::Message {
 public:
  general_list_item_data();
  virtual ~general_list_item_data();

  general_list_item_data(const general_list_item_data& from);

  inline general_list_item_data& operator=(const general_list_item_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const general_list_item_data& default_instance();

  void Swap(general_list_item_data* other);

  // implements Message ----------------------------------------------

  general_list_item_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const general_list_item_data& from);
  void MergeFrom(const general_list_item_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional bool locked = 3;
  inline bool has_locked() const;
  inline void clear_locked();
  static const int kLockedFieldNumber = 3;
  inline bool locked() const;
  inline void set_locked(bool value);

  // @@protoc_insertion_point(class_scope:PB.general_list.item_data)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_locked();
  inline void clear_has_locked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 star_;
  bool locked_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static general_list_item_data* default_instance_;
};
// -------------------------------------------------------------------

class general_list : public ::google::protobuf::Message {
 public:
  general_list();
  virtual ~general_list();

  general_list(const general_list& from);

  inline general_list& operator=(const general_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const general_list& default_instance();

  void Swap(general_list* other);

  // implements Message ----------------------------------------------

  general_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const general_list& from);
  void MergeFrom(const general_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef general_list_item_data item_data;

  // accessors -------------------------------------------------------

  // repeated .PB.general_list.item_data item_list = 1;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 1;
  inline const ::PB::general_list_item_data& item_list(int index) const;
  inline ::PB::general_list_item_data* mutable_item_list(int index);
  inline ::PB::general_list_item_data* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::general_list_item_data >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::general_list_item_data >*
      mutable_item_list();

  // @@protoc_insertion_point(class_scope:PB.general_list)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::general_list_item_data > item_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static general_list* default_instance_;
};
// -------------------------------------------------------------------

class simple_list : public ::google::protobuf::Message {
 public:
  simple_list();
  virtual ~simple_list();

  simple_list(const simple_list& from);

  inline simple_list& operator=(const simple_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const simple_list& default_instance();

  void Swap(simple_list* other);

  // implements Message ----------------------------------------------

  simple_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const simple_list& from);
  void MergeFrom(const simple_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int64 key() const;
  inline void set_key(::google::protobuf::int64 value);

  // optional int64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PB.simple_list)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 key_;
  ::google::protobuf::int64 value_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static simple_list* default_instance_;
};
// -------------------------------------------------------------------

class test_data : public ::google::protobuf::Message {
 public:
  test_data();
  virtual ~test_data();

  test_data(const test_data& from);

  inline test_data& operator=(const test_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const test_data& default_instance();

  void Swap(test_data* other);

  // implements Message ----------------------------------------------

  test_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const test_data& from);
  void MergeFrom(const test_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_TEST_DATA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // repeated int64 params = 2;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 2;
  inline ::google::protobuf::int64 params(int index) const;
  inline void set_params(int index, ::google::protobuf::int64 value);
  inline void add_params(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      params() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_params();

  // optional int32 param2 = 3;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 3;
  inline ::google::protobuf::int32 param2() const;
  inline void set_param2(::google::protobuf::int32 value);

  // optional bytes info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const void* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:PB.test_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > params_;
  int type_;
  ::google::protobuf::int32 param2_;
  ::std::string* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static test_data* default_instance_;
};
// -------------------------------------------------------------------

class other_player_profile_from_gs : public ::google::protobuf::Message {
 public:
  other_player_profile_from_gs();
  virtual ~other_player_profile_from_gs();

  other_player_profile_from_gs(const other_player_profile_from_gs& from);

  inline other_player_profile_from_gs& operator=(const other_player_profile_from_gs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const other_player_profile_from_gs& default_instance();

  void Swap(other_player_profile_from_gs* other);

  // implements Message ----------------------------------------------

  other_player_profile_from_gs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const other_player_profile_from_gs& from);
  void MergeFrom(const other_player_profile_from_gs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 achievement_grade = 1;
  inline bool has_achievement_grade() const;
  inline void clear_achievement_grade();
  static const int kAchievementGradeFieldNumber = 1;
  inline ::google::protobuf::uint32 achievement_grade() const;
  inline void set_achievement_grade(::google::protobuf::uint32 value);

  // optional uint32 achievement_count = 2;
  inline bool has_achievement_count() const;
  inline void clear_achievement_count();
  static const int kAchievementCountFieldNumber = 2;
  inline ::google::protobuf::uint32 achievement_count() const;
  inline void set_achievement_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.other_player_profile_from_gs)
 private:
  inline void set_has_achievement_grade();
  inline void clear_has_achievement_grade();
  inline void set_has_achievement_count();
  inline void clear_has_achievement_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 achievement_grade_;
  ::google::protobuf::uint32 achievement_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static other_player_profile_from_gs* default_instance_;
};
// -------------------------------------------------------------------

class corp_chariot_chariot_info : public ::google::protobuf::Message {
 public:
  corp_chariot_chariot_info();
  virtual ~corp_chariot_chariot_info();

  corp_chariot_chariot_info(const corp_chariot_chariot_info& from);

  inline corp_chariot_chariot_info& operator=(const corp_chariot_chariot_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corp_chariot_chariot_info& default_instance();

  void Swap(corp_chariot_chariot_info* other);

  // implements Message ----------------------------------------------

  corp_chariot_chariot_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corp_chariot_chariot_info& from);
  void MergeFrom(const corp_chariot_chariot_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 exp = 1;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional .PB.player_id_name driver = 2;
  inline bool has_driver() const;
  inline void clear_driver();
  static const int kDriverFieldNumber = 2;
  inline const ::PB::player_id_name& driver() const;
  inline ::PB::player_id_name* mutable_driver();
  inline ::PB::player_id_name* release_driver();
  inline void set_allocated_driver(::PB::player_id_name* driver);

  // optional int32 rent_timestamp = 3;
  inline bool has_rent_timestamp() const;
  inline void clear_rent_timestamp();
  static const int kRentTimestampFieldNumber = 3;
  inline ::google::protobuf::int32 rent_timestamp() const;
  inline void set_rent_timestamp(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 tid = 5;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 5;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional bool is_upgrade = 7;
  inline bool has_is_upgrade() const;
  inline void clear_is_upgrade();
  static const int kIsUpgradeFieldNumber = 7;
  inline bool is_upgrade() const;
  inline void set_is_upgrade(bool value);

  // @@protoc_insertion_point(class_scope:PB.corp_chariot.chariot_info)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_driver();
  inline void clear_has_driver();
  inline void set_has_rent_timestamp();
  inline void clear_has_rent_timestamp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_is_upgrade();
  inline void clear_has_is_upgrade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 exp_;
  ::PB::player_id_name* driver_;
  ::google::protobuf::int32 rent_timestamp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 tid_;
  bool is_upgrade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corp_chariot_chariot_info* default_instance_;
};
// -------------------------------------------------------------------

class corp_chariot : public ::google::protobuf::Message {
 public:
  corp_chariot();
  virtual ~corp_chariot();

  corp_chariot(const corp_chariot& from);

  inline corp_chariot& operator=(const corp_chariot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corp_chariot& default_instance();

  void Swap(corp_chariot* other);

  // implements Message ----------------------------------------------

  corp_chariot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corp_chariot& from);
  void MergeFrom(const corp_chariot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef corp_chariot_chariot_info chariot_info;

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated .PB.corp_chariot.chariot_info chariots = 2;
  inline int chariots_size() const;
  inline void clear_chariots();
  static const int kChariotsFieldNumber = 2;
  inline const ::PB::corp_chariot_chariot_info& chariots(int index) const;
  inline ::PB::corp_chariot_chariot_info* mutable_chariots(int index);
  inline ::PB::corp_chariot_chariot_info* add_chariots();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_chariot_chariot_info >&
      chariots() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::corp_chariot_chariot_info >*
      mutable_chariots();

  // @@protoc_insertion_point(class_scope:PB.corp_chariot)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::corp_chariot_chariot_info > chariots_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corp_chariot* default_instance_;
};
// -------------------------------------------------------------------

class corp_repu : public ::google::protobuf::Message {
 public:
  corp_repu();
  virtual ~corp_repu();

  corp_repu(const corp_repu& from);

  inline corp_repu& operator=(const corp_repu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corp_repu& default_instance();

  void Swap(corp_repu* other);

  // implements Message ----------------------------------------------

  corp_repu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corp_repu& from);
  void MergeFrom(const corp_repu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int64 key() const;
  inline void set_key(::google::protobuf::int64 value);

  // optional int64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // optional int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.corp_repu)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 key_;
  ::google::protobuf::int64 value_;
  ::google::protobuf::int64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corp_repu* default_instance_;
};
// -------------------------------------------------------------------

class ipt_mirror_info : public ::google::protobuf::Message {
 public:
  ipt_mirror_info();
  virtual ~ipt_mirror_info();

  ipt_mirror_info(const ipt_mirror_info& from);

  inline ipt_mirror_info& operator=(const ipt_mirror_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ipt_mirror_info& default_instance();

  void Swap(ipt_mirror_info* other);

  // implements Message ----------------------------------------------

  ipt_mirror_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ipt_mirror_info& from);
  void MergeFrom(const ipt_mirror_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mirrorid = 1;
  inline bool has_mirrorid() const;
  inline void clear_mirrorid();
  static const int kMirroridFieldNumber = 1;
  inline ::google::protobuf::uint32 mirrorid() const;
  inline void set_mirrorid(::google::protobuf::uint32 value);

  // required .PB.MIRROR_STATE state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::PB::MIRROR_STATE state() const;
  inline void set_state(::PB::MIRROR_STATE value);

  // optional uint32 create_time = 3;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.ipt_mirror_info)
 private:
  inline void set_has_mirrorid();
  inline void clear_has_mirrorid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_create_time();
  inline void clear_has_create_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mirrorid_;
  int state_;
  ::google::protobuf::uint32 create_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static ipt_mirror_info* default_instance_;
};
// -------------------------------------------------------------------

class zhaojiling_info : public ::google::protobuf::Message {
 public:
  zhaojiling_info();
  virtual ~zhaojiling_info();

  zhaojiling_info(const zhaojiling_info& from);

  inline zhaojiling_info& operator=(const zhaojiling_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const zhaojiling_info& default_instance();

  void Swap(zhaojiling_info* other);

  // implements Message ----------------------------------------------

  zhaojiling_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const zhaojiling_info& from);
  void MergeFrom(const zhaojiling_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef zhaojiling_info_ZHAOJI_TYPE ZHAOJI_TYPE;
  static const ZHAOJI_TYPE ZT_ITEM = zhaojiling_info_ZHAOJI_TYPE_ZT_ITEM;
  static const ZHAOJI_TYPE ZT_NATION_WAR_START = zhaojiling_info_ZHAOJI_TYPE_ZT_NATION_WAR_START;
  static const ZHAOJI_TYPE ZT_NATION_WAR_ROLE = zhaojiling_info_ZHAOJI_TYPE_ZT_NATION_WAR_ROLE;
  static const ZHAOJI_TYPE ZT_SUCCOR = zhaojiling_info_ZHAOJI_TYPE_ZT_SUCCOR;
  static inline bool ZHAOJI_TYPE_IsValid(int value) {
    return zhaojiling_info_ZHAOJI_TYPE_IsValid(value);
  }
  static const ZHAOJI_TYPE ZHAOJI_TYPE_MIN =
    zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_MIN;
  static const ZHAOJI_TYPE ZHAOJI_TYPE_MAX =
    zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_MAX;
  static const int ZHAOJI_TYPE_ARRAYSIZE =
    zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ZHAOJI_TYPE_descriptor() {
    return zhaojiling_info_ZHAOJI_TYPE_descriptor();
  }
  static inline const ::std::string& ZHAOJI_TYPE_Name(ZHAOJI_TYPE value) {
    return zhaojiling_info_ZHAOJI_TYPE_Name(value);
  }
  static inline bool ZHAOJI_TYPE_Parse(const ::std::string& name,
      ZHAOJI_TYPE* value) {
    return zhaojiling_info_ZHAOJI_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline ::google::protobuf::uint64 src() const;
  inline void set_src(::google::protobuf::uint64 value);

  // optional bytes src_name = 2;
  inline bool has_src_name() const;
  inline void clear_src_name();
  static const int kSrcNameFieldNumber = 2;
  inline const ::std::string& src_name() const;
  inline void set_src_name(const ::std::string& value);
  inline void set_src_name(const char* value);
  inline void set_src_name(const void* value, size_t size);
  inline ::std::string* mutable_src_name();
  inline ::std::string* release_src_name();
  inline void set_allocated_src_name(::std::string* src_name);

  // optional bytes reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const void* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional int32 delay_time = 4;
  inline bool has_delay_time() const;
  inline void clear_delay_time();
  static const int kDelayTimeFieldNumber = 4;
  inline ::google::protobuf::int32 delay_time() const;
  inline void set_delay_time(::google::protobuf::int32 value);

  // required int32 scene_tag = 5;
  inline bool has_scene_tag() const;
  inline void clear_scene_tag();
  static const int kSceneTagFieldNumber = 5;
  inline ::google::protobuf::int32 scene_tag() const;
  inline void set_scene_tag(::google::protobuf::int32 value);

  // required .PB.a3d_pos pos = 6;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 6;
  inline const ::PB::a3d_pos& pos() const;
  inline ::PB::a3d_pos* mutable_pos();
  inline ::PB::a3d_pos* release_pos();
  inline void set_allocated_pos(::PB::a3d_pos* pos);

  // optional int32 random_radius = 7;
  inline bool has_random_radius() const;
  inline void clear_random_radius();
  static const int kRandomRadiusFieldNumber = 7;
  inline ::google::protobuf::int32 random_radius() const;
  inline void set_random_radius(::google::protobuf::int32 value);

  // optional int32 zhaojiling_id = 8;
  inline bool has_zhaojiling_id() const;
  inline void clear_zhaojiling_id();
  static const int kZhaojilingIdFieldNumber = 8;
  inline ::google::protobuf::int32 zhaojiling_id() const;
  inline void set_zhaojiling_id(::google::protobuf::int32 value);

  // optional int32 src_corp_position = 9;
  inline bool has_src_corp_position() const;
  inline void clear_src_corp_position();
  static const int kSrcCorpPositionFieldNumber = 9;
  inline ::google::protobuf::int32 src_corp_position() const;
  inline void set_src_corp_position(::google::protobuf::int32 value);

  // optional int32 src_nation_position = 10;
  inline bool has_src_nation_position() const;
  inline void clear_src_nation_position();
  static const int kSrcNationPositionFieldNumber = 10;
  inline ::google::protobuf::int32 src_nation_position() const;
  inline void set_src_nation_position(::google::protobuf::int32 value);

  // optional int32 mirror_id = 11;
  inline bool has_mirror_id() const;
  inline void clear_mirror_id();
  static const int kMirrorIdFieldNumber = 11;
  inline ::google::protobuf::int32 mirror_id() const;
  inline void set_mirror_id(::google::protobuf::int32 value);

  // optional .PB.zhaojiling_info.ZHAOJI_TYPE type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::PB::zhaojiling_info_ZHAOJI_TYPE type() const;
  inline void set_type(::PB::zhaojiling_info_ZHAOJI_TYPE value);

  // optional int32 param1 = 13;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 13;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // optional int32 inst_tid = 14;
  inline bool has_inst_tid() const;
  inline void clear_inst_tid();
  static const int kInstTidFieldNumber = 14;
  inline ::google::protobuf::int32 inst_tid() const;
  inline void set_inst_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.zhaojiling_info)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_src_name();
  inline void clear_has_src_name();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_delay_time();
  inline void clear_has_delay_time();
  inline void set_has_scene_tag();
  inline void clear_has_scene_tag();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_random_radius();
  inline void clear_has_random_radius();
  inline void set_has_zhaojiling_id();
  inline void clear_has_zhaojiling_id();
  inline void set_has_src_corp_position();
  inline void clear_has_src_corp_position();
  inline void set_has_src_nation_position();
  inline void clear_has_src_nation_position();
  inline void set_has_mirror_id();
  inline void clear_has_mirror_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_inst_tid();
  inline void clear_has_inst_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 src_;
  ::std::string* src_name_;
  ::std::string* reason_;
  ::google::protobuf::int32 delay_time_;
  ::google::protobuf::int32 scene_tag_;
  ::PB::a3d_pos* pos_;
  ::google::protobuf::int32 random_radius_;
  ::google::protobuf::int32 zhaojiling_id_;
  ::google::protobuf::int32 src_corp_position_;
  ::google::protobuf::int32 src_nation_position_;
  ::google::protobuf::int32 mirror_id_;
  int type_;
  ::google::protobuf::int32 param1_;
  ::google::protobuf::int32 inst_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static zhaojiling_info* default_instance_;
};
// -------------------------------------------------------------------

class corps_member : public ::google::protobuf::Message {
 public:
  corps_member();
  virtual ~corps_member();

  corps_member(const corps_member& from);

  inline corps_member& operator=(const corps_member& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corps_member& default_instance();

  void Swap(corps_member* other);

  // implements Message ----------------------------------------------

  corps_member* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corps_member& from);
  void MergeFrom(const corps_member& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_MEMBER];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required int32 pos = 3 [default = 0];
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 join_time = 5;
  inline bool has_join_time() const;
  inline void clear_join_time();
  static const int kJoinTimeFieldNumber = 5;
  inline ::google::protobuf::int32 join_time() const;
  inline void set_join_time(::google::protobuf::int32 value);

  // required int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 idphoto = 7;
  inline bool has_idphoto() const;
  inline void clear_idphoto();
  static const int kIdphotoFieldNumber = 7;
  inline ::google::protobuf::int32 idphoto() const;
  inline void set_idphoto(::google::protobuf::int32 value);

  // optional int64 contri = 10;
  inline bool has_contri() const;
  inline void clear_contri();
  static const int kContriFieldNumber = 10;
  inline ::google::protobuf::int64 contri() const;
  inline void set_contri(::google::protobuf::int64 value);

  // optional int64 contri_cumulate = 11;
  inline bool has_contri_cumulate() const;
  inline void clear_contri_cumulate();
  static const int kContriCumulateFieldNumber = 11;
  inline ::google::protobuf::int64 contri_cumulate() const;
  inline void set_contri_cumulate(::google::protobuf::int64 value);

  // optional int32 leave_time = 12;
  inline bool has_leave_time() const;
  inline void clear_leave_time();
  static const int kLeaveTimeFieldNumber = 12;
  inline ::google::protobuf::int32 leave_time() const;
  inline void set_leave_time(::google::protobuf::int32 value);

  // required int32 prof = 13;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 13;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 online_time_today = 14;
  inline bool has_online_time_today() const;
  inline void clear_online_time_today();
  static const int kOnlineTimeTodayFieldNumber = 14;
  inline ::google::protobuf::int32 online_time_today() const;
  inline void set_online_time_today(::google::protobuf::int32 value);

  // repeated int32 boss_feed_reward = 15;
  inline int boss_feed_reward_size() const;
  inline void clear_boss_feed_reward();
  static const int kBossFeedRewardFieldNumber = 15;
  inline ::google::protobuf::int32 boss_feed_reward(int index) const;
  inline void set_boss_feed_reward(int index, ::google::protobuf::int32 value);
  inline void add_boss_feed_reward(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      boss_feed_reward() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_boss_feed_reward();

  // repeated int32 elixir = 16;
  inline int elixir_size() const;
  inline void clear_elixir();
  static const int kElixirFieldNumber = 16;
  inline ::google::protobuf::int32 elixir(int index) const;
  inline void set_elixir(int index, ::google::protobuf::int32 value);
  inline void add_elixir(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      elixir() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_elixir();

  // optional int64 fightcapacity = 17;
  inline bool has_fightcapacity() const;
  inline void clear_fightcapacity();
  static const int kFightcapacityFieldNumber = 17;
  inline ::google::protobuf::int64 fightcapacity() const;
  inline void set_fightcapacity(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.corps_member)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_join_time();
  inline void clear_has_join_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_idphoto();
  inline void clear_has_idphoto();
  inline void set_has_contri();
  inline void clear_has_contri();
  inline void set_has_contri_cumulate();
  inline void clear_has_contri_cumulate();
  inline void set_has_leave_time();
  inline void clear_has_leave_time();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_online_time_today();
  inline void clear_has_online_time_today();
  inline void set_has_fightcapacity();
  inline void clear_has_fightcapacity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 pos_;
  ::std::string* name_;
  ::google::protobuf::int32 join_time_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int64 contri_;
  ::google::protobuf::int32 idphoto_;
  ::google::protobuf::int32 leave_time_;
  ::google::protobuf::int64 contri_cumulate_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 online_time_today_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > boss_feed_reward_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > elixir_;
  ::google::protobuf::int64 fightcapacity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corps_member* default_instance_;
};
// -------------------------------------------------------------------

class corps_apply_t : public ::google::protobuf::Message {
 public:
  corps_apply_t();
  virtual ~corps_apply_t();

  corps_apply_t(const corps_apply_t& from);

  inline corps_apply_t& operator=(const corps_apply_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corps_apply_t& default_instance();

  void Swap(corps_apply_t* other);

  // implements Message ----------------------------------------------

  corps_apply_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corps_apply_t& from);
  void MergeFrom(const corps_apply_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int64 apply_time = 3;
  inline bool has_apply_time() const;
  inline void clear_apply_time();
  static const int kApplyTimeFieldNumber = 3;
  inline ::google::protobuf::int64 apply_time() const;
  inline void set_apply_time(::google::protobuf::int64 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 prof = 5;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 5;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.corps_apply_t)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_apply_time();
  inline void clear_has_apply_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_prof();
  inline void clear_has_prof();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  ::std::string* name_;
  ::google::protobuf::int64 apply_time_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 prof_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corps_apply_t* default_instance_;
};
// -------------------------------------------------------------------

class corp_attribute_corp_skill_room : public ::google::protobuf::Message {
 public:
  corp_attribute_corp_skill_room();
  virtual ~corp_attribute_corp_skill_room();

  corp_attribute_corp_skill_room(const corp_attribute_corp_skill_room& from);

  inline corp_attribute_corp_skill_room& operator=(const corp_attribute_corp_skill_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corp_attribute_corp_skill_room& default_instance();

  void Swap(corp_attribute_corp_skill_room* other);

  // implements Message ----------------------------------------------

  corp_attribute_corp_skill_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corp_attribute_corp_skill_room& from);
  void MergeFrom(const corp_attribute_corp_skill_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 addon_level = 1;
  inline int addon_level_size() const;
  inline void clear_addon_level();
  static const int kAddonLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 addon_level(int index) const;
  inline void set_addon_level(int index, ::google::protobuf::uint32 value);
  inline void add_addon_level(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      addon_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_addon_level();

  // @@protoc_insertion_point(class_scope:PB.corp_attribute.corp_skill_room)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > addon_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corp_attribute_corp_skill_room* default_instance_;
};
// -------------------------------------------------------------------

class corp_attribute : public ::google::protobuf::Message {
 public:
  corp_attribute();
  virtual ~corp_attribute();

  corp_attribute(const corp_attribute& from);

  inline corp_attribute& operator=(const corp_attribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corp_attribute& default_instance();

  void Swap(corp_attribute* other);

  // implements Message ----------------------------------------------

  corp_attribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corp_attribute& from);
  void MergeFrom(const corp_attribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef corp_attribute_corp_skill_room corp_skill_room;

  // accessors -------------------------------------------------------

  // repeated .PB.corp_attribute.corp_skill_room skill_room = 1;
  inline int skill_room_size() const;
  inline void clear_skill_room();
  static const int kSkillRoomFieldNumber = 1;
  inline const ::PB::corp_attribute_corp_skill_room& skill_room(int index) const;
  inline ::PB::corp_attribute_corp_skill_room* mutable_skill_room(int index);
  inline ::PB::corp_attribute_corp_skill_room* add_skill_room();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_attribute_corp_skill_room >&
      skill_room() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::corp_attribute_corp_skill_room >*
      mutable_skill_room();

  // optional uint32 shop_level = 2 [default = 0];
  inline bool has_shop_level() const;
  inline void clear_shop_level();
  static const int kShopLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 shop_level() const;
  inline void set_shop_level(::google::protobuf::uint32 value);

  // repeated .PB.corp_repu corp_repu = 3;
  inline int corp_repu_size() const;
  inline void clear_corp_repu();
  static const int kCorpRepuFieldNumber = 3;
  inline const ::PB::corp_repu& corp_repu(int index) const;
  inline ::PB::corp_repu* mutable_corp_repu(int index);
  inline ::PB::corp_repu* add_corp_repu();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_repu >&
      corp_repu() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::corp_repu >*
      mutable_corp_repu();

  // repeated .PB.simple_list boss_feed_toplist = 4;
  inline int boss_feed_toplist_size() const;
  inline void clear_boss_feed_toplist();
  static const int kBossFeedToplistFieldNumber = 4;
  inline const ::PB::simple_list& boss_feed_toplist(int index) const;
  inline ::PB::simple_list* mutable_boss_feed_toplist(int index);
  inline ::PB::simple_list* add_boss_feed_toplist();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::simple_list >&
      boss_feed_toplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::simple_list >*
      mutable_boss_feed_toplist();

  // optional .PB.corp_chariot chariot = 5;
  inline bool has_chariot() const;
  inline void clear_chariot();
  static const int kChariotFieldNumber = 5;
  inline const ::PB::corp_chariot& chariot() const;
  inline ::PB::corp_chariot* mutable_chariot();
  inline ::PB::corp_chariot* release_chariot();
  inline void set_allocated_chariot(::PB::corp_chariot* chariot);

  // @@protoc_insertion_point(class_scope:PB.corp_attribute)
 private:
  inline void set_has_shop_level();
  inline void clear_has_shop_level();
  inline void set_has_chariot();
  inline void clear_has_chariot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::corp_attribute_corp_skill_room > skill_room_;
  ::google::protobuf::RepeatedPtrField< ::PB::corp_repu > corp_repu_;
  ::google::protobuf::RepeatedPtrField< ::PB::simple_list > boss_feed_toplist_;
  ::PB::corp_chariot* chariot_;
  ::google::protobuf::uint32 shop_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corp_attribute* default_instance_;
};
// -------------------------------------------------------------------

class corps_struct : public ::google::protobuf::Message {
 public:
  corps_struct();
  virtual ~corps_struct();

  corps_struct(const corps_struct& from);

  inline corps_struct& operator=(const corps_struct& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corps_struct& default_instance();

  void Swap(corps_struct* other);

  // implements Message ----------------------------------------------

  corps_struct* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corps_struct& from);
  void MergeFrom(const corps_struct& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_STRUCT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 create_time = 5;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  inline ::google::protobuf::int32 create_time() const;
  inline void set_create_time(::google::protobuf::int32 value);

  // required int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required uint64 status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::google::protobuf::uint64 status() const;
  inline void set_status(::google::protobuf::uint64 value);

  // optional bytes announce = 8;
  inline bool has_announce() const;
  inline void clear_announce();
  static const int kAnnounceFieldNumber = 8;
  inline const ::std::string& announce() const;
  inline void set_announce(const ::std::string& value);
  inline void set_announce(const char* value);
  inline void set_announce(const void* value, size_t size);
  inline ::std::string* mutable_announce();
  inline ::std::string* release_announce();
  inline void set_allocated_announce(::std::string* announce);

  // optional int64 announce_time = 9 [default = 0];
  inline bool has_announce_time() const;
  inline void clear_announce_time();
  static const int kAnnounceTimeFieldNumber = 9;
  inline ::google::protobuf::int64 announce_time() const;
  inline void set_announce_time(::google::protobuf::int64 value);

  // optional int64 contri = 10 [default = 0];
  inline bool has_contri() const;
  inline void clear_contri();
  static const int kContriFieldNumber = 10;
  inline ::google::protobuf::int64 contri() const;
  inline void set_contri(::google::protobuf::int64 value);

  // optional int64 contri_cumulate = 11 [default = 0];
  inline bool has_contri_cumulate() const;
  inline void clear_contri_cumulate();
  static const int kContriCumulateFieldNumber = 11;
  inline ::google::protobuf::int64 contri_cumulate() const;
  inline void set_contri_cumulate(::google::protobuf::int64 value);

  // optional int64 money = 12 [default = 0];
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 12;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // repeated .PB.corps_apply_t apply = 13;
  inline int apply_size() const;
  inline void clear_apply();
  static const int kApplyFieldNumber = 13;
  inline const ::PB::corps_apply_t& apply(int index) const;
  inline ::PB::corps_apply_t* mutable_apply(int index);
  inline ::PB::corps_apply_t* add_apply();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::corps_apply_t >&
      apply() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::corps_apply_t >*
      mutable_apply();

  // required int32 nation = 14;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 14;
  inline ::google::protobuf::int32 nation() const;
  inline void set_nation(::google::protobuf::int32 value);

  // optional int64 last_resume_time = 15;
  inline bool has_last_resume_time() const;
  inline void clear_last_resume_time();
  static const int kLastResumeTimeFieldNumber = 15;
  inline ::google::protobuf::int64 last_resume_time() const;
  inline void set_last_resume_time(::google::protobuf::int64 value);

  // optional .PB.corp_attribute attr = 16;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 16;
  inline const ::PB::corp_attribute& attr() const;
  inline ::PB::corp_attribute* mutable_attr();
  inline ::PB::corp_attribute* release_attr();
  inline void set_allocated_attr(::PB::corp_attribute* attr);

  // optional float corp_power = 17;
  inline bool has_corp_power() const;
  inline void clear_corp_power();
  static const int kCorpPowerFieldNumber = 17;
  inline float corp_power() const;
  inline void set_corp_power(float value);

  // optional bytes qqgroup_openid = 18;
  inline bool has_qqgroup_openid() const;
  inline void clear_qqgroup_openid();
  static const int kQqgroupOpenidFieldNumber = 18;
  inline const ::std::string& qqgroup_openid() const;
  inline void set_qqgroup_openid(const ::std::string& value);
  inline void set_qqgroup_openid(const char* value);
  inline void set_qqgroup_openid(const void* value, size_t size);
  inline ::std::string* mutable_qqgroup_openid();
  inline ::std::string* release_qqgroup_openid();
  inline void set_allocated_qqgroup_openid(::std::string* qqgroup_openid);

  // optional bytes qqgroup_name = 19;
  inline bool has_qqgroup_name() const;
  inline void clear_qqgroup_name();
  static const int kQqgroupNameFieldNumber = 19;
  inline const ::std::string& qqgroup_name() const;
  inline void set_qqgroup_name(const ::std::string& value);
  inline void set_qqgroup_name(const char* value);
  inline void set_qqgroup_name(const void* value, size_t size);
  inline ::std::string* mutable_qqgroup_name();
  inline ::std::string* release_qqgroup_name();
  inline void set_allocated_qqgroup_name(::std::string* qqgroup_name);

  // optional bytes qqgroup_joinkey = 20;
  inline bool has_qqgroup_joinkey() const;
  inline void clear_qqgroup_joinkey();
  static const int kQqgroupJoinkeyFieldNumber = 20;
  inline const ::std::string& qqgroup_joinkey() const;
  inline void set_qqgroup_joinkey(const ::std::string& value);
  inline void set_qqgroup_joinkey(const char* value);
  inline void set_qqgroup_joinkey(const void* value, size_t size);
  inline ::std::string* mutable_qqgroup_joinkey();
  inline ::std::string* release_qqgroup_joinkey();
  inline void set_allocated_qqgroup_joinkey(::std::string* qqgroup_joinkey);

  // optional int32 login_time = 21;
  inline bool has_login_time() const;
  inline void clear_login_time();
  static const int kLoginTimeFieldNumber = 21;
  inline ::google::protobuf::int32 login_time() const;
  inline void set_login_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.corps_struct)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_announce();
  inline void clear_has_announce();
  inline void set_has_announce_time();
  inline void clear_has_announce_time();
  inline void set_has_contri();
  inline void clear_has_contri();
  inline void set_has_contri_cumulate();
  inline void clear_has_contri_cumulate();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_last_resume_time();
  inline void clear_has_last_resume_time();
  inline void set_has_attr();
  inline void clear_has_attr();
  inline void set_has_corp_power();
  inline void clear_has_corp_power();
  inline void set_has_qqgroup_openid();
  inline void clear_has_qqgroup_openid();
  inline void set_has_qqgroup_name();
  inline void clear_has_qqgroup_name();
  inline void set_has_qqgroup_joinkey();
  inline void clear_has_qqgroup_joinkey();
  inline void set_has_login_time();
  inline void clear_has_login_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 id_;
  ::std::string* name_;
  ::google::protobuf::int32 create_time_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint64 status_;
  ::std::string* announce_;
  ::google::protobuf::int64 announce_time_;
  ::google::protobuf::int64 contri_;
  ::google::protobuf::int64 contri_cumulate_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::RepeatedPtrField< ::PB::corps_apply_t > apply_;
  ::google::protobuf::int64 last_resume_time_;
  ::google::protobuf::int32 nation_;
  float corp_power_;
  ::PB::corp_attribute* attr_;
  ::std::string* qqgroup_openid_;
  ::std::string* qqgroup_name_;
  ::std::string* qqgroup_joinkey_;
  ::google::protobuf::int32 login_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corps_struct* default_instance_;
};
// -------------------------------------------------------------------

class facebook_str : public ::google::protobuf::Message {
 public:
  facebook_str();
  virtual ~facebook_str();

  facebook_str(const facebook_str& from);

  inline facebook_str& operator=(const facebook_str& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const facebook_str& default_instance();

  void Swap(facebook_str* other);

  // implements Message ----------------------------------------------

  facebook_str* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const facebook_str& from);
  void MergeFrom(const facebook_str& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int64 param = 3;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline ::google::protobuf::int64 param() const;
  inline void set_param(::google::protobuf::int64 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes name2 = 5;
  inline bool has_name2() const;
  inline void clear_name2();
  static const int kName2FieldNumber = 5;
  inline const ::std::string& name2() const;
  inline void set_name2(const ::std::string& value);
  inline void set_name2(const char* value);
  inline void set_name2(const void* value, size_t size);
  inline ::std::string* mutable_name2();
  inline ::std::string* release_name2();
  inline void set_allocated_name2(::std::string* name2);

  // optional int32 leave_corps_time = 6;
  inline bool has_leave_corps_time() const;
  inline void clear_leave_corps_time();
  static const int kLeaveCorpsTimeFieldNumber = 6;
  inline ::google::protobuf::int32 leave_corps_time() const;
  inline void set_leave_corps_time(::google::protobuf::int32 value);

  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.facebook_str)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_name2();
  inline void clear_has_name2();
  inline void set_has_leave_corps_time();
  inline void clear_has_leave_corps_time();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 param_;
  ::std::string* name_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 leave_corps_time_;
  ::std::string* name2_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static facebook_str* default_instance_;
};
// -------------------------------------------------------------------

class face_book : public ::google::protobuf::Message {
 public:
  face_book();
  virtual ~face_book();

  face_book(const face_book& from);

  inline face_book& operator=(const face_book& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const face_book& default_instance();

  void Swap(face_book* other);

  // implements Message ----------------------------------------------

  face_book* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const face_book& from);
  void MergeFrom(const face_book& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_FACEBOOK];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // optional .PB.facebook_str corps = 2;
  inline bool has_corps() const;
  inline void clear_corps();
  static const int kCorpsFieldNumber = 2;
  inline const ::PB::facebook_str& corps() const;
  inline ::PB::facebook_str* mutable_corps();
  inline ::PB::facebook_str* release_corps();
  inline void set_allocated_corps(::PB::facebook_str* corps);

  // @@protoc_insertion_point(class_scope:PB.face_book)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_corps();
  inline void clear_has_corps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::facebook_str* corps_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static face_book* default_instance_;
};
// -------------------------------------------------------------------

class idip_role_info : public ::google::protobuf::Message {
 public:
  idip_role_info();
  virtual ~idip_role_info();

  idip_role_info(const idip_role_info& from);

  inline idip_role_info& operator=(const idip_role_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const idip_role_info& default_instance();

  void Swap(idip_role_info* other);

  // implements Message ----------------------------------------------

  idip_role_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const idip_role_info& from);
  void MergeFrom(const idip_role_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 money = 1;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // optional int64 vip_exp = 2;
  inline bool has_vip_exp() const;
  inline void clear_vip_exp();
  static const int kVipExpFieldNumber = 2;
  inline ::google::protobuf::int64 vip_exp() const;
  inline void set_vip_exp(::google::protobuf::int64 value);

  // optional int32 vip_level = 3;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 3;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // optional int64 role_exp = 4;
  inline bool has_role_exp() const;
  inline void clear_role_exp();
  static const int kRoleExpFieldNumber = 4;
  inline ::google::protobuf::int64 role_exp() const;
  inline void set_role_exp(::google::protobuf::int64 value);

  // optional int64 ride_exp = 5;
  inline bool has_ride_exp() const;
  inline void clear_ride_exp();
  static const int kRideExpFieldNumber = 5;
  inline ::google::protobuf::int64 ride_exp() const;
  inline void set_ride_exp(::google::protobuf::int64 value);

  // optional int32 ride_level = 6;
  inline bool has_ride_level() const;
  inline void clear_ride_level();
  static const int kRideLevelFieldNumber = 6;
  inline ::google::protobuf::int32 ride_level() const;
  inline void set_ride_level(::google::protobuf::int32 value);

  // optional int32 pk_value = 7;
  inline bool has_pk_value() const;
  inline void clear_pk_value();
  static const int kPkValueFieldNumber = 7;
  inline ::google::protobuf::int32 pk_value() const;
  inline void set_pk_value(::google::protobuf::int32 value);

  // optional int32 online_time = 8;
  inline bool has_online_time() const;
  inline void clear_online_time();
  static const int kOnlineTimeFieldNumber = 8;
  inline ::google::protobuf::int32 online_time() const;
  inline void set_online_time(::google::protobuf::int32 value);

  // optional int32 friends_count = 9;
  inline bool has_friends_count() const;
  inline void clear_friends_count();
  static const int kFriendsCountFieldNumber = 9;
  inline ::google::protobuf::int32 friends_count() const;
  inline void set_friends_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.idip_role_info)
 private:
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_vip_exp();
  inline void clear_has_vip_exp();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_role_exp();
  inline void clear_has_role_exp();
  inline void set_has_ride_exp();
  inline void clear_has_ride_exp();
  inline void set_has_ride_level();
  inline void clear_has_ride_level();
  inline void set_has_pk_value();
  inline void clear_has_pk_value();
  inline void set_has_online_time();
  inline void clear_has_online_time();
  inline void set_has_friends_count();
  inline void clear_has_friends_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 money_;
  ::google::protobuf::int64 vip_exp_;
  ::google::protobuf::int64 role_exp_;
  ::google::protobuf::int32 vip_level_;
  ::google::protobuf::int32 ride_level_;
  ::google::protobuf::int64 ride_exp_;
  ::google::protobuf::int32 pk_value_;
  ::google::protobuf::int32 online_time_;
  ::google::protobuf::int32 friends_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static idip_role_info* default_instance_;
};
// -------------------------------------------------------------------

class role_list_custom : public ::google::protobuf::Message {
 public:
  role_list_custom();
  virtual ~role_list_custom();

  role_list_custom(const role_list_custom& from);

  inline role_list_custom& operator=(const role_list_custom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_list_custom& default_instance();

  void Swap(role_list_custom* other);

  // implements Message ----------------------------------------------

  role_list_custom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_list_custom& from);
  void MergeFrom(const role_list_custom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool fashion = 1;
  inline bool has_fashion() const;
  inline void clear_fashion();
  static const int kFashionFieldNumber = 1;
  inline bool fashion() const;
  inline void set_fashion(bool value);

  // optional uint32 magic_weapon_tid = 2;
  inline bool has_magic_weapon_tid() const;
  inline void clear_magic_weapon_tid();
  static const int kMagicWeaponTidFieldNumber = 2;
  inline ::google::protobuf::uint32 magic_weapon_tid() const;
  inline void set_magic_weapon_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.role_list_custom)
 private:
  inline void set_has_fashion();
  inline void clear_has_fashion();
  inline void set_has_magic_weapon_tid();
  inline void clear_has_magic_weapon_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool fashion_;
  ::google::protobuf::uint32 magic_weapon_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static role_list_custom* default_instance_;
};
// -------------------------------------------------------------------

class gs_role_mutable_data : public ::google::protobuf::Message {
 public:
  gs_role_mutable_data();
  virtual ~gs_role_mutable_data();

  gs_role_mutable_data(const gs_role_mutable_data& from);

  inline gs_role_mutable_data& operator=(const gs_role_mutable_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_role_mutable_data& default_instance();

  void Swap(gs_role_mutable_data* other);

  // implements Message ----------------------------------------------

  gs_role_mutable_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_role_mutable_data& from);
  void MergeFrom(const gs_role_mutable_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_ROLE_PBINFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // optional uint32 vip_level = 2;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // optional uint32 fightcapacity = 3;
  inline bool has_fightcapacity() const;
  inline void clear_fightcapacity();
  static const int kFightcapacityFieldNumber = 3;
  inline ::google::protobuf::uint32 fightcapacity() const;
  inline void set_fightcapacity(::google::protobuf::uint32 value);

  // optional bytes show_property = 4;
  inline bool has_show_property() const;
  inline void clear_show_property();
  static const int kShowPropertyFieldNumber = 4;
  inline const ::std::string& show_property() const;
  inline void set_show_property(const ::std::string& value);
  inline void set_show_property(const char* value);
  inline void set_show_property(const void* value, size_t size);
  inline ::std::string* mutable_show_property();
  inline ::std::string* release_show_property();
  inline void set_allocated_show_property(::std::string* show_property);

  // optional .PB.other_player_profile_from_gs pro = 8;
  inline bool has_pro() const;
  inline void clear_pro();
  static const int kProFieldNumber = 8;
  inline const ::PB::other_player_profile_from_gs& pro() const;
  inline ::PB::other_player_profile_from_gs* mutable_pro();
  inline ::PB::other_player_profile_from_gs* release_pro();
  inline void set_allocated_pro(::PB::other_player_profile_from_gs* pro);

  // optional .PB.idip_role_info idip_info = 9;
  inline bool has_idip_info() const;
  inline void clear_idip_info();
  static const int kIdipInfoFieldNumber = 9;
  inline const ::PB::idip_role_info& idip_info() const;
  inline ::PB::idip_role_info* mutable_idip_info();
  inline ::PB::idip_role_info* release_idip_info();
  inline void set_allocated_idip_info(::PB::idip_role_info* idip_info);

  // optional .PB.role_list_custom custom = 10;
  inline bool has_custom() const;
  inline void clear_custom();
  static const int kCustomFieldNumber = 10;
  inline const ::PB::role_list_custom& custom() const;
  inline ::PB::role_list_custom* mutable_custom();
  inline ::PB::role_list_custom* release_custom();
  inline void set_allocated_custom(::PB::role_list_custom* custom);

  // @@protoc_insertion_point(class_scope:PB.gs_role_mutable_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_fightcapacity();
  inline void clear_has_fightcapacity();
  inline void set_has_show_property();
  inline void clear_has_show_property();
  inline void set_has_pro();
  inline void clear_has_pro();
  inline void set_has_idip_info();
  inline void clear_has_idip_info();
  inline void set_has_custom();
  inline void clear_has_custom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 vip_level_;
  ::std::string* show_property_;
  ::PB::other_player_profile_from_gs* pro_;
  ::PB::idip_role_info* idip_info_;
  ::PB::role_list_custom* custom_;
  ::google::protobuf::uint32 fightcapacity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gs_role_mutable_data* default_instance_;
};
// -------------------------------------------------------------------

class nation_war_history : public ::google::protobuf::Message {
 public:
  nation_war_history();
  virtual ~nation_war_history();

  nation_war_history(const nation_war_history& from);

  inline nation_war_history& operator=(const nation_war_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nation_war_history& default_instance();

  void Swap(nation_war_history* other);

  // implements Message ----------------------------------------------

  nation_war_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nation_war_history& from);
  void MergeFrom(const nation_war_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 finish_time = 1;
  inline bool has_finish_time() const;
  inline void clear_finish_time();
  static const int kFinishTimeFieldNumber = 1;
  inline ::google::protobuf::int32 finish_time() const;
  inline void set_finish_time(::google::protobuf::int32 value);

  // required int32 nation_attack = 2;
  inline bool has_nation_attack() const;
  inline void clear_nation_attack();
  static const int kNationAttackFieldNumber = 2;
  inline ::google::protobuf::int32 nation_attack() const;
  inline void set_nation_attack(::google::protobuf::int32 value);

  // required int32 nation_defend = 3;
  inline bool has_nation_defend() const;
  inline void clear_nation_defend();
  static const int kNationDefendFieldNumber = 3;
  inline ::google::protobuf::int32 nation_defend() const;
  inline void set_nation_defend(::google::protobuf::int32 value);

  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.nation_war_history)
 private:
  inline void set_has_finish_time();
  inline void clear_has_finish_time();
  inline void set_has_nation_attack();
  inline void clear_has_nation_attack();
  inline void set_has_nation_defend();
  inline void clear_has_nation_defend();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 finish_time_;
  ::google::protobuf::int32 nation_attack_;
  ::google::protobuf::int32 nation_defend_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static nation_war_history* default_instance_;
};
// -------------------------------------------------------------------

class blessing_info : public ::google::protobuf::Message {
 public:
  blessing_info();
  virtual ~blessing_info();

  blessing_info(const blessing_info& from);

  inline blessing_info& operator=(const blessing_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blessing_info& default_instance();

  void Swap(blessing_info* other);

  // implements Message ----------------------------------------------

  blessing_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blessing_info& from);
  void MergeFrom(const blessing_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes padding = 1;
  inline bool has_padding() const;
  inline void clear_padding();
  static const int kPaddingFieldNumber = 1;
  inline const ::std::string& padding() const;
  inline void set_padding(const ::std::string& value);
  inline void set_padding(const char* value);
  inline void set_padding(const void* value, size_t size);
  inline ::std::string* mutable_padding();
  inline ::std::string* release_padding();
  inline void set_allocated_padding(::std::string* padding);

  // optional uint64 src = 2;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 2;
  inline ::google::protobuf::uint64 src() const;
  inline void set_src(::google::protobuf::uint64 value);

  // optional bytes src_name = 3;
  inline bool has_src_name() const;
  inline void clear_src_name();
  static const int kSrcNameFieldNumber = 3;
  inline const ::std::string& src_name() const;
  inline void set_src_name(const ::std::string& value);
  inline void set_src_name(const char* value);
  inline void set_src_name(const void* value, size_t size);
  inline ::std::string* mutable_src_name();
  inline ::std::string* release_src_name();
  inline void set_allocated_src_name(::std::string* src_name);

  // optional uint64 dst = 4;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 4;
  inline ::google::protobuf::uint64 dst() const;
  inline void set_dst(::google::protobuf::uint64 value);

  // optional bytes dst_name = 5;
  inline bool has_dst_name() const;
  inline void clear_dst_name();
  static const int kDstNameFieldNumber = 5;
  inline const ::std::string& dst_name() const;
  inline void set_dst_name(const ::std::string& value);
  inline void set_dst_name(const char* value);
  inline void set_dst_name(const void* value, size_t size);
  inline ::std::string* mutable_dst_name();
  inline ::std::string* release_dst_name();
  inline void set_allocated_dst_name(::std::string* dst_name);

  // optional uint32 repu_id = 6;
  inline bool has_repu_id() const;
  inline void clear_repu_id();
  static const int kRepuIdFieldNumber = 6;
  inline ::google::protobuf::uint32 repu_id() const;
  inline void set_repu_id(::google::protobuf::uint32 value);

  // optional uint32 repu_count = 7;
  inline bool has_repu_count() const;
  inline void clear_repu_count();
  static const int kRepuCountFieldNumber = 7;
  inline ::google::protobuf::uint32 repu_count() const;
  inline void set_repu_count(::google::protobuf::uint32 value);

  // optional uint32 item_tid = 8;
  inline bool has_item_tid() const;
  inline void clear_item_tid();
  static const int kItemTidFieldNumber = 8;
  inline ::google::protobuf::uint32 item_tid() const;
  inline void set_item_tid(::google::protobuf::uint32 value);

  // optional uint32 item_count = 9;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 9;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);

  // optional uint32 txnid = 10;
  inline bool has_txnid() const;
  inline void clear_txnid();
  static const int kTxnidFieldNumber = 10;
  inline ::google::protobuf::uint32 txnid() const;
  inline void set_txnid(::google::protobuf::uint32 value);

  // optional int32 result = 11;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 11;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.blessing_info)
 private:
  inline void set_has_padding();
  inline void clear_has_padding();
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_src_name();
  inline void clear_has_src_name();
  inline void set_has_dst();
  inline void clear_has_dst();
  inline void set_has_dst_name();
  inline void clear_has_dst_name();
  inline void set_has_repu_id();
  inline void clear_has_repu_id();
  inline void set_has_repu_count();
  inline void clear_has_repu_count();
  inline void set_has_item_tid();
  inline void clear_has_item_tid();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_txnid();
  inline void clear_has_txnid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* padding_;
  ::google::protobuf::uint64 src_;
  ::std::string* src_name_;
  ::google::protobuf::uint64 dst_;
  ::std::string* dst_name_;
  ::google::protobuf::uint32 repu_id_;
  ::google::protobuf::uint32 repu_count_;
  ::google::protobuf::uint32 item_tid_;
  ::google::protobuf::uint32 item_count_;
  ::google::protobuf::uint32 txnid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static blessing_info* default_instance_;
};
// -------------------------------------------------------------------

class card_info : public ::google::protobuf::Message {
 public:
  card_info();
  virtual ~card_info();

  card_info(const card_info& from);

  inline card_info& operator=(const card_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const card_info& default_instance();

  void Swap(card_info* other);

  // implements Message ----------------------------------------------

  card_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const card_info& from);
  void MergeFrom(const card_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 card_id = 1;
  inline bool has_card_id() const;
  inline void clear_card_id();
  static const int kCardIdFieldNumber = 1;
  inline ::google::protobuf::int32 card_id() const;
  inline void set_card_id(::google::protobuf::int32 value);

  // required int32 card_count = 2;
  inline bool has_card_count() const;
  inline void clear_card_count();
  static const int kCardCountFieldNumber = 2;
  inline ::google::protobuf::int32 card_count() const;
  inline void set_card_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.card_info)
 private:
  inline void set_has_card_id();
  inline void clear_has_card_id();
  inline void set_has_card_count();
  inline void clear_has_card_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_id_;
  ::google::protobuf::int32 card_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static card_info* default_instance_;
};
// -------------------------------------------------------------------

class greeting_info : public ::google::protobuf::Message {
 public:
  greeting_info();
  virtual ~greeting_info();

  greeting_info(const greeting_info& from);

  inline greeting_info& operator=(const greeting_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const greeting_info& default_instance();

  void Swap(greeting_info* other);

  // implements Message ----------------------------------------------

  greeting_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const greeting_info& from);
  void MergeFrom(const greeting_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef greeting_info_GREETING_TYPE GREETING_TYPE;
  static const GREETING_TYPE GREETING_INVITE = greeting_info_GREETING_TYPE_GREETING_INVITE;
  static const GREETING_TYPE GREETING_GRANT = greeting_info_GREETING_TYPE_GREETING_GRANT;
  static const GREETING_TYPE GREETING_THANKS = greeting_info_GREETING_TYPE_GREETING_THANKS;
  static inline bool GREETING_TYPE_IsValid(int value) {
    return greeting_info_GREETING_TYPE_IsValid(value);
  }
  static const GREETING_TYPE GREETING_TYPE_MIN =
    greeting_info_GREETING_TYPE_GREETING_TYPE_MIN;
  static const GREETING_TYPE GREETING_TYPE_MAX =
    greeting_info_GREETING_TYPE_GREETING_TYPE_MAX;
  static const int GREETING_TYPE_ARRAYSIZE =
    greeting_info_GREETING_TYPE_GREETING_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GREETING_TYPE_descriptor() {
    return greeting_info_GREETING_TYPE_descriptor();
  }
  static inline const ::std::string& GREETING_TYPE_Name(GREETING_TYPE value) {
    return greeting_info_GREETING_TYPE_Name(value);
  }
  static inline bool GREETING_TYPE_Parse(const ::std::string& name,
      GREETING_TYPE* value) {
    return greeting_info_GREETING_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.greeting_info.GREETING_TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::greeting_info_GREETING_TYPE type() const;
  inline void set_type(::PB::greeting_info_GREETING_TYPE value);

  // optional int32 info_seq = 2 [default = 0];
  inline bool has_info_seq() const;
  inline void clear_info_seq();
  static const int kInfoSeqFieldNumber = 2;
  inline ::google::protobuf::int32 info_seq() const;
  inline void set_info_seq(::google::protobuf::int32 value);

  // optional int64 roleid = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 3;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 param_1 = 5;
  inline bool has_param_1() const;
  inline void clear_param_1();
  static const int kParam1FieldNumber = 5;
  inline ::google::protobuf::int32 param_1() const;
  inline void set_param_1(::google::protobuf::int32 value);

  // optional int32 param_2 = 6;
  inline bool has_param_2() const;
  inline void clear_param_2();
  static const int kParam2FieldNumber = 6;
  inline ::google::protobuf::int32 param_2() const;
  inline void set_param_2(::google::protobuf::int32 value);

  // optional int32 param_3 = 7;
  inline bool has_param_3() const;
  inline void clear_param_3();
  static const int kParam3FieldNumber = 7;
  inline ::google::protobuf::int32 param_3() const;
  inline void set_param_3(::google::protobuf::int32 value);

  // optional int32 greet_tid = 8;
  inline bool has_greet_tid() const;
  inline void clear_greet_tid();
  static const int kGreetTidFieldNumber = 8;
  inline ::google::protobuf::int32 greet_tid() const;
  inline void set_greet_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.greeting_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info_seq();
  inline void clear_has_info_seq();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_param_1();
  inline void clear_has_param_1();
  inline void set_has_param_2();
  inline void clear_has_param_2();
  inline void set_has_param_3();
  inline void clear_has_param_3();
  inline void set_has_greet_tid();
  inline void clear_has_greet_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 info_seq_;
  ::google::protobuf::int64 roleid_;
  ::std::string* name_;
  ::google::protobuf::int32 param_1_;
  ::google::protobuf::int32 param_2_;
  ::google::protobuf::int32 param_3_;
  ::google::protobuf::int32 greet_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static greeting_info* default_instance_;
};
// -------------------------------------------------------------------

class ask_help_info : public ::google::protobuf::Message {
 public:
  ask_help_info();
  virtual ~ask_help_info();

  ask_help_info(const ask_help_info& from);

  inline ask_help_info& operator=(const ask_help_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ask_help_info& default_instance();

  void Swap(ask_help_info* other);

  // implements Message ----------------------------------------------

  ask_help_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ask_help_info& from);
  void MergeFrom(const ask_help_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ask_help_info_relation_type relation_type;
  static const relation_type RT_STRANGER = ask_help_info_relation_type_RT_STRANGER;
  static const relation_type RT_CORP = ask_help_info_relation_type_RT_CORP;
  static const relation_type RT_NATION = ask_help_info_relation_type_RT_NATION;
  static inline bool relation_type_IsValid(int value) {
    return ask_help_info_relation_type_IsValid(value);
  }
  static const relation_type relation_type_MIN =
    ask_help_info_relation_type_relation_type_MIN;
  static const relation_type relation_type_MAX =
    ask_help_info_relation_type_relation_type_MAX;
  static const int relation_type_ARRAYSIZE =
    ask_help_info_relation_type_relation_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  relation_type_descriptor() {
    return ask_help_info_relation_type_descriptor();
  }
  static inline const ::std::string& relation_type_Name(relation_type value) {
    return ask_help_info_relation_type_Name(value);
  }
  static inline bool relation_type_Parse(const ::std::string& name,
      relation_type* value) {
    return ask_help_info_relation_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline ::google::protobuf::uint64 src() const;
  inline void set_src(::google::protobuf::uint64 value);

  // optional bytes src_name = 2;
  inline bool has_src_name() const;
  inline void clear_src_name();
  static const int kSrcNameFieldNumber = 2;
  inline const ::std::string& src_name() const;
  inline void set_src_name(const ::std::string& value);
  inline void set_src_name(const char* value);
  inline void set_src_name(const void* value, size_t size);
  inline ::std::string* mutable_src_name();
  inline ::std::string* release_src_name();
  inline void set_allocated_src_name(::std::string* src_name);

  // required int32 scene_tag = 3;
  inline bool has_scene_tag() const;
  inline void clear_scene_tag();
  static const int kSceneTagFieldNumber = 3;
  inline ::google::protobuf::int32 scene_tag() const;
  inline void set_scene_tag(::google::protobuf::int32 value);

  // optional int32 mirror_id = 4;
  inline bool has_mirror_id() const;
  inline void clear_mirror_id();
  static const int kMirrorIdFieldNumber = 4;
  inline ::google::protobuf::int32 mirror_id() const;
  inline void set_mirror_id(::google::protobuf::int32 value);

  // required .PB.a3d_pos pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::PB::a3d_pos& pos() const;
  inline ::PB::a3d_pos* mutable_pos();
  inline ::PB::a3d_pos* release_pos();
  inline void set_allocated_pos(::PB::a3d_pos* pos);

  // optional int32 end_timestamp = 6;
  inline bool has_end_timestamp() const;
  inline void clear_end_timestamp();
  static const int kEndTimestampFieldNumber = 6;
  inline ::google::protobuf::int32 end_timestamp() const;
  inline void set_end_timestamp(::google::protobuf::int32 value);

  // optional .PB.ask_help_info_type info_type = 7;
  inline bool has_info_type() const;
  inline void clear_info_type();
  static const int kInfoTypeFieldNumber = 7;
  inline ::PB::ask_help_info_type info_type() const;
  inline void set_info_type(::PB::ask_help_info_type value);

  // optional .PB.ask_help_info.relation_type relation = 8;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 8;
  inline ::PB::ask_help_info_relation_type relation() const;
  inline void set_relation(::PB::ask_help_info_relation_type value);

  // optional sint32 certificate = 9;
  inline bool has_certificate() const;
  inline void clear_certificate();
  static const int kCertificateFieldNumber = 9;
  inline ::google::protobuf::int32 certificate() const;
  inline void set_certificate(::google::protobuf::int32 value);

  // optional int32 src_nation = 10;
  inline bool has_src_nation() const;
  inline void clear_src_nation();
  static const int kSrcNationFieldNumber = 10;
  inline ::google::protobuf::int32 src_nation() const;
  inline void set_src_nation(::google::protobuf::int32 value);

  // optional int32 corp_id = 11;
  inline bool has_corp_id() const;
  inline void clear_corp_id();
  static const int kCorpIdFieldNumber = 11;
  inline ::google::protobuf::int32 corp_id() const;
  inline void set_corp_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.ask_help_info)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_src_name();
  inline void clear_has_src_name();
  inline void set_has_scene_tag();
  inline void clear_has_scene_tag();
  inline void set_has_mirror_id();
  inline void clear_has_mirror_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_end_timestamp();
  inline void clear_has_end_timestamp();
  inline void set_has_info_type();
  inline void clear_has_info_type();
  inline void set_has_relation();
  inline void clear_has_relation();
  inline void set_has_certificate();
  inline void clear_has_certificate();
  inline void set_has_src_nation();
  inline void clear_has_src_nation();
  inline void set_has_corp_id();
  inline void clear_has_corp_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 src_;
  ::std::string* src_name_;
  ::google::protobuf::int32 scene_tag_;
  ::google::protobuf::int32 mirror_id_;
  ::PB::a3d_pos* pos_;
  ::google::protobuf::int32 end_timestamp_;
  int info_type_;
  int relation_;
  ::google::protobuf::int32 certificate_;
  ::google::protobuf::int32 src_nation_;
  ::google::protobuf::int32 corp_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static ask_help_info* default_instance_;
};
// -------------------------------------------------------------------

class roam_match_info : public ::google::protobuf::Message {
 public:
  roam_match_info();
  virtual ~roam_match_info();

  roam_match_info(const roam_match_info& from);

  inline roam_match_info& operator=(const roam_match_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const roam_match_info& default_instance();

  void Swap(roam_match_info* other);

  // implements Message ----------------------------------------------

  roam_match_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const roam_match_info& from);
  void MergeFrom(const roam_match_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // optional int32 nationid = 2;
  inline bool has_nationid() const;
  inline void clear_nationid();
  static const int kNationidFieldNumber = 2;
  inline ::google::protobuf::int32 nationid() const;
  inline void set_nationid(::google::protobuf::int32 value);

  // optional int32 league_id = 3;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 3;
  inline ::google::protobuf::int32 league_id() const;
  inline void set_league_id(::google::protobuf::int32 value);

  // optional int32 war_id = 4;
  inline bool has_war_id() const;
  inline void clear_war_id();
  static const int kWarIdFieldNumber = 4;
  inline ::google::protobuf::int32 war_id() const;
  inline void set_war_id(::google::protobuf::int32 value);

  // optional int32 camp_id = 5;
  inline bool has_camp_id() const;
  inline void clear_camp_id();
  static const int kCampIdFieldNumber = 5;
  inline ::google::protobuf::int32 camp_id() const;
  inline void set_camp_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.roam_match_info)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_nationid();
  inline void clear_has_nationid();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_war_id();
  inline void clear_has_war_id();
  inline void set_has_camp_id();
  inline void clear_has_camp_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 zoneid_;
  ::google::protobuf::int32 nationid_;
  ::google::protobuf::int32 league_id_;
  ::google::protobuf::int32 war_id_;
  ::google::protobuf::int32 camp_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static roam_match_info* default_instance_;
};
// -------------------------------------------------------------------

class db_roam_record_info : public ::google::protobuf::Message {
 public:
  db_roam_record_info();
  virtual ~db_roam_record_info();

  db_roam_record_info(const db_roam_record_info& from);

  inline db_roam_record_info& operator=(const db_roam_record_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_roam_record_info& default_instance();

  void Swap(db_roam_record_info* other);

  // implements Message ----------------------------------------------

  db_roam_record_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_roam_record_info& from);
  void MergeFrom(const db_roam_record_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // optional int32 nation = 2;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 2;
  inline ::google::protobuf::int32 nation() const;
  inline void set_nation(::google::protobuf::int32 value);

  // optional int32 leagueid = 3;
  inline bool has_leagueid() const;
  inline void clear_leagueid();
  static const int kLeagueidFieldNumber = 3;
  inline ::google::protobuf::int32 leagueid() const;
  inline void set_leagueid(::google::protobuf::int32 value);

  // optional int32 campid = 4;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 4;
  inline ::google::protobuf::int32 campid() const;
  inline void set_campid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_roam_record_info)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_leagueid();
  inline void clear_has_leagueid();
  inline void set_has_campid();
  inline void clear_has_campid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 zoneid_;
  ::google::protobuf::int32 nation_;
  ::google::protobuf::int32 leagueid_;
  ::google::protobuf::int32 campid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_roam_record_info* default_instance_;
};
// -------------------------------------------------------------------

class db_roam_record_data : public ::google::protobuf::Message {
 public:
  db_roam_record_data();
  virtual ~db_roam_record_data();

  db_roam_record_data(const db_roam_record_data& from);

  inline db_roam_record_data& operator=(const db_roam_record_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_roam_record_data& default_instance();

  void Swap(db_roam_record_data* other);

  // implements Message ----------------------------------------------

  db_roam_record_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_roam_record_data& from);
  void MergeFrom(const db_roam_record_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 instid = 1;
  inline bool has_instid() const;
  inline void clear_instid();
  static const int kInstidFieldNumber = 1;
  inline ::google::protobuf::int32 instid() const;
  inline void set_instid(::google::protobuf::int32 value);

  // optional int32 win_campid = 2;
  inline bool has_win_campid() const;
  inline void clear_win_campid();
  static const int kWinCampidFieldNumber = 2;
  inline ::google::protobuf::int32 win_campid() const;
  inline void set_win_campid(::google::protobuf::int32 value);

  // optional int32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // repeated .PB.db_roam_record_info info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::PB::db_roam_record_info& info(int index) const;
  inline ::PB::db_roam_record_info* mutable_info(int index);
  inline ::PB::db_roam_record_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:PB.db_roam_record_data)
 private:
  inline void set_has_instid();
  inline void clear_has_instid();
  inline void set_has_win_campid();
  inline void clear_has_win_campid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 instid_;
  ::google::protobuf::int32 win_campid_;
  ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_info > info_;
  ::google::protobuf::int32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_roam_record_data* default_instance_;
};
// -------------------------------------------------------------------

class instance_extend_info : public ::google::protobuf::Message {
 public:
  instance_extend_info();
  virtual ~instance_extend_info();

  instance_extend_info(const instance_extend_info& from);

  inline instance_extend_info& operator=(const instance_extend_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const instance_extend_info& default_instance();

  void Swap(instance_extend_info* other);

  // implements Message ----------------------------------------------

  instance_extend_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const instance_extend_info& from);
  void MergeFrom(const instance_extend_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 param1 = 1;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 1;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // repeated int64 param2 = 2;
  inline int param2_size() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 2;
  inline ::google::protobuf::int64 param2(int index) const;
  inline void set_param2(int index, ::google::protobuf::int64 value);
  inline void add_param2(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      param2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_param2();

  // @@protoc_insertion_point(class_scope:PB.instance_extend_info)
 private:
  inline void set_has_param1();
  inline void clear_has_param1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > param2_;
  ::google::protobuf::int32 param1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static instance_extend_info* default_instance_;
};
// -------------------------------------------------------------------

class corp_farmland : public ::google::protobuf::Message {
 public:
  corp_farmland();
  virtual ~corp_farmland();

  corp_farmland(const corp_farmland& from);

  inline corp_farmland& operator=(const corp_farmland& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corp_farmland& default_instance();

  void Swap(corp_farmland* other);

  // implements Message ----------------------------------------------

  corp_farmland* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corp_farmland& from);
  void MergeFrom(const corp_farmland& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cur_planting_tid = 3;
  inline bool has_cur_planting_tid() const;
  inline void clear_cur_planting_tid();
  static const int kCurPlantingTidFieldNumber = 3;
  inline ::google::protobuf::int32 cur_planting_tid() const;
  inline void set_cur_planting_tid(::google::protobuf::int32 value);

  // optional int32 start_time = 4;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  inline ::google::protobuf::int32 start_time() const;
  inline void set_start_time(::google::protobuf::int32 value);

  // optional int32 harvest_time = 5;
  inline bool has_harvest_time() const;
  inline void clear_harvest_time();
  static const int kHarvestTimeFieldNumber = 5;
  inline ::google::protobuf::int32 harvest_time() const;
  inline void set_harvest_time(::google::protobuf::int32 value);

  // optional bool can_speed = 6;
  inline bool has_can_speed() const;
  inline void clear_can_speed();
  static const int kCanSpeedFieldNumber = 6;
  inline bool can_speed() const;
  inline void set_can_speed(bool value);

  // @@protoc_insertion_point(class_scope:PB.corp_farmland)
 private:
  inline void set_has_cur_planting_tid();
  inline void clear_has_cur_planting_tid();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_harvest_time();
  inline void clear_has_harvest_time();
  inline void set_has_can_speed();
  inline void clear_has_can_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cur_planting_tid_;
  ::google::protobuf::int32 start_time_;
  ::google::protobuf::int32 harvest_time_;
  bool can_speed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corp_farmland* default_instance_;
};
// -------------------------------------------------------------------

class enter_instance_config_client_config : public ::google::protobuf::Message {
 public:
  enter_instance_config_client_config();
  virtual ~enter_instance_config_client_config();

  enter_instance_config_client_config(const enter_instance_config_client_config& from);

  inline enter_instance_config_client_config& operator=(const enter_instance_config_client_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_instance_config_client_config& default_instance();

  void Swap(enter_instance_config_client_config* other);

  // implements Message ----------------------------------------------

  enter_instance_config_client_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_instance_config_client_config& from);
  void MergeFrom(const enter_instance_config_client_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mafia_id = 1;
  inline bool has_mafia_id() const;
  inline void clear_mafia_id();
  static const int kMafiaIdFieldNumber = 1;
  inline ::google::protobuf::int32 mafia_id() const;
  inline void set_mafia_id(::google::protobuf::int32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional .PB.instance_extend_info info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::PB::instance_extend_info& info() const;
  inline ::PB::instance_extend_info* mutable_info();
  inline ::PB::instance_extend_info* release_info();
  inline void set_allocated_info(::PB::instance_extend_info* info);

  // @@protoc_insertion_point(class_scope:PB.enter_instance_config.client_config)
 private:
  inline void set_has_mafia_id();
  inline void clear_has_mafia_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* password_;
  ::PB::instance_extend_info* info_;
  ::google::protobuf::int32 mafia_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static enter_instance_config_client_config* default_instance_;
};
// -------------------------------------------------------------------

class enter_instance_config_server_config : public ::google::protobuf::Message {
 public:
  enter_instance_config_server_config();
  virtual ~enter_instance_config_server_config();

  enter_instance_config_server_config(const enter_instance_config_server_config& from);

  inline enter_instance_config_server_config& operator=(const enter_instance_config_server_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_instance_config_server_config& default_instance();

  void Swap(enter_instance_config_server_config* other);

  // implements Message ----------------------------------------------

  enter_instance_config_server_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_instance_config_server_config& from);
  void MergeFrom(const enter_instance_config_server_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 param1 = 1;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 1;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // optional int32 param2 = 2;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 2;
  inline ::google::protobuf::int32 param2() const;
  inline void set_param2(::google::protobuf::int32 value);

  // optional .PB.a3d_pos pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::PB::a3d_pos& pos() const;
  inline ::PB::a3d_pos* mutable_pos();
  inline ::PB::a3d_pos* release_pos();
  inline void set_allocated_pos(::PB::a3d_pos* pos);

  // @@protoc_insertion_point(class_scope:PB.enter_instance_config.server_config)
 private:
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 param1_;
  ::google::protobuf::int32 param2_;
  ::PB::a3d_pos* pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static enter_instance_config_server_config* default_instance_;
};
// -------------------------------------------------------------------

class enter_instance_config : public ::google::protobuf::Message {
 public:
  enter_instance_config();
  virtual ~enter_instance_config();

  enter_instance_config(const enter_instance_config& from);

  inline enter_instance_config& operator=(const enter_instance_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_instance_config& default_instance();

  void Swap(enter_instance_config* other);

  // implements Message ----------------------------------------------

  enter_instance_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_instance_config& from);
  void MergeFrom(const enter_instance_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef enter_instance_config_client_config client_config;
  typedef enter_instance_config_server_config server_config;

  // accessors -------------------------------------------------------

  // optional .PB.enter_instance_config.client_config client = 1;
  inline bool has_client() const;
  inline void clear_client();
  static const int kClientFieldNumber = 1;
  inline const ::PB::enter_instance_config_client_config& client() const;
  inline ::PB::enter_instance_config_client_config* mutable_client();
  inline ::PB::enter_instance_config_client_config* release_client();
  inline void set_allocated_client(::PB::enter_instance_config_client_config* client);

  // optional .PB.enter_instance_config.server_config server = 2;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 2;
  inline const ::PB::enter_instance_config_server_config& server() const;
  inline ::PB::enter_instance_config_server_config* mutable_server();
  inline ::PB::enter_instance_config_server_config* release_server();
  inline void set_allocated_server(::PB::enter_instance_config_server_config* server);

  // @@protoc_insertion_point(class_scope:PB.enter_instance_config)
 private:
  inline void set_has_client();
  inline void clear_has_client();
  inline void set_has_server();
  inline void clear_has_server();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::enter_instance_config_client_config* client_;
  ::PB::enter_instance_config_server_config* server_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static enter_instance_config* default_instance_;
};
// -------------------------------------------------------------------

class player_corps_attr_config_rent_chariot_info : public ::google::protobuf::Message {
 public:
  player_corps_attr_config_rent_chariot_info();
  virtual ~player_corps_attr_config_rent_chariot_info();

  player_corps_attr_config_rent_chariot_info(const player_corps_attr_config_rent_chariot_info& from);

  inline player_corps_attr_config_rent_chariot_info& operator=(const player_corps_attr_config_rent_chariot_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_corps_attr_config_rent_chariot_info& default_instance();

  void Swap(player_corps_attr_config_rent_chariot_info* other);

  // implements Message ----------------------------------------------

  player_corps_attr_config_rent_chariot_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_corps_attr_config_rent_chariot_info& from);
  void MergeFrom(const player_corps_attr_config_rent_chariot_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chariot_hp = 3;
  inline bool has_chariot_hp() const;
  inline void clear_chariot_hp();
  static const int kChariotHpFieldNumber = 3;
  inline ::google::protobuf::int32 chariot_hp() const;
  inline void set_chariot_hp(::google::protobuf::int32 value);

  // optional int32 chariot_tid = 4;
  inline bool has_chariot_tid() const;
  inline void clear_chariot_tid();
  static const int kChariotTidFieldNumber = 4;
  inline ::google::protobuf::int32 chariot_tid() const;
  inline void set_chariot_tid(::google::protobuf::int32 value);

  // optional int32 chariot_level = 5;
  inline bool has_chariot_level() const;
  inline void clear_chariot_level();
  static const int kChariotLevelFieldNumber = 5;
  inline ::google::protobuf::int32 chariot_level() const;
  inline void set_chariot_level(::google::protobuf::int32 value);

  // optional int32 chariot_rent_timestamp = 6;
  inline bool has_chariot_rent_timestamp() const;
  inline void clear_chariot_rent_timestamp();
  static const int kChariotRentTimestampFieldNumber = 6;
  inline ::google::protobuf::int32 chariot_rent_timestamp() const;
  inline void set_chariot_rent_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.player_corps_attr_config.rent_chariot_info)
 private:
  inline void set_has_chariot_hp();
  inline void clear_has_chariot_hp();
  inline void set_has_chariot_tid();
  inline void clear_has_chariot_tid();
  inline void set_has_chariot_level();
  inline void clear_has_chariot_level();
  inline void set_has_chariot_rent_timestamp();
  inline void clear_has_chariot_rent_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chariot_hp_;
  ::google::protobuf::int32 chariot_tid_;
  ::google::protobuf::int32 chariot_level_;
  ::google::protobuf::int32 chariot_rent_timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_corps_attr_config_rent_chariot_info* default_instance_;
};
// -------------------------------------------------------------------

class player_corps_attr_config : public ::google::protobuf::Message {
 public:
  player_corps_attr_config();
  virtual ~player_corps_attr_config();

  player_corps_attr_config(const player_corps_attr_config& from);

  inline player_corps_attr_config& operator=(const player_corps_attr_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_corps_attr_config& default_instance();

  void Swap(player_corps_attr_config* other);

  // implements Message ----------------------------------------------

  player_corps_attr_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_corps_attr_config& from);
  void MergeFrom(const player_corps_attr_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef player_corps_attr_config_rent_chariot_info rent_chariot_info;

  // accessors -------------------------------------------------------

  // optional int32 active_level = 1 [default = -1];
  inline bool has_active_level() const;
  inline void clear_active_level();
  static const int kActiveLevelFieldNumber = 1;
  inline ::google::protobuf::int32 active_level() const;
  inline void set_active_level(::google::protobuf::int32 value);

  // optional int32 active_index = 2 [default = -1];
  inline bool has_active_index() const;
  inline void clear_active_index();
  static const int kActiveIndexFieldNumber = 2;
  inline ::google::protobuf::int32 active_index() const;
  inline void set_active_index(::google::protobuf::int32 value);

  // optional .PB.player_corps_attr_config.rent_chariot_info chariot_info = 4;
  inline bool has_chariot_info() const;
  inline void clear_chariot_info();
  static const int kChariotInfoFieldNumber = 4;
  inline const ::PB::player_corps_attr_config_rent_chariot_info& chariot_info() const;
  inline ::PB::player_corps_attr_config_rent_chariot_info* mutable_chariot_info();
  inline ::PB::player_corps_attr_config_rent_chariot_info* release_chariot_info();
  inline void set_allocated_chariot_info(::PB::player_corps_attr_config_rent_chariot_info* chariot_info);

  // @@protoc_insertion_point(class_scope:PB.player_corps_attr_config)
 private:
  inline void set_has_active_level();
  inline void clear_has_active_level();
  inline void set_has_active_index();
  inline void clear_has_active_index();
  inline void set_has_chariot_info();
  inline void clear_has_chariot_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 active_level_;
  ::google::protobuf::int32 active_index_;
  ::PB::player_corps_attr_config_rent_chariot_info* chariot_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_corps_attr_config* default_instance_;
};
// -------------------------------------------------------------------

class player_stune_config_player_rune_prop_config : public ::google::protobuf::Message {
 public:
  player_stune_config_player_rune_prop_config();
  virtual ~player_stune_config_player_rune_prop_config();

  player_stune_config_player_rune_prop_config(const player_stune_config_player_rune_prop_config& from);

  inline player_stune_config_player_rune_prop_config& operator=(const player_stune_config_player_rune_prop_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_stune_config_player_rune_prop_config& default_instance();

  void Swap(player_stune_config_player_rune_prop_config* other);

  // implements Message ----------------------------------------------

  player_stune_config_player_rune_prop_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_stune_config_player_rune_prop_config& from);
  void MergeFrom(const player_stune_config_player_rune_prop_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 master_skill_id = 1;
  inline bool has_master_skill_id() const;
  inline void clear_master_skill_id();
  static const int kMasterSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 master_skill_id() const;
  inline void set_master_skill_id(::google::protobuf::int32 value);

  // repeated int32 rune_skill_level = 2;
  inline int rune_skill_level_size() const;
  inline void clear_rune_skill_level();
  static const int kRuneSkillLevelFieldNumber = 2;
  inline ::google::protobuf::int32 rune_skill_level(int index) const;
  inline void set_rune_skill_level(int index, ::google::protobuf::int32 value);
  inline void add_rune_skill_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rune_skill_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rune_skill_level();

  // @@protoc_insertion_point(class_scope:PB.player_stune_config.player_rune_prop_config)
 private:
  inline void set_has_master_skill_id();
  inline void clear_has_master_skill_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rune_skill_level_;
  ::google::protobuf::int32 master_skill_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_stune_config_player_rune_prop_config* default_instance_;
};
// -------------------------------------------------------------------

class player_stune_config_player_rune_config : public ::google::protobuf::Message {
 public:
  player_stune_config_player_rune_config();
  virtual ~player_stune_config_player_rune_config();

  player_stune_config_player_rune_config(const player_stune_config_player_rune_config& from);

  inline player_stune_config_player_rune_config& operator=(const player_stune_config_player_rune_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_stune_config_player_rune_config& default_instance();

  void Swap(player_stune_config_player_rune_config* other);

  // implements Message ----------------------------------------------

  player_stune_config_player_rune_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_stune_config_player_rune_config& from);
  void MergeFrom(const player_stune_config_player_rune_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 master_skill_id = 1;
  inline bool has_master_skill_id() const;
  inline void clear_master_skill_id();
  static const int kMasterSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 master_skill_id() const;
  inline void set_master_skill_id(::google::protobuf::int32 value);

  // required int32 active_index = 2;
  inline bool has_active_index() const;
  inline void clear_active_index();
  static const int kActiveIndexFieldNumber = 2;
  inline ::google::protobuf::int32 active_index() const;
  inline void set_active_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.player_stune_config.player_rune_config)
 private:
  inline void set_has_master_skill_id();
  inline void clear_has_master_skill_id();
  inline void set_has_active_index();
  inline void clear_has_active_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 master_skill_id_;
  ::google::protobuf::int32 active_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_stune_config_player_rune_config* default_instance_;
};
// -------------------------------------------------------------------

class player_stune_config_config_set : public ::google::protobuf::Message {
 public:
  player_stune_config_config_set();
  virtual ~player_stune_config_config_set();

  player_stune_config_config_set(const player_stune_config_config_set& from);

  inline player_stune_config_config_set& operator=(const player_stune_config_config_set& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_stune_config_config_set& default_instance();

  void Swap(player_stune_config_config_set* other);

  // implements Message ----------------------------------------------

  player_stune_config_config_set* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_stune_config_config_set& from);
  void MergeFrom(const player_stune_config_config_set& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 set_index = 1;
  inline bool has_set_index() const;
  inline void clear_set_index();
  static const int kSetIndexFieldNumber = 1;
  inline ::google::protobuf::int32 set_index() const;
  inline void set_set_index(::google::protobuf::int32 value);

  // repeated .PB.player_stune_config.player_rune_config configs = 2;
  inline int configs_size() const;
  inline void clear_configs();
  static const int kConfigsFieldNumber = 2;
  inline const ::PB::player_stune_config_player_rune_config& configs(int index) const;
  inline ::PB::player_stune_config_player_rune_config* mutable_configs(int index);
  inline ::PB::player_stune_config_player_rune_config* add_configs();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_config >&
      configs() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_config >*
      mutable_configs();

  // @@protoc_insertion_point(class_scope:PB.player_stune_config.config_set)
 private:
  inline void set_has_set_index();
  inline void clear_has_set_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_config > configs_;
  ::google::protobuf::int32 set_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_stune_config_config_set* default_instance_;
};
// -------------------------------------------------------------------

class player_stune_config : public ::google::protobuf::Message {
 public:
  player_stune_config();
  virtual ~player_stune_config();

  player_stune_config(const player_stune_config& from);

  inline player_stune_config& operator=(const player_stune_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_stune_config& default_instance();

  void Swap(player_stune_config* other);

  // implements Message ----------------------------------------------

  player_stune_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_stune_config& from);
  void MergeFrom(const player_stune_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef player_stune_config_player_rune_prop_config player_rune_prop_config;
  typedef player_stune_config_player_rune_config player_rune_config;
  typedef player_stune_config_config_set config_set;

  // accessors -------------------------------------------------------

  // optional int32 rune_level = 1;
  inline bool has_rune_level() const;
  inline void clear_rune_level();
  static const int kRuneLevelFieldNumber = 1;
  inline ::google::protobuf::int32 rune_level() const;
  inline void set_rune_level(::google::protobuf::int32 value);

  // optional int32 rune_point = 2;
  inline bool has_rune_point() const;
  inline void clear_rune_point();
  static const int kRunePointFieldNumber = 2;
  inline ::google::protobuf::int32 rune_point() const;
  inline void set_rune_point(::google::protobuf::int32 value);

  // repeated .PB.player_stune_config.player_rune_prop_config rune_config = 3;
  inline int rune_config_size() const;
  inline void clear_rune_config();
  static const int kRuneConfigFieldNumber = 3;
  inline const ::PB::player_stune_config_player_rune_prop_config& rune_config(int index) const;
  inline ::PB::player_stune_config_player_rune_prop_config* mutable_rune_config(int index);
  inline ::PB::player_stune_config_player_rune_prop_config* add_rune_config();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_prop_config >&
      rune_config() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_prop_config >*
      mutable_rune_config();

  // repeated .PB.player_stune_config.config_set all_config_set = 4;
  inline int all_config_set_size() const;
  inline void clear_all_config_set();
  static const int kAllConfigSetFieldNumber = 4;
  inline const ::PB::player_stune_config_config_set& all_config_set(int index) const;
  inline ::PB::player_stune_config_config_set* mutable_all_config_set(int index);
  inline ::PB::player_stune_config_config_set* add_all_config_set();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_config_set >&
      all_config_set() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_config_set >*
      mutable_all_config_set();

  // optional int32 cur_active_set = 5;
  inline bool has_cur_active_set() const;
  inline void clear_cur_active_set();
  static const int kCurActiveSetFieldNumber = 5;
  inline ::google::protobuf::int32 cur_active_set() const;
  inline void set_cur_active_set(::google::protobuf::int32 value);

  // optional int32 total_rune_point = 6;
  inline bool has_total_rune_point() const;
  inline void clear_total_rune_point();
  static const int kTotalRunePointFieldNumber = 6;
  inline ::google::protobuf::int32 total_rune_point() const;
  inline void set_total_rune_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.player_stune_config)
 private:
  inline void set_has_rune_level();
  inline void clear_has_rune_level();
  inline void set_has_rune_point();
  inline void clear_has_rune_point();
  inline void set_has_cur_active_set();
  inline void clear_has_cur_active_set();
  inline void set_has_total_rune_point();
  inline void clear_has_total_rune_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rune_level_;
  ::google::protobuf::int32 rune_point_;
  ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_prop_config > rune_config_;
  ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_config_set > all_config_set_;
  ::google::protobuf::int32 cur_active_set_;
  ::google::protobuf::int32 total_rune_point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_stune_config* default_instance_;
};
// -------------------------------------------------------------------

class black_shop_info_black_shop_goods_info : public ::google::protobuf::Message {
 public:
  black_shop_info_black_shop_goods_info();
  virtual ~black_shop_info_black_shop_goods_info();

  black_shop_info_black_shop_goods_info(const black_shop_info_black_shop_goods_info& from);

  inline black_shop_info_black_shop_goods_info& operator=(const black_shop_info_black_shop_goods_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const black_shop_info_black_shop_goods_info& default_instance();

  void Swap(black_shop_info_black_shop_goods_info* other);

  // implements Message ----------------------------------------------

  black_shop_info_black_shop_goods_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const black_shop_info_black_shop_goods_info& from);
  void MergeFrom(const black_shop_info_black_shop_goods_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 store_id = 1;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 1;
  inline ::google::protobuf::int32 store_id() const;
  inline void set_store_id(::google::protobuf::int32 value);

  // required int32 goods_id = 2;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 2;
  inline ::google::protobuf::int32 goods_id() const;
  inline void set_goods_id(::google::protobuf::int32 value);

  // required int32 is_selled = 3;
  inline bool has_is_selled() const;
  inline void clear_is_selled();
  static const int kIsSelledFieldNumber = 3;
  inline ::google::protobuf::int32 is_selled() const;
  inline void set_is_selled(::google::protobuf::int32 value);

  // required int32 goods_pos = 4;
  inline bool has_goods_pos() const;
  inline void clear_goods_pos();
  static const int kGoodsPosFieldNumber = 4;
  inline ::google::protobuf::int32 goods_pos() const;
  inline void set_goods_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.black_shop_info.black_shop_goods_info)
 private:
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_is_selled();
  inline void clear_has_is_selled();
  inline void set_has_goods_pos();
  inline void clear_has_goods_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 store_id_;
  ::google::protobuf::int32 goods_id_;
  ::google::protobuf::int32 is_selled_;
  ::google::protobuf::int32 goods_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static black_shop_info_black_shop_goods_info* default_instance_;
};
// -------------------------------------------------------------------

class black_shop_info : public ::google::protobuf::Message {
 public:
  black_shop_info();
  virtual ~black_shop_info();

  black_shop_info(const black_shop_info& from);

  inline black_shop_info& operator=(const black_shop_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const black_shop_info& default_instance();

  void Swap(black_shop_info* other);

  // implements Message ----------------------------------------------

  black_shop_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const black_shop_info& from);
  void MergeFrom(const black_shop_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef black_shop_info_black_shop_goods_info black_shop_goods_info;

  // accessors -------------------------------------------------------

  // required int32 shop_id = 1;
  inline bool has_shop_id() const;
  inline void clear_shop_id();
  static const int kShopIdFieldNumber = 1;
  inline ::google::protobuf::int32 shop_id() const;
  inline void set_shop_id(::google::protobuf::int32 value);

  // required int32 next_refresh_time = 2;
  inline bool has_next_refresh_time() const;
  inline void clear_next_refresh_time();
  static const int kNextRefreshTimeFieldNumber = 2;
  inline ::google::protobuf::int32 next_refresh_time() const;
  inline void set_next_refresh_time(::google::protobuf::int32 value);

  // repeated .PB.black_shop_info.black_shop_goods_info goods = 3;
  inline int goods_size() const;
  inline void clear_goods();
  static const int kGoodsFieldNumber = 3;
  inline const ::PB::black_shop_info_black_shop_goods_info& goods(int index) const;
  inline ::PB::black_shop_info_black_shop_goods_info* mutable_goods(int index);
  inline ::PB::black_shop_info_black_shop_goods_info* add_goods();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info_black_shop_goods_info >&
      goods() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info_black_shop_goods_info >*
      mutable_goods();

  // @@protoc_insertion_point(class_scope:PB.black_shop_info)
 private:
  inline void set_has_shop_id();
  inline void clear_has_shop_id();
  inline void set_has_next_refresh_time();
  inline void clear_has_next_refresh_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 shop_id_;
  ::google::protobuf::int32 next_refresh_time_;
  ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info_black_shop_goods_info > goods_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static black_shop_info* default_instance_;
};
// -------------------------------------------------------------------

class climbtower_magic_shop_info_magic_shop_goods_info : public ::google::protobuf::Message {
 public:
  climbtower_magic_shop_info_magic_shop_goods_info();
  virtual ~climbtower_magic_shop_info_magic_shop_goods_info();

  climbtower_magic_shop_info_magic_shop_goods_info(const climbtower_magic_shop_info_magic_shop_goods_info& from);

  inline climbtower_magic_shop_info_magic_shop_goods_info& operator=(const climbtower_magic_shop_info_magic_shop_goods_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const climbtower_magic_shop_info_magic_shop_goods_info& default_instance();

  void Swap(climbtower_magic_shop_info_magic_shop_goods_info* other);

  // implements Message ----------------------------------------------

  climbtower_magic_shop_info_magic_shop_goods_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const climbtower_magic_shop_info_magic_shop_goods_info& from);
  void MergeFrom(const climbtower_magic_shop_info_magic_shop_goods_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 store_id = 1;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 1;
  inline ::google::protobuf::int32 store_id() const;
  inline void set_store_id(::google::protobuf::int32 value);

  // required int32 goods_id = 2;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 2;
  inline ::google::protobuf::int32 goods_id() const;
  inline void set_goods_id(::google::protobuf::int32 value);

  // required int32 is_selled = 3;
  inline bool has_is_selled() const;
  inline void clear_is_selled();
  static const int kIsSelledFieldNumber = 3;
  inline ::google::protobuf::int32 is_selled() const;
  inline void set_is_selled(::google::protobuf::int32 value);

  // required int32 goods_pos = 4;
  inline bool has_goods_pos() const;
  inline void clear_goods_pos();
  static const int kGoodsPosFieldNumber = 4;
  inline ::google::protobuf::int32 goods_pos() const;
  inline void set_goods_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.climbtower_magic_shop_info.magic_shop_goods_info)
 private:
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_is_selled();
  inline void clear_has_is_selled();
  inline void set_has_goods_pos();
  inline void clear_has_goods_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 store_id_;
  ::google::protobuf::int32 goods_id_;
  ::google::protobuf::int32 is_selled_;
  ::google::protobuf::int32 goods_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static climbtower_magic_shop_info_magic_shop_goods_info* default_instance_;
};
// -------------------------------------------------------------------

class climbtower_magic_shop_info : public ::google::protobuf::Message {
 public:
  climbtower_magic_shop_info();
  virtual ~climbtower_magic_shop_info();

  climbtower_magic_shop_info(const climbtower_magic_shop_info& from);

  inline climbtower_magic_shop_info& operator=(const climbtower_magic_shop_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const climbtower_magic_shop_info& default_instance();

  void Swap(climbtower_magic_shop_info* other);

  // implements Message ----------------------------------------------

  climbtower_magic_shop_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const climbtower_magic_shop_info& from);
  void MergeFrom(const climbtower_magic_shop_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef climbtower_magic_shop_info_magic_shop_goods_info magic_shop_goods_info;

  // accessors -------------------------------------------------------

  // required int32 shop_id = 1;
  inline bool has_shop_id() const;
  inline void clear_shop_id();
  static const int kShopIdFieldNumber = 1;
  inline ::google::protobuf::int32 shop_id() const;
  inline void set_shop_id(::google::protobuf::int32 value);

  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated .PB.climbtower_magic_shop_info.magic_shop_goods_info goods = 3;
  inline int goods_size() const;
  inline void clear_goods();
  static const int kGoodsFieldNumber = 3;
  inline const ::PB::climbtower_magic_shop_info_magic_shop_goods_info& goods(int index) const;
  inline ::PB::climbtower_magic_shop_info_magic_shop_goods_info* mutable_goods(int index);
  inline ::PB::climbtower_magic_shop_info_magic_shop_goods_info* add_goods();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info_magic_shop_goods_info >&
      goods() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info_magic_shop_goods_info >*
      mutable_goods();

  // @@protoc_insertion_point(class_scope:PB.climbtower_magic_shop_info)
 private:
  inline void set_has_shop_id();
  inline void clear_has_shop_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 shop_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info_magic_shop_goods_info > goods_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static climbtower_magic_shop_info* default_instance_;
};
// -------------------------------------------------------------------

class db_hero_trial_config : public ::google::protobuf::Message {
 public:
  db_hero_trial_config();
  virtual ~db_hero_trial_config();

  db_hero_trial_config(const db_hero_trial_config& from);

  inline db_hero_trial_config& operator=(const db_hero_trial_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_hero_trial_config& default_instance();

  void Swap(db_hero_trial_config* other);

  // implements Message ----------------------------------------------

  db_hero_trial_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_hero_trial_config& from);
  void MergeFrom(const db_hero_trial_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 free_refresh_times = 1;
  inline bool has_free_refresh_times() const;
  inline void clear_free_refresh_times();
  static const int kFreeRefreshTimesFieldNumber = 1;
  inline ::google::protobuf::int32 free_refresh_times() const;
  inline void set_free_refresh_times(::google::protobuf::int32 value);

  // optional int32 pay_refresh_times = 2;
  inline bool has_pay_refresh_times() const;
  inline void clear_pay_refresh_times();
  static const int kPayRefreshTimesFieldNumber = 2;
  inline ::google::protobuf::int32 pay_refresh_times() const;
  inline void set_pay_refresh_times(::google::protobuf::int32 value);

  // optional int32 cur_hero_tid = 3;
  inline bool has_cur_hero_tid() const;
  inline void clear_cur_hero_tid();
  static const int kCurHeroTidFieldNumber = 3;
  inline ::google::protobuf::int32 cur_hero_tid() const;
  inline void set_cur_hero_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_hero_trial_config)
 private:
  inline void set_has_free_refresh_times();
  inline void clear_has_free_refresh_times();
  inline void set_has_pay_refresh_times();
  inline void clear_has_pay_refresh_times();
  inline void set_has_cur_hero_tid();
  inline void clear_has_cur_hero_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 free_refresh_times_;
  ::google::protobuf::int32 pay_refresh_times_;
  ::google::protobuf::int32 cur_hero_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_hero_trial_config* default_instance_;
};
// -------------------------------------------------------------------

class level_shopid : public ::google::protobuf::Message {
 public:
  level_shopid();
  virtual ~level_shopid();

  level_shopid(const level_shopid& from);

  inline level_shopid& operator=(const level_shopid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const level_shopid& default_instance();

  void Swap(level_shopid* other);

  // implements Message ----------------------------------------------

  level_shopid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const level_shopid& from);
  void MergeFrom(const level_shopid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 shop_id = 2;
  inline bool has_shop_id() const;
  inline void clear_shop_id();
  static const int kShopIdFieldNumber = 2;
  inline ::google::protobuf::int32 shop_id() const;
  inline void set_shop_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.level_shopid)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_shop_id();
  inline void clear_has_shop_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 shop_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static level_shopid* default_instance_;
};
// -------------------------------------------------------------------

class db_strategy_info : public ::google::protobuf::Message {
 public:
  db_strategy_info();
  virtual ~db_strategy_info();

  db_strategy_info(const db_strategy_info& from);

  inline db_strategy_info& operator=(const db_strategy_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_strategy_info& default_instance();

  void Swap(db_strategy_info* other);

  // implements Message ----------------------------------------------

  db_strategy_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_strategy_info& from);
  void MergeFrom(const db_strategy_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 strategy_tid = 1;
  inline bool has_strategy_tid() const;
  inline void clear_strategy_tid();
  static const int kStrategyTidFieldNumber = 1;
  inline ::google::protobuf::int32 strategy_tid() const;
  inline void set_strategy_tid(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 chip_count = 3;
  inline bool has_chip_count() const;
  inline void clear_chip_count();
  static const int kChipCountFieldNumber = 3;
  inline ::google::protobuf::int32 chip_count() const;
  inline void set_chip_count(::google::protobuf::int32 value);

  // optional int32 star_level = 4;
  inline bool has_star_level() const;
  inline void clear_star_level();
  static const int kStarLevelFieldNumber = 4;
  inline ::google::protobuf::int32 star_level() const;
  inline void set_star_level(::google::protobuf::int32 value);

  // optional int32 blessing_num = 5;
  inline bool has_blessing_num() const;
  inline void clear_blessing_num();
  static const int kBlessingNumFieldNumber = 5;
  inline ::google::protobuf::int32 blessing_num() const;
  inline void set_blessing_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_strategy_info)
 private:
  inline void set_has_strategy_tid();
  inline void clear_has_strategy_tid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_chip_count();
  inline void clear_has_chip_count();
  inline void set_has_star_level();
  inline void clear_has_star_level();
  inline void set_has_blessing_num();
  inline void clear_has_blessing_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 strategy_tid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 chip_count_;
  ::google::protobuf::int32 star_level_;
  ::google::protobuf::int32 blessing_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_strategy_info* default_instance_;
};
// -------------------------------------------------------------------

class db_strategy_vectors : public ::google::protobuf::Message {
 public:
  db_strategy_vectors();
  virtual ~db_strategy_vectors();

  db_strategy_vectors(const db_strategy_vectors& from);

  inline db_strategy_vectors& operator=(const db_strategy_vectors& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_strategy_vectors& default_instance();

  void Swap(db_strategy_vectors* other);

  // implements Message ----------------------------------------------

  db_strategy_vectors* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_strategy_vectors& from);
  void MergeFrom(const db_strategy_vectors& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_STRATEGIES];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // repeated .PB.db_strategy_info strategies = 2;
  inline int strategies_size() const;
  inline void clear_strategies();
  static const int kStrategiesFieldNumber = 2;
  inline const ::PB::db_strategy_info& strategies(int index) const;
  inline ::PB::db_strategy_info* mutable_strategies(int index);
  inline ::PB::db_strategy_info* add_strategies();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_strategy_info >&
      strategies() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_strategy_info >*
      mutable_strategies();

  // @@protoc_insertion_point(class_scope:PB.db_strategy_vectors)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::db_strategy_info > strategies_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_strategy_vectors* default_instance_;
};
// -------------------------------------------------------------------

class db_surface_soul : public ::google::protobuf::Message {
 public:
  db_surface_soul();
  virtual ~db_surface_soul();

  db_surface_soul(const db_surface_soul& from);

  inline db_surface_soul& operator=(const db_surface_soul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_surface_soul& default_instance();

  void Swap(db_surface_soul* other);

  // implements Message ----------------------------------------------

  db_surface_soul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_surface_soul& from);
  void MergeFrom(const db_surface_soul& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 soul_tid = 1;
  inline bool has_soul_tid() const;
  inline void clear_soul_tid();
  static const int kSoulTidFieldNumber = 1;
  inline ::google::protobuf::int32 soul_tid() const;
  inline void set_soul_tid(::google::protobuf::int32 value);

  // optional int32 train_value = 2;
  inline bool has_train_value() const;
  inline void clear_train_value();
  static const int kTrainValueFieldNumber = 2;
  inline ::google::protobuf::int32 train_value() const;
  inline void set_train_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_surface_soul)
 private:
  inline void set_has_soul_tid();
  inline void clear_has_soul_tid();
  inline void set_has_train_value();
  inline void clear_has_train_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 soul_tid_;
  ::google::protobuf::int32 train_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_surface_soul* default_instance_;
};
// -------------------------------------------------------------------

class db_wing_refine_soul : public ::google::protobuf::Message {
 public:
  db_wing_refine_soul();
  virtual ~db_wing_refine_soul();

  db_wing_refine_soul(const db_wing_refine_soul& from);

  inline db_wing_refine_soul& operator=(const db_wing_refine_soul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_wing_refine_soul& default_instance();

  void Swap(db_wing_refine_soul* other);

  // implements Message ----------------------------------------------

  db_wing_refine_soul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_wing_refine_soul& from);
  void MergeFrom(const db_wing_refine_soul& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 surface_tid = 1;
  inline bool has_surface_tid() const;
  inline void clear_surface_tid();
  static const int kSurfaceTidFieldNumber = 1;
  inline ::google::protobuf::int32 surface_tid() const;
  inline void set_surface_tid(::google::protobuf::int32 value);

  // optional int32 train_level = 2;
  inline bool has_train_level() const;
  inline void clear_train_level();
  static const int kTrainLevelFieldNumber = 2;
  inline ::google::protobuf::int32 train_level() const;
  inline void set_train_level(::google::protobuf::int32 value);

  // repeated .PB.db_surface_soul souls = 3;
  inline int souls_size() const;
  inline void clear_souls();
  static const int kSoulsFieldNumber = 3;
  inline const ::PB::db_surface_soul& souls(int index) const;
  inline ::PB::db_surface_soul* mutable_souls(int index);
  inline ::PB::db_surface_soul* add_souls();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul >&
      souls() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul >*
      mutable_souls();

  // @@protoc_insertion_point(class_scope:PB.db_wing_refine_soul)
 private:
  inline void set_has_surface_tid();
  inline void clear_has_surface_tid();
  inline void set_has_train_level();
  inline void clear_has_train_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 surface_tid_;
  ::google::protobuf::int32 train_level_;
  ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul > souls_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_wing_refine_soul* default_instance_;
};
// -------------------------------------------------------------------

class db_refine_surfaces : public ::google::protobuf::Message {
 public:
  db_refine_surfaces();
  virtual ~db_refine_surfaces();

  db_refine_surfaces(const db_refine_surfaces& from);

  inline db_refine_surfaces& operator=(const db_refine_surfaces& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_refine_surfaces& default_instance();

  void Swap(db_refine_surfaces* other);

  // implements Message ----------------------------------------------

  db_refine_surfaces* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_refine_surfaces& from);
  void MergeFrom(const db_refine_surfaces& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_WING_REFINE_SOUL];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // repeated .PB.db_wing_refine_soul surfaces = 2;
  inline int surfaces_size() const;
  inline void clear_surfaces();
  static const int kSurfacesFieldNumber = 2;
  inline const ::PB::db_wing_refine_soul& surfaces(int index) const;
  inline ::PB::db_wing_refine_soul* mutable_surfaces(int index);
  inline ::PB::db_wing_refine_soul* add_surfaces();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_wing_refine_soul >&
      surfaces() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_wing_refine_soul >*
      mutable_surfaces();

  // @@protoc_insertion_point(class_scope:PB.db_refine_surfaces)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::db_wing_refine_soul > surfaces_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_refine_surfaces* default_instance_;
};
// -------------------------------------------------------------------

class db_equip_soul : public ::google::protobuf::Message {
 public:
  db_equip_soul();
  virtual ~db_equip_soul();

  db_equip_soul(const db_equip_soul& from);

  inline db_equip_soul& operator=(const db_equip_soul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_equip_soul& default_instance();

  void Swap(db_equip_soul* other);

  // implements Message ----------------------------------------------

  db_equip_soul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_equip_soul& from);
  void MergeFrom(const db_equip_soul& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 property_tid = 1;
  inline bool has_property_tid() const;
  inline void clear_property_tid();
  static const int kPropertyTidFieldNumber = 1;
  inline ::google::protobuf::int32 property_tid() const;
  inline void set_property_tid(::google::protobuf::int32 value);

  // optional int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_equip_soul)
 private:
  inline void set_has_property_tid();
  inline void clear_has_property_tid();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 property_tid_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_equip_soul* default_instance_;
};
// -------------------------------------------------------------------

class db_equip_fixed_data : public ::google::protobuf::Message {
 public:
  db_equip_fixed_data();
  virtual ~db_equip_fixed_data();

  db_equip_fixed_data(const db_equip_fixed_data& from);

  inline db_equip_fixed_data& operator=(const db_equip_fixed_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_equip_fixed_data& default_instance();

  void Swap(db_equip_fixed_data* other);

  // implements Message ----------------------------------------------

  db_equip_fixed_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_equip_fixed_data& from);
  void MergeFrom(const db_equip_fixed_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // repeated int32 mingwens = 2;
  inline int mingwens_size() const;
  inline void clear_mingwens();
  static const int kMingwensFieldNumber = 2;
  inline ::google::protobuf::int32 mingwens(int index) const;
  inline void set_mingwens(int index, ::google::protobuf::int32 value);
  inline void add_mingwens(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mingwens() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mingwens();

  // repeated .PB.db_equip_soul souls = 3;
  inline int souls_size() const;
  inline void clear_souls();
  static const int kSoulsFieldNumber = 3;
  inline const ::PB::db_equip_soul& souls(int index) const;
  inline ::PB::db_equip_soul* mutable_souls(int index);
  inline ::PB::db_equip_soul* add_souls();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_equip_soul >&
      souls() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_equip_soul >*
      mutable_souls();

  // @@protoc_insertion_point(class_scope:PB.db_equip_fixed_data)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mingwens_;
  ::google::protobuf::RepeatedPtrField< ::PB::db_equip_soul > souls_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_equip_fixed_data* default_instance_;
};
// -------------------------------------------------------------------

class db_magic_weapon_property : public ::google::protobuf::Message {
 public:
  db_magic_weapon_property();
  virtual ~db_magic_weapon_property();

  db_magic_weapon_property(const db_magic_weapon_property& from);

  inline db_magic_weapon_property& operator=(const db_magic_weapon_property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_magic_weapon_property& default_instance();

  void Swap(db_magic_weapon_property* other);

  // implements Message ----------------------------------------------

  db_magic_weapon_property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_magic_weapon_property& from);
  void MergeFrom(const db_magic_weapon_property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 property_tid = 1;
  inline bool has_property_tid() const;
  inline void clear_property_tid();
  static const int kPropertyTidFieldNumber = 1;
  inline ::google::protobuf::int32 property_tid() const;
  inline void set_property_tid(::google::protobuf::int32 value);

  // optional int32 exp_value = 2;
  inline bool has_exp_value() const;
  inline void clear_exp_value();
  static const int kExpValueFieldNumber = 2;
  inline ::google::protobuf::int32 exp_value() const;
  inline void set_exp_value(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::int32 end_time() const;
  inline void set_end_time(::google::protobuf::int32 value);

  // optional int32 multime = 5;
  inline bool has_multime() const;
  inline void clear_multime();
  static const int kMultimeFieldNumber = 5;
  inline ::google::protobuf::int32 multime() const;
  inline void set_multime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_magic_weapon.property)
 private:
  inline void set_has_property_tid();
  inline void clear_has_property_tid();
  inline void set_has_exp_value();
  inline void clear_has_exp_value();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_multime();
  inline void clear_has_multime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 property_tid_;
  ::google::protobuf::int32 exp_value_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 end_time_;
  ::google::protobuf::int32 multime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_magic_weapon_property* default_instance_;
};
// -------------------------------------------------------------------

class db_magic_weapon_refine_group_refine : public ::google::protobuf::Message {
 public:
  db_magic_weapon_refine_group_refine();
  virtual ~db_magic_weapon_refine_group_refine();

  db_magic_weapon_refine_group_refine(const db_magic_weapon_refine_group_refine& from);

  inline db_magic_weapon_refine_group_refine& operator=(const db_magic_weapon_refine_group_refine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_magic_weapon_refine_group_refine& default_instance();

  void Swap(db_magic_weapon_refine_group_refine* other);

  // implements Message ----------------------------------------------

  db_magic_weapon_refine_group_refine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_magic_weapon_refine_group_refine& from);
  void MergeFrom(const db_magic_weapon_refine_group_refine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 train_level = 1;
  inline bool has_train_level() const;
  inline void clear_train_level();
  static const int kTrainLevelFieldNumber = 1;
  inline ::google::protobuf::int32 train_level() const;
  inline void set_train_level(::google::protobuf::int32 value);

  // optional int32 blessing_value = 2;
  inline bool has_blessing_value() const;
  inline void clear_blessing_value();
  static const int kBlessingValueFieldNumber = 2;
  inline ::google::protobuf::int32 blessing_value() const;
  inline void set_blessing_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_magic_weapon.refine_group.refine)
 private:
  inline void set_has_train_level();
  inline void clear_has_train_level();
  inline void set_has_blessing_value();
  inline void clear_has_blessing_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 train_level_;
  ::google::protobuf::int32 blessing_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_magic_weapon_refine_group_refine* default_instance_;
};
// -------------------------------------------------------------------

class db_magic_weapon_refine_group : public ::google::protobuf::Message {
 public:
  db_magic_weapon_refine_group();
  virtual ~db_magic_weapon_refine_group();

  db_magic_weapon_refine_group(const db_magic_weapon_refine_group& from);

  inline db_magic_weapon_refine_group& operator=(const db_magic_weapon_refine_group& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_magic_weapon_refine_group& default_instance();

  void Swap(db_magic_weapon_refine_group* other);

  // implements Message ----------------------------------------------

  db_magic_weapon_refine_group* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_magic_weapon_refine_group& from);
  void MergeFrom(const db_magic_weapon_refine_group& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef db_magic_weapon_refine_group_refine refine;

  // accessors -------------------------------------------------------

  // repeated .PB.db_magic_weapon.refine_group.refine refines = 1;
  inline int refines_size() const;
  inline void clear_refines();
  static const int kRefinesFieldNumber = 1;
  inline const ::PB::db_magic_weapon_refine_group_refine& refines(int index) const;
  inline ::PB::db_magic_weapon_refine_group_refine* mutable_refines(int index);
  inline ::PB::db_magic_weapon_refine_group_refine* add_refines();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group_refine >&
      refines() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group_refine >*
      mutable_refines();

  // @@protoc_insertion_point(class_scope:PB.db_magic_weapon.refine_group)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group_refine > refines_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_magic_weapon_refine_group* default_instance_;
};
// -------------------------------------------------------------------

class db_magic_weapon : public ::google::protobuf::Message {
 public:
  db_magic_weapon();
  virtual ~db_magic_weapon();

  db_magic_weapon(const db_magic_weapon& from);

  inline db_magic_weapon& operator=(const db_magic_weapon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_magic_weapon& default_instance();

  void Swap(db_magic_weapon* other);

  // implements Message ----------------------------------------------

  db_magic_weapon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_magic_weapon& from);
  void MergeFrom(const db_magic_weapon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef db_magic_weapon_property property;
  typedef db_magic_weapon_refine_group refine_group;

  // accessors -------------------------------------------------------

  // optional int32 magic_tid = 1;
  inline bool has_magic_tid() const;
  inline void clear_magic_tid();
  static const int kMagicTidFieldNumber = 1;
  inline ::google::protobuf::int32 magic_tid() const;
  inline void set_magic_tid(::google::protobuf::int32 value);

  // optional bool active = 2;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 2;
  inline bool active() const;
  inline void set_active(bool value);

  // repeated .PB.db_magic_weapon.property properties = 3;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 3;
  inline const ::PB::db_magic_weapon_property& properties(int index) const;
  inline ::PB::db_magic_weapon_property* mutable_properties(int index);
  inline ::PB::db_magic_weapon_property* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_property >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_property >*
      mutable_properties();

  // repeated .PB.db_magic_weapon.refine_group refine_groups = 4;
  inline int refine_groups_size() const;
  inline void clear_refine_groups();
  static const int kRefineGroupsFieldNumber = 4;
  inline const ::PB::db_magic_weapon_refine_group& refine_groups(int index) const;
  inline ::PB::db_magic_weapon_refine_group* mutable_refine_groups(int index);
  inline ::PB::db_magic_weapon_refine_group* add_refine_groups();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group >&
      refine_groups() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group >*
      mutable_refine_groups();

  // @@protoc_insertion_point(class_scope:PB.db_magic_weapon)
 private:
  inline void set_has_magic_tid();
  inline void clear_has_magic_tid();
  inline void set_has_active();
  inline void clear_has_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 magic_tid_;
  bool active_;
  ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_property > properties_;
  ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group > refine_groups_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_magic_weapon* default_instance_;
};
// -------------------------------------------------------------------

class db_magic_weapons : public ::google::protobuf::Message {
 public:
  db_magic_weapons();
  virtual ~db_magic_weapons();

  db_magic_weapons(const db_magic_weapons& from);

  inline db_magic_weapons& operator=(const db_magic_weapons& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_magic_weapons& default_instance();

  void Swap(db_magic_weapons* other);

  // implements Message ----------------------------------------------

  db_magic_weapons* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_magic_weapons& from);
  void MergeFrom(const db_magic_weapons& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.db_magic_weapon weapons = 1;
  inline int weapons_size() const;
  inline void clear_weapons();
  static const int kWeaponsFieldNumber = 1;
  inline const ::PB::db_magic_weapon& weapons(int index) const;
  inline ::PB::db_magic_weapon* mutable_weapons(int index);
  inline ::PB::db_magic_weapon* add_weapons();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon >&
      weapons() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon >*
      mutable_weapons();

  // optional int32 summoned_weapon_tid = 2;
  inline bool has_summoned_weapon_tid() const;
  inline void clear_summoned_weapon_tid();
  static const int kSummonedWeaponTidFieldNumber = 2;
  inline ::google::protobuf::int32 summoned_weapon_tid() const;
  inline void set_summoned_weapon_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_magic_weapons)
 private:
  inline void set_has_summoned_weapon_tid();
  inline void clear_has_summoned_weapon_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon > weapons_;
  ::google::protobuf::int32 summoned_weapon_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_magic_weapons* default_instance_;
};
// -------------------------------------------------------------------

class db_general_soul : public ::google::protobuf::Message {
 public:
  db_general_soul();
  virtual ~db_general_soul();

  db_general_soul(const db_general_soul& from);

  inline db_general_soul& operator=(const db_general_soul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_general_soul& default_instance();

  void Swap(db_general_soul* other);

  // implements Message ----------------------------------------------

  db_general_soul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_general_soul& from);
  void MergeFrom(const db_general_soul& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 general_tid = 1;
  inline bool has_general_tid() const;
  inline void clear_general_tid();
  static const int kGeneralTidFieldNumber = 1;
  inline ::google::protobuf::int32 general_tid() const;
  inline void set_general_tid(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 experience = 3;
  inline bool has_experience() const;
  inline void clear_experience();
  static const int kExperienceFieldNumber = 3;
  inline ::google::protobuf::int32 experience() const;
  inline void set_experience(::google::protobuf::int32 value);

  // optional .PB.general_list inventory = 4;
  inline bool has_inventory() const;
  inline void clear_inventory();
  static const int kInventoryFieldNumber = 4;
  inline const ::PB::general_list& inventory() const;
  inline ::PB::general_list* mutable_inventory();
  inline ::PB::general_list* release_inventory();
  inline void set_allocated_inventory(::PB::general_list* inventory);

  // optional .PB.general_list soul_holes = 5;
  inline bool has_soul_holes() const;
  inline void clear_soul_holes();
  static const int kSoulHolesFieldNumber = 5;
  inline const ::PB::general_list& soul_holes() const;
  inline ::PB::general_list* mutable_soul_holes();
  inline ::PB::general_list* release_soul_holes();
  inline void set_allocated_soul_holes(::PB::general_list* soul_holes);

  // @@protoc_insertion_point(class_scope:PB.db_general_soul)
 private:
  inline void set_has_general_tid();
  inline void clear_has_general_tid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_experience();
  inline void clear_has_experience();
  inline void set_has_inventory();
  inline void clear_has_inventory();
  inline void set_has_soul_holes();
  inline void clear_has_soul_holes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 general_tid_;
  ::google::protobuf::int32 level_;
  ::PB::general_list* inventory_;
  ::PB::general_list* soul_holes_;
  ::google::protobuf::int32 experience_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_general_soul* default_instance_;
};
// -------------------------------------------------------------------

class db_general_souls : public ::google::protobuf::Message {
 public:
  db_general_souls();
  virtual ~db_general_souls();

  db_general_souls(const db_general_souls& from);

  inline db_general_souls& operator=(const db_general_souls& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_general_souls& default_instance();

  void Swap(db_general_souls* other);

  // implements Message ----------------------------------------------

  db_general_souls* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_general_souls& from);
  void MergeFrom(const db_general_souls& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.db_general_soul generals = 1;
  inline int generals_size() const;
  inline void clear_generals();
  static const int kGeneralsFieldNumber = 1;
  inline const ::PB::db_general_soul& generals(int index) const;
  inline ::PB::db_general_soul* mutable_generals(int index);
  inline ::PB::db_general_soul* add_generals();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_general_soul >&
      generals() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_general_soul >*
      mutable_generals();

  // @@protoc_insertion_point(class_scope:PB.db_general_souls)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::db_general_soul > generals_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_general_souls* default_instance_;
};
// -------------------------------------------------------------------

class wine_game_history : public ::google::protobuf::Message {
 public:
  wine_game_history();
  virtual ~wine_game_history();

  wine_game_history(const wine_game_history& from);

  inline wine_game_history& operator=(const wine_game_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wine_game_history& default_instance();

  void Swap(wine_game_history* other);

  // implements Message ----------------------------------------------

  wine_game_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wine_game_history& from);
  void MergeFrom(const wine_game_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 game_time = 1;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 1;
  inline ::google::protobuf::int32 game_time() const;
  inline void set_game_time(::google::protobuf::int32 value);

  // optional int32 mine_status = 2;
  inline bool has_mine_status() const;
  inline void clear_mine_status();
  static const int kMineStatusFieldNumber = 2;
  inline ::google::protobuf::int32 mine_status() const;
  inline void set_mine_status(::google::protobuf::int32 value);

  // optional int32 peer_status = 3;
  inline bool has_peer_status() const;
  inline void clear_peer_status();
  static const int kPeerStatusFieldNumber = 3;
  inline ::google::protobuf::int32 peer_status() const;
  inline void set_peer_status(::google::protobuf::int32 value);

  // optional int32 game_result = 4;
  inline bool has_game_result() const;
  inline void clear_game_result();
  static const int kGameResultFieldNumber = 4;
  inline ::google::protobuf::int32 game_result() const;
  inline void set_game_result(::google::protobuf::int32 value);

  // optional .PB.player_id_name peer_info = 5;
  inline bool has_peer_info() const;
  inline void clear_peer_info();
  static const int kPeerInfoFieldNumber = 5;
  inline const ::PB::player_id_name& peer_info() const;
  inline ::PB::player_id_name* mutable_peer_info();
  inline ::PB::player_id_name* release_peer_info();
  inline void set_allocated_peer_info(::PB::player_id_name* peer_info);

  // @@protoc_insertion_point(class_scope:PB.wine_game_history)
 private:
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_mine_status();
  inline void clear_has_mine_status();
  inline void set_has_peer_status();
  inline void clear_has_peer_status();
  inline void set_has_game_result();
  inline void clear_has_game_result();
  inline void set_has_peer_info();
  inline void clear_has_peer_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 game_time_;
  ::google::protobuf::int32 mine_status_;
  ::google::protobuf::int32 peer_status_;
  ::google::protobuf::int32 game_result_;
  ::PB::player_id_name* peer_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static wine_game_history* default_instance_;
};
// -------------------------------------------------------------------

class pixiu_service_buy_record : public ::google::protobuf::Message {
 public:
  pixiu_service_buy_record();
  virtual ~pixiu_service_buy_record();

  pixiu_service_buy_record(const pixiu_service_buy_record& from);

  inline pixiu_service_buy_record& operator=(const pixiu_service_buy_record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pixiu_service_buy_record& default_instance();

  void Swap(pixiu_service_buy_record* other);

  // implements Message ----------------------------------------------

  pixiu_service_buy_record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pixiu_service_buy_record& from);
  void MergeFrom(const pixiu_service_buy_record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes product_id = 1;
  inline bool has_product_id() const;
  inline void clear_product_id();
  static const int kProductIdFieldNumber = 1;
  inline const ::std::string& product_id() const;
  inline void set_product_id(const ::std::string& value);
  inline void set_product_id(const char* value);
  inline void set_product_id(const void* value, size_t size);
  inline ::std::string* mutable_product_id();
  inline ::std::string* release_product_id();
  inline void set_allocated_product_id(::std::string* product_id);

  // optional int32 counts = 2;
  inline bool has_counts() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 2;
  inline ::google::protobuf::int32 counts() const;
  inline void set_counts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.pixiu_service_buy_record)
 private:
  inline void set_has_product_id();
  inline void clear_has_product_id();
  inline void set_has_counts();
  inline void clear_has_counts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* product_id_;
  ::google::protobuf::int32 counts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static pixiu_service_buy_record* default_instance_;
};
// -------------------------------------------------------------------

class npt_test : public ::google::protobuf::Message {
 public:
  npt_test();
  virtual ~npt_test();

  npt_test(const npt_test& from);

  inline npt_test& operator=(const npt_test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_test& default_instance();

  void Swap(npt_test* other);

  // implements Message ----------------------------------------------

  npt_test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_test& from);
  void MergeFrom(const npt_test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEST];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.npt_test)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_test* default_instance_;
};
// -------------------------------------------------------------------

class npt_response : public ::google::protobuf::Message {
 public:
  npt_response();
  virtual ~npt_response();

  npt_response(const npt_response& from);

  inline npt_response& operator=(const npt_response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_response& default_instance();

  void Swap(npt_response* other);

  // implements Message ----------------------------------------------

  npt_response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_response& from);
  void MergeFrom(const npt_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RESPONSE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 retcode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional int32 request_type = 3;
  inline bool has_request_type() const;
  inline void clear_request_type();
  static const int kRequestTypeFieldNumber = 3;
  inline ::google::protobuf::int32 request_type() const;
  inline void set_request_type(::google::protobuf::int32 value);

  // optional int32 param1 = 4;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 4;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_response)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_request_type();
  inline void clear_has_request_type();
  inline void set_has_param1();
  inline void clear_has_param1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 request_type_;
  ::google::protobuf::int32 param1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_response* default_instance_;
};
// -------------------------------------------------------------------

class npt_corps_appoint : public ::google::protobuf::Message {
 public:
  npt_corps_appoint();
  virtual ~npt_corps_appoint();

  npt_corps_appoint(const npt_corps_appoint& from);

  inline npt_corps_appoint& operator=(const npt_corps_appoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_corps_appoint& default_instance();

  void Swap(npt_corps_appoint* other);

  // implements Message ----------------------------------------------

  npt_corps_appoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_corps_appoint& from);
  void MergeFrom(const npt_corps_appoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_corps_appoint_CORPS_APPOINT_OP CORPS_APPOINT_OP;
  static const CORPS_APPOINT_OP CORPS_ADD = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ADD;
  static const CORPS_APPOINT_OP CORPS_DEL = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_DEL;
  static const CORPS_APPOINT_OP CORPS_APPOINT = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT;
  static const CORPS_APPOINT_OP CORPS_DISMISS = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_DISMISS;
  static const CORPS_APPOINT_OP CORPS_QUIT = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_QUIT;
  static const CORPS_APPOINT_OP CORPS_ANNOUNCE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ANNOUNCE;
  static const CORPS_APPOINT_OP CORPS_UPGRADE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE;
  static const CORPS_APPOINT_OP CORPS_ABDICATE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ABDICATE;
  static const CORPS_APPOINT_OP CORPS_ACTIVITY = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ACTIVITY;
  static const CORPS_APPOINT_OP CORPS_INVITE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_INVITE;
  static const CORPS_APPOINT_OP CORPS_REJECT = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_REJECT;
  static const CORPS_APPOINT_OP CORPS_AGREE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_AGREE;
  static const CORPS_APPOINT_OP CORPS_GETDATA = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_GETDATA;
  static const CORPS_APPOINT_OP CORPS_BRIEF = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_BRIEF;
  static const CORPS_APPOINT_OP CORPS_CONTRI = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_CONTRI;
  static const CORPS_APPOINT_OP CORPS_UPGRADE_SKILL = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE_SKILL;
  static const CORPS_APPOINT_OP CORPS_UPGRADE_SHOP = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE_SHOP;
  static const CORPS_APPOINT_OP CORPS_UPGRADE_SKILL2 = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE_SKILL2;
  static const CORPS_APPOINT_OP CORPS_ATTR = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ATTR;
  static const CORPS_APPOINT_OP CORPS_SUMMON = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_SUMMON;
  static const CORPS_APPOINT_OP CORPS_FIRE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_FIRE;
  static const CORPS_APPOINT_OP CORPS_CHARIOT = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_CHARIOT;
  static const CORPS_APPOINT_OP CORPS_UP_CHA = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UP_CHA;
  static const CORPS_APPOINT_OP CORPS_RECL_CHA = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_RECL_CHA;
  static inline bool CORPS_APPOINT_OP_IsValid(int value) {
    return npt_corps_appoint_CORPS_APPOINT_OP_IsValid(value);
  }
  static const CORPS_APPOINT_OP CORPS_APPOINT_OP_MIN =
    npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_MIN;
  static const CORPS_APPOINT_OP CORPS_APPOINT_OP_MAX =
    npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_MAX;
  static const int CORPS_APPOINT_OP_ARRAYSIZE =
    npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CORPS_APPOINT_OP_descriptor() {
    return npt_corps_appoint_CORPS_APPOINT_OP_descriptor();
  }
  static inline const ::std::string& CORPS_APPOINT_OP_Name(CORPS_APPOINT_OP value) {
    return npt_corps_appoint_CORPS_APPOINT_OP_Name(value);
  }
  static inline bool CORPS_APPOINT_OP_Parse(const ::std::string& name,
      CORPS_APPOINT_OP* value) {
    return npt_corps_appoint_CORPS_APPOINT_OP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_APPOINT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline ::google::protobuf::int64 dst() const;
  inline void set_dst(::google::protobuf::int64 value);

  // required .PB.npt_corps_appoint.CORPS_APPOINT_OP op = 3;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 3;
  inline ::PB::npt_corps_appoint_CORPS_APPOINT_OP op() const;
  inline void set_op(::PB::npt_corps_appoint_CORPS_APPOINT_OP value);

  // optional int32 pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional bytes announce = 5;
  inline bool has_announce() const;
  inline void clear_announce();
  static const int kAnnounceFieldNumber = 5;
  inline const ::std::string& announce() const;
  inline void set_announce(const ::std::string& value);
  inline void set_announce(const char* value);
  inline void set_announce(const void* value, size_t size);
  inline ::std::string* mutable_announce();
  inline ::std::string* release_announce();
  inline void set_allocated_announce(::std::string* announce);

  // optional bytes srcname = 6;
  inline bool has_srcname() const;
  inline void clear_srcname();
  static const int kSrcnameFieldNumber = 6;
  inline const ::std::string& srcname() const;
  inline void set_srcname(const ::std::string& value);
  inline void set_srcname(const char* value);
  inline void set_srcname(const void* value, size_t size);
  inline ::std::string* mutable_srcname();
  inline ::std::string* release_srcname();
  inline void set_allocated_srcname(::std::string* srcname);

  // optional bytes dstname = 7;
  inline bool has_dstname() const;
  inline void clear_dstname();
  static const int kDstnameFieldNumber = 7;
  inline const ::std::string& dstname() const;
  inline void set_dstname(const ::std::string& value);
  inline void set_dstname(const char* value);
  inline void set_dstname(const void* value, size_t size);
  inline ::std::string* mutable_dstname();
  inline ::std::string* release_dstname();
  inline void set_allocated_dstname(::std::string* dstname);

  // optional int64 src = 8;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 8;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // optional bytes corpsname = 9;
  inline bool has_corpsname() const;
  inline void clear_corpsname();
  static const int kCorpsnameFieldNumber = 9;
  inline const ::std::string& corpsname() const;
  inline void set_corpsname(const ::std::string& value);
  inline void set_corpsname(const char* value);
  inline void set_corpsname(const void* value, size_t size);
  inline ::std::string* mutable_corpsname();
  inline ::std::string* release_corpsname();
  inline void set_allocated_corpsname(::std::string* corpsname);

  // optional .PB.corps_member member = 10;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 10;
  inline const ::PB::corps_member& member() const;
  inline ::PB::corps_member* mutable_member();
  inline ::PB::corps_member* release_member();
  inline void set_allocated_member(::PB::corps_member* member);

  // optional int64 contri_money = 11;
  inline bool has_contri_money() const;
  inline void clear_contri_money();
  static const int kContriMoneyFieldNumber = 11;
  inline ::google::protobuf::int64 contri_money() const;
  inline void set_contri_money(::google::protobuf::int64 value);

  // optional int64 cur_money = 12;
  inline bool has_cur_money() const;
  inline void clear_cur_money();
  static const int kCurMoneyFieldNumber = 12;
  inline ::google::protobuf::int64 cur_money() const;
  inline void set_cur_money(::google::protobuf::int64 value);

  // optional uint32 skill_level = 13;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 13;
  inline ::google::protobuf::uint32 skill_level() const;
  inline void set_skill_level(::google::protobuf::uint32 value);

  // optional uint32 skill_index = 14;
  inline bool has_skill_index() const;
  inline void clear_skill_index();
  static const int kSkillIndexFieldNumber = 14;
  inline ::google::protobuf::uint32 skill_index() const;
  inline void set_skill_index(::google::protobuf::uint32 value);

  // optional uint32 corps_id = 15;
  inline bool has_corps_id() const;
  inline void clear_corps_id();
  static const int kCorpsIdFieldNumber = 15;
  inline ::google::protobuf::uint32 corps_id() const;
  inline void set_corps_id(::google::protobuf::uint32 value);

  // optional .PB.corp_attribute attr = 16;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 16;
  inline const ::PB::corp_attribute& attr() const;
  inline ::PB::corp_attribute* mutable_attr();
  inline ::PB::corp_attribute* release_attr();
  inline void set_allocated_attr(::PB::corp_attribute* attr);

  // optional int32 tid = 17;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 17;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 index = 18;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 18;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int64 money = 19;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 19;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.npt_corps_appoint)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dst();
  inline void clear_has_dst();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_announce();
  inline void clear_has_announce();
  inline void set_has_srcname();
  inline void clear_has_srcname();
  inline void set_has_dstname();
  inline void clear_has_dstname();
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_corpsname();
  inline void clear_has_corpsname();
  inline void set_has_member();
  inline void clear_has_member();
  inline void set_has_contri_money();
  inline void clear_has_contri_money();
  inline void set_has_cur_money();
  inline void clear_has_cur_money();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_skill_index();
  inline void clear_has_skill_index();
  inline void set_has_corps_id();
  inline void clear_has_corps_id();
  inline void set_has_attr();
  inline void clear_has_attr();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dst_;
  int type_;
  int op_;
  ::std::string* announce_;
  ::std::string* srcname_;
  ::std::string* dstname_;
  ::google::protobuf::int64 src_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::uint32 skill_level_;
  ::std::string* corpsname_;
  ::PB::corps_member* member_;
  ::google::protobuf::int64 contri_money_;
  ::google::protobuf::int64 cur_money_;
  ::google::protobuf::uint32 skill_index_;
  ::google::protobuf::uint32 corps_id_;
  ::PB::corp_attribute* attr_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int64 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_corps_appoint* default_instance_;
};
// -------------------------------------------------------------------

class npt_apply_corps : public ::google::protobuf::Message {
 public:
  npt_apply_corps();
  virtual ~npt_apply_corps();

  npt_apply_corps(const npt_apply_corps& from);

  inline npt_apply_corps& operator=(const npt_apply_corps& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_apply_corps& default_instance();

  void Swap(npt_apply_corps* other);

  // implements Message ----------------------------------------------

  npt_apply_corps* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_apply_corps& from);
  void MergeFrom(const npt_apply_corps& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_APPLY_CORPS];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .PB.corps_apply_t apply = 3;
  inline bool has_apply() const;
  inline void clear_apply();
  static const int kApplyFieldNumber = 3;
  inline const ::PB::corps_apply_t& apply() const;
  inline ::PB::corps_apply_t* mutable_apply();
  inline ::PB::corps_apply_t* release_apply();
  inline void set_allocated_apply(::PB::corps_apply_t* apply);

  // @@protoc_insertion_point(class_scope:PB.npt_apply_corps)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_apply();
  inline void clear_has_apply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 id_;
  ::PB::corps_apply_t* apply_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_apply_corps* default_instance_;
};
// -------------------------------------------------------------------

class npt_corps_data : public ::google::protobuf::Message {
 public:
  npt_corps_data();
  virtual ~npt_corps_data();

  npt_corps_data(const npt_corps_data& from);

  inline npt_corps_data& operator=(const npt_corps_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_corps_data& default_instance();

  void Swap(npt_corps_data* other);

  // implements Message ----------------------------------------------

  npt_corps_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_corps_data& from);
  void MergeFrom(const npt_corps_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_DATA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required .PB.corps_struct data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::PB::corps_struct& data() const;
  inline ::PB::corps_struct* mutable_data();
  inline ::PB::corps_struct* release_data();
  inline void set_allocated_data(::PB::corps_struct* data);

  // repeated .PB.corps_member members = 3;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 3;
  inline const ::PB::corps_member& members(int index) const;
  inline ::PB::corps_member* mutable_members(int index);
  inline ::PB::corps_member* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::corps_member >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::corps_member >*
      mutable_members();

  // optional int32 members_count = 4;
  inline bool has_members_count() const;
  inline void clear_members_count();
  static const int kMembersCountFieldNumber = 4;
  inline ::google::protobuf::int32 members_count() const;
  inline void set_members_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_corps_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_members_count();
  inline void clear_has_members_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::corps_struct* data_;
  int type_;
  ::google::protobuf::int32 members_count_;
  ::google::protobuf::RepeatedPtrField< ::PB::corps_member > members_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_corps_data* default_instance_;
};
// -------------------------------------------------------------------

class name_ruid : public ::google::protobuf::Message {
 public:
  name_ruid();
  virtual ~name_ruid();

  name_ruid(const name_ruid& from);

  inline name_ruid& operator=(const name_ruid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const name_ruid& default_instance();

  void Swap(name_ruid* other);

  // implements Message ----------------------------------------------

  name_ruid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const name_ruid& from);
  void MergeFrom(const name_ruid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PB.name_ruid)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static name_ruid* default_instance_;
};
// -------------------------------------------------------------------

class npt_common_search_search_corps_key : public ::google::protobuf::Message {
 public:
  npt_common_search_search_corps_key();
  virtual ~npt_common_search_search_corps_key();

  npt_common_search_search_corps_key(const npt_common_search_search_corps_key& from);

  inline npt_common_search_search_corps_key& operator=(const npt_common_search_search_corps_key& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_common_search_search_corps_key& default_instance();

  void Swap(npt_common_search_search_corps_key* other);

  // implements Message ----------------------------------------------

  npt_common_search_search_corps_key* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_common_search_search_corps_key& from);
  void MergeFrom(const npt_common_search_search_corps_key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool has_value = 1 [default = false];
  inline bool has_has_value() const;
  inline void clear_has_value();
  static const int kHasValueFieldNumber = 1;
  inline bool has_value() const;
  inline void set_has_value(bool value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 nation = 3;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 3;
  inline ::google::protobuf::int32 nation() const;
  inline void set_nation(::google::protobuf::int32 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PB.npt_common_search.search_corps_key)
 private:
  inline void set_has_has_value();
  inline void clear_has_has_value();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool has_value_;
  ::google::protobuf::int32 level_;
  ::std::string* name_;
  ::google::protobuf::int32 nation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_common_search_search_corps_key* default_instance_;
};
// -------------------------------------------------------------------

class npt_common_search_search_player_key : public ::google::protobuf::Message {
 public:
  npt_common_search_search_player_key();
  virtual ~npt_common_search_search_player_key();

  npt_common_search_search_player_key(const npt_common_search_search_player_key& from);

  inline npt_common_search_search_player_key& operator=(const npt_common_search_search_player_key& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_common_search_search_player_key& default_instance();

  void Swap(npt_common_search_search_player_key* other);

  // implements Message ----------------------------------------------

  npt_common_search_search_player_key* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_common_search_search_player_key& from);
  void MergeFrom(const npt_common_search_search_player_key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 nation = 2;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 2;
  inline ::google::protobuf::int32 nation() const;
  inline void set_nation(::google::protobuf::int32 value);

  // optional bool is_online = 3;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 3;
  inline bool is_online() const;
  inline void set_is_online(bool value);

  // @@protoc_insertion_point(class_scope:PB.npt_common_search.search_player_key)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_is_online();
  inline void clear_has_is_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 nation_;
  bool is_online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_common_search_search_player_key* default_instance_;
};
// -------------------------------------------------------------------

class npt_common_search : public ::google::protobuf::Message {
 public:
  npt_common_search();
  virtual ~npt_common_search();

  npt_common_search(const npt_common_search& from);

  inline npt_common_search& operator=(const npt_common_search& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_common_search& default_instance();

  void Swap(npt_common_search* other);

  // implements Message ----------------------------------------------

  npt_common_search* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_common_search& from);
  void MergeFrom(const npt_common_search& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_common_search_search_corps_key search_corps_key;
  typedef npt_common_search_search_player_key search_player_key;

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_COMMON_SEARCH];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // required uint32 len = 4;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 4;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // optional .PB.npt_common_search.search_corps_key corps_key = 5;
  inline bool has_corps_key() const;
  inline void clear_corps_key();
  static const int kCorpsKeyFieldNumber = 5;
  inline const ::PB::npt_common_search_search_corps_key& corps_key() const;
  inline ::PB::npt_common_search_search_corps_key* mutable_corps_key();
  inline ::PB::npt_common_search_search_corps_key* release_corps_key();
  inline void set_allocated_corps_key(::PB::npt_common_search_search_corps_key* corps_key);

  // optional int32 retcode = 6;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 6;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional int32 total_count = 7;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 7;
  inline ::google::protobuf::int32 total_count() const;
  inline void set_total_count(::google::protobuf::int32 value);

  // repeated .PB.npt_corps_data corps = 8;
  inline int corps_size() const;
  inline void clear_corps();
  static const int kCorpsFieldNumber = 8;
  inline const ::PB::npt_corps_data& corps(int index) const;
  inline ::PB::npt_corps_data* mutable_corps(int index);
  inline ::PB::npt_corps_data* add_corps();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_corps_data >&
      corps() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::npt_corps_data >*
      mutable_corps();

  // optional .PB.npt_common_search.search_player_key player_key = 9;
  inline bool has_player_key() const;
  inline void clear_player_key();
  static const int kPlayerKeyFieldNumber = 9;
  inline const ::PB::npt_common_search_search_player_key& player_key() const;
  inline ::PB::npt_common_search_search_player_key* mutable_player_key();
  inline ::PB::npt_common_search_search_player_key* release_player_key();
  inline void set_allocated_player_key(::PB::npt_common_search_search_player_key* player_key);

  // repeated .PB.name_ruid players = 10;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 10;
  inline const ::PB::name_ruid& players(int index) const;
  inline ::PB::name_ruid* mutable_players(int index);
  inline ::PB::name_ruid* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::name_ruid >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::name_ruid >*
      mutable_players();

  // optional int32 search_time = 11;
  inline bool has_search_time() const;
  inline void clear_search_time();
  static const int kSearchTimeFieldNumber = 11;
  inline ::google::protobuf::int32 search_time() const;
  inline void set_search_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_common_search)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_corps_key();
  inline void clear_has_corps_key();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_total_count();
  inline void clear_has_total_count();
  inline void set_has_player_key();
  inline void clear_has_player_key();
  inline void set_has_search_time();
  inline void clear_has_search_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 pos_;
  ::PB::npt_common_search_search_corps_key* corps_key_;
  ::google::protobuf::uint32 len_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::RepeatedPtrField< ::PB::npt_corps_data > corps_;
  ::PB::npt_common_search_search_player_key* player_key_;
  ::google::protobuf::int32 total_count_;
  ::google::protobuf::int32 search_time_;
  ::google::protobuf::RepeatedPtrField< ::PB::name_ruid > players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_common_search* default_instance_;
};
// -------------------------------------------------------------------

class npt_zhaojiling : public ::google::protobuf::Message {
 public:
  npt_zhaojiling();
  virtual ~npt_zhaojiling();

  npt_zhaojiling(const npt_zhaojiling& from);

  inline npt_zhaojiling& operator=(const npt_zhaojiling& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_zhaojiling& default_instance();

  void Swap(npt_zhaojiling* other);

  // implements Message ----------------------------------------------

  npt_zhaojiling* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_zhaojiling& from);
  void MergeFrom(const npt_zhaojiling& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ZHAOJILING];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.zhaojiling_info baseinfo = 2;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 2;
  inline const ::PB::zhaojiling_info& baseinfo() const;
  inline ::PB::zhaojiling_info* mutable_baseinfo();
  inline ::PB::zhaojiling_info* release_baseinfo();
  inline void set_allocated_baseinfo(::PB::zhaojiling_info* baseinfo);

  // @@protoc_insertion_point(class_scope:PB.npt_zhaojiling)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::zhaojiling_info* baseinfo_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_zhaojiling* default_instance_;
};
// -------------------------------------------------------------------

class npt_sync_mirror_info : public ::google::protobuf::Message {
 public:
  npt_sync_mirror_info();
  virtual ~npt_sync_mirror_info();

  npt_sync_mirror_info(const npt_sync_mirror_info& from);

  inline npt_sync_mirror_info& operator=(const npt_sync_mirror_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_sync_mirror_info& default_instance();

  void Swap(npt_sync_mirror_info* other);

  // implements Message ----------------------------------------------

  npt_sync_mirror_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_sync_mirror_info& from);
  void MergeFrom(const npt_sync_mirror_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_sync_mirror_info_MIRROR_STATE_MASK MIRROR_STATE_MASK;
  static const MIRROR_STATE_MASK MS_FORBIT_MIRROR_STATE = npt_sync_mirror_info_MIRROR_STATE_MASK_MS_FORBIT_MIRROR_STATE;
  static const MIRROR_STATE_MASK MS_IN_NATION_WAR = npt_sync_mirror_info_MIRROR_STATE_MASK_MS_IN_NATION_WAR;
  static inline bool MIRROR_STATE_MASK_IsValid(int value) {
    return npt_sync_mirror_info_MIRROR_STATE_MASK_IsValid(value);
  }
  static const MIRROR_STATE_MASK MIRROR_STATE_MASK_MIN =
    npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_MIN;
  static const MIRROR_STATE_MASK MIRROR_STATE_MASK_MAX =
    npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_MAX;
  static const int MIRROR_STATE_MASK_ARRAYSIZE =
    npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MIRROR_STATE_MASK_descriptor() {
    return npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor();
  }
  static inline const ::std::string& MIRROR_STATE_MASK_Name(MIRROR_STATE_MASK value) {
    return npt_sync_mirror_info_MIRROR_STATE_MASK_Name(value);
  }
  static inline bool MIRROR_STATE_MASK_Parse(const ::std::string& name,
      MIRROR_STATE_MASK* value) {
    return npt_sync_mirror_info_MIRROR_STATE_MASK_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_MIRROR_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.ipt_mirror_info infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::PB::ipt_mirror_info& infos(int index) const;
  inline ::PB::ipt_mirror_info* mutable_infos(int index);
  inline ::PB::ipt_mirror_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ipt_mirror_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ipt_mirror_info >*
      mutable_infos();

  // optional uint32 state_mask = 3;
  inline bool has_state_mask() const;
  inline void clear_state_mask();
  static const int kStateMaskFieldNumber = 3;
  inline ::google::protobuf::uint32 state_mask() const;
  inline void set_state_mask(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_sync_mirror_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_state_mask();
  inline void clear_has_state_mask();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ipt_mirror_info > infos_;
  int type_;
  ::google::protobuf::uint32 state_mask_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_sync_mirror_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_sync_nation_war_info_nwar_npc_info : public ::google::protobuf::Message {
 public:
  npt_sync_nation_war_info_nwar_npc_info();
  virtual ~npt_sync_nation_war_info_nwar_npc_info();

  npt_sync_nation_war_info_nwar_npc_info(const npt_sync_nation_war_info_nwar_npc_info& from);

  inline npt_sync_nation_war_info_nwar_npc_info& operator=(const npt_sync_nation_war_info_nwar_npc_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_sync_nation_war_info_nwar_npc_info& default_instance();

  void Swap(npt_sync_nation_war_info_nwar_npc_info* other);

  // implements Message ----------------------------------------------

  npt_sync_nation_war_info_nwar_npc_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_sync_nation_war_info_nwar_npc_info& from);
  void MergeFrom(const npt_sync_nation_war_info_nwar_npc_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 npc_tid = 1;
  inline bool has_npc_tid() const;
  inline void clear_npc_tid();
  static const int kNpcTidFieldNumber = 1;
  inline ::google::protobuf::uint32 npc_tid() const;
  inline void set_npc_tid(::google::protobuf::uint32 value);

  // required uint32 npc_nation = 2;
  inline bool has_npc_nation() const;
  inline void clear_npc_nation();
  static const int kNpcNationFieldNumber = 2;
  inline ::google::protobuf::uint32 npc_nation() const;
  inline void set_npc_nation(::google::protobuf::uint32 value);

  // required uint32 npc_hp = 3;
  inline bool has_npc_hp() const;
  inline void clear_npc_hp();
  static const int kNpcHpFieldNumber = 3;
  inline ::google::protobuf::uint32 npc_hp() const;
  inline void set_npc_hp(::google::protobuf::uint32 value);

  // required uint32 npc_born = 4;
  inline bool has_npc_born() const;
  inline void clear_npc_born();
  static const int kNpcBornFieldNumber = 4;
  inline ::google::protobuf::uint32 npc_born() const;
  inline void set_npc_born(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_sync_nation_war_info.nwar_npc_info)
 private:
  inline void set_has_npc_tid();
  inline void clear_has_npc_tid();
  inline void set_has_npc_nation();
  inline void clear_has_npc_nation();
  inline void set_has_npc_hp();
  inline void clear_has_npc_hp();
  inline void set_has_npc_born();
  inline void clear_has_npc_born();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 npc_tid_;
  ::google::protobuf::uint32 npc_nation_;
  ::google::protobuf::uint32 npc_hp_;
  ::google::protobuf::uint32 npc_born_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_sync_nation_war_info_nwar_npc_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_sync_nation_war_info : public ::google::protobuf::Message {
 public:
  npt_sync_nation_war_info();
  virtual ~npt_sync_nation_war_info();

  npt_sync_nation_war_info(const npt_sync_nation_war_info& from);

  inline npt_sync_nation_war_info& operator=(const npt_sync_nation_war_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_sync_nation_war_info& default_instance();

  void Swap(npt_sync_nation_war_info* other);

  // implements Message ----------------------------------------------

  npt_sync_nation_war_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_sync_nation_war_info& from);
  void MergeFrom(const npt_sync_nation_war_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_sync_nation_war_info_nwar_npc_info nwar_npc_info;

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_NATION_WAR_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required uint32 war_end_time = 2;
  inline bool has_war_end_time() const;
  inline void clear_war_end_time();
  static const int kWarEndTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 war_end_time() const;
  inline void set_war_end_time(::google::protobuf::uint32 value);

  // repeated .PB.npt_sync_nation_war_info.nwar_npc_info npc_info = 3;
  inline int npc_info_size() const;
  inline void clear_npc_info();
  static const int kNpcInfoFieldNumber = 3;
  inline const ::PB::npt_sync_nation_war_info_nwar_npc_info& npc_info(int index) const;
  inline ::PB::npt_sync_nation_war_info_nwar_npc_info* mutable_npc_info(int index);
  inline ::PB::npt_sync_nation_war_info_nwar_npc_info* add_npc_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_sync_nation_war_info_nwar_npc_info >&
      npc_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::npt_sync_nation_war_info_nwar_npc_info >*
      mutable_npc_info();

  // optional uint32 wangcheng_revive_faction = 4;
  inline bool has_wangcheng_revive_faction() const;
  inline void clear_wangcheng_revive_faction();
  static const int kWangchengReviveFactionFieldNumber = 4;
  inline ::google::protobuf::uint32 wangcheng_revive_faction() const;
  inline void set_wangcheng_revive_faction(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_sync_nation_war_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_war_end_time();
  inline void clear_has_war_end_time();
  inline void set_has_wangcheng_revive_faction();
  inline void clear_has_wangcheng_revive_faction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 war_end_time_;
  ::google::protobuf::RepeatedPtrField< ::PB::npt_sync_nation_war_info_nwar_npc_info > npc_info_;
  ::google::protobuf::uint32 wangcheng_revive_faction_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_sync_nation_war_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_get_corp_name : public ::google::protobuf::Message {
 public:
  npt_get_corp_name();
  virtual ~npt_get_corp_name();

  npt_get_corp_name(const npt_get_corp_name& from);

  inline npt_get_corp_name& operator=(const npt_get_corp_name& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_get_corp_name& default_instance();

  void Swap(npt_get_corp_name* other);

  // implements Message ----------------------------------------------

  npt_get_corp_name* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_get_corp_name& from);
  void MergeFrom(const npt_get_corp_name& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_CORP_NAME];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required uint32 corp_id = 2;
  inline bool has_corp_id() const;
  inline void clear_corp_id();
  static const int kCorpIdFieldNumber = 2;
  inline ::google::protobuf::uint32 corp_id() const;
  inline void set_corp_id(::google::protobuf::uint32 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PB.npt_get_corp_name)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_corp_id();
  inline void clear_has_corp_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 corp_id_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_get_corp_name* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_war_operate : public ::google::protobuf::Message {
 public:
  npt_nation_war_operate();
  virtual ~npt_nation_war_operate();

  npt_nation_war_operate(const npt_nation_war_operate& from);

  inline npt_nation_war_operate& operator=(const npt_nation_war_operate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_war_operate& default_instance();

  void Swap(npt_nation_war_operate* other);

  // implements Message ----------------------------------------------

  npt_nation_war_operate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_war_operate& from);
  void MergeFrom(const npt_nation_war_operate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required uint32 oper_type = 2;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 oper_type() const;
  inline void set_oper_type(::google::protobuf::uint32 value);

  // required uint32 oper_param1 = 3;
  inline bool has_oper_param1() const;
  inline void clear_oper_param1();
  static const int kOperParam1FieldNumber = 3;
  inline ::google::protobuf::uint32 oper_param1() const;
  inline void set_oper_param1(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_war_operate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_oper_param1();
  inline void clear_has_oper_param1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 oper_type_;
  ::google::protobuf::uint32 oper_param1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_war_operate* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_war_operate_info : public ::google::protobuf::Message {
 public:
  npt_nation_war_operate_info();
  virtual ~npt_nation_war_operate_info();

  npt_nation_war_operate_info(const npt_nation_war_operate_info& from);

  inline npt_nation_war_operate_info& operator=(const npt_nation_war_operate_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_war_operate_info& default_instance();

  void Swap(npt_nation_war_operate_info* other);

  // implements Message ----------------------------------------------

  npt_nation_war_operate_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_war_operate_info& from);
  void MergeFrom(const npt_nation_war_operate_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required uint32 war_id = 2;
  inline bool has_war_id() const;
  inline void clear_war_id();
  static const int kWarIdFieldNumber = 2;
  inline ::google::protobuf::uint32 war_id() const;
  inline void set_war_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_war_operate_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_war_id();
  inline void clear_has_war_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 war_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_war_operate_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_war_operate_info_re : public ::google::protobuf::Message {
 public:
  npt_nation_war_operate_info_re();
  virtual ~npt_nation_war_operate_info_re();

  npt_nation_war_operate_info_re(const npt_nation_war_operate_info_re& from);

  inline npt_nation_war_operate_info_re& operator=(const npt_nation_war_operate_info_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_war_operate_info_re& default_instance();

  void Swap(npt_nation_war_operate_info_re* other);

  // implements Message ----------------------------------------------

  npt_nation_war_operate_info_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_war_operate_info_re& from);
  void MergeFrom(const npt_nation_war_operate_info_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required uint32 attack_zhaoji = 2;
  inline bool has_attack_zhaoji() const;
  inline void clear_attack_zhaoji();
  static const int kAttackZhaojiFieldNumber = 2;
  inline ::google::protobuf::uint32 attack_zhaoji() const;
  inline void set_attack_zhaoji(::google::protobuf::uint32 value);

  // required uint32 defend_zhaoji = 3;
  inline bool has_defend_zhaoji() const;
  inline void clear_defend_zhaoji();
  static const int kDefendZhaojiFieldNumber = 3;
  inline ::google::protobuf::uint32 defend_zhaoji() const;
  inline void set_defend_zhaoji(::google::protobuf::uint32 value);

  // required uint32 attack_yanshi = 4;
  inline bool has_attack_yanshi() const;
  inline void clear_attack_yanshi();
  static const int kAttackYanshiFieldNumber = 4;
  inline ::google::protobuf::uint32 attack_yanshi() const;
  inline void set_attack_yanshi(::google::protobuf::uint32 value);

  // required uint32 defend_jiaxue = 5;
  inline bool has_defend_jiaxue() const;
  inline void clear_defend_jiaxue();
  static const int kDefendJiaxueFieldNumber = 5;
  inline ::google::protobuf::uint32 defend_jiaxue() const;
  inline void set_defend_jiaxue(::google::protobuf::uint32 value);

  // required uint32 attack_jihuo = 6;
  inline bool has_attack_jihuo() const;
  inline void clear_attack_jihuo();
  static const int kAttackJihuoFieldNumber = 6;
  inline ::google::protobuf::uint32 attack_jihuo() const;
  inline void set_attack_jihuo(::google::protobuf::uint32 value);

  // required uint32 defend_jihuo = 7;
  inline bool has_defend_jihuo() const;
  inline void clear_defend_jihuo();
  static const int kDefendJihuoFieldNumber = 7;
  inline ::google::protobuf::uint32 defend_jihuo() const;
  inline void set_defend_jihuo(::google::protobuf::uint32 value);

  // required uint32 quick_transfer = 8;
  inline bool has_quick_transfer() const;
  inline void clear_quick_transfer();
  static const int kQuickTransferFieldNumber = 8;
  inline ::google::protobuf::uint32 quick_transfer() const;
  inline void set_quick_transfer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_war_operate_info_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_attack_zhaoji();
  inline void clear_has_attack_zhaoji();
  inline void set_has_defend_zhaoji();
  inline void clear_has_defend_zhaoji();
  inline void set_has_attack_yanshi();
  inline void clear_has_attack_yanshi();
  inline void set_has_defend_jiaxue();
  inline void clear_has_defend_jiaxue();
  inline void set_has_attack_jihuo();
  inline void clear_has_attack_jihuo();
  inline void set_has_defend_jihuo();
  inline void clear_has_defend_jihuo();
  inline void set_has_quick_transfer();
  inline void clear_has_quick_transfer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 attack_zhaoji_;
  ::google::protobuf::uint32 defend_zhaoji_;
  ::google::protobuf::uint32 attack_yanshi_;
  ::google::protobuf::uint32 defend_jiaxue_;
  ::google::protobuf::uint32 attack_jihuo_;
  ::google::protobuf::uint32 defend_jihuo_;
  ::google::protobuf::uint32 quick_transfer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_war_operate_info_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_team_invite : public ::google::protobuf::Message {
 public:
  npt_team_invite();
  virtual ~npt_team_invite();

  npt_team_invite(const npt_team_invite& from);

  inline npt_team_invite& operator=(const npt_team_invite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_team_invite& default_instance();

  void Swap(npt_team_invite* other);

  // implements Message ----------------------------------------------

  npt_team_invite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_team_invite& from);
  void MergeFrom(const npt_team_invite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INVITE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 assign_rule = 3;
  inline bool has_assign_rule() const;
  inline void clear_assign_rule();
  static const int kAssignRuleFieldNumber = 3;
  inline ::google::protobuf::int32 assign_rule() const;
  inline void set_assign_rule(::google::protobuf::int32 value);

  // optional int32 auto_admit = 4;
  inline bool has_auto_admit() const;
  inline void clear_auto_admit();
  static const int kAutoAdmitFieldNumber = 4;
  inline ::google::protobuf::int32 auto_admit() const;
  inline void set_auto_admit(::google::protobuf::int32 value);

  // optional int32 open_invite = 5;
  inline bool has_open_invite() const;
  inline void clear_open_invite();
  static const int kOpenInviteFieldNumber = 5;
  inline ::google::protobuf::int32 open_invite() const;
  inline void set_open_invite(::google::protobuf::int32 value);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 profession = 7;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 7;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 lineid = 8;
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineidFieldNumber = 8;
  inline ::google::protobuf::int32 lineid() const;
  inline void set_lineid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_team_invite)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_assign_rule();
  inline void clear_has_assign_rule();
  inline void set_has_auto_admit();
  inline void clear_has_auto_admit();
  inline void set_has_open_invite();
  inline void clear_has_open_invite();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_lineid();
  inline void clear_has_lineid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;
  ::google::protobuf::int32 assign_rule_;
  ::google::protobuf::int32 auto_admit_;
  ::google::protobuf::int32 open_invite_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 lineid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_team_invite* default_instance_;
};
// -------------------------------------------------------------------

class npt_friend_invite : public ::google::protobuf::Message {
 public:
  npt_friend_invite();
  virtual ~npt_friend_invite();

  npt_friend_invite(const npt_friend_invite& from);

  inline npt_friend_invite& operator=(const npt_friend_invite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_friend_invite& default_instance();

  void Swap(npt_friend_invite* other);

  // implements Message ----------------------------------------------

  npt_friend_invite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_friend_invite& from);
  void MergeFrom(const npt_friend_invite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_FRIEND_INVITE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 profession = 4;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 4;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 group = 5;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_friend_invite)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_group();
  inline void clear_has_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_friend_invite* default_instance_;
};
// -------------------------------------------------------------------

class npt_team_info_team_info : public ::google::protobuf::Message {
 public:
  npt_team_info_team_info();
  virtual ~npt_team_info_team_info();

  npt_team_info_team_info(const npt_team_info_team_info& from);

  inline npt_team_info_team_info& operator=(const npt_team_info_team_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_team_info_team_info& default_instance();

  void Swap(npt_team_info_team_info* other);

  // implements Message ----------------------------------------------

  npt_team_info_team_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_team_info_team_info& from);
  void MergeFrom(const npt_team_info_team_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 teamid = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 1;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // required int64 leader = 2;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 2;
  inline ::google::protobuf::int64 leader() const;
  inline void set_leader(::google::protobuf::int64 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 capacity = 5;
  inline bool has_capacity() const;
  inline void clear_capacity();
  static const int kCapacityFieldNumber = 5;
  inline ::google::protobuf::int32 capacity() const;
  inline void set_capacity(::google::protobuf::int32 value);

  // optional int32 prof = 6;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 6;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // required int32 members = 7;
  inline bool has_members() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 7;
  inline ::google::protobuf::int32 members() const;
  inline void set_members(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_team_info.team_info)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_leader();
  inline void clear_has_leader();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_capacity();
  inline void clear_has_capacity();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_members();
  inline void clear_has_members();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 leader_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 level_;
  ::std::string* name_;
  ::google::protobuf::int32 capacity_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 members_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_team_info_team_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_team_info : public ::google::protobuf::Message {
 public:
  npt_team_info();
  virtual ~npt_team_info();

  npt_team_info(const npt_team_info& from);

  inline npt_team_info& operator=(const npt_team_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_team_info& default_instance();

  void Swap(npt_team_info* other);

  // implements Message ----------------------------------------------

  npt_team_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_team_info& from);
  void MergeFrom(const npt_team_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_team_info_team_info team_info;

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated int32 teamids = 2;
  inline int teamids_size() const;
  inline void clear_teamids();
  static const int kTeamidsFieldNumber = 2;
  inline ::google::protobuf::int32 teamids(int index) const;
  inline void set_teamids(int index, ::google::protobuf::int32 value);
  inline void add_teamids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      teamids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_teamids();

  // repeated .PB.npt_team_info.team_info teams = 3;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 3;
  inline const ::PB::npt_team_info_team_info& teams(int index) const;
  inline ::PB::npt_team_info_team_info* mutable_teams(int index);
  inline ::PB::npt_team_info_team_info* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_team_info_team_info >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::npt_team_info_team_info >*
      mutable_teams();

  // @@protoc_insertion_point(class_scope:PB.npt_team_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > teamids_;
  ::google::protobuf::RepeatedPtrField< ::PB::npt_team_info_team_info > teams_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_team_info* default_instance_;
};
// -------------------------------------------------------------------

class other_player_profile : public ::google::protobuf::Message {
 public:
  other_player_profile();
  virtual ~other_player_profile();

  other_player_profile(const other_player_profile& from);

  inline other_player_profile& operator=(const other_player_profile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const other_player_profile& default_instance();

  void Swap(other_player_profile* other);

  // implements Message ----------------------------------------------

  other_player_profile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const other_player_profile& from);
  void MergeFrom(const other_player_profile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.face_book pb_facebook = 1;
  inline bool has_pb_facebook() const;
  inline void clear_pb_facebook();
  static const int kPbFacebookFieldNumber = 1;
  inline const ::PB::face_book& pb_facebook() const;
  inline ::PB::face_book* mutable_pb_facebook();
  inline ::PB::face_book* release_pb_facebook();
  inline void set_allocated_pb_facebook(::PB::face_book* pb_facebook);

  // optional uint32 nation = 2;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 2;
  inline ::google::protobuf::uint32 nation() const;
  inline void set_nation(::google::protobuf::uint32 value);

  // optional uint32 nation_pos = 3;
  inline bool has_nation_pos() const;
  inline void clear_nation_pos();
  static const int kNationPosFieldNumber = 3;
  inline ::google::protobuf::uint32 nation_pos() const;
  inline void set_nation_pos(::google::protobuf::uint32 value);

  // optional uint32 duke_level = 4;
  inline bool has_duke_level() const;
  inline void clear_duke_level();
  static const int kDukeLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 duke_level() const;
  inline void set_duke_level(::google::protobuf::uint32 value);

  // optional bool fashion = 5;
  inline bool has_fashion() const;
  inline void clear_fashion();
  static const int kFashionFieldNumber = 5;
  inline bool fashion() const;
  inline void set_fashion(bool value);

  // optional uint32 magic_weapon_tid = 6;
  inline bool has_magic_weapon_tid() const;
  inline void clear_magic_weapon_tid();
  static const int kMagicWeaponTidFieldNumber = 6;
  inline ::google::protobuf::uint32 magic_weapon_tid() const;
  inline void set_magic_weapon_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.other_player_profile)
 private:
  inline void set_has_pb_facebook();
  inline void clear_has_pb_facebook();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_nation_pos();
  inline void clear_has_nation_pos();
  inline void set_has_duke_level();
  inline void clear_has_duke_level();
  inline void set_has_fashion();
  inline void clear_has_fashion();
  inline void set_has_magic_weapon_tid();
  inline void clear_has_magic_weapon_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::face_book* pb_facebook_;
  ::google::protobuf::uint32 nation_;
  ::google::protobuf::uint32 nation_pos_;
  ::google::protobuf::uint32 duke_level_;
  bool fashion_;
  ::google::protobuf::uint32 magic_weapon_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static other_player_profile* default_instance_;
};
// -------------------------------------------------------------------

class npt_get_player_profile : public ::google::protobuf::Message {
 public:
  npt_get_player_profile();
  virtual ~npt_get_player_profile();

  npt_get_player_profile(const npt_get_player_profile& from);

  inline npt_get_player_profile& operator=(const npt_get_player_profile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_get_player_profile& default_instance();

  void Swap(npt_get_player_profile* other);

  // implements Message ----------------------------------------------

  npt_get_player_profile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_get_player_profile& from);
  void MergeFrom(const npt_get_player_profile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_get_player_profile_GET_PROFILE_MASK GET_PROFILE_MASK;
  static const GET_PROFILE_MASK GET_ALL_PROFILE = npt_get_player_profile_GET_PROFILE_MASK_GET_ALL_PROFILE;
  static const GET_PROFILE_MASK GET_SNS = npt_get_player_profile_GET_PROFILE_MASK_GET_SNS;
  static const GET_PROFILE_MASK GET_EQUIP = npt_get_player_profile_GET_PROFILE_MASK_GET_EQUIP;
  static const GET_PROFILE_MASK GET_PROPERTY = npt_get_player_profile_GET_PROFILE_MASK_GET_PROPERTY;
  static inline bool GET_PROFILE_MASK_IsValid(int value) {
    return npt_get_player_profile_GET_PROFILE_MASK_IsValid(value);
  }
  static const GET_PROFILE_MASK GET_PROFILE_MASK_MIN =
    npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_MIN;
  static const GET_PROFILE_MASK GET_PROFILE_MASK_MAX =
    npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_MAX;
  static const int GET_PROFILE_MASK_ARRAYSIZE =
    npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GET_PROFILE_MASK_descriptor() {
    return npt_get_player_profile_GET_PROFILE_MASK_descriptor();
  }
  static inline const ::std::string& GET_PROFILE_MASK_Name(GET_PROFILE_MASK value) {
    return npt_get_player_profile_GET_PROFILE_MASK_Name(value);
  }
  static inline bool GET_PROFILE_MASK_Parse(const ::std::string& name,
      GET_PROFILE_MASK* value) {
    return npt_get_player_profile_GET_PROFILE_MASK_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_PLAYER_PROFILE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional uint32 get_profile_mask = 3 [default = 0];
  inline bool has_get_profile_mask() const;
  inline void clear_get_profile_mask();
  static const int kGetProfileMaskFieldNumber = 3;
  inline ::google::protobuf::uint32 get_profile_mask() const;
  inline void set_get_profile_mask(::google::protobuf::uint32 value);

  // optional bytes snsinfo = 4;
  inline bool has_snsinfo() const;
  inline void clear_snsinfo();
  static const int kSnsinfoFieldNumber = 4;
  inline const ::std::string& snsinfo() const;
  inline void set_snsinfo(const ::std::string& value);
  inline void set_snsinfo(const char* value);
  inline void set_snsinfo(const void* value, size_t size);
  inline ::std::string* mutable_snsinfo();
  inline ::std::string* release_snsinfo();
  inline void set_allocated_snsinfo(::std::string* snsinfo);

  // optional .PB.gs_role_mutable_data property = 5;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 5;
  inline const ::PB::gs_role_mutable_data& property() const;
  inline ::PB::gs_role_mutable_data* mutable_property();
  inline ::PB::gs_role_mutable_data* release_property();
  inline void set_allocated_property(::PB::gs_role_mutable_data* property);

  // optional bytes equipments = 6;
  inline bool has_equipments() const;
  inline void clear_equipments();
  static const int kEquipmentsFieldNumber = 6;
  inline const ::std::string& equipments() const;
  inline void set_equipments(const ::std::string& value);
  inline void set_equipments(const char* value);
  inline void set_equipments(const void* value, size_t size);
  inline ::std::string* mutable_equipments();
  inline ::std::string* release_equipments();
  inline void set_allocated_equipments(::std::string* equipments);

  // optional .PB.other_player_profile others = 7;
  inline bool has_others() const;
  inline void clear_others();
  static const int kOthersFieldNumber = 7;
  inline const ::PB::other_player_profile& others() const;
  inline ::PB::other_player_profile* mutable_others();
  inline ::PB::other_player_profile* release_others();
  inline void set_allocated_others(::PB::other_player_profile* others);

  // @@protoc_insertion_point(class_scope:PB.npt_get_player_profile)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_get_profile_mask();
  inline void clear_has_get_profile_mask();
  inline void set_has_snsinfo();
  inline void clear_has_snsinfo();
  inline void set_has_property();
  inline void clear_has_property();
  inline void set_has_equipments();
  inline void clear_has_equipments();
  inline void set_has_others();
  inline void clear_has_others();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::uint32 get_profile_mask_;
  ::std::string* snsinfo_;
  ::PB::gs_role_mutable_data* property_;
  ::std::string* equipments_;
  ::PB::other_player_profile* others_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_get_player_profile* default_instance_;
};
// -------------------------------------------------------------------

class npt_blessing_info : public ::google::protobuf::Message {
 public:
  npt_blessing_info();
  virtual ~npt_blessing_info();

  npt_blessing_info(const npt_blessing_info& from);

  inline npt_blessing_info& operator=(const npt_blessing_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_blessing_info& default_instance();

  void Swap(npt_blessing_info* other);

  // implements Message ----------------------------------------------

  npt_blessing_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_blessing_info& from);
  void MergeFrom(const npt_blessing_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BLESSING_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.blessing_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PB::blessing_info& info() const;
  inline ::PB::blessing_info* mutable_info();
  inline ::PB::blessing_info* release_info();
  inline void set_allocated_info(::PB::blessing_info* info);

  // optional bool tanksgiver = 3;
  inline bool has_tanksgiver() const;
  inline void clear_tanksgiver();
  static const int kTanksgiverFieldNumber = 3;
  inline bool tanksgiver() const;
  inline void set_tanksgiver(bool value);

  // @@protoc_insertion_point(class_scope:PB.npt_blessing_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_tanksgiver();
  inline void clear_has_tanksgiver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::blessing_info* info_;
  int type_;
  bool tanksgiver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_blessing_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_nationwar_event : public ::google::protobuf::Message {
 public:
  npt_nationwar_event();
  virtual ~npt_nationwar_event();

  npt_nationwar_event(const npt_nationwar_event& from);

  inline npt_nationwar_event& operator=(const npt_nationwar_event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nationwar_event& default_instance();

  void Swap(npt_nationwar_event* other);

  // implements Message ----------------------------------------------

  npt_nationwar_event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nationwar_event& from);
  void MergeFrom(const npt_nationwar_event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_nationwar_event_NNE_TYPE NNE_TYPE;
  static const NNE_TYPE NATION_WAR_KILL_COUNT = npt_nationwar_event_NNE_TYPE_NATION_WAR_KILL_COUNT;
  static const NNE_TYPE NATION_WAR_JIHUO = npt_nationwar_event_NNE_TYPE_NATION_WAR_JIHUO;
  static const NNE_TYPE NATION_WAR_JIHUO_COOLDOWN = npt_nationwar_event_NNE_TYPE_NATION_WAR_JIHUO_COOLDOWN;
  static inline bool NNE_TYPE_IsValid(int value) {
    return npt_nationwar_event_NNE_TYPE_IsValid(value);
  }
  static const NNE_TYPE NNE_TYPE_MIN =
    npt_nationwar_event_NNE_TYPE_NNE_TYPE_MIN;
  static const NNE_TYPE NNE_TYPE_MAX =
    npt_nationwar_event_NNE_TYPE_NNE_TYPE_MAX;
  static const int NNE_TYPE_ARRAYSIZE =
    npt_nationwar_event_NNE_TYPE_NNE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NNE_TYPE_descriptor() {
    return npt_nationwar_event_NNE_TYPE_descriptor();
  }
  static inline const ::std::string& NNE_TYPE_Name(NNE_TYPE value) {
    return npt_nationwar_event_NNE_TYPE_Name(value);
  }
  static inline bool NNE_TYPE_Parse(const ::std::string& name,
      NNE_TYPE* value) {
    return npt_nationwar_event_NNE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATIONWAR_EVENT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.npt_nationwar_event.NNE_TYPE event_type = 2;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  inline ::PB::npt_nationwar_event_NNE_TYPE event_type() const;
  inline void set_event_type(::PB::npt_nationwar_event_NNE_TYPE value);

  // optional int32 event_param = 3;
  inline bool has_event_param() const;
  inline void clear_event_param();
  static const int kEventParamFieldNumber = 3;
  inline ::google::protobuf::int32 event_param() const;
  inline void set_event_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nationwar_event)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_event_param();
  inline void clear_has_event_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int event_type_;
  ::google::protobuf::int32 event_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nationwar_event* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_shutup : public ::google::protobuf::Message {
 public:
  npt_nation_shutup();
  virtual ~npt_nation_shutup();

  npt_nation_shutup(const npt_nation_shutup& from);

  inline npt_nation_shutup& operator=(const npt_nation_shutup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_shutup& default_instance();

  void Swap(npt_nation_shutup* other);

  // implements Message ----------------------------------------------

  npt_nation_shutup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_shutup& from);
  void MergeFrom(const npt_nation_shutup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 dst_roleid = 2;
  inline bool has_dst_roleid() const;
  inline void clear_dst_roleid();
  static const int kDstRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 dst_roleid() const;
  inline void set_dst_roleid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_shutup)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dst_roleid();
  inline void clear_has_dst_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dst_roleid_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_shutup* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_shutup_info : public ::google::protobuf::Message {
 public:
  npt_nation_shutup_info();
  virtual ~npt_nation_shutup_info();

  npt_nation_shutup_info(const npt_nation_shutup_info& from);

  inline npt_nation_shutup_info& operator=(const npt_nation_shutup_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_shutup_info& default_instance();

  void Swap(npt_nation_shutup_info* other);

  // implements Message ----------------------------------------------

  npt_nation_shutup_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_shutup_info& from);
  void MergeFrom(const npt_nation_shutup_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 use_times = 2;
  inline bool has_use_times() const;
  inline void clear_use_times();
  static const int kUseTimesFieldNumber = 2;
  inline ::google::protobuf::int32 use_times() const;
  inline void set_use_times(::google::protobuf::int32 value);

  // required int32 remain_times = 3;
  inline bool has_remain_times() const;
  inline void clear_remain_times();
  static const int kRemainTimesFieldNumber = 3;
  inline ::google::protobuf::int32 remain_times() const;
  inline void set_remain_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_shutup_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_use_times();
  inline void clear_has_use_times();
  inline void set_has_remain_times();
  inline void clear_has_remain_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 use_times_;
  ::google::protobuf::int32 remain_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_shutup_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_commander_appoint : public ::google::protobuf::Message {
 public:
  npt_nation_commander_appoint();
  virtual ~npt_nation_commander_appoint();

  npt_nation_commander_appoint(const npt_nation_commander_appoint& from);

  inline npt_nation_commander_appoint& operator=(const npt_nation_commander_appoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_commander_appoint& default_instance();

  void Swap(npt_nation_commander_appoint* other);

  // implements Message ----------------------------------------------

  npt_nation_commander_appoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_commander_appoint& from);
  void MergeFrom(const npt_nation_commander_appoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_APPOINT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 dst_roleid = 2;
  inline bool has_dst_roleid() const;
  inline void clear_dst_roleid();
  static const int kDstRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 dst_roleid() const;
  inline void set_dst_roleid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_commander_appoint)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dst_roleid();
  inline void clear_has_dst_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dst_roleid_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_commander_appoint* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_commander_notify : public ::google::protobuf::Message {
 public:
  npt_nation_commander_notify();
  virtual ~npt_nation_commander_notify();

  npt_nation_commander_notify(const npt_nation_commander_notify& from);

  inline npt_nation_commander_notify& operator=(const npt_nation_commander_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_commander_notify& default_instance();

  void Swap(npt_nation_commander_notify* other);

  // implements Message ----------------------------------------------

  npt_nation_commander_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_commander_notify& from);
  void MergeFrom(const npt_nation_commander_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_NOTIFY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional bytes dst_name = 2;
  inline bool has_dst_name() const;
  inline void clear_dst_name();
  static const int kDstNameFieldNumber = 2;
  inline const ::std::string& dst_name() const;
  inline void set_dst_name(const ::std::string& value);
  inline void set_dst_name(const char* value);
  inline void set_dst_name(const void* value, size_t size);
  inline ::std::string* mutable_dst_name();
  inline ::std::string* release_dst_name();
  inline void set_allocated_dst_name(::std::string* dst_name);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_commander_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dst_name();
  inline void clear_has_dst_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dst_name_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_commander_notify* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_war_history : public ::google::protobuf::Message {
 public:
  npt_nation_war_history();
  virtual ~npt_nation_war_history();

  npt_nation_war_history(const npt_nation_war_history& from);

  inline npt_nation_war_history& operator=(const npt_nation_war_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_war_history& default_instance();

  void Swap(npt_nation_war_history* other);

  // implements Message ----------------------------------------------

  npt_nation_war_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_war_history& from);
  void MergeFrom(const npt_nation_war_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_HISTORY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.nation_war_history historys = 2;
  inline int historys_size() const;
  inline void clear_historys();
  static const int kHistorysFieldNumber = 2;
  inline const ::PB::nation_war_history& historys(int index) const;
  inline ::PB::nation_war_history* mutable_historys(int index);
  inline ::PB::nation_war_history* add_historys();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::nation_war_history >&
      historys() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::nation_war_history >*
      mutable_historys();

  // @@protoc_insertion_point(class_scope:PB.npt_nation_war_history)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::nation_war_history > historys_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_war_history* default_instance_;
};
// -------------------------------------------------------------------

class npt_request_info : public ::google::protobuf::Message {
 public:
  npt_request_info();
  virtual ~npt_request_info();

  npt_request_info(const npt_request_info& from);

  inline npt_request_info& operator=(const npt_request_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_request_info& default_instance();

  void Swap(npt_request_info* other);

  // implements Message ----------------------------------------------

  npt_request_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_request_info& from);
  void MergeFrom(const npt_request_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_request_info_INFO_TYPE INFO_TYPE;
  static const INFO_TYPE NATION_WAR_HISTORY = npt_request_info_INFO_TYPE_NATION_WAR_HISTORY;
  static inline bool INFO_TYPE_IsValid(int value) {
    return npt_request_info_INFO_TYPE_IsValid(value);
  }
  static const INFO_TYPE INFO_TYPE_MIN =
    npt_request_info_INFO_TYPE_INFO_TYPE_MIN;
  static const INFO_TYPE INFO_TYPE_MAX =
    npt_request_info_INFO_TYPE_INFO_TYPE_MAX;
  static const int INFO_TYPE_ARRAYSIZE =
    npt_request_info_INFO_TYPE_INFO_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  INFO_TYPE_descriptor() {
    return npt_request_info_INFO_TYPE_descriptor();
  }
  static inline const ::std::string& INFO_TYPE_Name(INFO_TYPE value) {
    return npt_request_info_INFO_TYPE_Name(value);
  }
  static inline bool INFO_TYPE_Parse(const ::std::string& name,
      INFO_TYPE* value) {
    return npt_request_info_INFO_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REQUEST_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required .PB.npt_request_info.INFO_TYPE request_type = 2;
  inline bool has_request_type() const;
  inline void clear_request_type();
  static const int kRequestTypeFieldNumber = 2;
  inline ::PB::npt_request_info_INFO_TYPE request_type() const;
  inline void set_request_type(::PB::npt_request_info_INFO_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.npt_request_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_request_type();
  inline void clear_has_request_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int request_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_request_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_shutup_reply : public ::google::protobuf::Message {
 public:
  npt_nation_shutup_reply();
  virtual ~npt_nation_shutup_reply();

  npt_nation_shutup_reply(const npt_nation_shutup_reply& from);

  inline npt_nation_shutup_reply& operator=(const npt_nation_shutup_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_shutup_reply& default_instance();

  void Swap(npt_nation_shutup_reply* other);

  // implements Message ----------------------------------------------

  npt_nation_shutup_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_shutup_reply& from);
  void MergeFrom(const npt_nation_shutup_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_nation_shutup_reply_RESULT_TYPE RESULT_TYPE;
  static const RESULT_TYPE RESULT_SUCCEED = npt_nation_shutup_reply_RESULT_TYPE_RESULT_SUCCEED;
  static const RESULT_TYPE RESULT_OFFLINE = npt_nation_shutup_reply_RESULT_TYPE_RESULT_OFFLINE;
  static const RESULT_TYPE RESULT_ALREADY_SHUTUP = npt_nation_shutup_reply_RESULT_TYPE_RESULT_ALREADY_SHUTUP;
  static inline bool RESULT_TYPE_IsValid(int value) {
    return npt_nation_shutup_reply_RESULT_TYPE_IsValid(value);
  }
  static const RESULT_TYPE RESULT_TYPE_MIN =
    npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_MIN;
  static const RESULT_TYPE RESULT_TYPE_MAX =
    npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_MAX;
  static const int RESULT_TYPE_ARRAYSIZE =
    npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RESULT_TYPE_descriptor() {
    return npt_nation_shutup_reply_RESULT_TYPE_descriptor();
  }
  static inline const ::std::string& RESULT_TYPE_Name(RESULT_TYPE value) {
    return npt_nation_shutup_reply_RESULT_TYPE_Name(value);
  }
  static inline bool RESULT_TYPE_Parse(const ::std::string& name,
      RESULT_TYPE* value) {
    return npt_nation_shutup_reply_RESULT_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_REPLY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required .PB.npt_nation_shutup_reply.RESULT_TYPE result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::PB::npt_nation_shutup_reply_RESULT_TYPE result() const;
  inline void set_result(::PB::npt_nation_shutup_reply_RESULT_TYPE value);

  // optional bytes dst_name = 3;
  inline bool has_dst_name() const;
  inline void clear_dst_name();
  static const int kDstNameFieldNumber = 3;
  inline const ::std::string& dst_name() const;
  inline void set_dst_name(const ::std::string& value);
  inline void set_dst_name(const char* value);
  inline void set_dst_name(const void* value, size_t size);
  inline ::std::string* mutable_dst_name();
  inline ::std::string* release_dst_name();
  inline void set_allocated_dst_name(::std::string* dst_name);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_shutup_reply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_dst_name();
  inline void clear_has_dst_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int result_;
  ::std::string* dst_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_shutup_reply* default_instance_;
};
// -------------------------------------------------------------------

class npt_greeting_info_sync : public ::google::protobuf::Message {
 public:
  npt_greeting_info_sync();
  virtual ~npt_greeting_info_sync();

  npt_greeting_info_sync(const npt_greeting_info_sync& from);

  inline npt_greeting_info_sync& operator=(const npt_greeting_info_sync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_greeting_info_sync& default_instance();

  void Swap(npt_greeting_info_sync* other);

  // implements Message ----------------------------------------------

  npt_greeting_info_sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_greeting_info_sync& from);
  void MergeFrom(const npt_greeting_info_sync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_greeting_info_sync_SYNC_TYPE SYNC_TYPE;
  static const SYNC_TYPE SYNC_ALL = npt_greeting_info_sync_SYNC_TYPE_SYNC_ALL;
  static const SYNC_TYPE SYNC_ADD = npt_greeting_info_sync_SYNC_TYPE_SYNC_ADD;
  static const SYNC_TYPE SYNC_DEL = npt_greeting_info_sync_SYNC_TYPE_SYNC_DEL;
  static inline bool SYNC_TYPE_IsValid(int value) {
    return npt_greeting_info_sync_SYNC_TYPE_IsValid(value);
  }
  static const SYNC_TYPE SYNC_TYPE_MIN =
    npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_MIN;
  static const SYNC_TYPE SYNC_TYPE_MAX =
    npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_MAX;
  static const int SYNC_TYPE_ARRAYSIZE =
    npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SYNC_TYPE_descriptor() {
    return npt_greeting_info_sync_SYNC_TYPE_descriptor();
  }
  static inline const ::std::string& SYNC_TYPE_Name(SYNC_TYPE value) {
    return npt_greeting_info_sync_SYNC_TYPE_Name(value);
  }
  static inline bool SYNC_TYPE_Parse(const ::std::string& name,
      SYNC_TYPE* value) {
    return npt_greeting_info_sync_SYNC_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_INFO_SYNC];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.npt_greeting_info_sync.SYNC_TYPE sync_type = 2;
  inline bool has_sync_type() const;
  inline void clear_sync_type();
  static const int kSyncTypeFieldNumber = 2;
  inline ::PB::npt_greeting_info_sync_SYNC_TYPE sync_type() const;
  inline void set_sync_type(::PB::npt_greeting_info_sync_SYNC_TYPE value);

  // repeated .PB.greeting_info greeting_list = 3;
  inline int greeting_list_size() const;
  inline void clear_greeting_list();
  static const int kGreetingListFieldNumber = 3;
  inline const ::PB::greeting_info& greeting_list(int index) const;
  inline ::PB::greeting_info* mutable_greeting_list(int index);
  inline ::PB::greeting_info* add_greeting_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::greeting_info >&
      greeting_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::greeting_info >*
      mutable_greeting_list();

  // @@protoc_insertion_point(class_scope:PB.npt_greeting_info_sync)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sync_type();
  inline void clear_has_sync_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int sync_type_;
  ::google::protobuf::RepeatedPtrField< ::PB::greeting_info > greeting_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_greeting_info_sync* default_instance_;
};
// -------------------------------------------------------------------

class npt_greeting_reply : public ::google::protobuf::Message {
 public:
  npt_greeting_reply();
  virtual ~npt_greeting_reply();

  npt_greeting_reply(const npt_greeting_reply& from);

  inline npt_greeting_reply& operator=(const npt_greeting_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_greeting_reply& default_instance();

  void Swap(npt_greeting_reply* other);

  // implements Message ----------------------------------------------

  npt_greeting_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_greeting_reply& from);
  void MergeFrom(const npt_greeting_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_REPLY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 info_seq = 2;
  inline bool has_info_seq() const;
  inline void clear_info_seq();
  static const int kInfoSeqFieldNumber = 2;
  inline ::google::protobuf::int32 info_seq() const;
  inline void set_info_seq(::google::protobuf::int32 value);

  // required int64 dst_roleid = 3;
  inline bool has_dst_roleid() const;
  inline void clear_dst_roleid();
  static const int kDstRoleidFieldNumber = 3;
  inline ::google::protobuf::int64 dst_roleid() const;
  inline void set_dst_roleid(::google::protobuf::int64 value);

  // required int32 reply_type = 4;
  inline bool has_reply_type() const;
  inline void clear_reply_type();
  static const int kReplyTypeFieldNumber = 4;
  inline ::google::protobuf::int32 reply_type() const;
  inline void set_reply_type(::google::protobuf::int32 value);

  // required int32 reply_param = 5;
  inline bool has_reply_param() const;
  inline void clear_reply_param();
  static const int kReplyParamFieldNumber = 5;
  inline ::google::protobuf::int32 reply_param() const;
  inline void set_reply_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_greeting_reply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info_seq();
  inline void clear_has_info_seq();
  inline void set_has_dst_roleid();
  inline void clear_has_dst_roleid();
  inline void set_has_reply_type();
  inline void clear_has_reply_type();
  inline void set_has_reply_param();
  inline void clear_has_reply_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 info_seq_;
  ::google::protobuf::int64 dst_roleid_;
  ::google::protobuf::int32 reply_type_;
  ::google::protobuf::int32 reply_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_greeting_reply* default_instance_;
};
// -------------------------------------------------------------------

class npt_ask_help : public ::google::protobuf::Message {
 public:
  npt_ask_help();
  virtual ~npt_ask_help();

  npt_ask_help(const npt_ask_help& from);

  inline npt_ask_help& operator=(const npt_ask_help& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_ask_help& default_instance();

  void Swap(npt_ask_help* other);

  // implements Message ----------------------------------------------

  npt_ask_help* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_ask_help& from);
  void MergeFrom(const npt_ask_help& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ASK_HELP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.ask_help_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PB::ask_help_info& info() const;
  inline ::PB::ask_help_info* mutable_info();
  inline ::PB::ask_help_info* release_info();
  inline void set_allocated_info(::PB::ask_help_info* info);

  // optional int32 response_retcode = 3;
  inline bool has_response_retcode() const;
  inline void clear_response_retcode();
  static const int kResponseRetcodeFieldNumber = 3;
  inline ::google::protobuf::int32 response_retcode() const;
  inline void set_response_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_ask_help)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_response_retcode();
  inline void clear_has_response_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::ask_help_info* info_;
  int type_;
  ::google::protobuf::int32 response_retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_ask_help* default_instance_;
};
// -------------------------------------------------------------------

class npt_send_server_midas_info : public ::google::protobuf::Message {
 public:
  npt_send_server_midas_info();
  virtual ~npt_send_server_midas_info();

  npt_send_server_midas_info(const npt_send_server_midas_info& from);

  inline npt_send_server_midas_info& operator=(const npt_send_server_midas_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_send_server_midas_info& default_instance();

  void Swap(npt_send_server_midas_info* other);

  // implements Message ----------------------------------------------

  npt_send_server_midas_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_send_server_midas_info& from);
  void MergeFrom(const npt_send_server_midas_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_SERVER_MIDAS_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional bytes midas_openkey = 3;
  inline bool has_midas_openkey() const;
  inline void clear_midas_openkey();
  static const int kMidasOpenkeyFieldNumber = 3;
  inline const ::std::string& midas_openkey() const;
  inline void set_midas_openkey(const ::std::string& value);
  inline void set_midas_openkey(const char* value);
  inline void set_midas_openkey(const void* value, size_t size);
  inline ::std::string* mutable_midas_openkey();
  inline ::std::string* release_midas_openkey();
  inline void set_allocated_midas_openkey(::std::string* midas_openkey);

  // optional bytes midas_paytoken = 4;
  inline bool has_midas_paytoken() const;
  inline void clear_midas_paytoken();
  static const int kMidasPaytokenFieldNumber = 4;
  inline const ::std::string& midas_paytoken() const;
  inline void set_midas_paytoken(const ::std::string& value);
  inline void set_midas_paytoken(const char* value);
  inline void set_midas_paytoken(const void* value, size_t size);
  inline ::std::string* mutable_midas_paytoken();
  inline ::std::string* release_midas_paytoken();
  inline void set_allocated_midas_paytoken(::std::string* midas_paytoken);

  // optional bytes midas_pf = 5;
  inline bool has_midas_pf() const;
  inline void clear_midas_pf();
  static const int kMidasPfFieldNumber = 5;
  inline const ::std::string& midas_pf() const;
  inline void set_midas_pf(const ::std::string& value);
  inline void set_midas_pf(const char* value);
  inline void set_midas_pf(const void* value, size_t size);
  inline ::std::string* mutable_midas_pf();
  inline ::std::string* release_midas_pf();
  inline void set_allocated_midas_pf(::std::string* midas_pf);

  // optional bytes midas_pfkey = 6;
  inline bool has_midas_pfkey() const;
  inline void clear_midas_pfkey();
  static const int kMidasPfkeyFieldNumber = 6;
  inline const ::std::string& midas_pfkey() const;
  inline void set_midas_pfkey(const ::std::string& value);
  inline void set_midas_pfkey(const char* value);
  inline void set_midas_pfkey(const void* value, size_t size);
  inline ::std::string* mutable_midas_pfkey();
  inline ::std::string* release_midas_pfkey();
  inline void set_allocated_midas_pfkey(::std::string* midas_pfkey);

  // @@protoc_insertion_point(class_scope:PB.npt_send_server_midas_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_midas_openkey();
  inline void clear_has_midas_openkey();
  inline void set_has_midas_paytoken();
  inline void clear_has_midas_paytoken();
  inline void set_has_midas_pf();
  inline void clear_has_midas_pf();
  inline void set_has_midas_pfkey();
  inline void clear_has_midas_pfkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  ::std::string* midas_openkey_;
  ::std::string* midas_paytoken_;
  ::std::string* midas_pf_;
  ::std::string* midas_pfkey_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_send_server_midas_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_send_tencent_secure_info : public ::google::protobuf::Message {
 public:
  npt_send_tencent_secure_info();
  virtual ~npt_send_tencent_secure_info();

  npt_send_tencent_secure_info(const npt_send_tencent_secure_info& from);

  inline npt_send_tencent_secure_info& operator=(const npt_send_tencent_secure_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_send_tencent_secure_info& default_instance();

  void Swap(npt_send_tencent_secure_info* other);

  // implements Message ----------------------------------------------

  npt_send_tencent_secure_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_send_tencent_secure_info& from);
  void MergeFrom(const npt_send_tencent_secure_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_TENCENT_SECURE_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional bytes secure_data = 2;
  inline bool has_secure_data() const;
  inline void clear_secure_data();
  static const int kSecureDataFieldNumber = 2;
  inline const ::std::string& secure_data() const;
  inline void set_secure_data(const ::std::string& value);
  inline void set_secure_data(const char* value);
  inline void set_secure_data(const void* value, size_t size);
  inline ::std::string* mutable_secure_data();
  inline ::std::string* release_secure_data();
  inline void set_allocated_secure_data(::std::string* secure_data);

  // @@protoc_insertion_point(class_scope:PB.npt_send_tencent_secure_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_secure_data();
  inline void clear_has_secure_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* secure_data_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_send_tencent_secure_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_send_client_midas_info : public ::google::protobuf::Message {
 public:
  npt_send_client_midas_info();
  virtual ~npt_send_client_midas_info();

  npt_send_client_midas_info(const npt_send_client_midas_info& from);

  inline npt_send_client_midas_info& operator=(const npt_send_client_midas_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_send_client_midas_info& default_instance();

  void Swap(npt_send_client_midas_info* other);

  // implements Message ----------------------------------------------

  npt_send_client_midas_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_send_client_midas_info& from);
  void MergeFrom(const npt_send_client_midas_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_CLIENT_MIDAS_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 midas_total_amount = 2;
  inline bool has_midas_total_amount() const;
  inline void clear_midas_total_amount();
  static const int kMidasTotalAmountFieldNumber = 2;
  inline ::google::protobuf::int64 midas_total_amount() const;
  inline void set_midas_total_amount(::google::protobuf::int64 value);

  // required int64 midas_bind_amount = 3;
  inline bool has_midas_bind_amount() const;
  inline void clear_midas_bind_amount();
  static const int kMidasBindAmountFieldNumber = 3;
  inline ::google::protobuf::int64 midas_bind_amount() const;
  inline void set_midas_bind_amount(::google::protobuf::int64 value);

  // required int64 midas_save_amt = 4;
  inline bool has_midas_save_amt() const;
  inline void clear_midas_save_amt();
  static const int kMidasSaveAmtFieldNumber = 4;
  inline ::google::protobuf::int64 midas_save_amt() const;
  inline void set_midas_save_amt(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.npt_send_client_midas_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_midas_total_amount();
  inline void clear_has_midas_total_amount();
  inline void set_has_midas_bind_amount();
  inline void clear_has_midas_bind_amount();
  inline void set_has_midas_save_amt();
  inline void clear_has_midas_save_amt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 midas_total_amount_;
  ::google::protobuf::int64 midas_bind_amount_;
  ::google::protobuf::int64 midas_save_amt_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_send_client_midas_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_send_midas_bad_token : public ::google::protobuf::Message {
 public:
  npt_send_midas_bad_token();
  virtual ~npt_send_midas_bad_token();

  npt_send_midas_bad_token(const npt_send_midas_bad_token& from);

  inline npt_send_midas_bad_token& operator=(const npt_send_midas_bad_token& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_send_midas_bad_token& default_instance();

  void Swap(npt_send_midas_bad_token* other);

  // implements Message ----------------------------------------------

  npt_send_midas_bad_token* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_send_midas_bad_token& from);
  void MergeFrom(const npt_send_midas_bad_token& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_MIDAS_BAD_TOKEN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 midas_op = 2;
  inline bool has_midas_op() const;
  inline void clear_midas_op();
  static const int kMidasOpFieldNumber = 2;
  inline ::google::protobuf::int32 midas_op() const;
  inline void set_midas_op(::google::protobuf::int32 value);

  // required int32 midas_retcode = 3;
  inline bool has_midas_retcode() const;
  inline void clear_midas_retcode();
  static const int kMidasRetcodeFieldNumber = 3;
  inline ::google::protobuf::int32 midas_retcode() const;
  inline void set_midas_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_send_midas_bad_token)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_midas_op();
  inline void clear_has_midas_op();
  inline void set_has_midas_retcode();
  inline void clear_has_midas_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 midas_op_;
  ::google::protobuf::int32 midas_retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_send_midas_bad_token* default_instance_;
};
// -------------------------------------------------------------------

class npt_officer_gift_get : public ::google::protobuf::Message {
 public:
  npt_officer_gift_get();
  virtual ~npt_officer_gift_get();

  npt_officer_gift_get(const npt_officer_gift_get& from);

  inline npt_officer_gift_get& operator=(const npt_officer_gift_get& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_officer_gift_get& default_instance();

  void Swap(npt_officer_gift_get* other);

  // implements Message ----------------------------------------------

  npt_officer_gift_get* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_officer_gift_get& from);
  void MergeFrom(const npt_officer_gift_get& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_GET];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 gift_id = 2;
  inline bool has_gift_id() const;
  inline void clear_gift_id();
  static const int kGiftIdFieldNumber = 2;
  inline ::google::protobuf::int32 gift_id() const;
  inline void set_gift_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_officer_gift_get)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gift_id();
  inline void clear_has_gift_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 gift_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_officer_gift_get* default_instance_;
};
// -------------------------------------------------------------------

class npt_officer_gift_notify : public ::google::protobuf::Message {
 public:
  npt_officer_gift_notify();
  virtual ~npt_officer_gift_notify();

  npt_officer_gift_notify(const npt_officer_gift_notify& from);

  inline npt_officer_gift_notify& operator=(const npt_officer_gift_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_officer_gift_notify& default_instance();

  void Swap(npt_officer_gift_notify* other);

  // implements Message ----------------------------------------------

  npt_officer_gift_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_officer_gift_notify& from);
  void MergeFrom(const npt_officer_gift_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_NOTIFY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 gift_id = 2;
  inline bool has_gift_id() const;
  inline void clear_gift_id();
  static const int kGiftIdFieldNumber = 2;
  inline ::google::protobuf::int32 gift_id() const;
  inline void set_gift_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_officer_gift_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gift_id();
  inline void clear_has_gift_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 gift_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_officer_gift_notify* default_instance_;
};
// -------------------------------------------------------------------

class npt_weak_nation_gift_get : public ::google::protobuf::Message {
 public:
  npt_weak_nation_gift_get();
  virtual ~npt_weak_nation_gift_get();

  npt_weak_nation_gift_get(const npt_weak_nation_gift_get& from);

  inline npt_weak_nation_gift_get& operator=(const npt_weak_nation_gift_get& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_weak_nation_gift_get& default_instance();

  void Swap(npt_weak_nation_gift_get* other);

  // implements Message ----------------------------------------------

  npt_weak_nation_gift_get* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_weak_nation_gift_get& from);
  void MergeFrom(const npt_weak_nation_gift_get& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_GET];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 gift_id = 2;
  inline bool has_gift_id() const;
  inline void clear_gift_id();
  static const int kGiftIdFieldNumber = 2;
  inline ::google::protobuf::int32 gift_id() const;
  inline void set_gift_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_weak_nation_gift_get)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gift_id();
  inline void clear_has_gift_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 gift_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_weak_nation_gift_get* default_instance_;
};
// -------------------------------------------------------------------

class npt_weak_nation_gift_notify : public ::google::protobuf::Message {
 public:
  npt_weak_nation_gift_notify();
  virtual ~npt_weak_nation_gift_notify();

  npt_weak_nation_gift_notify(const npt_weak_nation_gift_notify& from);

  inline npt_weak_nation_gift_notify& operator=(const npt_weak_nation_gift_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_weak_nation_gift_notify& default_instance();

  void Swap(npt_weak_nation_gift_notify* other);

  // implements Message ----------------------------------------------

  npt_weak_nation_gift_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_weak_nation_gift_notify& from);
  void MergeFrom(const npt_weak_nation_gift_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_NOTIFY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 gift_id = 2;
  inline bool has_gift_id() const;
  inline void clear_gift_id();
  static const int kGiftIdFieldNumber = 2;
  inline ::google::protobuf::int32 gift_id() const;
  inline void set_gift_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_weak_nation_gift_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gift_id();
  inline void clear_has_gift_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 gift_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_weak_nation_gift_notify* default_instance_;
};
// -------------------------------------------------------------------

class npt_server_info_notify : public ::google::protobuf::Message {
 public:
  npt_server_info_notify();
  virtual ~npt_server_info_notify();

  npt_server_info_notify(const npt_server_info_notify& from);

  inline npt_server_info_notify& operator=(const npt_server_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_server_info_notify& default_instance();

  void Swap(npt_server_info_notify* other);

  // implements Message ----------------------------------------------

  npt_server_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_server_info_notify& from);
  void MergeFrom(const npt_server_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SERVER_INFO_NOTIFY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 free_war_left = 2;
  inline bool has_free_war_left() const;
  inline void clear_free_war_left();
  static const int kFreeWarLeftFieldNumber = 2;
  inline ::google::protobuf::int32 free_war_left() const;
  inline void set_free_war_left(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_server_info_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_free_war_left();
  inline void clear_has_free_war_left();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 free_war_left_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_server_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class npt_team_recruit_operate : public ::google::protobuf::Message {
 public:
  npt_team_recruit_operate();
  virtual ~npt_team_recruit_operate();

  npt_team_recruit_operate(const npt_team_recruit_operate& from);

  inline npt_team_recruit_operate& operator=(const npt_team_recruit_operate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_team_recruit_operate& default_instance();

  void Swap(npt_team_recruit_operate* other);

  // implements Message ----------------------------------------------

  npt_team_recruit_operate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_team_recruit_operate& from);
  void MergeFrom(const npt_team_recruit_operate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_team_recruit_operate_OPERATE_TYPE OPERATE_TYPE;
  static const OPERATE_TYPE CREATE = npt_team_recruit_operate_OPERATE_TYPE_CREATE;
  static const OPERATE_TYPE LIST = npt_team_recruit_operate_OPERATE_TYPE_LIST;
  static const OPERATE_TYPE PUBLISH = npt_team_recruit_operate_OPERATE_TYPE_PUBLISH;
  static const OPERATE_TYPE CANCEL = npt_team_recruit_operate_OPERATE_TYPE_CANCEL;
  static const OPERATE_TYPE REQ_COOLDOWN = npt_team_recruit_operate_OPERATE_TYPE_REQ_COOLDOWN;
  static const OPERATE_TYPE MODIFY = npt_team_recruit_operate_OPERATE_TYPE_MODIFY;
  static const OPERATE_TYPE REQ_LEADER_POS = npt_team_recruit_operate_OPERATE_TYPE_REQ_LEADER_POS;
  static const OPERATE_TYPE GATHER = npt_team_recruit_operate_OPERATE_TYPE_GATHER;
  static inline bool OPERATE_TYPE_IsValid(int value) {
    return npt_team_recruit_operate_OPERATE_TYPE_IsValid(value);
  }
  static const OPERATE_TYPE OPERATE_TYPE_MIN =
    npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_MIN;
  static const OPERATE_TYPE OPERATE_TYPE_MAX =
    npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_MAX;
  static const int OPERATE_TYPE_ARRAYSIZE =
    npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPERATE_TYPE_descriptor() {
    return npt_team_recruit_operate_OPERATE_TYPE_descriptor();
  }
  static inline const ::std::string& OPERATE_TYPE_Name(OPERATE_TYPE value) {
    return npt_team_recruit_operate_OPERATE_TYPE_Name(value);
  }
  static inline bool OPERATE_TYPE_Parse(const ::std::string& name,
      OPERATE_TYPE* value) {
    return npt_team_recruit_operate_OPERATE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 operate_type = 2;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 2;
  inline ::google::protobuf::int32 operate_type() const;
  inline void set_operate_type(::google::protobuf::int32 value);

  // optional int64 param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline ::google::protobuf::int64 param1() const;
  inline void set_param1(::google::protobuf::int64 value);

  // optional int64 param2 = 4;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 4;
  inline ::google::protobuf::int64 param2() const;
  inline void set_param2(::google::protobuf::int64 value);

  // optional int64 param3 = 5;
  inline bool has_param3() const;
  inline void clear_param3();
  static const int kParam3FieldNumber = 5;
  inline ::google::protobuf::int64 param3() const;
  inline void set_param3(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.npt_team_recruit_operate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_param3();
  inline void clear_has_param3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 operate_type_;
  ::google::protobuf::int64 param1_;
  ::google::protobuf::int64 param2_;
  ::google::protobuf::int64 param3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_team_recruit_operate* default_instance_;
};
// -------------------------------------------------------------------

class recruit_info : public ::google::protobuf::Message {
 public:
  recruit_info();
  virtual ~recruit_info();

  recruit_info(const recruit_info& from);

  inline recruit_info& operator=(const recruit_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const recruit_info& default_instance();

  void Swap(recruit_info* other);

  // implements Message ----------------------------------------------

  recruit_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const recruit_info& from);
  void MergeFrom(const recruit_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 min_level = 1;
  inline bool has_min_level() const;
  inline void clear_min_level();
  static const int kMinLevelFieldNumber = 1;
  inline ::google::protobuf::int32 min_level() const;
  inline void set_min_level(::google::protobuf::int32 value);

  // optional int32 inst_tid = 2;
  inline bool has_inst_tid() const;
  inline void clear_inst_tid();
  static const int kInstTidFieldNumber = 2;
  inline ::google::protobuf::int32 inst_tid() const;
  inline void set_inst_tid(::google::protobuf::int32 value);

  // optional int32 team_number = 3;
  inline bool has_team_number() const;
  inline void clear_team_number();
  static const int kTeamNumberFieldNumber = 3;
  inline ::google::protobuf::int32 team_number() const;
  inline void set_team_number(::google::protobuf::int32 value);

  // optional bytes leader_name = 4;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 4;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const void* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  inline void set_allocated_leader_name(::std::string* leader_name);

  // optional int64 leader_id = 5;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 5;
  inline ::google::protobuf::int64 leader_id() const;
  inline void set_leader_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.recruit_info)
 private:
  inline void set_has_min_level();
  inline void clear_has_min_level();
  inline void set_has_inst_tid();
  inline void clear_has_inst_tid();
  inline void set_has_team_number();
  inline void clear_has_team_number();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 min_level_;
  ::google::protobuf::int32 inst_tid_;
  ::std::string* leader_name_;
  ::google::protobuf::int64 leader_id_;
  ::google::protobuf::int32 team_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static recruit_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_team_recruit_operate_reply : public ::google::protobuf::Message {
 public:
  npt_team_recruit_operate_reply();
  virtual ~npt_team_recruit_operate_reply();

  npt_team_recruit_operate_reply(const npt_team_recruit_operate_reply& from);

  inline npt_team_recruit_operate_reply& operator=(const npt_team_recruit_operate_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_team_recruit_operate_reply& default_instance();

  void Swap(npt_team_recruit_operate_reply* other);

  // implements Message ----------------------------------------------

  npt_team_recruit_operate_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_team_recruit_operate_reply& from);
  void MergeFrom(const npt_team_recruit_operate_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_team_recruit_operate_reply_RESULT RESULT;
  static const RESULT SUCCEED = npt_team_recruit_operate_reply_RESULT_SUCCEED;
  static const RESULT MAX_SIZE = npt_team_recruit_operate_reply_RESULT_MAX_SIZE;
  static const RESULT MIN_LEVEL = npt_team_recruit_operate_reply_RESULT_MIN_LEVEL;
  static const RESULT COOLDOWN = npt_team_recruit_operate_reply_RESULT_COOLDOWN;
  static const RESULT TIME_OUT = npt_team_recruit_operate_reply_RESULT_TIME_OUT;
  static const RESULT IN_INSTANCE = npt_team_recruit_operate_reply_RESULT_IN_INSTANCE;
  static inline bool RESULT_IsValid(int value) {
    return npt_team_recruit_operate_reply_RESULT_IsValid(value);
  }
  static const RESULT RESULT_MIN =
    npt_team_recruit_operate_reply_RESULT_RESULT_MIN;
  static const RESULT RESULT_MAX =
    npt_team_recruit_operate_reply_RESULT_RESULT_MAX;
  static const int RESULT_ARRAYSIZE =
    npt_team_recruit_operate_reply_RESULT_RESULT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RESULT_descriptor() {
    return npt_team_recruit_operate_reply_RESULT_descriptor();
  }
  static inline const ::std::string& RESULT_Name(RESULT value) {
    return npt_team_recruit_operate_reply_RESULT_Name(value);
  }
  static inline bool RESULT_Parse(const ::std::string& name,
      RESULT* value) {
    return npt_team_recruit_operate_reply_RESULT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE_REPLY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 operate_type = 2;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 2;
  inline ::google::protobuf::int32 operate_type() const;
  inline void set_operate_type(::google::protobuf::int32 value);

  // optional int32 operate_result = 3;
  inline bool has_operate_result() const;
  inline void clear_operate_result();
  static const int kOperateResultFieldNumber = 3;
  inline ::google::protobuf::int32 operate_result() const;
  inline void set_operate_result(::google::protobuf::int32 value);

  // optional int64 param1 = 4;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 4;
  inline ::google::protobuf::int64 param1() const;
  inline void set_param1(::google::protobuf::int64 value);

  // optional int64 param2 = 5;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 5;
  inline ::google::protobuf::int64 param2() const;
  inline void set_param2(::google::protobuf::int64 value);

  // optional int64 param3 = 6;
  inline bool has_param3() const;
  inline void clear_param3();
  static const int kParam3FieldNumber = 6;
  inline ::google::protobuf::int64 param3() const;
  inline void set_param3(::google::protobuf::int64 value);

  // repeated .PB.recruit_info recruit_list = 7;
  inline int recruit_list_size() const;
  inline void clear_recruit_list();
  static const int kRecruitListFieldNumber = 7;
  inline const ::PB::recruit_info& recruit_list(int index) const;
  inline ::PB::recruit_info* mutable_recruit_list(int index);
  inline ::PB::recruit_info* add_recruit_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::recruit_info >&
      recruit_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::recruit_info >*
      mutable_recruit_list();

  // optional bytes param4 = 8;
  inline bool has_param4() const;
  inline void clear_param4();
  static const int kParam4FieldNumber = 8;
  inline const ::std::string& param4() const;
  inline void set_param4(const ::std::string& value);
  inline void set_param4(const char* value);
  inline void set_param4(const void* value, size_t size);
  inline ::std::string* mutable_param4();
  inline ::std::string* release_param4();
  inline void set_allocated_param4(::std::string* param4);

  // optional .PB.a3d_pos param_pos = 9;
  inline bool has_param_pos() const;
  inline void clear_param_pos();
  static const int kParamPosFieldNumber = 9;
  inline const ::PB::a3d_pos& param_pos() const;
  inline ::PB::a3d_pos* mutable_param_pos();
  inline ::PB::a3d_pos* release_param_pos();
  inline void set_allocated_param_pos(::PB::a3d_pos* param_pos);

  // @@protoc_insertion_point(class_scope:PB.npt_team_recruit_operate_reply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_operate_result();
  inline void clear_has_operate_result();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_param3();
  inline void clear_has_param3();
  inline void set_has_param4();
  inline void clear_has_param4();
  inline void set_has_param_pos();
  inline void clear_has_param_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 operate_type_;
  ::google::protobuf::int64 param1_;
  ::google::protobuf::int64 param2_;
  ::google::protobuf::int64 param3_;
  ::google::protobuf::RepeatedPtrField< ::PB::recruit_info > recruit_list_;
  ::std::string* param4_;
  ::PB::a3d_pos* param_pos_;
  ::google::protobuf::int32 operate_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_team_recruit_operate_reply* default_instance_;
};
// -------------------------------------------------------------------

class npt_update_grc_info : public ::google::protobuf::Message {
 public:
  npt_update_grc_info();
  virtual ~npt_update_grc_info();

  npt_update_grc_info(const npt_update_grc_info& from);

  inline npt_update_grc_info& operator=(const npt_update_grc_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_update_grc_info& default_instance();

  void Swap(npt_update_grc_info* other);

  // implements Message ----------------------------------------------

  npt_update_grc_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_update_grc_info& from);
  void MergeFrom(const npt_update_grc_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_UPDATE_GRC_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.npt_update_grc_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_update_grc_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_get_friend_info : public ::google::protobuf::Message {
 public:
  npt_grc_get_friend_info();
  virtual ~npt_grc_get_friend_info();

  npt_grc_get_friend_info(const npt_grc_get_friend_info& from);

  inline npt_grc_get_friend_info& operator=(const npt_grc_get_friend_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_get_friend_info& default_instance();

  void Swap(npt_grc_get_friend_info* other);

  // implements Message ----------------------------------------------

  npt_grc_get_friend_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_get_friend_info& from);
  void MergeFrom(const npt_grc_get_friend_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GET_FRIEND_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);

  // required int32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_grc_get_friend_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_get_friend_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_send_gift : public ::google::protobuf::Message {
 public:
  npt_grc_send_gift();
  virtual ~npt_grc_send_gift();

  npt_grc_send_gift(const npt_grc_send_gift& from);

  inline npt_grc_send_gift& operator=(const npt_grc_send_gift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_send_gift& default_instance();

  void Swap(npt_grc_send_gift* other);

  // implements Message ----------------------------------------------

  npt_grc_send_gift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_send_gift& from);
  void MergeFrom(const npt_grc_send_gift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 giftType = 2;
  inline bool has_gifttype() const;
  inline void clear_gifttype();
  static const int kGiftTypeFieldNumber = 2;
  inline ::google::protobuf::int32 gifttype() const;
  inline void set_gifttype(::google::protobuf::int32 value);

  // required int64 giftCount = 3;
  inline bool has_giftcount() const;
  inline void clear_giftcount();
  static const int kGiftCountFieldNumber = 3;
  inline ::google::protobuf::int64 giftcount() const;
  inline void set_giftcount(::google::protobuf::int64 value);

  // required bytes to = 4;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 4;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const void* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // @@protoc_insertion_point(class_scope:PB.npt_grc_send_gift)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gifttype();
  inline void clear_has_gifttype();
  inline void set_has_giftcount();
  inline void clear_has_giftcount();
  inline void set_has_to();
  inline void clear_has_to();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 gifttype_;
  ::google::protobuf::int64 giftcount_;
  ::std::string* to_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_send_gift* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_rcv_gift : public ::google::protobuf::Message {
 public:
  npt_grc_rcv_gift();
  virtual ~npt_grc_rcv_gift();

  npt_grc_rcv_gift(const npt_grc_rcv_gift& from);

  inline npt_grc_rcv_gift& operator=(const npt_grc_rcv_gift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_rcv_gift& default_instance();

  void Swap(npt_grc_rcv_gift* other);

  // implements Message ----------------------------------------------

  npt_grc_rcv_gift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_rcv_gift& from);
  void MergeFrom(const npt_grc_rcv_gift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 giftType = 2;
  inline bool has_gifttype() const;
  inline void clear_gifttype();
  static const int kGiftTypeFieldNumber = 2;
  inline ::google::protobuf::int32 gifttype() const;
  inline void set_gifttype(::google::protobuf::int32 value);

  // required int64 giftCount = 3;
  inline bool has_giftcount() const;
  inline void clear_giftcount();
  static const int kGiftCountFieldNumber = 3;
  inline ::google::protobuf::int64 giftcount() const;
  inline void set_giftcount(::google::protobuf::int64 value);

  // required int64 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // required bytes from = 5;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 5;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // @@protoc_insertion_point(class_scope:PB.npt_grc_rcv_gift)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gifttype();
  inline void clear_has_gifttype();
  inline void set_has_giftcount();
  inline void clear_has_giftcount();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_from();
  inline void clear_has_from();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 gifttype_;
  ::google::protobuf::int64 giftcount_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* from_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_rcv_gift* default_instance_;
};
// -------------------------------------------------------------------

class grc_friend_info : public ::google::protobuf::Message {
 public:
  grc_friend_info();
  virtual ~grc_friend_info();

  grc_friend_info(const grc_friend_info& from);

  inline grc_friend_info& operator=(const grc_friend_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const grc_friend_info& default_instance();

  void Swap(grc_friend_info* other);

  // implements Message ----------------------------------------------

  grc_friend_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const grc_friend_info& from);
  void MergeFrom(const grc_friend_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes openid = 1;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 1;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const void* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required bytes nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required bytes figure_url = 3;
  inline bool has_figure_url() const;
  inline void clear_figure_url();
  static const int kFigureUrlFieldNumber = 3;
  inline const ::std::string& figure_url() const;
  inline void set_figure_url(const ::std::string& value);
  inline void set_figure_url(const char* value);
  inline void set_figure_url(const void* value, size_t size);
  inline ::std::string* mutable_figure_url();
  inline ::std::string* release_figure_url();
  inline void set_allocated_figure_url(::std::string* figure_url);

  // required uint64 roleid = 4;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 4;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // required bytes rolename = 5;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 5;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const void* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // required int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 gender = 7;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 7;
  inline ::google::protobuf::int32 gender() const;
  inline void set_gender(::google::protobuf::int32 value);

  // required int32 profession = 8;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 8;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // required int32 nation = 9;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 9;
  inline ::google::protobuf::int32 nation() const;
  inline void set_nation(::google::protobuf::int32 value);

  // required int64 fightingcapacity = 10;
  inline bool has_fightingcapacity() const;
  inline void clear_fightingcapacity();
  static const int kFightingcapacityFieldNumber = 10;
  inline ::google::protobuf::int64 fightingcapacity() const;
  inline void set_fightingcapacity(::google::protobuf::int64 value);

  // required bool sameserver = 11;
  inline bool has_sameserver() const;
  inline void clear_sameserver();
  static const int kSameserverFieldNumber = 11;
  inline bool sameserver() const;
  inline void set_sameserver(bool value);

  // required int32 vipinfo = 12;
  inline bool has_vipinfo() const;
  inline void clear_vipinfo();
  static const int kVipinfoFieldNumber = 12;
  inline ::google::protobuf::int32 vipinfo() const;
  inline void set_vipinfo(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.grc_friend_info)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_figure_url();
  inline void clear_has_figure_url();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_fightingcapacity();
  inline void clear_has_fightingcapacity();
  inline void set_has_sameserver();
  inline void clear_has_sameserver();
  inline void set_has_vipinfo();
  inline void clear_has_vipinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;
  ::std::string* nickname_;
  ::std::string* figure_url_;
  ::google::protobuf::uint64 roleid_;
  ::std::string* rolename_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 gender_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 nation_;
  ::google::protobuf::int64 fightingcapacity_;
  bool sameserver_;
  ::google::protobuf::int32 vipinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static grc_friend_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_friend_list : public ::google::protobuf::Message {
 public:
  npt_grc_friend_list();
  virtual ~npt_grc_friend_list();

  npt_grc_friend_list(const npt_grc_friend_list& from);

  inline npt_grc_friend_list& operator=(const npt_grc_friend_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_friend_list& default_instance();

  void Swap(npt_grc_friend_list* other);

  // implements Message ----------------------------------------------

  npt_grc_friend_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_friend_list& from);
  void MergeFrom(const npt_grc_friend_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_FRIEND_LIST];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 retcode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int32 total_friend_count = 3;
  inline bool has_total_friend_count() const;
  inline void clear_total_friend_count();
  static const int kTotalFriendCountFieldNumber = 3;
  inline ::google::protobuf::int32 total_friend_count() const;
  inline void set_total_friend_count(::google::protobuf::int32 value);

  // repeated .PB.grc_friend_info friend = 4;
  inline int friend__size() const;
  inline void clear_friend_();
  static const int kFriendFieldNumber = 4;
  inline const ::PB::grc_friend_info& friend_(int index) const;
  inline ::PB::grc_friend_info* mutable_friend_(int index);
  inline ::PB::grc_friend_info* add_friend_();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_friend_info >&
      friend_() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::grc_friend_info >*
      mutable_friend_();

  // @@protoc_insertion_point(class_scope:PB.npt_grc_friend_list)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_total_friend_count();
  inline void clear_has_total_friend_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::RepeatedPtrField< ::PB::grc_friend_info > friend__;
  ::google::protobuf::int32 total_friend_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_friend_list* default_instance_;
};
// -------------------------------------------------------------------

class grc_gift_info : public ::google::protobuf::Message {
 public:
  grc_gift_info();
  virtual ~grc_gift_info();

  grc_gift_info(const grc_gift_info& from);

  inline grc_gift_info& operator=(const grc_gift_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const grc_gift_info& default_instance();

  void Swap(grc_gift_info* other);

  // implements Message ----------------------------------------------

  grc_gift_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const grc_gift_info& from);
  void MergeFrom(const grc_gift_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gift_type = 1;
  inline bool has_gift_type() const;
  inline void clear_gift_type();
  static const int kGiftTypeFieldNumber = 1;
  inline ::google::protobuf::int32 gift_type() const;
  inline void set_gift_type(::google::protobuf::int32 value);

  // required bytes from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // required bytes to = 3;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 3;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const void* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // required int64 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int64 count() const;
  inline void set_count(::google::protobuf::int64 value);

  // required int32 flag = 5;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 5;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required int64 timestamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // required int32 serialid = 7;
  inline bool has_serialid() const;
  inline void clear_serialid();
  static const int kSerialidFieldNumber = 7;
  inline ::google::protobuf::int32 serialid() const;
  inline void set_serialid(::google::protobuf::int32 value);

  // optional bytes nickname = 8;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 8;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:PB.grc_gift_info)
 private:
  inline void set_has_gift_type();
  inline void clear_has_gift_type();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_serialid();
  inline void clear_has_serialid();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_;
  ::std::string* to_;
  ::google::protobuf::int32 gift_type_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int64 count_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* nickname_;
  ::google::protobuf::int32 serialid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static grc_gift_info* default_instance_;
};
// -------------------------------------------------------------------

class grc_user_gift_info : public ::google::protobuf::Message {
 public:
  grc_user_gift_info();
  virtual ~grc_user_gift_info();

  grc_user_gift_info(const grc_user_gift_info& from);

  inline grc_user_gift_info& operator=(const grc_user_gift_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const grc_user_gift_info& default_instance();

  void Swap(grc_user_gift_info* other);

  // implements Message ----------------------------------------------

  grc_user_gift_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const grc_user_gift_info& from);
  void MergeFrom(const grc_user_gift_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gift_type = 1;
  inline bool has_gift_type() const;
  inline void clear_gift_type();
  static const int kGiftTypeFieldNumber = 1;
  inline ::google::protobuf::int32 gift_type() const;
  inline void set_gift_type(::google::protobuf::int32 value);

  // repeated .PB.grc_gift_info giftsend = 2;
  inline int giftsend_size() const;
  inline void clear_giftsend();
  static const int kGiftsendFieldNumber = 2;
  inline const ::PB::grc_gift_info& giftsend(int index) const;
  inline ::PB::grc_gift_info* mutable_giftsend(int index);
  inline ::PB::grc_gift_info* add_giftsend();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >&
      giftsend() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >*
      mutable_giftsend();

  // required int64 giftreceive_times = 3;
  inline bool has_giftreceive_times() const;
  inline void clear_giftreceive_times();
  static const int kGiftreceiveTimesFieldNumber = 3;
  inline ::google::protobuf::int64 giftreceive_times() const;
  inline void set_giftreceive_times(::google::protobuf::int64 value);

  // repeated .PB.grc_gift_info giftreceive = 4;
  inline int giftreceive_size() const;
  inline void clear_giftreceive();
  static const int kGiftreceiveFieldNumber = 4;
  inline const ::PB::grc_gift_info& giftreceive(int index) const;
  inline ::PB::grc_gift_info* mutable_giftreceive(int index);
  inline ::PB::grc_gift_info* add_giftreceive();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >&
      giftreceive() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >*
      mutable_giftreceive();

  // @@protoc_insertion_point(class_scope:PB.grc_user_gift_info)
 private:
  inline void set_has_gift_type();
  inline void clear_has_gift_type();
  inline void set_has_giftreceive_times();
  inline void clear_has_giftreceive_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info > giftsend_;
  ::google::protobuf::int64 giftreceive_times_;
  ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info > giftreceive_;
  ::google::protobuf::int32 gift_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static grc_user_gift_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_gift_list : public ::google::protobuf::Message {
 public:
  npt_grc_gift_list();
  virtual ~npt_grc_gift_list();

  npt_grc_gift_list(const npt_grc_gift_list& from);

  inline npt_grc_gift_list& operator=(const npt_grc_gift_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_gift_list& default_instance();

  void Swap(npt_grc_gift_list* other);

  // implements Message ----------------------------------------------

  npt_grc_gift_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_gift_list& from);
  void MergeFrom(const npt_grc_gift_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GIFT_LIST];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.grc_user_gift_info gift = 2;
  inline int gift_size() const;
  inline void clear_gift();
  static const int kGiftFieldNumber = 2;
  inline const ::PB::grc_user_gift_info& gift(int index) const;
  inline ::PB::grc_user_gift_info* mutable_gift(int index);
  inline ::PB::grc_user_gift_info* add_gift();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_user_gift_info >&
      gift() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::grc_user_gift_info >*
      mutable_gift();

  // @@protoc_insertion_point(class_scope:PB.npt_grc_gift_list)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::grc_user_gift_info > gift_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_gift_list* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_send_gift_re : public ::google::protobuf::Message {
 public:
  npt_grc_send_gift_re();
  virtual ~npt_grc_send_gift_re();

  npt_grc_send_gift_re(const npt_grc_send_gift_re& from);

  inline npt_grc_send_gift_re& operator=(const npt_grc_send_gift_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_send_gift_re& default_instance();

  void Swap(npt_grc_send_gift_re* other);

  // implements Message ----------------------------------------------

  npt_grc_send_gift_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_send_gift_re& from);
  void MergeFrom(const npt_grc_send_gift_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required bytes to = 2;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const void* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // required int32 retcode = 3;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_grc_send_gift_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* to_;
  int type_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_send_gift_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_rcv_gift_re : public ::google::protobuf::Message {
 public:
  npt_grc_rcv_gift_re();
  virtual ~npt_grc_rcv_gift_re();

  npt_grc_rcv_gift_re(const npt_grc_rcv_gift_re& from);

  inline npt_grc_rcv_gift_re& operator=(const npt_grc_rcv_gift_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_rcv_gift_re& default_instance();

  void Swap(npt_grc_rcv_gift_re* other);

  // implements Message ----------------------------------------------

  npt_grc_rcv_gift_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_rcv_gift_re& from);
  void MergeFrom(const npt_grc_rcv_gift_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required bytes from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // required int32 retcode = 3;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_grc_rcv_gift_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_;
  int type_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_rcv_gift_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_turn_on_off : public ::google::protobuf::Message {
 public:
  npt_grc_turn_on_off();
  virtual ~npt_grc_turn_on_off();

  npt_grc_turn_on_off(const npt_grc_turn_on_off& from);

  inline npt_grc_turn_on_off& operator=(const npt_grc_turn_on_off& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_turn_on_off& default_instance();

  void Swap(npt_grc_turn_on_off* other);

  // implements Message ----------------------------------------------

  npt_grc_turn_on_off* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_turn_on_off& from);
  void MergeFrom(const npt_grc_turn_on_off& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_TURN_ON_OFF];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 giftKind = 2;
  inline bool has_giftkind() const;
  inline void clear_giftkind();
  static const int kGiftKindFieldNumber = 2;
  inline ::google::protobuf::int32 giftkind() const;
  inline void set_giftkind(::google::protobuf::int32 value);

  // required bool onoff = 3;
  inline bool has_onoff() const;
  inline void clear_onoff();
  static const int kOnoffFieldNumber = 3;
  inline bool onoff() const;
  inline void set_onoff(bool value);

  // @@protoc_insertion_point(class_scope:PB.npt_grc_turn_on_off)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_giftkind();
  inline void clear_has_giftkind();
  inline void set_has_onoff();
  inline void clear_has_onoff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 giftkind_;
  bool onoff_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_turn_on_off* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_turn_on_off_re : public ::google::protobuf::Message {
 public:
  npt_grc_turn_on_off_re();
  virtual ~npt_grc_turn_on_off_re();

  npt_grc_turn_on_off_re(const npt_grc_turn_on_off_re& from);

  inline npt_grc_turn_on_off_re& operator=(const npt_grc_turn_on_off_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_turn_on_off_re& default_instance();

  void Swap(npt_grc_turn_on_off_re* other);

  // implements Message ----------------------------------------------

  npt_grc_turn_on_off_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_turn_on_off_re& from);
  void MergeFrom(const npt_grc_turn_on_off_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_TURN_ON_OFF_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 retcode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required bool onoff = 3;
  inline bool has_onoff() const;
  inline void clear_onoff();
  static const int kOnoffFieldNumber = 3;
  inline bool onoff() const;
  inline void set_onoff(bool value);

  // @@protoc_insertion_point(class_scope:PB.npt_grc_turn_on_off_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_onoff();
  inline void clear_has_onoff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 retcode_;
  bool onoff_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_turn_on_off_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_midas_activity_get : public ::google::protobuf::Message {
 public:
  npt_midas_activity_get();
  virtual ~npt_midas_activity_get();

  npt_midas_activity_get(const npt_midas_activity_get& from);

  inline npt_midas_activity_get& operator=(const npt_midas_activity_get& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_midas_activity_get& default_instance();

  void Swap(npt_midas_activity_get* other);

  // implements Message ----------------------------------------------

  npt_midas_activity_get* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_midas_activity_get& from);
  void MergeFrom(const npt_midas_activity_get& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_MIDAS_ACTIVITY_GET];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 param = 2;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_midas_activity_get)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_midas_activity_get* default_instance_;
};
// -------------------------------------------------------------------

class npt_battle_auto_match : public ::google::protobuf::Message {
 public:
  npt_battle_auto_match();
  virtual ~npt_battle_auto_match();

  npt_battle_auto_match(const npt_battle_auto_match& from);

  inline npt_battle_auto_match& operator=(const npt_battle_auto_match& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_battle_auto_match& default_instance();

  void Swap(npt_battle_auto_match* other);

  // implements Message ----------------------------------------------

  npt_battle_auto_match* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_battle_auto_match& from);
  void MergeFrom(const npt_battle_auto_match& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_battle_auto_match_OP_TYPE OP_TYPE;
  static const OP_TYPE OT_MATCH_START = npt_battle_auto_match_OP_TYPE_OT_MATCH_START;
  static const OP_TYPE OT_MATCH_CANCEL = npt_battle_auto_match_OP_TYPE_OT_MATCH_CANCEL;
  static const OP_TYPE OT_INST_START = npt_battle_auto_match_OP_TYPE_OT_INST_START;
  static const OP_TYPE OT_INST_CANCEL = npt_battle_auto_match_OP_TYPE_OT_INST_CANCEL;
  static inline bool OP_TYPE_IsValid(int value) {
    return npt_battle_auto_match_OP_TYPE_IsValid(value);
  }
  static const OP_TYPE OP_TYPE_MIN =
    npt_battle_auto_match_OP_TYPE_OP_TYPE_MIN;
  static const OP_TYPE OP_TYPE_MAX =
    npt_battle_auto_match_OP_TYPE_OP_TYPE_MAX;
  static const int OP_TYPE_ARRAYSIZE =
    npt_battle_auto_match_OP_TYPE_OP_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OP_TYPE_descriptor() {
    return npt_battle_auto_match_OP_TYPE_descriptor();
  }
  static inline const ::std::string& OP_TYPE_Name(OP_TYPE value) {
    return npt_battle_auto_match_OP_TYPE_Name(value);
  }
  static inline bool OP_TYPE_Parse(const ::std::string& name,
      OP_TYPE* value) {
    return npt_battle_auto_match_OP_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BATTLE_AUTO_MATCH];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required .PB.npt_battle_auto_match.OP_TYPE op_type = 2;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 2;
  inline ::PB::npt_battle_auto_match_OP_TYPE op_type() const;
  inline void set_op_type(::PB::npt_battle_auto_match_OP_TYPE value);

  // required int32 tid = 3;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 3;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_battle_auto_match)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int op_type_;
  ::google::protobuf::int32 tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_battle_auto_match* default_instance_;
};
// -------------------------------------------------------------------

class npt_battle_match_result : public ::google::protobuf::Message {
 public:
  npt_battle_match_result();
  virtual ~npt_battle_match_result();

  npt_battle_match_result(const npt_battle_match_result& from);

  inline npt_battle_match_result& operator=(const npt_battle_match_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_battle_match_result& default_instance();

  void Swap(npt_battle_match_result* other);

  // implements Message ----------------------------------------------

  npt_battle_match_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_battle_match_result& from);
  void MergeFrom(const npt_battle_match_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BATTLE_MATCH_RESULT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated int32 prof_list = 2;
  inline int prof_list_size() const;
  inline void clear_prof_list();
  static const int kProfListFieldNumber = 2;
  inline ::google::protobuf::int32 prof_list(int index) const;
  inline void set_prof_list(int index, ::google::protobuf::int32 value);
  inline void add_prof_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      prof_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_prof_list();

  // repeated int64 role_list = 3;
  inline int role_list_size() const;
  inline void clear_role_list();
  static const int kRoleListFieldNumber = 3;
  inline ::google::protobuf::int64 role_list(int index) const;
  inline void set_role_list(int index, ::google::protobuf::int64 value);
  inline void add_role_list(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      role_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_role_list();

  // repeated int32 gender_list = 4;
  inline int gender_list_size() const;
  inline void clear_gender_list();
  static const int kGenderListFieldNumber = 4;
  inline ::google::protobuf::int32 gender_list(int index) const;
  inline void set_gender_list(int index, ::google::protobuf::int32 value);
  inline void add_gender_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gender_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gender_list();

  // @@protoc_insertion_point(class_scope:PB.npt_battle_match_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > prof_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > role_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gender_list_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_battle_match_result* default_instance_;
};
// -------------------------------------------------------------------

class npt_battle_match_prepare : public ::google::protobuf::Message {
 public:
  npt_battle_match_prepare();
  virtual ~npt_battle_match_prepare();

  npt_battle_match_prepare(const npt_battle_match_prepare& from);

  inline npt_battle_match_prepare& operator=(const npt_battle_match_prepare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_battle_match_prepare& default_instance();

  void Swap(npt_battle_match_prepare* other);

  // implements Message ----------------------------------------------

  npt_battle_match_prepare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_battle_match_prepare& from);
  void MergeFrom(const npt_battle_match_prepare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BATTLE_MATCH_PREPARE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required int32 prepare = 3;
  inline bool has_prepare() const;
  inline void clear_prepare();
  static const int kPrepareFieldNumber = 3;
  inline ::google::protobuf::int32 prepare() const;
  inline void set_prepare(::google::protobuf::int32 value);

  // required int32 tid = 4;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 4;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // repeated int64 role_list = 5;
  inline int role_list_size() const;
  inline void clear_role_list();
  static const int kRoleListFieldNumber = 5;
  inline ::google::protobuf::int64 role_list(int index) const;
  inline void set_role_list(int index, ::google::protobuf::int64 value);
  inline void add_role_list(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      role_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_role_list();

  // @@protoc_insertion_point(class_scope:PB.npt_battle_match_prepare)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_prepare();
  inline void clear_has_prepare();
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 prepare_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > role_list_;
  ::google::protobuf::int32 tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_battle_match_prepare* default_instance_;
};
// -------------------------------------------------------------------

class npt_get_battle_match_rank : public ::google::protobuf::Message {
 public:
  npt_get_battle_match_rank();
  virtual ~npt_get_battle_match_rank();

  npt_get_battle_match_rank(const npt_get_battle_match_rank& from);

  inline npt_get_battle_match_rank& operator=(const npt_get_battle_match_rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_get_battle_match_rank& default_instance();

  void Swap(npt_get_battle_match_rank* other);

  // implements Message ----------------------------------------------

  npt_get_battle_match_rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_get_battle_match_rank& from);
  void MergeFrom(const npt_get_battle_match_rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_BATTLE_MATCH_RANK];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required int32 topid = 3;
  inline bool has_topid() const;
  inline void clear_topid();
  static const int kTopidFieldNumber = 3;
  inline ::google::protobuf::int32 topid() const;
  inline void set_topid(::google::protobuf::int32 value);

  // required int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_get_battle_match_rank)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_topid();
  inline void clear_has_topid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 topid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_get_battle_match_rank* default_instance_;
};
// -------------------------------------------------------------------

class npt_midas_activity_get_re : public ::google::protobuf::Message {
 public:
  npt_midas_activity_get_re();
  virtual ~npt_midas_activity_get_re();

  npt_midas_activity_get_re(const npt_midas_activity_get_re& from);

  inline npt_midas_activity_get_re& operator=(const npt_midas_activity_get_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_midas_activity_get_re& default_instance();

  void Swap(npt_midas_activity_get_re* other);

  // implements Message ----------------------------------------------

  npt_midas_activity_get_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_midas_activity_get_re& from);
  void MergeFrom(const npt_midas_activity_get_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_MIDAS_ACTIVITY_GET_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 param = 2;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);

  // optional bytes activity_info = 3;
  inline bool has_activity_info() const;
  inline void clear_activity_info();
  static const int kActivityInfoFieldNumber = 3;
  inline const ::std::string& activity_info() const;
  inline void set_activity_info(const ::std::string& value);
  inline void set_activity_info(const char* value);
  inline void set_activity_info(const void* value, size_t size);
  inline ::std::string* mutable_activity_info();
  inline ::std::string* release_activity_info();
  inline void set_allocated_activity_info(::std::string* activity_info);

  // @@protoc_insertion_point(class_scope:PB.npt_midas_activity_get_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_activity_info();
  inline void clear_has_activity_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 param_;
  ::std::string* activity_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_midas_activity_get_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_die_elite_tid : public ::google::protobuf::Message {
 public:
  npt_die_elite_tid();
  virtual ~npt_die_elite_tid();

  npt_die_elite_tid(const npt_die_elite_tid& from);

  inline npt_die_elite_tid& operator=(const npt_die_elite_tid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_die_elite_tid& default_instance();

  void Swap(npt_die_elite_tid* other);

  // implements Message ----------------------------------------------

  npt_die_elite_tid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_die_elite_tid& from);
  void MergeFrom(const npt_die_elite_tid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_DIE_ELITE_TID];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated int32 tid_list = 2;
  inline int tid_list_size() const;
  inline void clear_tid_list();
  static const int kTidListFieldNumber = 2;
  inline ::google::protobuf::int32 tid_list(int index) const;
  inline void set_tid_list(int index, ::google::protobuf::int32 value);
  inline void add_tid_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      tid_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_tid_list();

  // @@protoc_insertion_point(class_scope:PB.npt_die_elite_tid)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > tid_list_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_die_elite_tid* default_instance_;
};
// -------------------------------------------------------------------

class npt_query_die_elite_tid : public ::google::protobuf::Message {
 public:
  npt_query_die_elite_tid();
  virtual ~npt_query_die_elite_tid();

  npt_query_die_elite_tid(const npt_query_die_elite_tid& from);

  inline npt_query_die_elite_tid& operator=(const npt_query_die_elite_tid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_query_die_elite_tid& default_instance();

  void Swap(npt_query_die_elite_tid* other);

  // implements Message ----------------------------------------------

  npt_query_die_elite_tid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_query_die_elite_tid& from);
  void MergeFrom(const npt_query_die_elite_tid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_DIE_ELITE_TID];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.npt_query_die_elite_tid)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_query_die_elite_tid* default_instance_;
};
// -------------------------------------------------------------------

class grc_passed_friend_info : public ::google::protobuf::Message {
 public:
  grc_passed_friend_info();
  virtual ~grc_passed_friend_info();

  grc_passed_friend_info(const grc_passed_friend_info& from);

  inline grc_passed_friend_info& operator=(const grc_passed_friend_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const grc_passed_friend_info& default_instance();

  void Swap(grc_passed_friend_info* other);

  // implements Message ----------------------------------------------

  grc_passed_friend_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const grc_passed_friend_info& from);
  void MergeFrom(const grc_passed_friend_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes nickname = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required bytes figure_url = 2;
  inline bool has_figure_url() const;
  inline void clear_figure_url();
  static const int kFigureUrlFieldNumber = 2;
  inline const ::std::string& figure_url() const;
  inline void set_figure_url(const ::std::string& value);
  inline void set_figure_url(const char* value);
  inline void set_figure_url(const void* value, size_t size);
  inline ::std::string* mutable_figure_url();
  inline ::std::string* release_figure_url();
  inline void set_allocated_figure_url(::std::string* figure_url);

  // @@protoc_insertion_point(class_scope:PB.grc_passed_friend_info)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_figure_url();
  inline void clear_has_figure_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::std::string* figure_url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static grc_passed_friend_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_exceed_friend_list : public ::google::protobuf::Message {
 public:
  npt_grc_exceed_friend_list();
  virtual ~npt_grc_exceed_friend_list();

  npt_grc_exceed_friend_list(const npt_grc_exceed_friend_list& from);

  inline npt_grc_exceed_friend_list& operator=(const npt_grc_exceed_friend_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_exceed_friend_list& default_instance();

  void Swap(npt_grc_exceed_friend_list* other);

  // implements Message ----------------------------------------------

  npt_grc_exceed_friend_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_exceed_friend_list& from);
  void MergeFrom(const npt_grc_exceed_friend_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_EXCEED_FRIEND_LIST];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 res = 2;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);

  // optional int32 level_type = 3;
  inline bool has_level_type() const;
  inline void clear_level_type();
  static const int kLevelTypeFieldNumber = 3;
  inline ::google::protobuf::int32 level_type() const;
  inline void set_level_type(::google::protobuf::int32 value);

  // repeated .PB.grc_passed_friend_info friends = 4;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 4;
  inline const ::PB::grc_passed_friend_info& friends(int index) const;
  inline ::PB::grc_passed_friend_info* mutable_friends(int index);
  inline ::PB::grc_passed_friend_info* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_passed_friend_info >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::grc_passed_friend_info >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:PB.npt_grc_exceed_friend_list)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_level_type();
  inline void clear_has_level_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 res_;
  ::google::protobuf::RepeatedPtrField< ::PB::grc_passed_friend_info > friends_;
  ::google::protobuf::int32 level_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_exceed_friend_list* default_instance_;
};
// -------------------------------------------------------------------

class npt_top_reward_player : public ::google::protobuf::Message {
 public:
  npt_top_reward_player();
  virtual ~npt_top_reward_player();

  npt_top_reward_player(const npt_top_reward_player& from);

  inline npt_top_reward_player& operator=(const npt_top_reward_player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_top_reward_player& default_instance();

  void Swap(npt_top_reward_player* other);

  // implements Message ----------------------------------------------

  npt_top_reward_player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_top_reward_player& from);
  void MergeFrom(const npt_top_reward_player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PB.npt_top_reward.player)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_top_reward_player* default_instance_;
};
// -------------------------------------------------------------------

class npt_top_reward : public ::google::protobuf::Message {
 public:
  npt_top_reward();
  virtual ~npt_top_reward();

  npt_top_reward(const npt_top_reward& from);

  inline npt_top_reward& operator=(const npt_top_reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_top_reward& default_instance();

  void Swap(npt_top_reward* other);

  // implements Message ----------------------------------------------

  npt_top_reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_top_reward& from);
  void MergeFrom(const npt_top_reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_top_reward_player player;

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TOP_REWARD];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.npt_top_reward.player players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::PB::npt_top_reward_player& players(int index) const;
  inline ::PB::npt_top_reward_player* mutable_players(int index);
  inline ::PB::npt_top_reward_player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_top_reward_player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::npt_top_reward_player >*
      mutable_players();

  // optional int32 self_rank = 3;
  inline bool has_self_rank() const;
  inline void clear_self_rank();
  static const int kSelfRankFieldNumber = 3;
  inline ::google::protobuf::int32 self_rank() const;
  inline void set_self_rank(::google::protobuf::int32 value);

  // optional bool has_reward = 4;
  inline bool has_has_reward() const;
  inline void clear_has_reward();
  static const int kHasRewardFieldNumber = 4;
  inline bool has_reward() const;
  inline void set_has_reward(bool value);

  // optional int32 activity_end_time = 5;
  inline bool has_activity_end_time() const;
  inline void clear_activity_end_time();
  static const int kActivityEndTimeFieldNumber = 5;
  inline ::google::protobuf::int32 activity_end_time() const;
  inline void set_activity_end_time(::google::protobuf::int32 value);

  // optional bool get_reward = 6;
  inline bool has_get_reward() const;
  inline void clear_get_reward();
  static const int kGetRewardFieldNumber = 6;
  inline bool get_reward() const;
  inline void set_get_reward(bool value);

  // optional int32 tid = 7;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 7;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // repeated int32 actived_tid = 8;
  inline int actived_tid_size() const;
  inline void clear_actived_tid();
  static const int kActivedTidFieldNumber = 8;
  inline ::google::protobuf::int32 actived_tid(int index) const;
  inline void set_actived_tid(int index, ::google::protobuf::int32 value);
  inline void add_actived_tid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      actived_tid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_actived_tid();

  // optional int32 activity_start_time = 9;
  inline bool has_activity_start_time() const;
  inline void clear_activity_start_time();
  static const int kActivityStartTimeFieldNumber = 9;
  inline ::google::protobuf::int32 activity_start_time() const;
  inline void set_activity_start_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_top_reward)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_self_rank();
  inline void clear_has_self_rank();
  inline void set_has_has_reward();
  inline void clear_has_has_reward();
  inline void set_has_activity_end_time();
  inline void clear_has_activity_end_time();
  inline void set_has_get_reward();
  inline void clear_has_get_reward();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_activity_start_time();
  inline void clear_has_activity_start_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::npt_top_reward_player > players_;
  int type_;
  ::google::protobuf::int32 self_rank_;
  ::google::protobuf::int32 activity_end_time_;
  bool has_reward_;
  bool get_reward_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > actived_tid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 activity_start_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_top_reward* default_instance_;
};
// -------------------------------------------------------------------

class npt_nest_common_operation : public ::google::protobuf::Message {
 public:
  npt_nest_common_operation();
  virtual ~npt_nest_common_operation();

  npt_nest_common_operation(const npt_nest_common_operation& from);

  inline npt_nest_common_operation& operator=(const npt_nest_common_operation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nest_common_operation& default_instance();

  void Swap(npt_nest_common_operation* other);

  // implements Message ----------------------------------------------

  npt_nest_common_operation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nest_common_operation& from);
  void MergeFrom(const npt_nest_common_operation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_nest_common_operation_NEST_OP NEST_OP;
  static const NEST_OP NO_PLAYE_DS_LOGIN_FINISH = npt_nest_common_operation_NEST_OP_NO_PLAYE_DS_LOGIN_FINISH;
  static inline bool NEST_OP_IsValid(int value) {
    return npt_nest_common_operation_NEST_OP_IsValid(value);
  }
  static const NEST_OP NEST_OP_MIN =
    npt_nest_common_operation_NEST_OP_NEST_OP_MIN;
  static const NEST_OP NEST_OP_MAX =
    npt_nest_common_operation_NEST_OP_NEST_OP_MAX;
  static const int NEST_OP_ARRAYSIZE =
    npt_nest_common_operation_NEST_OP_NEST_OP_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NEST_OP_descriptor() {
    return npt_nest_common_operation_NEST_OP_descriptor();
  }
  static inline const ::std::string& NEST_OP_Name(NEST_OP value) {
    return npt_nest_common_operation_NEST_OP_Name(value);
  }
  static inline bool NEST_OP_Parse(const ::std::string& name,
      NEST_OP* value) {
    return npt_nest_common_operation_NEST_OP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NEST_COMMON_OPERATION];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.npt_nest_common_operation.NEST_OP op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::PB::npt_nest_common_operation_NEST_OP op() const;
  inline void set_op(::PB::npt_nest_common_operation_NEST_OP value);

  // @@protoc_insertion_point(class_scope:PB.npt_nest_common_operation)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_op();
  inline void clear_has_op();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int op_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nest_common_operation* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_reputation : public ::google::protobuf::Message {
 public:
  npt_nation_reputation();
  virtual ~npt_nation_reputation();

  npt_nation_reputation(const npt_nation_reputation& from);

  inline npt_nation_reputation& operator=(const npt_nation_reputation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_reputation& default_instance();

  void Swap(npt_nation_reputation* other);

  // implements Message ----------------------------------------------

  npt_nation_reputation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_reputation& from);
  void MergeFrom(const npt_nation_reputation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_REPUTATION];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 oper_param = 2;
  inline bool has_oper_param() const;
  inline void clear_oper_param();
  static const int kOperParamFieldNumber = 2;
  inline ::google::protobuf::int32 oper_param() const;
  inline void set_oper_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_reputation)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper_param();
  inline void clear_has_oper_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 oper_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_reputation* default_instance_;
};
// -------------------------------------------------------------------

class nation_reputation_info : public ::google::protobuf::Message {
 public:
  nation_reputation_info();
  virtual ~nation_reputation_info();

  nation_reputation_info(const nation_reputation_info& from);

  inline nation_reputation_info& operator=(const nation_reputation_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nation_reputation_info& default_instance();

  void Swap(nation_reputation_info* other);

  // implements Message ----------------------------------------------

  nation_reputation_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nation_reputation_info& from);
  void MergeFrom(const nation_reputation_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nation_repu_type = 1;
  inline bool has_nation_repu_type() const;
  inline void clear_nation_repu_type();
  static const int kNationRepuTypeFieldNumber = 1;
  inline ::google::protobuf::int32 nation_repu_type() const;
  inline void set_nation_repu_type(::google::protobuf::int32 value);

  // optional int64 nation_repu_count = 2;
  inline bool has_nation_repu_count() const;
  inline void clear_nation_repu_count();
  static const int kNationRepuCountFieldNumber = 2;
  inline ::google::protobuf::int64 nation_repu_count() const;
  inline void set_nation_repu_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.nation_reputation_info)
 private:
  inline void set_has_nation_repu_type();
  inline void clear_has_nation_repu_type();
  inline void set_has_nation_repu_count();
  inline void clear_has_nation_repu_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 nation_repu_count_;
  ::google::protobuf::int32 nation_repu_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static nation_reputation_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_reputation_re : public ::google::protobuf::Message {
 public:
  npt_nation_reputation_re();
  virtual ~npt_nation_reputation_re();

  npt_nation_reputation_re(const npt_nation_reputation_re& from);

  inline npt_nation_reputation_re& operator=(const npt_nation_reputation_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_reputation_re& default_instance();

  void Swap(npt_nation_reputation_re* other);

  // implements Message ----------------------------------------------

  npt_nation_reputation_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_reputation_re& from);
  void MergeFrom(const npt_nation_reputation_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_REPUTATION_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.nation_reputation_info reputation_info = 2;
  inline int reputation_info_size() const;
  inline void clear_reputation_info();
  static const int kReputationInfoFieldNumber = 2;
  inline const ::PB::nation_reputation_info& reputation_info(int index) const;
  inline ::PB::nation_reputation_info* mutable_reputation_info(int index);
  inline ::PB::nation_reputation_info* add_reputation_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::nation_reputation_info >&
      reputation_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::nation_reputation_info >*
      mutable_reputation_info();

  // @@protoc_insertion_point(class_scope:PB.npt_nation_reputation_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::nation_reputation_info > reputation_info_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_reputation_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_reputation_change : public ::google::protobuf::Message {
 public:
  npt_nation_reputation_change();
  virtual ~npt_nation_reputation_change();

  npt_nation_reputation_change(const npt_nation_reputation_change& from);

  inline npt_nation_reputation_change& operator=(const npt_nation_reputation_change& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_reputation_change& default_instance();

  void Swap(npt_nation_reputation_change* other);

  // implements Message ----------------------------------------------

  npt_nation_reputation_change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_reputation_change& from);
  void MergeFrom(const npt_nation_reputation_change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_REPUTATION_CHANGE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.nation_reputation_info reputation_info = 2;
  inline bool has_reputation_info() const;
  inline void clear_reputation_info();
  static const int kReputationInfoFieldNumber = 2;
  inline const ::PB::nation_reputation_info& reputation_info() const;
  inline ::PB::nation_reputation_info* mutable_reputation_info();
  inline ::PB::nation_reputation_info* release_reputation_info();
  inline void set_allocated_reputation_info(::PB::nation_reputation_info* reputation_info);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_reputation_change)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_reputation_info();
  inline void clear_has_reputation_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::nation_reputation_info* reputation_info_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_reputation_change* default_instance_;
};
// -------------------------------------------------------------------

class nation_lantern_info : public ::google::protobuf::Message {
 public:
  nation_lantern_info();
  virtual ~nation_lantern_info();

  nation_lantern_info(const nation_lantern_info& from);

  inline nation_lantern_info& operator=(const nation_lantern_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nation_lantern_info& default_instance();

  void Swap(nation_lantern_info* other);

  // implements Message ----------------------------------------------

  nation_lantern_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nation_lantern_info& from);
  void MergeFrom(const nation_lantern_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nation_id = 1;
  inline bool has_nation_id() const;
  inline void clear_nation_id();
  static const int kNationIdFieldNumber = 1;
  inline ::google::protobuf::int32 nation_id() const;
  inline void set_nation_id(::google::protobuf::int32 value);

  // optional int64 nation_lantern = 2;
  inline bool has_nation_lantern() const;
  inline void clear_nation_lantern();
  static const int kNationLanternFieldNumber = 2;
  inline ::google::protobuf::int64 nation_lantern() const;
  inline void set_nation_lantern(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.nation_lantern_info)
 private:
  inline void set_has_nation_id();
  inline void clear_has_nation_id();
  inline void set_has_nation_lantern();
  inline void clear_has_nation_lantern();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 nation_lantern_;
  ::google::protobuf::int32 nation_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static nation_lantern_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_lantern_info : public ::google::protobuf::Message {
 public:
  npt_nation_lantern_info();
  virtual ~npt_nation_lantern_info();

  npt_nation_lantern_info(const npt_nation_lantern_info& from);

  inline npt_nation_lantern_info& operator=(const npt_nation_lantern_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_lantern_info& default_instance();

  void Swap(npt_nation_lantern_info* other);

  // implements Message ----------------------------------------------

  npt_nation_lantern_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_lantern_info& from);
  void MergeFrom(const npt_nation_lantern_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_LANTERN_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_lantern_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_lantern_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_lantern_info_re : public ::google::protobuf::Message {
 public:
  npt_nation_lantern_info_re();
  virtual ~npt_nation_lantern_info_re();

  npt_nation_lantern_info_re(const npt_nation_lantern_info_re& from);

  inline npt_nation_lantern_info_re& operator=(const npt_nation_lantern_info_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_lantern_info_re& default_instance();

  void Swap(npt_nation_lantern_info_re* other);

  // implements Message ----------------------------------------------

  npt_nation_lantern_info_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_lantern_info_re& from);
  void MergeFrom(const npt_nation_lantern_info_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_LANTERN_INFO_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.nation_lantern_info lantern_info = 2;
  inline int lantern_info_size() const;
  inline void clear_lantern_info();
  static const int kLanternInfoFieldNumber = 2;
  inline const ::PB::nation_lantern_info& lantern_info(int index) const;
  inline ::PB::nation_lantern_info* mutable_lantern_info(int index);
  inline ::PB::nation_lantern_info* add_lantern_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::nation_lantern_info >&
      lantern_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::nation_lantern_info >*
      mutable_lantern_info();

  // repeated int32 receive_gift = 3;
  inline int receive_gift_size() const;
  inline void clear_receive_gift();
  static const int kReceiveGiftFieldNumber = 3;
  inline ::google::protobuf::int32 receive_gift(int index) const;
  inline void set_receive_gift(int index, ::google::protobuf::int32 value);
  inline void add_receive_gift(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      receive_gift() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_receive_gift();

  // @@protoc_insertion_point(class_scope:PB.npt_nation_lantern_info_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::nation_lantern_info > lantern_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > receive_gift_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_lantern_info_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_receive_lantern_gift : public ::google::protobuf::Message {
 public:
  npt_receive_lantern_gift();
  virtual ~npt_receive_lantern_gift();

  npt_receive_lantern_gift(const npt_receive_lantern_gift& from);

  inline npt_receive_lantern_gift& operator=(const npt_receive_lantern_gift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_receive_lantern_gift& default_instance();

  void Swap(npt_receive_lantern_gift* other);

  // implements Message ----------------------------------------------

  npt_receive_lantern_gift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_receive_lantern_gift& from);
  void MergeFrom(const npt_receive_lantern_gift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECEIVE_NATION_GIFT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 flyhigh = 2;
  inline bool has_flyhigh() const;
  inline void clear_flyhigh();
  static const int kFlyhighFieldNumber = 2;
  inline ::google::protobuf::int32 flyhigh() const;
  inline void set_flyhigh(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_receive_lantern_gift)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_flyhigh();
  inline void clear_has_flyhigh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 flyhigh_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_receive_lantern_gift* default_instance_;
};
// -------------------------------------------------------------------

class zoneid_info : public ::google::protobuf::Message {
 public:
  zoneid_info();
  virtual ~zoneid_info();

  zoneid_info(const zoneid_info& from);

  inline zoneid_info& operator=(const zoneid_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const zoneid_info& default_instance();

  void Swap(zoneid_info* other);

  // implements Message ----------------------------------------------

  zoneid_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const zoneid_info& from);
  void MergeFrom(const zoneid_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 merge_zoneid = 1;
  inline bool has_merge_zoneid() const;
  inline void clear_merge_zoneid();
  static const int kMergeZoneidFieldNumber = 1;
  inline ::google::protobuf::int32 merge_zoneid() const;
  inline void set_merge_zoneid(::google::protobuf::int32 value);

  // optional int32 cur_zoneid = 2;
  inline bool has_cur_zoneid() const;
  inline void clear_cur_zoneid();
  static const int kCurZoneidFieldNumber = 2;
  inline ::google::protobuf::int32 cur_zoneid() const;
  inline void set_cur_zoneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.zoneid_info)
 private:
  inline void set_has_merge_zoneid();
  inline void clear_has_merge_zoneid();
  inline void set_has_cur_zoneid();
  inline void clear_has_cur_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 merge_zoneid_;
  ::google::protobuf::int32 cur_zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static zoneid_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_notify_zoneid_list : public ::google::protobuf::Message {
 public:
  npt_notify_zoneid_list();
  virtual ~npt_notify_zoneid_list();

  npt_notify_zoneid_list(const npt_notify_zoneid_list& from);

  inline npt_notify_zoneid_list& operator=(const npt_notify_zoneid_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_notify_zoneid_list& default_instance();

  void Swap(npt_notify_zoneid_list* other);

  // implements Message ----------------------------------------------

  npt_notify_zoneid_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_notify_zoneid_list& from);
  void MergeFrom(const npt_notify_zoneid_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NOTIFY_ZONE_LIST];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.zoneid_info zoneid_list = 2;
  inline int zoneid_list_size() const;
  inline void clear_zoneid_list();
  static const int kZoneidListFieldNumber = 2;
  inline const ::PB::zoneid_info& zoneid_list(int index) const;
  inline ::PB::zoneid_info* mutable_zoneid_list(int index);
  inline ::PB::zoneid_info* add_zoneid_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::zoneid_info >&
      zoneid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::zoneid_info >*
      mutable_zoneid_list();

  // @@protoc_insertion_point(class_scope:PB.npt_notify_zoneid_list)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::zoneid_info > zoneid_list_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_notify_zoneid_list* default_instance_;
};
// -------------------------------------------------------------------

class npt_broadcast_match_info : public ::google::protobuf::Message {
 public:
  npt_broadcast_match_info();
  virtual ~npt_broadcast_match_info();

  npt_broadcast_match_info(const npt_broadcast_match_info& from);

  inline npt_broadcast_match_info& operator=(const npt_broadcast_match_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_broadcast_match_info& default_instance();

  void Swap(npt_broadcast_match_info* other);

  // implements Message ----------------------------------------------

  npt_broadcast_match_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_broadcast_match_info& from);
  void MergeFrom(const npt_broadcast_match_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NOTIFY_ROAM_MATCH_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.roam_match_info info_list = 2;
  inline int info_list_size() const;
  inline void clear_info_list();
  static const int kInfoListFieldNumber = 2;
  inline const ::PB::roam_match_info& info_list(int index) const;
  inline ::PB::roam_match_info* mutable_info_list(int index);
  inline ::PB::roam_match_info* add_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::roam_match_info >&
      info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::roam_match_info >*
      mutable_info_list();

  // @@protoc_insertion_point(class_scope:PB.npt_broadcast_match_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::roam_match_info > info_list_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_broadcast_match_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_exchange_activity : public ::google::protobuf::Message {
 public:
  npt_exchange_activity();
  virtual ~npt_exchange_activity();

  npt_exchange_activity(const npt_exchange_activity& from);

  inline npt_exchange_activity& operator=(const npt_exchange_activity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_exchange_activity& default_instance();

  void Swap(npt_exchange_activity* other);

  // implements Message ----------------------------------------------

  npt_exchange_activity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_exchange_activity& from);
  void MergeFrom(const npt_exchange_activity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_EXCHANGE_ACTIVITY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 activity_index = 2;
  inline bool has_activity_index() const;
  inline void clear_activity_index();
  static const int kActivityIndexFieldNumber = 2;
  inline ::google::protobuf::int32 activity_index() const;
  inline void set_activity_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_exchange_activity)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_activity_index();
  inline void clear_has_activity_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 activity_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_exchange_activity* default_instance_;
};
// -------------------------------------------------------------------

class npt_exchange_activity_re : public ::google::protobuf::Message {
 public:
  npt_exchange_activity_re();
  virtual ~npt_exchange_activity_re();

  npt_exchange_activity_re(const npt_exchange_activity_re& from);

  inline npt_exchange_activity_re& operator=(const npt_exchange_activity_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_exchange_activity_re& default_instance();

  void Swap(npt_exchange_activity_re* other);

  // implements Message ----------------------------------------------

  npt_exchange_activity_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_exchange_activity_re& from);
  void MergeFrom(const npt_exchange_activity_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_EXCHANGE_ACTIVITY_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.nation_lantern_info lantern_info = 2;
  inline int lantern_info_size() const;
  inline void clear_lantern_info();
  static const int kLanternInfoFieldNumber = 2;
  inline const ::PB::nation_lantern_info& lantern_info(int index) const;
  inline ::PB::nation_lantern_info* mutable_lantern_info(int index);
  inline ::PB::nation_lantern_info* add_lantern_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::nation_lantern_info >&
      lantern_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::nation_lantern_info >*
      mutable_lantern_info();

  // repeated int32 receive_gift = 3;
  inline int receive_gift_size() const;
  inline void clear_receive_gift();
  static const int kReceiveGiftFieldNumber = 3;
  inline ::google::protobuf::int32 receive_gift(int index) const;
  inline void set_receive_gift(int index, ::google::protobuf::int32 value);
  inline void add_receive_gift(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      receive_gift() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_receive_gift();

  // optional int32 activity_index = 4;
  inline bool has_activity_index() const;
  inline void clear_activity_index();
  static const int kActivityIndexFieldNumber = 4;
  inline ::google::protobuf::int32 activity_index() const;
  inline void set_activity_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_exchange_activity_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_activity_index();
  inline void clear_has_activity_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::nation_lantern_info > lantern_info_;
  int type_;
  ::google::protobuf::int32 activity_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > receive_gift_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_exchange_activity_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_award_activity : public ::google::protobuf::Message {
 public:
  npt_award_activity();
  virtual ~npt_award_activity();

  npt_award_activity(const npt_award_activity& from);

  inline npt_award_activity& operator=(const npt_award_activity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_award_activity& default_instance();

  void Swap(npt_award_activity* other);

  // implements Message ----------------------------------------------

  npt_award_activity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_award_activity& from);
  void MergeFrom(const npt_award_activity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_EXCHANGE_AWARD];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 activity_index = 2;
  inline bool has_activity_index() const;
  inline void clear_activity_index();
  static const int kActivityIndexFieldNumber = 2;
  inline ::google::protobuf::int32 activity_index() const;
  inline void set_activity_index(::google::protobuf::int32 value);

  // optional int32 reputation_count = 3;
  inline bool has_reputation_count() const;
  inline void clear_reputation_count();
  static const int kReputationCountFieldNumber = 3;
  inline ::google::protobuf::int32 reputation_count() const;
  inline void set_reputation_count(::google::protobuf::int32 value);

  // optional int32 exchange_type = 4;
  inline bool has_exchange_type() const;
  inline void clear_exchange_type();
  static const int kExchangeTypeFieldNumber = 4;
  inline ::google::protobuf::int32 exchange_type() const;
  inline void set_exchange_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_award_activity)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_activity_index();
  inline void clear_has_activity_index();
  inline void set_has_reputation_count();
  inline void clear_has_reputation_count();
  inline void set_has_exchange_type();
  inline void clear_has_exchange_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 activity_index_;
  ::google::protobuf::int32 reputation_count_;
  ::google::protobuf::int32 exchange_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_award_activity* default_instance_;
};
// -------------------------------------------------------------------

class npt_change_zone_response : public ::google::protobuf::Message {
 public:
  npt_change_zone_response();
  virtual ~npt_change_zone_response();

  npt_change_zone_response(const npt_change_zone_response& from);

  inline npt_change_zone_response& operator=(const npt_change_zone_response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_change_zone_response& default_instance();

  void Swap(npt_change_zone_response* other);

  // implements Message ----------------------------------------------

  npt_change_zone_response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_change_zone_response& from);
  void MergeFrom(const npt_change_zone_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CHANGE_ZONE_RESPONSE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 dst_zone = 2;
  inline bool has_dst_zone() const;
  inline void clear_dst_zone();
  static const int kDstZoneFieldNumber = 2;
  inline ::google::protobuf::int32 dst_zone() const;
  inline void set_dst_zone(::google::protobuf::int32 value);

  // optional int32 retcode = 3;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_change_zone_response)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dst_zone();
  inline void clear_has_dst_zone();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 dst_zone_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_change_zone_response* default_instance_;
};
// -------------------------------------------------------------------

class npt_roam_zhaoji : public ::google::protobuf::Message {
 public:
  npt_roam_zhaoji();
  virtual ~npt_roam_zhaoji();

  npt_roam_zhaoji(const npt_roam_zhaoji& from);

  inline npt_roam_zhaoji& operator=(const npt_roam_zhaoji& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_roam_zhaoji& default_instance();

  void Swap(npt_roam_zhaoji* other);

  // implements Message ----------------------------------------------

  npt_roam_zhaoji* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_roam_zhaoji& from);
  void MergeFrom(const npt_roam_zhaoji& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ROAM_ZHAOJI];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 use_count = 2;
  inline bool has_use_count() const;
  inline void clear_use_count();
  static const int kUseCountFieldNumber = 2;
  inline ::google::protobuf::int32 use_count() const;
  inline void set_use_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_roam_zhaoji)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_use_count();
  inline void clear_has_use_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 use_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_roam_zhaoji* default_instance_;
};
// -------------------------------------------------------------------

class npt_roam_zhaoji_info : public ::google::protobuf::Message {
 public:
  npt_roam_zhaoji_info();
  virtual ~npt_roam_zhaoji_info();

  npt_roam_zhaoji_info(const npt_roam_zhaoji_info& from);

  inline npt_roam_zhaoji_info& operator=(const npt_roam_zhaoji_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_roam_zhaoji_info& default_instance();

  void Swap(npt_roam_zhaoji_info* other);

  // implements Message ----------------------------------------------

  npt_roam_zhaoji_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_roam_zhaoji_info& from);
  void MergeFrom(const npt_roam_zhaoji_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ROAM_ZHAOJI_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int64 king_roleid = 2;
  inline bool has_king_roleid() const;
  inline void clear_king_roleid();
  static const int kKingRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 king_roleid() const;
  inline void set_king_roleid(::google::protobuf::int64 value);

  // optional int64 jiangjun_roleid = 3;
  inline bool has_jiangjun_roleid() const;
  inline void clear_jiangjun_roleid();
  static const int kJiangjunRoleidFieldNumber = 3;
  inline ::google::protobuf::int64 jiangjun_roleid() const;
  inline void set_jiangjun_roleid(::google::protobuf::int64 value);

  // optional int32 use_count = 4;
  inline bool has_use_count() const;
  inline void clear_use_count();
  static const int kUseCountFieldNumber = 4;
  inline ::google::protobuf::int32 use_count() const;
  inline void set_use_count(::google::protobuf::int32 value);

  // optional bytes king_name = 5;
  inline bool has_king_name() const;
  inline void clear_king_name();
  static const int kKingNameFieldNumber = 5;
  inline const ::std::string& king_name() const;
  inline void set_king_name(const ::std::string& value);
  inline void set_king_name(const char* value);
  inline void set_king_name(const void* value, size_t size);
  inline ::std::string* mutable_king_name();
  inline ::std::string* release_king_name();
  inline void set_allocated_king_name(::std::string* king_name);

  // optional bytes jiangjun_name = 6;
  inline bool has_jiangjun_name() const;
  inline void clear_jiangjun_name();
  static const int kJiangjunNameFieldNumber = 6;
  inline const ::std::string& jiangjun_name() const;
  inline void set_jiangjun_name(const ::std::string& value);
  inline void set_jiangjun_name(const char* value);
  inline void set_jiangjun_name(const void* value, size_t size);
  inline ::std::string* mutable_jiangjun_name();
  inline ::std::string* release_jiangjun_name();
  inline void set_allocated_jiangjun_name(::std::string* jiangjun_name);

  // @@protoc_insertion_point(class_scope:PB.npt_roam_zhaoji_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_king_roleid();
  inline void clear_has_king_roleid();
  inline void set_has_jiangjun_roleid();
  inline void clear_has_jiangjun_roleid();
  inline void set_has_use_count();
  inline void clear_has_use_count();
  inline void set_has_king_name();
  inline void clear_has_king_name();
  inline void set_has_jiangjun_name();
  inline void clear_has_jiangjun_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 king_roleid_;
  int type_;
  ::google::protobuf::int32 use_count_;
  ::google::protobuf::int64 jiangjun_roleid_;
  ::std::string* king_name_;
  ::std::string* jiangjun_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_roam_zhaoji_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_roam_inst_result : public ::google::protobuf::Message {
 public:
  npt_roam_inst_result();
  virtual ~npt_roam_inst_result();

  npt_roam_inst_result(const npt_roam_inst_result& from);

  inline npt_roam_inst_result& operator=(const npt_roam_inst_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_roam_inst_result& default_instance();

  void Swap(npt_roam_inst_result* other);

  // implements Message ----------------------------------------------

  npt_roam_inst_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_roam_inst_result& from);
  void MergeFrom(const npt_roam_inst_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ROAM_INST_RESULT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.db_roam_record_data info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PB::db_roam_record_data& info(int index) const;
  inline ::PB::db_roam_record_data* mutable_info(int index);
  inline ::PB::db_roam_record_data* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_data >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_data >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:PB.npt_roam_inst_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_data > info_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_roam_inst_result* default_instance_;
};
// -------------------------------------------------------------------

class npt_req_backflow_data : public ::google::protobuf::Message {
 public:
  npt_req_backflow_data();
  virtual ~npt_req_backflow_data();

  npt_req_backflow_data(const npt_req_backflow_data& from);

  inline npt_req_backflow_data& operator=(const npt_req_backflow_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_req_backflow_data& default_instance();

  void Swap(npt_req_backflow_data* other);

  // implements Message ----------------------------------------------

  npt_req_backflow_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_req_backflow_data& from);
  void MergeFrom(const npt_req_backflow_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REQ_BACKFLOW_DATA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.npt_req_backflow_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_req_backflow_data* default_instance_;
};
// -------------------------------------------------------------------

class npt_req_backflow_data_re : public ::google::protobuf::Message {
 public:
  npt_req_backflow_data_re();
  virtual ~npt_req_backflow_data_re();

  npt_req_backflow_data_re(const npt_req_backflow_data_re& from);

  inline npt_req_backflow_data_re& operator=(const npt_req_backflow_data_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_req_backflow_data_re& default_instance();

  void Swap(npt_req_backflow_data_re* other);

  // implements Message ----------------------------------------------

  npt_req_backflow_data_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_req_backflow_data_re& from);
  void MergeFrom(const npt_req_backflow_data_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REQ_BACKFLOW_DATA_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional bool involvement = 2;
  inline bool has_involvement() const;
  inline void clear_involvement();
  static const int kInvolvementFieldNumber = 2;
  inline bool involvement() const;
  inline void set_involvement(bool value);

  // optional bool invite1 = 3;
  inline bool has_invite1() const;
  inline void clear_invite1();
  static const int kInvite1FieldNumber = 3;
  inline bool invite1() const;
  inline void set_invite1(bool value);

  // optional bool invite2 = 4;
  inline bool has_invite2() const;
  inline void clear_invite2();
  static const int kInvite2FieldNumber = 4;
  inline bool invite2() const;
  inline void set_invite2(bool value);

  // optional bool invite3 = 5;
  inline bool has_invite3() const;
  inline void clear_invite3();
  static const int kInvite3FieldNumber = 5;
  inline bool invite3() const;
  inline void set_invite3(bool value);

  // optional bool convene = 6;
  inline bool has_convene() const;
  inline void clear_convene();
  static const int kConveneFieldNumber = 6;
  inline bool convene() const;
  inline void set_convene(bool value);

  // optional bool backflow = 7;
  inline bool has_backflow() const;
  inline void clear_backflow();
  static const int kBackflowFieldNumber = 7;
  inline bool backflow() const;
  inline void set_backflow(bool value);

  // optional int32 count = 8;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 8;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 exp = 9;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 9;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_req_backflow_data_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_involvement();
  inline void clear_has_involvement();
  inline void set_has_invite1();
  inline void clear_has_invite1();
  inline void set_has_invite2();
  inline void clear_has_invite2();
  inline void set_has_invite3();
  inline void clear_has_invite3();
  inline void set_has_convene();
  inline void clear_has_convene();
  inline void set_has_backflow();
  inline void clear_has_backflow();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  bool involvement_;
  bool invite1_;
  bool invite2_;
  bool invite3_;
  bool convene_;
  bool backflow_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_req_backflow_data_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_share_backflow_code : public ::google::protobuf::Message {
 public:
  npt_share_backflow_code();
  virtual ~npt_share_backflow_code();

  npt_share_backflow_code(const npt_share_backflow_code& from);

  inline npt_share_backflow_code& operator=(const npt_share_backflow_code& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_share_backflow_code& default_instance();

  void Swap(npt_share_backflow_code* other);

  // implements Message ----------------------------------------------

  npt_share_backflow_code* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_share_backflow_code& from);
  void MergeFrom(const npt_share_backflow_code& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SHARE_BACKFLOW_CODE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.npt_share_backflow_code)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_share_backflow_code* default_instance_;
};
// -------------------------------------------------------------------

class npt_share_backflow_code_re : public ::google::protobuf::Message {
 public:
  npt_share_backflow_code_re();
  virtual ~npt_share_backflow_code_re();

  npt_share_backflow_code_re(const npt_share_backflow_code_re& from);

  inline npt_share_backflow_code_re& operator=(const npt_share_backflow_code_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_share_backflow_code_re& default_instance();

  void Swap(npt_share_backflow_code_re* other);

  // implements Message ----------------------------------------------

  npt_share_backflow_code_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_share_backflow_code_re& from);
  void MergeFrom(const npt_share_backflow_code_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SHARE_BACKFLOW_CODE_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 errorcode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 2;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_share_backflow_code_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_share_backflow_code_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_rece_invite_award : public ::google::protobuf::Message {
 public:
  npt_rece_invite_award();
  virtual ~npt_rece_invite_award();

  npt_rece_invite_award(const npt_rece_invite_award& from);

  inline npt_rece_invite_award& operator=(const npt_rece_invite_award& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_rece_invite_award& default_instance();

  void Swap(npt_rece_invite_award* other);

  // implements Message ----------------------------------------------

  npt_rece_invite_award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_rece_invite_award& from);
  void MergeFrom(const npt_rece_invite_award& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECE_INVITE_AWARD];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_rece_invite_award)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_rece_invite_award* default_instance_;
};
// -------------------------------------------------------------------

class npt_rece_invite_award_re : public ::google::protobuf::Message {
 public:
  npt_rece_invite_award_re();
  virtual ~npt_rece_invite_award_re();

  npt_rece_invite_award_re(const npt_rece_invite_award_re& from);

  inline npt_rece_invite_award_re& operator=(const npt_rece_invite_award_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_rece_invite_award_re& default_instance();

  void Swap(npt_rece_invite_award_re* other);

  // implements Message ----------------------------------------------

  npt_rece_invite_award_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_rece_invite_award_re& from);
  void MergeFrom(const npt_rece_invite_award_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECE_INVITE_AWARD_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 errorcode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 2;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // optional int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_rece_invite_award_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 errorcode_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_rece_invite_award_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_rece_convene_award : public ::google::protobuf::Message {
 public:
  npt_rece_convene_award();
  virtual ~npt_rece_convene_award();

  npt_rece_convene_award(const npt_rece_convene_award& from);

  inline npt_rece_convene_award& operator=(const npt_rece_convene_award& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_rece_convene_award& default_instance();

  void Swap(npt_rece_convene_award* other);

  // implements Message ----------------------------------------------

  npt_rece_convene_award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_rece_convene_award& from);
  void MergeFrom(const npt_rece_convene_award& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECE_CONVENE_AWARD];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int64 sharecode = 2;
  inline bool has_sharecode() const;
  inline void clear_sharecode();
  static const int kSharecodeFieldNumber = 2;
  inline ::google::protobuf::int64 sharecode() const;
  inline void set_sharecode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.npt_rece_convene_award)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sharecode();
  inline void clear_has_sharecode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 sharecode_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_rece_convene_award* default_instance_;
};
// -------------------------------------------------------------------

class npt_rece_convene_award_re : public ::google::protobuf::Message {
 public:
  npt_rece_convene_award_re();
  virtual ~npt_rece_convene_award_re();

  npt_rece_convene_award_re(const npt_rece_convene_award_re& from);

  inline npt_rece_convene_award_re& operator=(const npt_rece_convene_award_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_rece_convene_award_re& default_instance();

  void Swap(npt_rece_convene_award_re* other);

  // implements Message ----------------------------------------------

  npt_rece_convene_award_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_rece_convene_award_re& from);
  void MergeFrom(const npt_rece_convene_award_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECE_CONVENE_AWARD_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 errorcode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 2;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_rece_convene_award_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_rece_convene_award_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_rece_backflow_award : public ::google::protobuf::Message {
 public:
  npt_rece_backflow_award();
  virtual ~npt_rece_backflow_award();

  npt_rece_backflow_award(const npt_rece_backflow_award& from);

  inline npt_rece_backflow_award& operator=(const npt_rece_backflow_award& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_rece_backflow_award& default_instance();

  void Swap(npt_rece_backflow_award* other);

  // implements Message ----------------------------------------------

  npt_rece_backflow_award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_rece_backflow_award& from);
  void MergeFrom(const npt_rece_backflow_award& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECE_BACKFLOW_AWARD];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.npt_rece_backflow_award)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_rece_backflow_award* default_instance_;
};
// -------------------------------------------------------------------

class npt_rece_backflow_award_re : public ::google::protobuf::Message {
 public:
  npt_rece_backflow_award_re();
  virtual ~npt_rece_backflow_award_re();

  npt_rece_backflow_award_re(const npt_rece_backflow_award_re& from);

  inline npt_rece_backflow_award_re& operator=(const npt_rece_backflow_award_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_rece_backflow_award_re& default_instance();

  void Swap(npt_rece_backflow_award_re* other);

  // implements Message ----------------------------------------------

  npt_rece_backflow_award_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_rece_backflow_award_re& from);
  void MergeFrom(const npt_rece_backflow_award_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECE_BACKFLOW_AWARD_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 errorcode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 2;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_rece_backflow_award_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_rece_backflow_award_re* default_instance_;
};
// -------------------------------------------------------------------

class GP_Begin : public ::google::protobuf::Message {
 public:
  GP_Begin();
  virtual ~GP_Begin();

  GP_Begin(const GP_Begin& from);

  inline GP_Begin& operator=(const GP_Begin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GP_Begin& default_instance();

  void Swap(GP_Begin* other);

  // implements Message ----------------------------------------------

  GP_Begin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GP_Begin& from);
  void MergeFrom(const GP_Begin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_BEGIN_T];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int32 value = 2 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional int32 value2 = 3;
  inline bool has_value2() const;
  inline void clear_value2();
  static const int kValue2FieldNumber = 3;
  inline ::google::protobuf::int32 value2() const;
  inline void set_value2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.GP_Begin)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_value2();
  inline void clear_has_value2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 value2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static GP_Begin* default_instance_;
};
// -------------------------------------------------------------------

class equip_location : public ::google::protobuf::Message {
 public:
  equip_location();
  virtual ~equip_location();

  equip_location(const equip_location& from);

  inline equip_location& operator=(const equip_location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equip_location& default_instance();

  void Swap(equip_location* other);

  // implements Message ----------------------------------------------

  equip_location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equip_location& from);
  void MergeFrom(const equip_location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 location = 1;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 1;
  inline ::google::protobuf::int32 location() const;
  inline void set_location(::google::protobuf::int32 value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 tid = 3;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 3;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.equip_location)
 private:
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 location_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static equip_location* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_grade_and_quality_up : public ::google::protobuf::Message {
 public:
  gp_equip_grade_and_quality_up();
  virtual ~gp_equip_grade_and_quality_up();

  gp_equip_grade_and_quality_up(const gp_equip_grade_and_quality_up& from);

  inline gp_equip_grade_and_quality_up& operator=(const gp_equip_grade_and_quality_up& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_grade_and_quality_up& default_instance();

  void Swap(gp_equip_grade_and_quality_up* other);

  // implements Message ----------------------------------------------

  gp_equip_grade_and_quality_up* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_grade_and_quality_up& from);
  void MergeFrom(const gp_equip_grade_and_quality_up& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_GRADE_AND_QUALITY_UP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required .PB.use_money_type money_type = 2 [default = USE_M_BIND];
  inline bool has_money_type() const;
  inline void clear_money_type();
  static const int kMoneyTypeFieldNumber = 2;
  inline ::PB::use_money_type money_type() const;
  inline void set_money_type(::PB::use_money_type value);

  // required .PB.equip_location equip = 3;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 3;
  inline const ::PB::equip_location& equip() const;
  inline ::PB::equip_location* mutable_equip();
  inline ::PB::equip_location* release_equip();
  inline void set_allocated_equip(::PB::equip_location* equip);

  // required bool one_button_up = 4;
  inline bool has_one_button_up() const;
  inline void clear_one_button_up();
  static const int kOneButtonUpFieldNumber = 4;
  inline bool one_button_up() const;
  inline void set_one_button_up(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_grade_and_quality_up)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_money_type();
  inline void clear_has_money_type();
  inline void set_has_equip();
  inline void clear_has_equip();
  inline void set_has_one_button_up();
  inline void clear_has_one_button_up();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int money_type_;
  ::PB::equip_location* equip_;
  bool one_button_up_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_grade_and_quality_up* default_instance_;
};
// -------------------------------------------------------------------

class gp_create_corps : public ::google::protobuf::Message {
 public:
  gp_create_corps();
  virtual ~gp_create_corps();

  gp_create_corps(const gp_create_corps& from);

  inline gp_create_corps& operator=(const gp_create_corps& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_create_corps& default_instance();

  void Swap(gp_create_corps* other);

  // implements Message ----------------------------------------------

  gp_create_corps* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_create_corps& from);
  void MergeFrom(const gp_create_corps& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CREATE_CORPS];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required bytes corps_name = 2;
  inline bool has_corps_name() const;
  inline void clear_corps_name();
  static const int kCorpsNameFieldNumber = 2;
  inline const ::std::string& corps_name() const;
  inline void set_corps_name(const ::std::string& value);
  inline void set_corps_name(const char* value);
  inline void set_corps_name(const void* value, size_t size);
  inline ::std::string* mutable_corps_name();
  inline ::std::string* release_corps_name();
  inline void set_allocated_corps_name(::std::string* corps_name);

  // @@protoc_insertion_point(class_scope:PB.gp_create_corps)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_corps_name();
  inline void clear_has_corps_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* corps_name_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_create_corps* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_attach_gem : public ::google::protobuf::Message {
 public:
  gp_equip_attach_gem();
  virtual ~gp_equip_attach_gem();

  gp_equip_attach_gem(const gp_equip_attach_gem& from);

  inline gp_equip_attach_gem& operator=(const gp_equip_attach_gem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_attach_gem& default_instance();

  void Swap(gp_equip_attach_gem* other);

  // implements Message ----------------------------------------------

  gp_equip_attach_gem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_attach_gem& from);
  void MergeFrom(const gp_equip_attach_gem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_ATTACH_GEM];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required uint32 equip_index = 2;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 equip_index() const;
  inline void set_equip_index(::google::protobuf::uint32 value);

  // required int32 equip_tid = 3;
  inline bool has_equip_tid() const;
  inline void clear_equip_tid();
  static const int kEquipTidFieldNumber = 3;
  inline ::google::protobuf::int32 equip_tid() const;
  inline void set_equip_tid(::google::protobuf::int32 value);

  // required uint32 hole_index = 4;
  inline bool has_hole_index() const;
  inline void clear_hole_index();
  static const int kHoleIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 hole_index() const;
  inline void set_hole_index(::google::protobuf::uint32 value);

  // required uint32 gem_index = 5;
  inline bool has_gem_index() const;
  inline void clear_gem_index();
  static const int kGemIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 gem_index() const;
  inline void set_gem_index(::google::protobuf::uint32 value);

  // required int32 gem_tid = 6;
  inline bool has_gem_tid() const;
  inline void clear_gem_tid();
  static const int kGemTidFieldNumber = 6;
  inline ::google::protobuf::int32 gem_tid() const;
  inline void set_gem_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_attach_gem)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_equip_tid();
  inline void clear_has_equip_tid();
  inline void set_has_hole_index();
  inline void clear_has_hole_index();
  inline void set_has_gem_index();
  inline void clear_has_gem_index();
  inline void set_has_gem_tid();
  inline void clear_has_gem_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 equip_index_;
  ::google::protobuf::int32 equip_tid_;
  ::google::protobuf::uint32 hole_index_;
  ::google::protobuf::uint32 gem_index_;
  ::google::protobuf::int32 gem_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_attach_gem* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_detach_gem : public ::google::protobuf::Message {
 public:
  gp_equip_detach_gem();
  virtual ~gp_equip_detach_gem();

  gp_equip_detach_gem(const gp_equip_detach_gem& from);

  inline gp_equip_detach_gem& operator=(const gp_equip_detach_gem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_detach_gem& default_instance();

  void Swap(gp_equip_detach_gem* other);

  // implements Message ----------------------------------------------

  gp_equip_detach_gem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_detach_gem& from);
  void MergeFrom(const gp_equip_detach_gem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_DETACH_GEM];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required uint32 equip_index = 2;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 equip_index() const;
  inline void set_equip_index(::google::protobuf::uint32 value);

  // required int32 equip_tid = 3;
  inline bool has_equip_tid() const;
  inline void clear_equip_tid();
  static const int kEquipTidFieldNumber = 3;
  inline ::google::protobuf::int32 equip_tid() const;
  inline void set_equip_tid(::google::protobuf::int32 value);

  // required uint32 hole_index = 4;
  inline bool has_hole_index() const;
  inline void clear_hole_index();
  static const int kHoleIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 hole_index() const;
  inline void set_hole_index(::google::protobuf::uint32 value);

  // required int32 gem_tid = 5;
  inline bool has_gem_tid() const;
  inline void clear_gem_tid();
  static const int kGemTidFieldNumber = 5;
  inline ::google::protobuf::int32 gem_tid() const;
  inline void set_gem_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_detach_gem)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_equip_tid();
  inline void clear_has_equip_tid();
  inline void set_has_hole_index();
  inline void clear_has_hole_index();
  inline void set_has_gem_tid();
  inline void clear_has_gem_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 equip_index_;
  ::google::protobuf::int32 equip_tid_;
  ::google::protobuf::uint32 hole_index_;
  ::google::protobuf::int32 gem_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_detach_gem* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_attach_gem_upgrade : public ::google::protobuf::Message {
 public:
  gp_equip_attach_gem_upgrade();
  virtual ~gp_equip_attach_gem_upgrade();

  gp_equip_attach_gem_upgrade(const gp_equip_attach_gem_upgrade& from);

  inline gp_equip_attach_gem_upgrade& operator=(const gp_equip_attach_gem_upgrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_attach_gem_upgrade& default_instance();

  void Swap(gp_equip_attach_gem_upgrade* other);

  // implements Message ----------------------------------------------

  gp_equip_attach_gem_upgrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_attach_gem_upgrade& from);
  void MergeFrom(const gp_equip_attach_gem_upgrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_ATTACH_GEM_UPGRADE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required uint32 equip_index = 2;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 equip_index() const;
  inline void set_equip_index(::google::protobuf::uint32 value);

  // required int32 equip_tid = 3;
  inline bool has_equip_tid() const;
  inline void clear_equip_tid();
  static const int kEquipTidFieldNumber = 3;
  inline ::google::protobuf::int32 equip_tid() const;
  inline void set_equip_tid(::google::protobuf::int32 value);

  // required uint32 hole_index = 4;
  inline bool has_hole_index() const;
  inline void clear_hole_index();
  static const int kHoleIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 hole_index() const;
  inline void set_hole_index(::google::protobuf::uint32 value);

  // required int32 gem_tid = 5;
  inline bool has_gem_tid() const;
  inline void clear_gem_tid();
  static const int kGemTidFieldNumber = 5;
  inline ::google::protobuf::int32 gem_tid() const;
  inline void set_gem_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_attach_gem_upgrade)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_equip_tid();
  inline void clear_has_equip_tid();
  inline void set_has_hole_index();
  inline void clear_has_hole_index();
  inline void set_has_gem_tid();
  inline void clear_has_gem_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 equip_index_;
  ::google::protobuf::int32 equip_tid_;
  ::google::protobuf::uint32 hole_index_;
  ::google::protobuf::int32 gem_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_attach_gem_upgrade* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_xilian : public ::google::protobuf::Message {
 public:
  gp_equip_xilian();
  virtual ~gp_equip_xilian();

  gp_equip_xilian(const gp_equip_xilian& from);

  inline gp_equip_xilian& operator=(const gp_equip_xilian& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_xilian& default_instance();

  void Swap(gp_equip_xilian* other);

  // implements Message ----------------------------------------------

  gp_equip_xilian* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_xilian& from);
  void MergeFrom(const gp_equip_xilian& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_XILIAN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required uint32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 location() const;
  inline void set_location(::google::protobuf::uint32 value);

  // required uint32 equip_index = 3;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 equip_index() const;
  inline void set_equip_index(::google::protobuf::uint32 value);

  // required int32 equip_tid = 4;
  inline bool has_equip_tid() const;
  inline void clear_equip_tid();
  static const int kEquipTidFieldNumber = 4;
  inline ::google::protobuf::int32 equip_tid() const;
  inline void set_equip_tid(::google::protobuf::int32 value);

  // required bool save = 5;
  inline bool has_save() const;
  inline void clear_save();
  static const int kSaveFieldNumber = 5;
  inline bool save() const;
  inline void set_save(bool value);

  // required int32 lock_tid = 6;
  inline bool has_lock_tid() const;
  inline void clear_lock_tid();
  static const int kLockTidFieldNumber = 6;
  inline ::google::protobuf::int32 lock_tid() const;
  inline void set_lock_tid(::google::protobuf::int32 value);

  // required int32 tool_tid = 7;
  inline bool has_tool_tid() const;
  inline void clear_tool_tid();
  static const int kToolTidFieldNumber = 7;
  inline ::google::protobuf::int32 tool_tid() const;
  inline void set_tool_tid(::google::protobuf::int32 value);

  // required uint32 count = 8;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 8;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // repeated int32 addons = 9;
  inline int addons_size() const;
  inline void clear_addons();
  static const int kAddonsFieldNumber = 9;
  inline ::google::protobuf::int32 addons(int index) const;
  inline void set_addons(int index, ::google::protobuf::int32 value);
  inline void add_addons(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      addons() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_addons();

  // required bool reply = 10;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 10;
  inline bool reply() const;
  inline void set_reply(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_xilian)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_equip_tid();
  inline void clear_has_equip_tid();
  inline void set_has_save();
  inline void clear_has_save();
  inline void set_has_lock_tid();
  inline void clear_has_lock_tid();
  inline void set_has_tool_tid();
  inline void clear_has_tool_tid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_reply();
  inline void clear_has_reply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 location_;
  ::google::protobuf::uint32 equip_index_;
  ::google::protobuf::int32 equip_tid_;
  ::google::protobuf::int32 lock_tid_;
  ::google::protobuf::int32 tool_tid_;
  bool save_;
  bool reply_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > addons_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_xilian* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_open_addon : public ::google::protobuf::Message {
 public:
  gp_equip_open_addon();
  virtual ~gp_equip_open_addon();

  gp_equip_open_addon(const gp_equip_open_addon& from);

  inline gp_equip_open_addon& operator=(const gp_equip_open_addon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_open_addon& default_instance();

  void Swap(gp_equip_open_addon* other);

  // implements Message ----------------------------------------------

  gp_equip_open_addon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_open_addon& from);
  void MergeFrom(const gp_equip_open_addon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_OPEN_ADDON];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required uint32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 location() const;
  inline void set_location(::google::protobuf::uint32 value);

  // required uint32 equip_index = 3;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 equip_index() const;
  inline void set_equip_index(::google::protobuf::uint32 value);

  // required int32 equip_tid = 4;
  inline bool has_equip_tid() const;
  inline void clear_equip_tid();
  static const int kEquipTidFieldNumber = 4;
  inline ::google::protobuf::int32 equip_tid() const;
  inline void set_equip_tid(::google::protobuf::int32 value);

  // required int32 addon_index = 5;
  inline bool has_addon_index() const;
  inline void clear_addon_index();
  static const int kAddonIndexFieldNumber = 5;
  inline ::google::protobuf::int32 addon_index() const;
  inline void set_addon_index(::google::protobuf::int32 value);

  // required bool nobind_money = 6;
  inline bool has_nobind_money() const;
  inline void clear_nobind_money();
  static const int kNobindMoneyFieldNumber = 6;
  inline bool nobind_money() const;
  inline void set_nobind_money(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_open_addon)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_equip_tid();
  inline void clear_has_equip_tid();
  inline void set_has_addon_index();
  inline void clear_has_addon_index();
  inline void set_has_nobind_money();
  inline void clear_has_nobind_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 location_;
  ::google::protobuf::uint32 equip_index_;
  ::google::protobuf::int32 equip_tid_;
  ::google::protobuf::int32 addon_index_;
  bool nobind_money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_open_addon* default_instance_;
};
// -------------------------------------------------------------------

class tool_bind_info : public ::google::protobuf::Message {
 public:
  tool_bind_info();
  virtual ~tool_bind_info();

  tool_bind_info(const tool_bind_info& from);

  inline tool_bind_info& operator=(const tool_bind_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tool_bind_info& default_instance();

  void Swap(tool_bind_info* other);

  // implements Message ----------------------------------------------

  tool_bind_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tool_bind_info& from);
  void MergeFrom(const tool_bind_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool bind = 1;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 1;
  inline bool bind() const;
  inline void set_bind(bool value);

  // required int32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.tool_bind_info)
 private:
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool bind_;
  ::google::protobuf::int32 tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tool_bind_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_lianxing : public ::google::protobuf::Message {
 public:
  gp_equip_lianxing();
  virtual ~gp_equip_lianxing();

  gp_equip_lianxing(const gp_equip_lianxing& from);

  inline gp_equip_lianxing& operator=(const gp_equip_lianxing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_lianxing& default_instance();

  void Swap(gp_equip_lianxing* other);

  // implements Message ----------------------------------------------

  gp_equip_lianxing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_lianxing& from);
  void MergeFrom(const gp_equip_lianxing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_LIANXING];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required uint32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 location() const;
  inline void set_location(::google::protobuf::uint32 value);

  // required uint32 equip_index = 3;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 equip_index() const;
  inline void set_equip_index(::google::protobuf::uint32 value);

  // required int32 equip_tid = 4;
  inline bool has_equip_tid() const;
  inline void clear_equip_tid();
  static const int kEquipTidFieldNumber = 4;
  inline ::google::protobuf::int32 equip_tid() const;
  inline void set_equip_tid(::google::protobuf::int32 value);

  // repeated .PB.tool_bind_info tools = 5;
  inline int tools_size() const;
  inline void clear_tools();
  static const int kToolsFieldNumber = 5;
  inline const ::PB::tool_bind_info& tools(int index) const;
  inline ::PB::tool_bind_info* mutable_tools(int index);
  inline ::PB::tool_bind_info* add_tools();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::tool_bind_info >&
      tools() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::tool_bind_info >*
      mutable_tools();

  // required bool bind_money = 6;
  inline bool has_bind_money() const;
  inline void clear_bind_money();
  static const int kBindMoneyFieldNumber = 6;
  inline bool bind_money() const;
  inline void set_bind_money(bool value);

  // required bool use_baodi = 7;
  inline bool has_use_baodi() const;
  inline void clear_use_baodi();
  static const int kUseBaodiFieldNumber = 7;
  inline bool use_baodi() const;
  inline void set_use_baodi(bool value);

  // required bool nobind_baodi = 8;
  inline bool has_nobind_baodi() const;
  inline void clear_nobind_baodi();
  static const int kNobindBaodiFieldNumber = 8;
  inline bool nobind_baodi() const;
  inline void set_nobind_baodi(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_lianxing)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_equip_tid();
  inline void clear_has_equip_tid();
  inline void set_has_bind_money();
  inline void clear_has_bind_money();
  inline void set_has_use_baodi();
  inline void clear_has_use_baodi();
  inline void set_has_nobind_baodi();
  inline void clear_has_nobind_baodi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 location_;
  ::google::protobuf::uint32 equip_index_;
  ::google::protobuf::int32 equip_tid_;
  ::google::protobuf::RepeatedPtrField< ::PB::tool_bind_info > tools_;
  bool bind_money_;
  bool use_baodi_;
  bool nobind_baodi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_lianxing* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_train : public ::google::protobuf::Message {
 public:
  gp_equip_train();
  virtual ~gp_equip_train();

  gp_equip_train(const gp_equip_train& from);

  inline gp_equip_train& operator=(const gp_equip_train& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_train& default_instance();

  void Swap(gp_equip_train* other);

  // implements Message ----------------------------------------------

  gp_equip_train* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_train& from);
  void MergeFrom(const gp_equip_train& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_TRAIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int32 prop_index = 2;
  inline bool has_prop_index() const;
  inline void clear_prop_index();
  static const int kPropIndexFieldNumber = 2;
  inline ::google::protobuf::int32 prop_index() const;
  inline void set_prop_index(::google::protobuf::int32 value);

  // required int32 cur_train_num = 3;
  inline bool has_cur_train_num() const;
  inline void clear_cur_train_num();
  static const int kCurTrainNumFieldNumber = 3;
  inline ::google::protobuf::int32 cur_train_num() const;
  inline void set_cur_train_num(::google::protobuf::int32 value);

  // required bool one_button_up = 4;
  inline bool has_one_button_up() const;
  inline void clear_one_button_up();
  static const int kOneButtonUpFieldNumber = 4;
  inline bool one_button_up() const;
  inline void set_one_button_up(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_train)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_prop_index();
  inline void clear_has_prop_index();
  inline void set_has_cur_train_num();
  inline void clear_has_cur_train_num();
  inline void set_has_one_button_up();
  inline void clear_has_one_button_up();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 prop_index_;
  ::google::protobuf::int32 cur_train_num_;
  bool one_button_up_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_train* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_switch_surface : public ::google::protobuf::Message {
 public:
  gp_equip_switch_surface();
  virtual ~gp_equip_switch_surface();

  gp_equip_switch_surface(const gp_equip_switch_surface& from);

  inline gp_equip_switch_surface& operator=(const gp_equip_switch_surface& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_switch_surface& default_instance();

  void Swap(gp_equip_switch_surface* other);

  // implements Message ----------------------------------------------

  gp_equip_switch_surface* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_switch_surface& from);
  void MergeFrom(const gp_equip_switch_surface& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_SWITCH_SURFACE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int32 surface_tid = 2;
  inline bool has_surface_tid() const;
  inline void clear_surface_tid();
  static const int kSurfaceTidFieldNumber = 2;
  inline ::google::protobuf::int32 surface_tid() const;
  inline void set_surface_tid(::google::protobuf::int32 value);

  // required int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_switch_surface)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_surface_tid();
  inline void clear_has_surface_tid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 surface_tid_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_switch_surface* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_transfer : public ::google::protobuf::Message {
 public:
  gp_equip_transfer();
  virtual ~gp_equip_transfer();

  gp_equip_transfer(const gp_equip_transfer& from);

  inline gp_equip_transfer& operator=(const gp_equip_transfer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_transfer& default_instance();

  void Swap(gp_equip_transfer* other);

  // implements Message ----------------------------------------------

  gp_equip_transfer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_transfer& from);
  void MergeFrom(const gp_equip_transfer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_TRANSFER];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required uint32 src_location = 2;
  inline bool has_src_location() const;
  inline void clear_src_location();
  static const int kSrcLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 src_location() const;
  inline void set_src_location(::google::protobuf::uint32 value);

  // required uint32 src_index = 3;
  inline bool has_src_index() const;
  inline void clear_src_index();
  static const int kSrcIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 src_index() const;
  inline void set_src_index(::google::protobuf::uint32 value);

  // required int32 src_tid = 4;
  inline bool has_src_tid() const;
  inline void clear_src_tid();
  static const int kSrcTidFieldNumber = 4;
  inline ::google::protobuf::int32 src_tid() const;
  inline void set_src_tid(::google::protobuf::int32 value);

  // required uint32 dst_location = 5;
  inline bool has_dst_location() const;
  inline void clear_dst_location();
  static const int kDstLocationFieldNumber = 5;
  inline ::google::protobuf::uint32 dst_location() const;
  inline void set_dst_location(::google::protobuf::uint32 value);

  // required uint32 dst_index = 6;
  inline bool has_dst_index() const;
  inline void clear_dst_index();
  static const int kDstIndexFieldNumber = 6;
  inline ::google::protobuf::uint32 dst_index() const;
  inline void set_dst_index(::google::protobuf::uint32 value);

  // required int32 dst_tid = 7;
  inline bool has_dst_tid() const;
  inline void clear_dst_tid();
  static const int kDstTidFieldNumber = 7;
  inline ::google::protobuf::int32 dst_tid() const;
  inline void set_dst_tid(::google::protobuf::int32 value);

  // required bool transfer_star = 8;
  inline bool has_transfer_star() const;
  inline void clear_transfer_star();
  static const int kTransferStarFieldNumber = 8;
  inline bool transfer_star() const;
  inline void set_transfer_star(bool value);

  // required bool transfer_addon = 9;
  inline bool has_transfer_addon() const;
  inline void clear_transfer_addon();
  static const int kTransferAddonFieldNumber = 9;
  inline bool transfer_addon() const;
  inline void set_transfer_addon(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_transfer)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_src_location();
  inline void clear_has_src_location();
  inline void set_has_src_index();
  inline void clear_has_src_index();
  inline void set_has_src_tid();
  inline void clear_has_src_tid();
  inline void set_has_dst_location();
  inline void clear_has_dst_location();
  inline void set_has_dst_index();
  inline void clear_has_dst_index();
  inline void set_has_dst_tid();
  inline void clear_has_dst_tid();
  inline void set_has_transfer_star();
  inline void clear_has_transfer_star();
  inline void set_has_transfer_addon();
  inline void clear_has_transfer_addon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 src_location_;
  ::google::protobuf::uint32 src_index_;
  ::google::protobuf::int32 src_tid_;
  ::google::protobuf::uint32 dst_location_;
  ::google::protobuf::uint32 dst_index_;
  ::google::protobuf::int32 dst_tid_;
  bool transfer_star_;
  bool transfer_addon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_transfer* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_refine : public ::google::protobuf::Message {
 public:
  gp_equip_refine();
  virtual ~gp_equip_refine();

  gp_equip_refine(const gp_equip_refine& from);

  inline gp_equip_refine& operator=(const gp_equip_refine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_refine& default_instance();

  void Swap(gp_equip_refine* other);

  // implements Message ----------------------------------------------

  gp_equip_refine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_refine& from);
  void MergeFrom(const gp_equip_refine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_REFINE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required uint32 main_location = 2;
  inline bool has_main_location() const;
  inline void clear_main_location();
  static const int kMainLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 main_location() const;
  inline void set_main_location(::google::protobuf::uint32 value);

  // required uint32 main_index = 3;
  inline bool has_main_index() const;
  inline void clear_main_index();
  static const int kMainIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 main_index() const;
  inline void set_main_index(::google::protobuf::uint32 value);

  // required int32 main_tid = 4;
  inline bool has_main_tid() const;
  inline void clear_main_tid();
  static const int kMainTidFieldNumber = 4;
  inline ::google::protobuf::int32 main_tid() const;
  inline void set_main_tid(::google::protobuf::int32 value);

  // required uint32 material_location = 5;
  inline bool has_material_location() const;
  inline void clear_material_location();
  static const int kMaterialLocationFieldNumber = 5;
  inline ::google::protobuf::uint32 material_location() const;
  inline void set_material_location(::google::protobuf::uint32 value);

  // required uint32 material_index = 6;
  inline bool has_material_index() const;
  inline void clear_material_index();
  static const int kMaterialIndexFieldNumber = 6;
  inline ::google::protobuf::uint32 material_index() const;
  inline void set_material_index(::google::protobuf::uint32 value);

  // required int32 material_tid = 7;
  inline bool has_material_tid() const;
  inline void clear_material_tid();
  static const int kMaterialTidFieldNumber = 7;
  inline ::google::protobuf::int32 material_tid() const;
  inline void set_material_tid(::google::protobuf::int32 value);

  // required int32 attr_index = 8;
  inline bool has_attr_index() const;
  inline void clear_attr_index();
  static const int kAttrIndexFieldNumber = 8;
  inline ::google::protobuf::int32 attr_index() const;
  inline void set_attr_index(::google::protobuf::int32 value);

  // required bool bind_money = 9;
  inline bool has_bind_money() const;
  inline void clear_bind_money();
  static const int kBindMoneyFieldNumber = 9;
  inline bool bind_money() const;
  inline void set_bind_money(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_refine)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_main_location();
  inline void clear_has_main_location();
  inline void set_has_main_index();
  inline void clear_has_main_index();
  inline void set_has_main_tid();
  inline void clear_has_main_tid();
  inline void set_has_material_location();
  inline void clear_has_material_location();
  inline void set_has_material_index();
  inline void clear_has_material_index();
  inline void set_has_material_tid();
  inline void clear_has_material_tid();
  inline void set_has_attr_index();
  inline void clear_has_attr_index();
  inline void set_has_bind_money();
  inline void clear_has_bind_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 main_location_;
  ::google::protobuf::uint32 main_index_;
  ::google::protobuf::int32 main_tid_;
  ::google::protobuf::uint32 material_location_;
  ::google::protobuf::uint32 material_index_;
  ::google::protobuf::int32 material_tid_;
  ::google::protobuf::int32 attr_index_;
  bool bind_money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_refine* default_instance_;
};
// -------------------------------------------------------------------

class gp_item_combine : public ::google::protobuf::Message {
 public:
  gp_item_combine();
  virtual ~gp_item_combine();

  gp_item_combine(const gp_item_combine& from);

  inline gp_item_combine& operator=(const gp_item_combine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_item_combine& default_instance();

  void Swap(gp_item_combine* other);

  // implements Message ----------------------------------------------

  gp_item_combine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_item_combine& from);
  void MergeFrom(const gp_item_combine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_ITEM_COMBINE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int32 item_tid = 2;
  inline bool has_item_tid() const;
  inline void clear_item_tid();
  static const int kItemTidFieldNumber = 2;
  inline ::google::protobuf::int32 item_tid() const;
  inline void set_item_tid(::google::protobuf::int32 value);

  // required uint32 item_count = 3;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 3;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);

  // required uint32 item_bind_count = 4;
  inline bool has_item_bind_count() const;
  inline void clear_item_bind_count();
  static const int kItemBindCountFieldNumber = 4;
  inline ::google::protobuf::uint32 item_bind_count() const;
  inline void set_item_bind_count(::google::protobuf::uint32 value);

  // required bool bind_money = 5;
  inline bool has_bind_money() const;
  inline void clear_bind_money();
  static const int kBindMoneyFieldNumber = 5;
  inline bool bind_money() const;
  inline void set_bind_money(bool value);

  // required uint32 stamp = 6;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 6;
  inline ::google::protobuf::uint32 stamp() const;
  inline void set_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_item_combine)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_item_tid();
  inline void clear_has_item_tid();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_item_bind_count();
  inline void clear_has_item_bind_count();
  inline void set_has_bind_money();
  inline void clear_has_bind_money();
  inline void set_has_stamp();
  inline void clear_has_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 item_tid_;
  ::google::protobuf::uint32 item_count_;
  ::google::protobuf::uint32 item_bind_count_;
  bool bind_money_;
  ::google::protobuf::uint32 stamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_item_combine* default_instance_;
};
// -------------------------------------------------------------------

class gp_nation_escort_op : public ::google::protobuf::Message {
 public:
  gp_nation_escort_op();
  virtual ~gp_nation_escort_op();

  gp_nation_escort_op(const gp_nation_escort_op& from);

  inline gp_nation_escort_op& operator=(const gp_nation_escort_op& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_nation_escort_op& default_instance();

  void Swap(gp_nation_escort_op* other);

  // implements Message ----------------------------------------------

  gp_nation_escort_op* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_nation_escort_op& from);
  void MergeFrom(const gp_nation_escort_op& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_NATION_ESCORT_OP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int64 npcid = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 2;
  inline ::google::protobuf::int64 npcid() const;
  inline void set_npcid(::google::protobuf::int64 value);

  // required bool mount = 3;
  inline bool has_mount() const;
  inline void clear_mount();
  static const int kMountFieldNumber = 3;
  inline bool mount() const;
  inline void set_mount(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_nation_escort_op)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_mount();
  inline void clear_has_mount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 npcid_;
  int type_;
  bool mount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_nation_escort_op* default_instance_;
};
// -------------------------------------------------------------------

class gp_escort_change_speed : public ::google::protobuf::Message {
 public:
  gp_escort_change_speed();
  virtual ~gp_escort_change_speed();

  gp_escort_change_speed(const gp_escort_change_speed& from);

  inline gp_escort_change_speed& operator=(const gp_escort_change_speed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_escort_change_speed& default_instance();

  void Swap(gp_escort_change_speed* other);

  // implements Message ----------------------------------------------

  gp_escort_change_speed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_escort_change_speed& from);
  void MergeFrom(const gp_escort_change_speed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_ESCORT_CHANGE_SPEED];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required uint32 old_state = 2;
  inline bool has_old_state() const;
  inline void clear_old_state();
  static const int kOldStateFieldNumber = 2;
  inline ::google::protobuf::uint32 old_state() const;
  inline void set_old_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_escort_change_speed)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_old_state();
  inline void clear_has_old_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 old_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_escort_change_speed* default_instance_;
};
// -------------------------------------------------------------------

class gp_minigame_operate : public ::google::protobuf::Message {
 public:
  gp_minigame_operate();
  virtual ~gp_minigame_operate();

  gp_minigame_operate(const gp_minigame_operate& from);

  inline gp_minigame_operate& operator=(const gp_minigame_operate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_minigame_operate& default_instance();

  void Swap(gp_minigame_operate* other);

  // implements Message ----------------------------------------------

  gp_minigame_operate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_minigame_operate& from);
  void MergeFrom(const gp_minigame_operate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_MINIGAME_OPERATE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required uint32 oper = 2;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 2;
  inline ::google::protobuf::uint32 oper() const;
  inline void set_oper(::google::protobuf::uint32 value);

  // required uint32 param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline ::google::protobuf::uint32 param1() const;
  inline void set_param1(::google::protobuf::uint32 value);

  // required uint32 param2 = 4;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 4;
  inline ::google::protobuf::uint32 param2() const;
  inline void set_param2(::google::protobuf::uint32 value);

  // required bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:PB.gp_minigame_operate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 oper_;
  ::google::protobuf::uint32 param1_;
  ::google::protobuf::uint32 param2_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_minigame_operate* default_instance_;
};
// -------------------------------------------------------------------

class gp_card_operate : public ::google::protobuf::Message {
 public:
  gp_card_operate();
  virtual ~gp_card_operate();

  gp_card_operate(const gp_card_operate& from);

  inline gp_card_operate& operator=(const gp_card_operate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_card_operate& default_instance();

  void Swap(gp_card_operate* other);

  // implements Message ----------------------------------------------

  gp_card_operate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_card_operate& from);
  void MergeFrom(const gp_card_operate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_card_operate_OP_TYPE OP_TYPE;
  static const OP_TYPE OT_ACTIVE_SUIT = gp_card_operate_OP_TYPE_OT_ACTIVE_SUIT;
  static const OP_TYPE OT_DECOMPOSE_CARD = gp_card_operate_OP_TYPE_OT_DECOMPOSE_CARD;
  static const OP_TYPE OT_DECOMPOSE_QUICK = gp_card_operate_OP_TYPE_OT_DECOMPOSE_QUICK;
  static const OP_TYPE OT_COMPOSE_CARD = gp_card_operate_OP_TYPE_OT_COMPOSE_CARD;
  static inline bool OP_TYPE_IsValid(int value) {
    return gp_card_operate_OP_TYPE_IsValid(value);
  }
  static const OP_TYPE OP_TYPE_MIN =
    gp_card_operate_OP_TYPE_OP_TYPE_MIN;
  static const OP_TYPE OP_TYPE_MAX =
    gp_card_operate_OP_TYPE_OP_TYPE_MAX;
  static const int OP_TYPE_ARRAYSIZE =
    gp_card_operate_OP_TYPE_OP_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OP_TYPE_descriptor() {
    return gp_card_operate_OP_TYPE_descriptor();
  }
  static inline const ::std::string& OP_TYPE_Name(OP_TYPE value) {
    return gp_card_operate_OP_TYPE_Name(value);
  }
  static inline bool OP_TYPE_Parse(const ::std::string& name,
      OP_TYPE* value) {
    return gp_card_operate_OP_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CARD_OPERATE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required .PB.gp_card_operate.OP_TYPE oper = 2;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 2;
  inline ::PB::gp_card_operate_OP_TYPE oper() const;
  inline void set_oper(::PB::gp_card_operate_OP_TYPE value);

  // repeated .PB.card_info cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::PB::card_info& cards(int index) const;
  inline ::PB::card_info* mutable_cards(int index);
  inline ::PB::card_info* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::card_info >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::card_info >*
      mutable_cards();

  // required int32 param1 = 4;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 4;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // required int32 param2 = 5;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 5;
  inline ::google::protobuf::int32 param2() const;
  inline void set_param2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_card_operate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int oper_;
  ::google::protobuf::RepeatedPtrField< ::PB::card_info > cards_;
  ::google::protobuf::int32 param1_;
  ::google::protobuf::int32 param2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_card_operate* default_instance_;
};
// -------------------------------------------------------------------

class gp_get_broadcast_buff : public ::google::protobuf::Message {
 public:
  gp_get_broadcast_buff();
  virtual ~gp_get_broadcast_buff();

  gp_get_broadcast_buff(const gp_get_broadcast_buff& from);

  inline gp_get_broadcast_buff& operator=(const gp_get_broadcast_buff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_get_broadcast_buff& default_instance();

  void Swap(gp_get_broadcast_buff* other);

  // implements Message ----------------------------------------------

  gp_get_broadcast_buff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_get_broadcast_buff& from);
  void MergeFrom(const gp_get_broadcast_buff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GET_BROADCAST_BUFF];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int64 object_id = 2;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  inline ::google::protobuf::int64 object_id() const;
  inline void set_object_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.gp_get_broadcast_buff)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_object_id();
  inline void clear_has_object_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 object_id_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_get_broadcast_buff* default_instance_;
};
// -------------------------------------------------------------------

class gp_set_pk_setting : public ::google::protobuf::Message {
 public:
  gp_set_pk_setting();
  virtual ~gp_set_pk_setting();

  gp_set_pk_setting(const gp_set_pk_setting& from);

  inline gp_set_pk_setting& operator=(const gp_set_pk_setting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_set_pk_setting& default_instance();

  void Swap(gp_set_pk_setting* other);

  // implements Message ----------------------------------------------

  gp_set_pk_setting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_set_pk_setting& from);
  void MergeFrom(const gp_set_pk_setting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_SET_PK_SETTING];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required uint32 pk_setting = 2;
  inline bool has_pk_setting() const;
  inline void clear_pk_setting();
  static const int kPkSettingFieldNumber = 2;
  inline ::google::protobuf::uint32 pk_setting() const;
  inline void set_pk_setting(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_set_pk_setting)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pk_setting();
  inline void clear_has_pk_setting();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 pk_setting_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_set_pk_setting* default_instance_;
};
// -------------------------------------------------------------------

class gp_nation_donate : public ::google::protobuf::Message {
 public:
  gp_nation_donate();
  virtual ~gp_nation_donate();

  gp_nation_donate(const gp_nation_donate& from);

  inline gp_nation_donate& operator=(const gp_nation_donate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_nation_donate& default_instance();

  void Swap(gp_nation_donate* other);

  // implements Message ----------------------------------------------

  gp_nation_donate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_nation_donate& from);
  void MergeFrom(const gp_nation_donate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_NATION_DONATE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required uint32 donate_index = 2;
  inline bool has_donate_index() const;
  inline void clear_donate_index();
  static const int kDonateIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 donate_index() const;
  inline void set_donate_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_nation_donate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_donate_index();
  inline void clear_has_donate_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 donate_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_nation_donate* default_instance_;
};
// -------------------------------------------------------------------

class gp_auto_reward_op : public ::google::protobuf::Message {
 public:
  gp_auto_reward_op();
  virtual ~gp_auto_reward_op();

  gp_auto_reward_op(const gp_auto_reward_op& from);

  inline gp_auto_reward_op& operator=(const gp_auto_reward_op& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_auto_reward_op& default_instance();

  void Swap(gp_auto_reward_op* other);

  // implements Message ----------------------------------------------

  gp_auto_reward_op* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_auto_reward_op& from);
  void MergeFrom(const gp_auto_reward_op& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_auto_reward_op_OP_TYPE OP_TYPE;
  static const OP_TYPE OP_GET_REWARD = gp_auto_reward_op_OP_TYPE_OP_GET_REWARD;
  static const OP_TYPE OP_BUY_FUND = gp_auto_reward_op_OP_TYPE_OP_BUY_FUND;
  static const OP_TYPE OP_BUY_SPECAIL_FUND1 = gp_auto_reward_op_OP_TYPE_OP_BUY_SPECAIL_FUND1;
  static const OP_TYPE OP_BUY_SPECAIL_FUND2 = gp_auto_reward_op_OP_TYPE_OP_BUY_SPECAIL_FUND2;
  static const OP_TYPE OP_BUY_SPECAIL_FUND3 = gp_auto_reward_op_OP_TYPE_OP_BUY_SPECAIL_FUND3;
  static const OP_TYPE OP_REFRESH_STAT = gp_auto_reward_op_OP_TYPE_OP_REFRESH_STAT;
  static inline bool OP_TYPE_IsValid(int value) {
    return gp_auto_reward_op_OP_TYPE_IsValid(value);
  }
  static const OP_TYPE OP_TYPE_MIN =
    gp_auto_reward_op_OP_TYPE_OP_TYPE_MIN;
  static const OP_TYPE OP_TYPE_MAX =
    gp_auto_reward_op_OP_TYPE_OP_TYPE_MAX;
  static const int OP_TYPE_ARRAYSIZE =
    gp_auto_reward_op_OP_TYPE_OP_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OP_TYPE_descriptor() {
    return gp_auto_reward_op_OP_TYPE_descriptor();
  }
  static inline const ::std::string& OP_TYPE_Name(OP_TYPE value) {
    return gp_auto_reward_op_OP_TYPE_Name(value);
  }
  static inline bool OP_TYPE_Parse(const ::std::string& name,
      OP_TYPE* value) {
    return gp_auto_reward_op_OP_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_AUTO_REWARD_OP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int32 reward_type = 2;
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 reward_type() const;
  inline void set_reward_type(::google::protobuf::int32 value);

  // required .PB.gp_auto_reward_op.OP_TYPE operation = 3;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 3;
  inline ::PB::gp_auto_reward_op_OP_TYPE operation() const;
  inline void set_operation(::PB::gp_auto_reward_op_OP_TYPE value);

  // optional uint64 value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:PB.gp_auto_reward_op)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_reward_type();
  inline void clear_has_reward_type();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 reward_type_;
  ::google::protobuf::uint64 value_;
  int operation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_auto_reward_op* default_instance_;
};
// -------------------------------------------------------------------

class gp_get_achievement_award : public ::google::protobuf::Message {
 public:
  gp_get_achievement_award();
  virtual ~gp_get_achievement_award();

  gp_get_achievement_award(const gp_get_achievement_award& from);

  inline gp_get_achievement_award& operator=(const gp_get_achievement_award& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_get_achievement_award& default_instance();

  void Swap(gp_get_achievement_award* other);

  // implements Message ----------------------------------------------

  gp_get_achievement_award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_get_achievement_award& from);
  void MergeFrom(const gp_get_achievement_award& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GET_ACHIEVEMENT_AWARD];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int32 achievement_tid = 2;
  inline bool has_achievement_tid() const;
  inline void clear_achievement_tid();
  static const int kAchievementTidFieldNumber = 2;
  inline ::google::protobuf::int32 achievement_tid() const;
  inline void set_achievement_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_get_achievement_award)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_achievement_tid();
  inline void clear_has_achievement_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 achievement_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_get_achievement_award* default_instance_;
};
// -------------------------------------------------------------------

class gp_mount_operation : public ::google::protobuf::Message {
 public:
  gp_mount_operation();
  virtual ~gp_mount_operation();

  gp_mount_operation(const gp_mount_operation& from);

  inline gp_mount_operation& operator=(const gp_mount_operation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_mount_operation& default_instance();

  void Swap(gp_mount_operation* other);

  // implements Message ----------------------------------------------

  gp_mount_operation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_mount_operation& from);
  void MergeFrom(const gp_mount_operation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_mount_operation_OP_TYPE OP_TYPE;
  static const OP_TYPE MOT_MOUNT = gp_mount_operation_OP_TYPE_MOT_MOUNT;
  static const OP_TYPE MOT_SUMMON = gp_mount_operation_OP_TYPE_MOT_SUMMON;
  static const OP_TYPE MOT_INC_EXP = gp_mount_operation_OP_TYPE_MOT_INC_EXP;
  static inline bool OP_TYPE_IsValid(int value) {
    return gp_mount_operation_OP_TYPE_IsValid(value);
  }
  static const OP_TYPE OP_TYPE_MIN =
    gp_mount_operation_OP_TYPE_OP_TYPE_MIN;
  static const OP_TYPE OP_TYPE_MAX =
    gp_mount_operation_OP_TYPE_OP_TYPE_MAX;
  static const int OP_TYPE_ARRAYSIZE =
    gp_mount_operation_OP_TYPE_OP_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OP_TYPE_descriptor() {
    return gp_mount_operation_OP_TYPE_descriptor();
  }
  static inline const ::std::string& OP_TYPE_Name(OP_TYPE value) {
    return gp_mount_operation_OP_TYPE_Name(value);
  }
  static inline bool OP_TYPE_Parse(const ::std::string& name,
      OP_TYPE* value) {
    return gp_mount_operation_OP_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_MOUNT_OPERATION];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required .PB.gp_mount_operation.OP_TYPE op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::PB::gp_mount_operation_OP_TYPE op() const;
  inline void set_op(::PB::gp_mount_operation_OP_TYPE value);

  // optional int32 summon_location = 3;
  inline bool has_summon_location() const;
  inline void clear_summon_location();
  static const int kSummonLocationFieldNumber = 3;
  inline ::google::protobuf::int32 summon_location() const;
  inline void set_summon_location(::google::protobuf::int32 value);

  // optional int32 value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_mount_operation)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_summon_location();
  inline void clear_has_summon_location();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int op_;
  ::google::protobuf::int32 summon_location_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_mount_operation* default_instance_;
};
// -------------------------------------------------------------------

class gp_guaji : public ::google::protobuf::Message {
 public:
  gp_guaji();
  virtual ~gp_guaji();

  gp_guaji(const gp_guaji& from);

  inline gp_guaji& operator=(const gp_guaji& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_guaji& default_instance();

  void Swap(gp_guaji* other);

  // implements Message ----------------------------------------------

  gp_guaji* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_guaji& from);
  void MergeFrom(const gp_guaji& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GUAJI];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional bool start_guaji = 2;
  inline bool has_start_guaji() const;
  inline void clear_start_guaji();
  static const int kStartGuajiFieldNumber = 2;
  inline bool start_guaji() const;
  inline void set_start_guaji(bool value);

  // optional bool quit_mode = 3;
  inline bool has_quit_mode() const;
  inline void clear_quit_mode();
  static const int kQuitModeFieldNumber = 3;
  inline bool quit_mode() const;
  inline void set_quit_mode(bool value);

  // optional bool half_quit_mode = 4;
  inline bool has_half_quit_mode() const;
  inline void clear_half_quit_mode();
  static const int kHalfQuitModeFieldNumber = 4;
  inline bool half_quit_mode() const;
  inline void set_half_quit_mode(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_guaji)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_start_guaji();
  inline void clear_has_start_guaji();
  inline void set_has_quit_mode();
  inline void clear_has_quit_mode();
  inline void set_has_half_quit_mode();
  inline void clear_has_half_quit_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  bool start_guaji_;
  bool quit_mode_;
  bool half_quit_mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_guaji* default_instance_;
};
// -------------------------------------------------------------------

class gp_vip_operation : public ::google::protobuf::Message {
 public:
  gp_vip_operation();
  virtual ~gp_vip_operation();

  gp_vip_operation(const gp_vip_operation& from);

  inline gp_vip_operation& operator=(const gp_vip_operation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_vip_operation& default_instance();

  void Swap(gp_vip_operation* other);

  // implements Message ----------------------------------------------

  gp_vip_operation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_vip_operation& from);
  void MergeFrom(const gp_vip_operation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_vip_operation_OP_TYPE OP_TYPE;
  static const OP_TYPE VOT_GET_LOGOUT_EXP = gp_vip_operation_OP_TYPE_VOT_GET_LOGOUT_EXP;
  static inline bool OP_TYPE_IsValid(int value) {
    return gp_vip_operation_OP_TYPE_IsValid(value);
  }
  static const OP_TYPE OP_TYPE_MIN =
    gp_vip_operation_OP_TYPE_OP_TYPE_MIN;
  static const OP_TYPE OP_TYPE_MAX =
    gp_vip_operation_OP_TYPE_OP_TYPE_MAX;
  static const int OP_TYPE_ARRAYSIZE =
    gp_vip_operation_OP_TYPE_OP_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OP_TYPE_descriptor() {
    return gp_vip_operation_OP_TYPE_descriptor();
  }
  static inline const ::std::string& OP_TYPE_Name(OP_TYPE value) {
    return gp_vip_operation_OP_TYPE_Name(value);
  }
  static inline bool OP_TYPE_Parse(const ::std::string& name,
      OP_TYPE* value) {
    return gp_vip_operation_OP_TYPE_Parse(name, value);
  }

  typedef gp_vip_operation_LOGOUT_EXP_TYPE LOGOUT_EXP_TYPE;
  static const LOGOUT_EXP_TYPE LET_FREE = gp_vip_operation_LOGOUT_EXP_TYPE_LET_FREE;
  static const LOGOUT_EXP_TYPE LET_BIND_MONEY = gp_vip_operation_LOGOUT_EXP_TYPE_LET_BIND_MONEY;
  static const LOGOUT_EXP_TYPE LET_TRADE_MONEY = gp_vip_operation_LOGOUT_EXP_TYPE_LET_TRADE_MONEY;
  static inline bool LOGOUT_EXP_TYPE_IsValid(int value) {
    return gp_vip_operation_LOGOUT_EXP_TYPE_IsValid(value);
  }
  static const LOGOUT_EXP_TYPE LOGOUT_EXP_TYPE_MIN =
    gp_vip_operation_LOGOUT_EXP_TYPE_LOGOUT_EXP_TYPE_MIN;
  static const LOGOUT_EXP_TYPE LOGOUT_EXP_TYPE_MAX =
    gp_vip_operation_LOGOUT_EXP_TYPE_LOGOUT_EXP_TYPE_MAX;
  static const int LOGOUT_EXP_TYPE_ARRAYSIZE =
    gp_vip_operation_LOGOUT_EXP_TYPE_LOGOUT_EXP_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LOGOUT_EXP_TYPE_descriptor() {
    return gp_vip_operation_LOGOUT_EXP_TYPE_descriptor();
  }
  static inline const ::std::string& LOGOUT_EXP_TYPE_Name(LOGOUT_EXP_TYPE value) {
    return gp_vip_operation_LOGOUT_EXP_TYPE_Name(value);
  }
  static inline bool LOGOUT_EXP_TYPE_Parse(const ::std::string& name,
      LOGOUT_EXP_TYPE* value) {
    return gp_vip_operation_LOGOUT_EXP_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_VIP_OPERATION];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required .PB.gp_vip_operation.OP_TYPE op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::PB::gp_vip_operation_OP_TYPE op() const;
  inline void set_op(::PB::gp_vip_operation_OP_TYPE value);

  // optional int64 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // optional .PB.gp_vip_operation.LOGOUT_EXP_TYPE exp_type = 4;
  inline bool has_exp_type() const;
  inline void clear_exp_type();
  static const int kExpTypeFieldNumber = 4;
  inline ::PB::gp_vip_operation_LOGOUT_EXP_TYPE exp_type() const;
  inline void set_exp_type(::PB::gp_vip_operation_LOGOUT_EXP_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.gp_vip_operation)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_exp_type();
  inline void clear_has_exp_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int op_;
  ::google::protobuf::int64 value_;
  int exp_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_vip_operation* default_instance_;
};
// -------------------------------------------------------------------

class auto_combat_config : public ::google::protobuf::Message {
 public:
  auto_combat_config();
  virtual ~auto_combat_config();

  auto_combat_config(const auto_combat_config& from);

  inline auto_combat_config& operator=(const auto_combat_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const auto_combat_config& default_instance();

  void Swap(auto_combat_config* other);

  // implements Message ----------------------------------------------

  auto_combat_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const auto_combat_config& from);
  void MergeFrom(const auto_combat_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 radius = 1;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 1;
  inline ::google::protobuf::int32 radius() const;
  inline void set_radius(::google::protobuf::int32 value);

  // optional int32 aid_hp_pesent = 2;
  inline bool has_aid_hp_pesent() const;
  inline void clear_aid_hp_pesent();
  static const int kAidHpPesentFieldNumber = 2;
  inline ::google::protobuf::int32 aid_hp_pesent() const;
  inline void set_aid_hp_pesent(::google::protobuf::int32 value);

  // optional int32 aid_item_tid = 3;
  inline bool has_aid_item_tid() const;
  inline void clear_aid_item_tid();
  static const int kAidItemTidFieldNumber = 3;
  inline ::google::protobuf::int32 aid_item_tid() const;
  inline void set_aid_item_tid(::google::protobuf::int32 value);

  // optional bool auto_buy_item = 4;
  inline bool has_auto_buy_item() const;
  inline void clear_auto_buy_item();
  static const int kAutoBuyItemFieldNumber = 4;
  inline bool auto_buy_item() const;
  inline void set_auto_buy_item(bool value);

  // optional bool auto_pick_up = 5;
  inline bool has_auto_pick_up() const;
  inline void clear_auto_pick_up();
  static const int kAutoPickUpFieldNumber = 5;
  inline bool auto_pick_up() const;
  inline void set_auto_pick_up(bool value);

  // optional int32 pick_grade = 6;
  inline bool has_pick_grade() const;
  inline void clear_pick_grade();
  static const int kPickGradeFieldNumber = 6;
  inline ::google::protobuf::int32 pick_grade() const;
  inline void set_pick_grade(::google::protobuf::int32 value);

  // optional bool range_skill = 7;
  inline bool has_range_skill() const;
  inline void clear_range_skill();
  static const int kRangeSkillFieldNumber = 7;
  inline bool range_skill() const;
  inline void set_range_skill(bool value);

  // optional uint32 last_bot_time = 8;
  inline bool has_last_bot_time() const;
  inline void clear_last_bot_time();
  static const int kLastBotTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 last_bot_time() const;
  inline void set_last_bot_time(::google::protobuf::uint32 value);

  // optional uint64 last_bot_exp = 9;
  inline bool has_last_bot_exp() const;
  inline void clear_last_bot_exp();
  static const int kLastBotExpFieldNumber = 9;
  inline ::google::protobuf::uint64 last_bot_exp() const;
  inline void set_last_bot_exp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:PB.auto_combat_config)
 private:
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_aid_hp_pesent();
  inline void clear_has_aid_hp_pesent();
  inline void set_has_aid_item_tid();
  inline void clear_has_aid_item_tid();
  inline void set_has_auto_buy_item();
  inline void clear_has_auto_buy_item();
  inline void set_has_auto_pick_up();
  inline void clear_has_auto_pick_up();
  inline void set_has_pick_grade();
  inline void clear_has_pick_grade();
  inline void set_has_range_skill();
  inline void clear_has_range_skill();
  inline void set_has_last_bot_time();
  inline void clear_has_last_bot_time();
  inline void set_has_last_bot_exp();
  inline void clear_has_last_bot_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 radius_;
  ::google::protobuf::int32 aid_hp_pesent_;
  ::google::protobuf::int32 aid_item_tid_;
  bool auto_buy_item_;
  bool auto_pick_up_;
  bool range_skill_;
  ::google::protobuf::int32 pick_grade_;
  ::google::protobuf::uint32 last_bot_time_;
  ::google::protobuf::uint64 last_bot_exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static auto_combat_config* default_instance_;
};
// -------------------------------------------------------------------

class gp_auto_combat_config_c2s : public ::google::protobuf::Message {
 public:
  gp_auto_combat_config_c2s();
  virtual ~gp_auto_combat_config_c2s();

  gp_auto_combat_config_c2s(const gp_auto_combat_config_c2s& from);

  inline gp_auto_combat_config_c2s& operator=(const gp_auto_combat_config_c2s& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_auto_combat_config_c2s& default_instance();

  void Swap(gp_auto_combat_config_c2s* other);

  // implements Message ----------------------------------------------

  gp_auto_combat_config_c2s* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_auto_combat_config_c2s& from);
  void MergeFrom(const gp_auto_combat_config_c2s& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_AUTO_COMBAT_CONFIG];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional .PB.auto_combat_config config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::PB::auto_combat_config& config() const;
  inline ::PB::auto_combat_config* mutable_config();
  inline ::PB::auto_combat_config* release_config();
  inline void set_allocated_config(::PB::auto_combat_config* config);

  // @@protoc_insertion_point(class_scope:PB.gp_auto_combat_config_c2s)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::auto_combat_config* config_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_auto_combat_config_c2s* default_instance_;
};
// -------------------------------------------------------------------

class gp_upgrade_bingfa : public ::google::protobuf::Message {
 public:
  gp_upgrade_bingfa();
  virtual ~gp_upgrade_bingfa();

  gp_upgrade_bingfa(const gp_upgrade_bingfa& from);

  inline gp_upgrade_bingfa& operator=(const gp_upgrade_bingfa& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_upgrade_bingfa& default_instance();

  void Swap(gp_upgrade_bingfa* other);

  // implements Message ----------------------------------------------

  gp_upgrade_bingfa* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_upgrade_bingfa& from);
  void MergeFrom(const gp_upgrade_bingfa& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_UPGRADE_BINGFA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::int32 location() const;
  inline void set_location(::google::protobuf::int32 value);

  // required uint32 bingfa_id = 3;
  inline bool has_bingfa_id() const;
  inline void clear_bingfa_id();
  static const int kBingfaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 bingfa_id() const;
  inline void set_bingfa_id(::google::protobuf::uint32 value);

  // required uint32 from_level = 4;
  inline bool has_from_level() const;
  inline void clear_from_level();
  static const int kFromLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 from_level() const;
  inline void set_from_level(::google::protobuf::uint32 value);

  // required uint32 to_level = 5;
  inline bool has_to_level() const;
  inline void clear_to_level();
  static const int kToLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 to_level() const;
  inline void set_to_level(::google::protobuf::uint32 value);

  // required bool use_money = 6;
  inline bool has_use_money() const;
  inline void clear_use_money();
  static const int kUseMoneyFieldNumber = 6;
  inline bool use_money() const;
  inline void set_use_money(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_upgrade_bingfa)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_bingfa_id();
  inline void clear_has_bingfa_id();
  inline void set_has_from_level();
  inline void clear_has_from_level();
  inline void set_has_to_level();
  inline void clear_has_to_level();
  inline void set_has_use_money();
  inline void clear_has_use_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 location_;
  ::google::protobuf::uint32 bingfa_id_;
  ::google::protobuf::uint32 from_level_;
  ::google::protobuf::uint32 to_level_;
  bool use_money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_upgrade_bingfa* default_instance_;
};
// -------------------------------------------------------------------

class gp_start_attack_loop : public ::google::protobuf::Message {
 public:
  gp_start_attack_loop();
  virtual ~gp_start_attack_loop();

  gp_start_attack_loop(const gp_start_attack_loop& from);

  inline gp_start_attack_loop& operator=(const gp_start_attack_loop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_start_attack_loop& default_instance();

  void Swap(gp_start_attack_loop* other);

  // implements Message ----------------------------------------------

  gp_start_attack_loop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_start_attack_loop& from);
  void MergeFrom(const gp_start_attack_loop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_START_ATTACK_LOOP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required bool active = 2;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 2;
  inline bool active() const;
  inline void set_active(bool value);

  // optional uint32 object_new_id = 3;
  inline bool has_object_new_id() const;
  inline void clear_object_new_id();
  static const int kObjectNewIdFieldNumber = 3;
  inline ::google::protobuf::uint32 object_new_id() const;
  inline void set_object_new_id(::google::protobuf::uint32 value);

  // optional uint32 skill = 4;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 4;
  inline ::google::protobuf::uint32 skill() const;
  inline void set_skill(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_start_attack_loop)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_object_new_id();
  inline void clear_has_object_new_id();
  inline void set_has_skill();
  inline void clear_has_skill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  bool active_;
  ::google::protobuf::uint32 object_new_id_;
  ::google::protobuf::uint32 skill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_start_attack_loop* default_instance_;
};
// -------------------------------------------------------------------

class gp_cg_player_op : public ::google::protobuf::Message {
 public:
  gp_cg_player_op();
  virtual ~gp_cg_player_op();

  gp_cg_player_op(const gp_cg_player_op& from);

  inline gp_cg_player_op& operator=(const gp_cg_player_op& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_cg_player_op& default_instance();

  void Swap(gp_cg_player_op* other);

  // implements Message ----------------------------------------------

  gp_cg_player_op* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_cg_player_op& from);
  void MergeFrom(const gp_cg_player_op& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CG_PLAYER_OP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required bool skip = 2;
  inline bool has_skip() const;
  inline void clear_skip();
  static const int kSkipFieldNumber = 2;
  inline bool skip() const;
  inline void set_skip(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_cg_player_op)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_skip();
  inline void clear_has_skip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  bool skip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_cg_player_op* default_instance_;
};
// -------------------------------------------------------------------

class gp_wine_sitdown : public ::google::protobuf::Message {
 public:
  gp_wine_sitdown();
  virtual ~gp_wine_sitdown();

  gp_wine_sitdown(const gp_wine_sitdown& from);

  inline gp_wine_sitdown& operator=(const gp_wine_sitdown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_wine_sitdown& default_instance();

  void Swap(gp_wine_sitdown* other);

  // implements Message ----------------------------------------------

  gp_wine_sitdown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_wine_sitdown& from);
  void MergeFrom(const gp_wine_sitdown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_WINE_SITDOWN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.gp_wine_sitdown)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_wine_sitdown* default_instance_;
};
// -------------------------------------------------------------------

class gp_cancel_action : public ::google::protobuf::Message {
 public:
  gp_cancel_action();
  virtual ~gp_cancel_action();

  gp_cancel_action(const gp_cancel_action& from);

  inline gp_cancel_action& operator=(const gp_cancel_action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_cancel_action& default_instance();

  void Swap(gp_cancel_action* other);

  // implements Message ----------------------------------------------

  gp_cancel_action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_cancel_action& from);
  void MergeFrom(const gp_cancel_action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CANCEL_ACTION];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 skill_sn = 2;
  inline bool has_skill_sn() const;
  inline void clear_skill_sn();
  static const int kSkillSnFieldNumber = 2;
  inline ::google::protobuf::int32 skill_sn() const;
  inline void set_skill_sn(::google::protobuf::int32 value);

  // optional int32 skill_id = 3;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 3;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);

  // optional int32 perform_id = 4;
  inline bool has_perform_id() const;
  inline void clear_perform_id();
  static const int kPerformIdFieldNumber = 4;
  inline ::google::protobuf::int32 perform_id() const;
  inline void set_perform_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_cancel_action)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_skill_sn();
  inline void clear_has_skill_sn();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_perform_id();
  inline void clear_has_perform_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 skill_sn_;
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 perform_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_cancel_action* default_instance_;
};
// -------------------------------------------------------------------

class gp_stunt_config : public ::google::protobuf::Message {
 public:
  gp_stunt_config();
  virtual ~gp_stunt_config();

  gp_stunt_config(const gp_stunt_config& from);

  inline gp_stunt_config& operator=(const gp_stunt_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_stunt_config& default_instance();

  void Swap(gp_stunt_config* other);

  // implements Message ----------------------------------------------

  gp_stunt_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_stunt_config& from);
  void MergeFrom(const gp_stunt_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_STUNT_CONFIG];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required .PB.STUNT_CONFIG_TYPE op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::PB::STUNT_CONFIG_TYPE op() const;
  inline void set_op(::PB::STUNT_CONFIG_TYPE value);

  // optional int32 rune_set_index = 3;
  inline bool has_rune_set_index() const;
  inline void clear_rune_set_index();
  static const int kRuneSetIndexFieldNumber = 3;
  inline ::google::protobuf::int32 rune_set_index() const;
  inline void set_rune_set_index(::google::protobuf::int32 value);

  // optional int32 master_skill_id = 4;
  inline bool has_master_skill_id() const;
  inline void clear_master_skill_id();
  static const int kMasterSkillIdFieldNumber = 4;
  inline ::google::protobuf::int32 master_skill_id() const;
  inline void set_master_skill_id(::google::protobuf::int32 value);

  // optional int32 rune_index = 5;
  inline bool has_rune_index() const;
  inline void clear_rune_index();
  static const int kRuneIndexFieldNumber = 5;
  inline ::google::protobuf::int32 rune_index() const;
  inline void set_rune_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_stunt_config)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_rune_set_index();
  inline void clear_has_rune_set_index();
  inline void set_has_master_skill_id();
  inline void clear_has_master_skill_id();
  inline void set_has_rune_index();
  inline void clear_has_rune_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int op_;
  ::google::protobuf::int32 rune_set_index_;
  ::google::protobuf::int32 master_skill_id_;
  ::google::protobuf::int32 rune_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_stunt_config* default_instance_;
};
// -------------------------------------------------------------------

class gp_black_shop_command : public ::google::protobuf::Message {
 public:
  gp_black_shop_command();
  virtual ~gp_black_shop_command();

  gp_black_shop_command(const gp_black_shop_command& from);

  inline gp_black_shop_command& operator=(const gp_black_shop_command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_black_shop_command& default_instance();

  void Swap(gp_black_shop_command* other);

  // implements Message ----------------------------------------------

  gp_black_shop_command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_black_shop_command& from);
  void MergeFrom(const gp_black_shop_command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_black_shop_command_BS_CMD_TYPE BS_CMD_TYPE;
  static const BS_CMD_TYPE BS_CMD_TYPE_REFRESH = gp_black_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_REFRESH;
  static const BS_CMD_TYPE BS_CMD_TYPE_BUY = gp_black_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_BUY;
  static inline bool BS_CMD_TYPE_IsValid(int value) {
    return gp_black_shop_command_BS_CMD_TYPE_IsValid(value);
  }
  static const BS_CMD_TYPE BS_CMD_TYPE_MIN =
    gp_black_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_MIN;
  static const BS_CMD_TYPE BS_CMD_TYPE_MAX =
    gp_black_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_MAX;
  static const int BS_CMD_TYPE_ARRAYSIZE =
    gp_black_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BS_CMD_TYPE_descriptor() {
    return gp_black_shop_command_BS_CMD_TYPE_descriptor();
  }
  static inline const ::std::string& BS_CMD_TYPE_Name(BS_CMD_TYPE value) {
    return gp_black_shop_command_BS_CMD_TYPE_Name(value);
  }
  static inline bool BS_CMD_TYPE_Parse(const ::std::string& name,
      BS_CMD_TYPE* value) {
    return gp_black_shop_command_BS_CMD_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_BLACK_SHOP_COMMAND];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required .PB.gp_black_shop_command.BS_CMD_TYPE cmd_type = 2;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 2;
  inline ::PB::gp_black_shop_command_BS_CMD_TYPE cmd_type() const;
  inline void set_cmd_type(::PB::gp_black_shop_command_BS_CMD_TYPE value);

  // optional int32 shop_id = 3;
  inline bool has_shop_id() const;
  inline void clear_shop_id();
  static const int kShopIdFieldNumber = 3;
  inline ::google::protobuf::int32 shop_id() const;
  inline void set_shop_id(::google::protobuf::int32 value);

  // optional int32 store_id = 4;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 4;
  inline ::google::protobuf::int32 store_id() const;
  inline void set_store_id(::google::protobuf::int32 value);

  // optional int32 goods_id = 5;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 5;
  inline ::google::protobuf::int32 goods_id() const;
  inline void set_goods_id(::google::protobuf::int32 value);

  // optional int32 goods_index = 6;
  inline bool has_goods_index() const;
  inline void clear_goods_index();
  static const int kGoodsIndexFieldNumber = 6;
  inline ::google::protobuf::int32 goods_index() const;
  inline void set_goods_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_black_shop_command)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_shop_id();
  inline void clear_has_shop_id();
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_goods_index();
  inline void clear_has_goods_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int cmd_type_;
  ::google::protobuf::int32 shop_id_;
  ::google::protobuf::int32 store_id_;
  ::google::protobuf::int32 goods_id_;
  ::google::protobuf::int32 goods_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_black_shop_command* default_instance_;
};
// -------------------------------------------------------------------

class gp_climbtower_shop_command : public ::google::protobuf::Message {
 public:
  gp_climbtower_shop_command();
  virtual ~gp_climbtower_shop_command();

  gp_climbtower_shop_command(const gp_climbtower_shop_command& from);

  inline gp_climbtower_shop_command& operator=(const gp_climbtower_shop_command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_climbtower_shop_command& default_instance();

  void Swap(gp_climbtower_shop_command* other);

  // implements Message ----------------------------------------------

  gp_climbtower_shop_command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_climbtower_shop_command& from);
  void MergeFrom(const gp_climbtower_shop_command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_climbtower_shop_command_BS_CMD_TYPE BS_CMD_TYPE;
  static const BS_CMD_TYPE BS_CMD_TYPE_REFRESH = gp_climbtower_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_REFRESH;
  static const BS_CMD_TYPE BS_CMD_TYPE_BUY = gp_climbtower_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_BUY;
  static inline bool BS_CMD_TYPE_IsValid(int value) {
    return gp_climbtower_shop_command_BS_CMD_TYPE_IsValid(value);
  }
  static const BS_CMD_TYPE BS_CMD_TYPE_MIN =
    gp_climbtower_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_MIN;
  static const BS_CMD_TYPE BS_CMD_TYPE_MAX =
    gp_climbtower_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_MAX;
  static const int BS_CMD_TYPE_ARRAYSIZE =
    gp_climbtower_shop_command_BS_CMD_TYPE_BS_CMD_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BS_CMD_TYPE_descriptor() {
    return gp_climbtower_shop_command_BS_CMD_TYPE_descriptor();
  }
  static inline const ::std::string& BS_CMD_TYPE_Name(BS_CMD_TYPE value) {
    return gp_climbtower_shop_command_BS_CMD_TYPE_Name(value);
  }
  static inline bool BS_CMD_TYPE_Parse(const ::std::string& name,
      BS_CMD_TYPE* value) {
    return gp_climbtower_shop_command_BS_CMD_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CLIMBTOWER_SHOP_COMMAND];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required .PB.gp_climbtower_shop_command.BS_CMD_TYPE cmd_type = 2;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 2;
  inline ::PB::gp_climbtower_shop_command_BS_CMD_TYPE cmd_type() const;
  inline void set_cmd_type(::PB::gp_climbtower_shop_command_BS_CMD_TYPE value);

  // optional int32 shop_id = 3;
  inline bool has_shop_id() const;
  inline void clear_shop_id();
  static const int kShopIdFieldNumber = 3;
  inline ::google::protobuf::int32 shop_id() const;
  inline void set_shop_id(::google::protobuf::int32 value);

  // optional int32 store_id = 4;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 4;
  inline ::google::protobuf::int32 store_id() const;
  inline void set_store_id(::google::protobuf::int32 value);

  // optional int32 goods_id = 5;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 5;
  inline ::google::protobuf::int32 goods_id() const;
  inline void set_goods_id(::google::protobuf::int32 value);

  // optional int32 goods_index = 6;
  inline bool has_goods_index() const;
  inline void clear_goods_index();
  static const int kGoodsIndexFieldNumber = 6;
  inline ::google::protobuf::int32 goods_index() const;
  inline void set_goods_index(::google::protobuf::int32 value);

  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_climbtower_shop_command)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_shop_id();
  inline void clear_has_shop_id();
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_goods_index();
  inline void clear_has_goods_index();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int cmd_type_;
  ::google::protobuf::int32 shop_id_;
  ::google::protobuf::int32 store_id_;
  ::google::protobuf::int32 goods_id_;
  ::google::protobuf::int32 goods_index_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_climbtower_shop_command* default_instance_;
};
// -------------------------------------------------------------------

class gp_duke_command : public ::google::protobuf::Message {
 public:
  gp_duke_command();
  virtual ~gp_duke_command();

  gp_duke_command(const gp_duke_command& from);

  inline gp_duke_command& operator=(const gp_duke_command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_duke_command& default_instance();

  void Swap(gp_duke_command* other);

  // implements Message ----------------------------------------------

  gp_duke_command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_duke_command& from);
  void MergeFrom(const gp_duke_command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_duke_command_DUKE_CMD_TYPE DUKE_CMD_TYPE;
  static const DUKE_CMD_TYPE DUKE_CMD_GET_REWARD = gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_GET_REWARD;
  static const DUKE_CMD_TYPE DUKE_CMD_UPGRADE = gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_UPGRADE;
  static const DUKE_CMD_TYPE DUKE_CMD_ACTIVE_SKILL = gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_ACTIVE_SKILL;
  static inline bool DUKE_CMD_TYPE_IsValid(int value) {
    return gp_duke_command_DUKE_CMD_TYPE_IsValid(value);
  }
  static const DUKE_CMD_TYPE DUKE_CMD_TYPE_MIN =
    gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_TYPE_MIN;
  static const DUKE_CMD_TYPE DUKE_CMD_TYPE_MAX =
    gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_TYPE_MAX;
  static const int DUKE_CMD_TYPE_ARRAYSIZE =
    gp_duke_command_DUKE_CMD_TYPE_DUKE_CMD_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DUKE_CMD_TYPE_descriptor() {
    return gp_duke_command_DUKE_CMD_TYPE_descriptor();
  }
  static inline const ::std::string& DUKE_CMD_TYPE_Name(DUKE_CMD_TYPE value) {
    return gp_duke_command_DUKE_CMD_TYPE_Name(value);
  }
  static inline bool DUKE_CMD_TYPE_Parse(const ::std::string& name,
      DUKE_CMD_TYPE* value) {
    return gp_duke_command_DUKE_CMD_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_DUKE_COMMAND];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required .PB.gp_duke_command.DUKE_CMD_TYPE cmd_type = 2;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 2;
  inline ::PB::gp_duke_command_DUKE_CMD_TYPE cmd_type() const;
  inline void set_cmd_type(::PB::gp_duke_command_DUKE_CMD_TYPE value);

  // optional int32 param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_duke_command)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_param1();
  inline void clear_has_param1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int cmd_type_;
  ::google::protobuf::int32 param1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_duke_command* default_instance_;
};
// -------------------------------------------------------------------

class gp_hero_trial_command : public ::google::protobuf::Message {
 public:
  gp_hero_trial_command();
  virtual ~gp_hero_trial_command();

  gp_hero_trial_command(const gp_hero_trial_command& from);

  inline gp_hero_trial_command& operator=(const gp_hero_trial_command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_hero_trial_command& default_instance();

  void Swap(gp_hero_trial_command* other);

  // implements Message ----------------------------------------------

  gp_hero_trial_command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_hero_trial_command& from);
  void MergeFrom(const gp_hero_trial_command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_hero_trial_command_CMD_TYPE CMD_TYPE;
  static const CMD_TYPE CT_REFRESH_HERO = gp_hero_trial_command_CMD_TYPE_CT_REFRESH_HERO;
  static inline bool CMD_TYPE_IsValid(int value) {
    return gp_hero_trial_command_CMD_TYPE_IsValid(value);
  }
  static const CMD_TYPE CMD_TYPE_MIN =
    gp_hero_trial_command_CMD_TYPE_CMD_TYPE_MIN;
  static const CMD_TYPE CMD_TYPE_MAX =
    gp_hero_trial_command_CMD_TYPE_CMD_TYPE_MAX;
  static const int CMD_TYPE_ARRAYSIZE =
    gp_hero_trial_command_CMD_TYPE_CMD_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMD_TYPE_descriptor() {
    return gp_hero_trial_command_CMD_TYPE_descriptor();
  }
  static inline const ::std::string& CMD_TYPE_Name(CMD_TYPE value) {
    return gp_hero_trial_command_CMD_TYPE_Name(value);
  }
  static inline bool CMD_TYPE_Parse(const ::std::string& name,
      CMD_TYPE* value) {
    return gp_hero_trial_command_CMD_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_HERO_TRIAL];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required .PB.gp_hero_trial_command.CMD_TYPE cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::PB::gp_hero_trial_command_CMD_TYPE cmd() const;
  inline void set_cmd(::PB::gp_hero_trial_command_CMD_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.gp_hero_trial_command)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_hero_trial_command* default_instance_;
};
// -------------------------------------------------------------------

class gp_corp_config : public ::google::protobuf::Message {
 public:
  gp_corp_config();
  virtual ~gp_corp_config();

  gp_corp_config(const gp_corp_config& from);

  inline gp_corp_config& operator=(const gp_corp_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_corp_config& default_instance();

  void Swap(gp_corp_config* other);

  // implements Message ----------------------------------------------

  gp_corp_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_corp_config& from);
  void MergeFrom(const gp_corp_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CORP_CONFIG];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional .PB.player_corps_attr_config config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::PB::player_corps_attr_config& config() const;
  inline ::PB::player_corps_attr_config* mutable_config();
  inline ::PB::player_corps_attr_config* release_config();
  inline void set_allocated_config(::PB::player_corps_attr_config* config);

  // @@protoc_insertion_point(class_scope:PB.gp_corp_config)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::player_corps_attr_config* config_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_corp_config* default_instance_;
};
// -------------------------------------------------------------------

class gp_enter_instance : public ::google::protobuf::Message {
 public:
  gp_enter_instance();
  virtual ~gp_enter_instance();

  gp_enter_instance(const gp_enter_instance& from);

  inline gp_enter_instance& operator=(const gp_enter_instance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_enter_instance& default_instance();

  void Swap(gp_enter_instance* other);

  // implements Message ----------------------------------------------

  gp_enter_instance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_enter_instance& from);
  void MergeFrom(const gp_enter_instance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_ENTER_INSTANCE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int64 object_id = 2;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  inline ::google::protobuf::int64 object_id() const;
  inline void set_object_id(::google::protobuf::int64 value);

  // optional int32 inst_tid = 3;
  inline bool has_inst_tid() const;
  inline void clear_inst_tid();
  static const int kInstTidFieldNumber = 3;
  inline ::google::protobuf::int32 inst_tid() const;
  inline void set_inst_tid(::google::protobuf::int32 value);

  // optional int32 inst_id = 4;
  inline bool has_inst_id() const;
  inline void clear_inst_id();
  static const int kInstIdFieldNumber = 4;
  inline ::google::protobuf::int32 inst_id() const;
  inline void set_inst_id(::google::protobuf::int32 value);

  // optional int32 mode = 5;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 5;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // optional .PB.enter_instance_config config = 6;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 6;
  inline const ::PB::enter_instance_config& config() const;
  inline ::PB::enter_instance_config* mutable_config();
  inline ::PB::enter_instance_config* release_config();
  inline void set_allocated_config(::PB::enter_instance_config* config);

  // @@protoc_insertion_point(class_scope:PB.gp_enter_instance)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_inst_tid();
  inline void clear_has_inst_tid();
  inline void set_has_inst_id();
  inline void clear_has_inst_id();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 object_id_;
  int type_;
  ::google::protobuf::int32 inst_tid_;
  ::google::protobuf::int32 inst_id_;
  ::google::protobuf::int32 mode_;
  ::PB::enter_instance_config* config_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_enter_instance* default_instance_;
};
// -------------------------------------------------------------------

class gp_buy_instance : public ::google::protobuf::Message {
 public:
  gp_buy_instance();
  virtual ~gp_buy_instance();

  gp_buy_instance(const gp_buy_instance& from);

  inline gp_buy_instance& operator=(const gp_buy_instance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_buy_instance& default_instance();

  void Swap(gp_buy_instance* other);

  // implements Message ----------------------------------------------

  gp_buy_instance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_buy_instance& from);
  void MergeFrom(const gp_buy_instance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_BUY_INSTANCE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 inst_tid = 2;
  inline bool has_inst_tid() const;
  inline void clear_inst_tid();
  static const int kInstTidFieldNumber = 2;
  inline ::google::protobuf::int32 inst_tid() const;
  inline void set_inst_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_buy_instance)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_inst_tid();
  inline void clear_has_inst_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 inst_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_buy_instance* default_instance_;
};
// -------------------------------------------------------------------

class gp_buy_backpack : public ::google::protobuf::Message {
 public:
  gp_buy_backpack();
  virtual ~gp_buy_backpack();

  gp_buy_backpack(const gp_buy_backpack& from);

  inline gp_buy_backpack& operator=(const gp_buy_backpack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_buy_backpack& default_instance();

  void Swap(gp_buy_backpack* other);

  // implements Message ----------------------------------------------

  gp_buy_backpack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_buy_backpack& from);
  void MergeFrom(const gp_buy_backpack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_BUY_BACKPACK];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 inc_size = 2;
  inline bool has_inc_size() const;
  inline void clear_inc_size();
  static const int kIncSizeFieldNumber = 2;
  inline ::google::protobuf::int32 inc_size() const;
  inline void set_inc_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_buy_backpack)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_inc_size();
  inline void clear_has_inc_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 inc_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_buy_backpack* default_instance_;
};
// -------------------------------------------------------------------

class gp_jieyun_skill : public ::google::protobuf::Message {
 public:
  gp_jieyun_skill();
  virtual ~gp_jieyun_skill();

  gp_jieyun_skill(const gp_jieyun_skill& from);

  inline gp_jieyun_skill& operator=(const gp_jieyun_skill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_jieyun_skill& default_instance();

  void Swap(gp_jieyun_skill* other);

  // implements Message ----------------------------------------------

  gp_jieyun_skill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_jieyun_skill& from);
  void MergeFrom(const gp_jieyun_skill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_JIEYUN_SKILL];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 skill_id = 2;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);

  // optional .PB.a3d_pos pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::PB::a3d_pos& pos() const;
  inline ::PB::a3d_pos* mutable_pos();
  inline ::PB::a3d_pos* release_pos();
  inline void set_allocated_pos(::PB::a3d_pos* pos);

  // @@protoc_insertion_point(class_scope:PB.gp_jieyun_skill)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 skill_id_;
  ::PB::a3d_pos* pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_jieyun_skill* default_instance_;
};
// -------------------------------------------------------------------

class gp_corp_farm_op : public ::google::protobuf::Message {
 public:
  gp_corp_farm_op();
  virtual ~gp_corp_farm_op();

  gp_corp_farm_op(const gp_corp_farm_op& from);

  inline gp_corp_farm_op& operator=(const gp_corp_farm_op& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_corp_farm_op& default_instance();

  void Swap(gp_corp_farm_op* other);

  // implements Message ----------------------------------------------

  gp_corp_farm_op* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_corp_farm_op& from);
  void MergeFrom(const gp_corp_farm_op& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_corp_farm_op_FARM_OP FARM_OP;
  static const FARM_OP FO_PLANT = gp_corp_farm_op_FARM_OP_FO_PLANT;
  static const FARM_OP FO_SPEED = gp_corp_farm_op_FARM_OP_FO_SPEED;
  static const FARM_OP FO_HARVEST = gp_corp_farm_op_FARM_OP_FO_HARVEST;
  static inline bool FARM_OP_IsValid(int value) {
    return gp_corp_farm_op_FARM_OP_IsValid(value);
  }
  static const FARM_OP FARM_OP_MIN =
    gp_corp_farm_op_FARM_OP_FARM_OP_MIN;
  static const FARM_OP FARM_OP_MAX =
    gp_corp_farm_op_FARM_OP_FARM_OP_MAX;
  static const int FARM_OP_ARRAYSIZE =
    gp_corp_farm_op_FARM_OP_FARM_OP_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FARM_OP_descriptor() {
    return gp_corp_farm_op_FARM_OP_descriptor();
  }
  static inline const ::std::string& FARM_OP_Name(FARM_OP value) {
    return gp_corp_farm_op_FARM_OP_Name(value);
  }
  static inline bool FARM_OP_Parse(const ::std::string& name,
      FARM_OP* value) {
    return gp_corp_farm_op_FARM_OP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CORP_FARM_OP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional .PB.gp_corp_farm_op.FARM_OP op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::PB::gp_corp_farm_op_FARM_OP op() const;
  inline void set_op(::PB::gp_corp_farm_op_FARM_OP value);

  // optional int32 farmland_index = 3;
  inline bool has_farmland_index() const;
  inline void clear_farmland_index();
  static const int kFarmlandIndexFieldNumber = 3;
  inline ::google::protobuf::int32 farmland_index() const;
  inline void set_farmland_index(::google::protobuf::int32 value);

  // optional int32 crop_tid = 4;
  inline bool has_crop_tid() const;
  inline void clear_crop_tid();
  static const int kCropTidFieldNumber = 4;
  inline ::google::protobuf::int32 crop_tid() const;
  inline void set_crop_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_corp_farm_op)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_farmland_index();
  inline void clear_has_farmland_index();
  inline void set_has_crop_tid();
  inline void clear_has_crop_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int op_;
  ::google::protobuf::int32 farmland_index_;
  ::google::protobuf::int32 crop_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_corp_farm_op* default_instance_;
};
// -------------------------------------------------------------------

class gp_climb_tower_op : public ::google::protobuf::Message {
 public:
  gp_climb_tower_op();
  virtual ~gp_climb_tower_op();

  gp_climb_tower_op(const gp_climb_tower_op& from);

  inline gp_climb_tower_op& operator=(const gp_climb_tower_op& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_climb_tower_op& default_instance();

  void Swap(gp_climb_tower_op* other);

  // implements Message ----------------------------------------------

  gp_climb_tower_op* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_climb_tower_op& from);
  void MergeFrom(const gp_climb_tower_op& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_climb_tower_op_CLIMB_OP CLIMB_OP;
  static const CLIMB_OP CO_MANUAL_FIGHT = gp_climb_tower_op_CLIMB_OP_CO_MANUAL_FIGHT;
  static const CLIMB_OP CO_AUTO_FIGHT_BEGIN = gp_climb_tower_op_CLIMB_OP_CO_AUTO_FIGHT_BEGIN;
  static const CLIMB_OP CO_AUTO_FIGHT_RUSH = gp_climb_tower_op_CLIMB_OP_CO_AUTO_FIGHT_RUSH;
  static const CLIMB_OP CO_AUTO_FIGHT_STOP = gp_climb_tower_op_CLIMB_OP_CO_AUTO_FIGHT_STOP;
  static const CLIMB_OP CO_AUTO_FIGHT_AWARD = gp_climb_tower_op_CLIMB_OP_CO_AUTO_FIGHT_AWARD;
  static const CLIMB_OP CO_RESET = gp_climb_tower_op_CLIMB_OP_CO_RESET;
  static inline bool CLIMB_OP_IsValid(int value) {
    return gp_climb_tower_op_CLIMB_OP_IsValid(value);
  }
  static const CLIMB_OP CLIMB_OP_MIN =
    gp_climb_tower_op_CLIMB_OP_CLIMB_OP_MIN;
  static const CLIMB_OP CLIMB_OP_MAX =
    gp_climb_tower_op_CLIMB_OP_CLIMB_OP_MAX;
  static const int CLIMB_OP_ARRAYSIZE =
    gp_climb_tower_op_CLIMB_OP_CLIMB_OP_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CLIMB_OP_descriptor() {
    return gp_climb_tower_op_CLIMB_OP_descriptor();
  }
  static inline const ::std::string& CLIMB_OP_Name(CLIMB_OP value) {
    return gp_climb_tower_op_CLIMB_OP_Name(value);
  }
  static inline bool CLIMB_OP_Parse(const ::std::string& name,
      CLIMB_OP* value) {
    return gp_climb_tower_op_CLIMB_OP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CLIMB_TOWER_OP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required .PB.gp_climb_tower_op.CLIMB_OP operate_type = 2;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 2;
  inline ::PB::gp_climb_tower_op_CLIMB_OP operate_type() const;
  inline void set_operate_type(::PB::gp_climb_tower_op_CLIMB_OP value);

  // required int32 param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_climb_tower_op)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_param1();
  inline void clear_has_param1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int operate_type_;
  ::google::protobuf::int32 param1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_climb_tower_op* default_instance_;
};
// -------------------------------------------------------------------

class gp_gs_ping : public ::google::protobuf::Message {
 public:
  gp_gs_ping();
  virtual ~gp_gs_ping();

  gp_gs_ping(const gp_gs_ping& from);

  inline gp_gs_ping& operator=(const gp_gs_ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_gs_ping& default_instance();

  void Swap(gp_gs_ping* other);

  // implements Message ----------------------------------------------

  gp_gs_ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_gs_ping& from);
  void MergeFrom(const gp_gs_ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GS_PING];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 client_send_time = 2;
  inline bool has_client_send_time() const;
  inline void clear_client_send_time();
  static const int kClientSendTimeFieldNumber = 2;
  inline ::google::protobuf::int32 client_send_time() const;
  inline void set_client_send_time(::google::protobuf::int32 value);

  // optional int32 client_last_ttl = 3;
  inline bool has_client_last_ttl() const;
  inline void clear_client_last_ttl();
  static const int kClientLastTtlFieldNumber = 3;
  inline ::google::protobuf::int32 client_last_ttl() const;
  inline void set_client_last_ttl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_gs_ping)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_client_send_time();
  inline void clear_has_client_send_time();
  inline void set_has_client_last_ttl();
  inline void clear_has_client_last_ttl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 client_send_time_;
  ::google::protobuf::int32 client_last_ttl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_gs_ping* default_instance_;
};
// -------------------------------------------------------------------

class gp_get_list_info : public ::google::protobuf::Message {
 public:
  gp_get_list_info();
  virtual ~gp_get_list_info();

  gp_get_list_info(const gp_get_list_info& from);

  inline gp_get_list_info& operator=(const gp_get_list_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_get_list_info& default_instance();

  void Swap(gp_get_list_info* other);

  // implements Message ----------------------------------------------

  gp_get_list_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_get_list_info& from);
  void MergeFrom(const gp_get_list_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GET_LIST_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // repeated int32 player_list = 2;
  inline int player_list_size() const;
  inline void clear_player_list();
  static const int kPlayerListFieldNumber = 2;
  inline ::google::protobuf::int32 player_list(int index) const;
  inline void set_player_list(int index, ::google::protobuf::int32 value);
  inline void add_player_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      player_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_player_list();

  // @@protoc_insertion_point(class_scope:PB.gp_get_list_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > player_list_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_get_list_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_camp_fire : public ::google::protobuf::Message {
 public:
  gp_camp_fire();
  virtual ~gp_camp_fire();

  gp_camp_fire(const gp_camp_fire& from);

  inline gp_camp_fire& operator=(const gp_camp_fire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_camp_fire& default_instance();

  void Swap(gp_camp_fire* other);

  // implements Message ----------------------------------------------

  gp_camp_fire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_camp_fire& from);
  void MergeFrom(const gp_camp_fire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CAMP_FIRE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int32 fire_type = 2;
  inline bool has_fire_type() const;
  inline void clear_fire_type();
  static const int kFireTypeFieldNumber = 2;
  inline ::google::protobuf::int32 fire_type() const;
  inline void set_fire_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_camp_fire)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_fire_type();
  inline void clear_has_fire_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 fire_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_camp_fire* default_instance_;
};
// -------------------------------------------------------------------

class gp_ask_help : public ::google::protobuf::Message {
 public:
  gp_ask_help();
  virtual ~gp_ask_help();

  gp_ask_help(const gp_ask_help& from);

  inline gp_ask_help& operator=(const gp_ask_help& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_ask_help& default_instance();

  void Swap(gp_ask_help* other);

  // implements Message ----------------------------------------------

  gp_ask_help* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_ask_help& from);
  void MergeFrom(const gp_ask_help& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_ASK_HELP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional .PB.ask_help_info_type info_type = 2;
  inline bool has_info_type() const;
  inline void clear_info_type();
  static const int kInfoTypeFieldNumber = 2;
  inline ::PB::ask_help_info_type info_type() const;
  inline void set_info_type(::PB::ask_help_info_type value);

  // @@protoc_insertion_point(class_scope:PB.gp_ask_help)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info_type();
  inline void clear_has_info_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int info_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_ask_help* default_instance_;
};
// -------------------------------------------------------------------

class gp_find_way : public ::google::protobuf::Message {
 public:
  gp_find_way();
  virtual ~gp_find_way();

  gp_find_way(const gp_find_way& from);

  inline gp_find_way& operator=(const gp_find_way& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_find_way& default_instance();

  void Swap(gp_find_way* other);

  // implements Message ----------------------------------------------

  gp_find_way* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_find_way& from);
  void MergeFrom(const gp_find_way& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_FIND_WAY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // optional .PB.a3d_pos dst_pos = 3;
  inline bool has_dst_pos() const;
  inline void clear_dst_pos();
  static const int kDstPosFieldNumber = 3;
  inline const ::PB::a3d_pos& dst_pos() const;
  inline ::PB::a3d_pos* mutable_dst_pos();
  inline ::PB::a3d_pos* release_dst_pos();
  inline void set_allocated_dst_pos(::PB::a3d_pos* dst_pos);

  // @@protoc_insertion_point(class_scope:PB.gp_find_way)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_dst_pos();
  inline void clear_has_dst_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 reason_;
  ::PB::a3d_pos* dst_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_find_way* default_instance_;
};
// -------------------------------------------------------------------

class gp_change_mirror : public ::google::protobuf::Message {
 public:
  gp_change_mirror();
  virtual ~gp_change_mirror();

  gp_change_mirror(const gp_change_mirror& from);

  inline gp_change_mirror& operator=(const gp_change_mirror& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_change_mirror& default_instance();

  void Swap(gp_change_mirror* other);

  // implements Message ----------------------------------------------

  gp_change_mirror* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_change_mirror& from);
  void MergeFrom(const gp_change_mirror& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CHANGE_MIRROR];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 mid = 2;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 2;
  inline ::google::protobuf::int32 mid() const;
  inline void set_mid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_change_mirror)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_mid();
  inline void clear_has_mid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 mid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_change_mirror* default_instance_;
};
// -------------------------------------------------------------------

class gp_buy_force : public ::google::protobuf::Message {
 public:
  gp_buy_force();
  virtual ~gp_buy_force();

  gp_buy_force(const gp_buy_force& from);

  inline gp_buy_force& operator=(const gp_buy_force& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_buy_force& default_instance();

  void Swap(gp_buy_force* other);

  // implements Message ----------------------------------------------

  gp_buy_force* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_buy_force& from);
  void MergeFrom(const gp_buy_force& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_BUY_FORCE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 force_num = 2;
  inline bool has_force_num() const;
  inline void clear_force_num();
  static const int kForceNumFieldNumber = 2;
  inline ::google::protobuf::int32 force_num() const;
  inline void set_force_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_buy_force)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_force_num();
  inline void clear_has_force_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 force_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_buy_force* default_instance_;
};
// -------------------------------------------------------------------

class gp_plant : public ::google::protobuf::Message {
 public:
  gp_plant();
  virtual ~gp_plant();

  gp_plant(const gp_plant& from);

  inline gp_plant& operator=(const gp_plant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_plant& default_instance();

  void Swap(gp_plant* other);

  // implements Message ----------------------------------------------

  gp_plant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_plant& from);
  void MergeFrom(const gp_plant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_plant_PLANT_OP PLANT_OP;
  static const PLANT_OP FO_PLANT = gp_plant_PLANT_OP_FO_PLANT;
  static const PLANT_OP FO_IMMEDIATE = gp_plant_PLANT_OP_FO_IMMEDIATE;
  static const PLANT_OP FO_HARVEST = gp_plant_PLANT_OP_FO_HARVEST;
  static inline bool PLANT_OP_IsValid(int value) {
    return gp_plant_PLANT_OP_IsValid(value);
  }
  static const PLANT_OP PLANT_OP_MIN =
    gp_plant_PLANT_OP_PLANT_OP_MIN;
  static const PLANT_OP PLANT_OP_MAX =
    gp_plant_PLANT_OP_PLANT_OP_MAX;
  static const int PLANT_OP_ARRAYSIZE =
    gp_plant_PLANT_OP_PLANT_OP_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PLANT_OP_descriptor() {
    return gp_plant_PLANT_OP_descriptor();
  }
  static inline const ::std::string& PLANT_OP_Name(PLANT_OP value) {
    return gp_plant_PLANT_OP_Name(value);
  }
  static inline bool PLANT_OP_Parse(const ::std::string& name,
      PLANT_OP* value) {
    return gp_plant_PLANT_OP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_PLANT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional .PB.gp_plant.PLANT_OP op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::PB::gp_plant_PLANT_OP op() const;
  inline void set_op(::PB::gp_plant_PLANT_OP value);

  // optional int32 seed_tid = 3;
  inline bool has_seed_tid() const;
  inline void clear_seed_tid();
  static const int kSeedTidFieldNumber = 3;
  inline ::google::protobuf::int32 seed_tid() const;
  inline void set_seed_tid(::google::protobuf::int32 value);

  // optional int32 sow_time = 4;
  inline bool has_sow_time() const;
  inline void clear_sow_time();
  static const int kSowTimeFieldNumber = 4;
  inline ::google::protobuf::int32 sow_time() const;
  inline void set_sow_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_plant)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_seed_tid();
  inline void clear_has_seed_tid();
  inline void set_has_sow_time();
  inline void clear_has_sow_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int op_;
  ::google::protobuf::int32 seed_tid_;
  ::google::protobuf::int32 sow_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_plant* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_chaijie : public ::google::protobuf::Message {
 public:
  gp_equip_chaijie();
  virtual ~gp_equip_chaijie();

  gp_equip_chaijie(const gp_equip_chaijie& from);

  inline gp_equip_chaijie& operator=(const gp_equip_chaijie& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_chaijie& default_instance();

  void Swap(gp_equip_chaijie* other);

  // implements Message ----------------------------------------------

  gp_equip_chaijie* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_chaijie& from);
  void MergeFrom(const gp_equip_chaijie& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_CHAIJIE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::int32 location() const;
  inline void set_location(::google::protobuf::int32 value);

  // required int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required uint32 tid = 4;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 4;
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_chaijie)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 location_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::uint32 tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_chaijie* default_instance_;
};
// -------------------------------------------------------------------

class gp_client_print_info : public ::google::protobuf::Message {
 public:
  gp_client_print_info();
  virtual ~gp_client_print_info();

  gp_client_print_info(const gp_client_print_info& from);

  inline gp_client_print_info& operator=(const gp_client_print_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_client_print_info& default_instance();

  void Swap(gp_client_print_info* other);

  // implements Message ----------------------------------------------

  gp_client_print_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_client_print_info& from);
  void MergeFrom(const gp_client_print_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CLIENT_PRINT_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional bytes infos = 2;
  inline bool has_infos() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::std::string& infos() const;
  inline void set_infos(const ::std::string& value);
  inline void set_infos(const char* value);
  inline void set_infos(const void* value, size_t size);
  inline ::std::string* mutable_infos();
  inline ::std::string* release_infos();
  inline void set_allocated_infos(::std::string* infos);

  // @@protoc_insertion_point(class_scope:PB.gp_client_print_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_infos();
  inline void clear_has_infos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* infos_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_client_print_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_retrieve_op : public ::google::protobuf::Message {
 public:
  gp_retrieve_op();
  virtual ~gp_retrieve_op();

  gp_retrieve_op(const gp_retrieve_op& from);

  inline gp_retrieve_op& operator=(const gp_retrieve_op& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_retrieve_op& default_instance();

  void Swap(gp_retrieve_op* other);

  // implements Message ----------------------------------------------

  gp_retrieve_op* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_retrieve_op& from);
  void MergeFrom(const gp_retrieve_op& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_RETRIEVE_OP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 activity_id = 2;
  inline bool has_activity_id() const;
  inline void clear_activity_id();
  static const int kActivityIdFieldNumber = 2;
  inline ::google::protobuf::int32 activity_id() const;
  inline void set_activity_id(::google::protobuf::int32 value);

  // optional int32 tid = 3;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 3;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 retrieve_type = 4;
  inline bool has_retrieve_type() const;
  inline void clear_retrieve_type();
  static const int kRetrieveTypeFieldNumber = 4;
  inline ::google::protobuf::int32 retrieve_type() const;
  inline void set_retrieve_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_retrieve_op)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_activity_id();
  inline void clear_has_activity_id();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_retrieve_type();
  inline void clear_has_retrieve_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 activity_id_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 retrieve_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_retrieve_op* default_instance_;
};
// -------------------------------------------------------------------

class gp_fashion_mode : public ::google::protobuf::Message {
 public:
  gp_fashion_mode();
  virtual ~gp_fashion_mode();

  gp_fashion_mode(const gp_fashion_mode& from);

  inline gp_fashion_mode& operator=(const gp_fashion_mode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_fashion_mode& default_instance();

  void Swap(gp_fashion_mode* other);

  // implements Message ----------------------------------------------

  gp_fashion_mode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_fashion_mode& from);
  void MergeFrom(const gp_fashion_mode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_FASHION_MODE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 mode = 2;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_fashion_mode)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_fashion_mode* default_instance_;
};
// -------------------------------------------------------------------

class gp_sweep_instance : public ::google::protobuf::Message {
 public:
  gp_sweep_instance();
  virtual ~gp_sweep_instance();

  gp_sweep_instance(const gp_sweep_instance& from);

  inline gp_sweep_instance& operator=(const gp_sweep_instance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_sweep_instance& default_instance();

  void Swap(gp_sweep_instance* other);

  // implements Message ----------------------------------------------

  gp_sweep_instance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_sweep_instance& from);
  void MergeFrom(const gp_sweep_instance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_SWEEP_INSTANCE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 inst_tid = 2;
  inline bool has_inst_tid() const;
  inline void clear_inst_tid();
  static const int kInstTidFieldNumber = 2;
  inline ::google::protobuf::int32 inst_tid() const;
  inline void set_inst_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_sweep_instance)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_inst_tid();
  inline void clear_has_inst_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 inst_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_sweep_instance* default_instance_;
};
// -------------------------------------------------------------------

class gp_get_red_packet : public ::google::protobuf::Message {
 public:
  gp_get_red_packet();
  virtual ~gp_get_red_packet();

  gp_get_red_packet(const gp_get_red_packet& from);

  inline gp_get_red_packet& operator=(const gp_get_red_packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_get_red_packet& default_instance();

  void Swap(gp_get_red_packet* other);

  // implements Message ----------------------------------------------

  gp_get_red_packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_get_red_packet& from);
  void MergeFrom(const gp_get_red_packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GET_RED_PACKET];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_get_red_packet)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_get_red_packet* default_instance_;
};
// -------------------------------------------------------------------

class gp_common_operation : public ::google::protobuf::Message {
 public:
  gp_common_operation();
  virtual ~gp_common_operation();

  gp_common_operation(const gp_common_operation& from);

  inline gp_common_operation& operator=(const gp_common_operation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_common_operation& default_instance();

  void Swap(gp_common_operation* other);

  // implements Message ----------------------------------------------

  gp_common_operation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_common_operation& from);
  void MergeFrom(const gp_common_operation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_common_operation_COMMON_OP COMMON_OP;
  static const COMMON_OP CO_END_REFUSE_FIGHT = gp_common_operation_COMMON_OP_CO_END_REFUSE_FIGHT;
  static inline bool COMMON_OP_IsValid(int value) {
    return gp_common_operation_COMMON_OP_IsValid(value);
  }
  static const COMMON_OP COMMON_OP_MIN =
    gp_common_operation_COMMON_OP_COMMON_OP_MIN;
  static const COMMON_OP COMMON_OP_MAX =
    gp_common_operation_COMMON_OP_COMMON_OP_MAX;
  static const int COMMON_OP_ARRAYSIZE =
    gp_common_operation_COMMON_OP_COMMON_OP_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  COMMON_OP_descriptor() {
    return gp_common_operation_COMMON_OP_descriptor();
  }
  static inline const ::std::string& COMMON_OP_Name(COMMON_OP value) {
    return gp_common_operation_COMMON_OP_Name(value);
  }
  static inline bool COMMON_OP_Parse(const ::std::string& name,
      COMMON_OP* value) {
    return gp_common_operation_COMMON_OP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_COMMON_OPERATION];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required .PB.gp_common_operation.COMMON_OP op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::PB::gp_common_operation_COMMON_OP op() const;
  inline void set_op(::PB::gp_common_operation_COMMON_OP value);

  // optional int64 param = 3;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline ::google::protobuf::int64 param() const;
  inline void set_param(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.gp_common_operation)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int op_;
  ::google::protobuf::int64 param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_common_operation* default_instance_;
};
// -------------------------------------------------------------------

class gp_compensation : public ::google::protobuf::Message {
 public:
  gp_compensation();
  virtual ~gp_compensation();

  gp_compensation(const gp_compensation& from);

  inline gp_compensation& operator=(const gp_compensation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_compensation& default_instance();

  void Swap(gp_compensation* other);

  // implements Message ----------------------------------------------

  gp_compensation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_compensation& from);
  void MergeFrom(const gp_compensation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_COMPENSATION];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::int32 cid() const;
  inline void set_cid(::google::protobuf::int32 value);

  // optional int32 tid = 3;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 3;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 repu = 5;
  inline bool has_repu() const;
  inline void clear_repu();
  static const int kRepuFieldNumber = 5;
  inline ::google::protobuf::int32 repu() const;
  inline void set_repu(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_compensation)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_repu();
  inline void clear_has_repu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 cid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 repu_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_compensation* default_instance_;
};
// -------------------------------------------------------------------

class gp_upgrade_chariot : public ::google::protobuf::Message {
 public:
  gp_upgrade_chariot();
  virtual ~gp_upgrade_chariot();

  gp_upgrade_chariot(const gp_upgrade_chariot& from);

  inline gp_upgrade_chariot& operator=(const gp_upgrade_chariot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_upgrade_chariot& default_instance();

  void Swap(gp_upgrade_chariot* other);

  // implements Message ----------------------------------------------

  gp_upgrade_chariot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_upgrade_chariot& from);
  void MergeFrom(const gp_upgrade_chariot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_upgrade_chariot_UPGRADE_TYPE UPGRADE_TYPE;
  static const UPGRADE_TYPE UT_DIAMOND = gp_upgrade_chariot_UPGRADE_TYPE_UT_DIAMOND;
  static const UPGRADE_TYPE UT_REPU = gp_upgrade_chariot_UPGRADE_TYPE_UT_REPU;
  static const UPGRADE_TYPE UT_MONEY = gp_upgrade_chariot_UPGRADE_TYPE_UT_MONEY;
  static inline bool UPGRADE_TYPE_IsValid(int value) {
    return gp_upgrade_chariot_UPGRADE_TYPE_IsValid(value);
  }
  static const UPGRADE_TYPE UPGRADE_TYPE_MIN =
    gp_upgrade_chariot_UPGRADE_TYPE_UPGRADE_TYPE_MIN;
  static const UPGRADE_TYPE UPGRADE_TYPE_MAX =
    gp_upgrade_chariot_UPGRADE_TYPE_UPGRADE_TYPE_MAX;
  static const int UPGRADE_TYPE_ARRAYSIZE =
    gp_upgrade_chariot_UPGRADE_TYPE_UPGRADE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UPGRADE_TYPE_descriptor() {
    return gp_upgrade_chariot_UPGRADE_TYPE_descriptor();
  }
  static inline const ::std::string& UPGRADE_TYPE_Name(UPGRADE_TYPE value) {
    return gp_upgrade_chariot_UPGRADE_TYPE_Name(value);
  }
  static inline bool UPGRADE_TYPE_Parse(const ::std::string& name,
      UPGRADE_TYPE* value) {
    return gp_upgrade_chariot_UPGRADE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_UPGRADE_CHARIOT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional .PB.gp_upgrade_chariot.UPGRADE_TYPE up_type = 4;
  inline bool has_up_type() const;
  inline void clear_up_type();
  static const int kUpTypeFieldNumber = 4;
  inline ::PB::gp_upgrade_chariot_UPGRADE_TYPE up_type() const;
  inline void set_up_type(::PB::gp_upgrade_chariot_UPGRADE_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.gp_upgrade_chariot)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_up_type();
  inline void clear_has_up_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 index_;
  int up_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_upgrade_chariot* default_instance_;
};
// -------------------------------------------------------------------

class gp_rent_chariot : public ::google::protobuf::Message {
 public:
  gp_rent_chariot();
  virtual ~gp_rent_chariot();

  gp_rent_chariot(const gp_rent_chariot& from);

  inline gp_rent_chariot& operator=(const gp_rent_chariot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_rent_chariot& default_instance();

  void Swap(gp_rent_chariot* other);

  // implements Message ----------------------------------------------

  gp_rent_chariot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_rent_chariot& from);
  void MergeFrom(const gp_rent_chariot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_RENT_CHARIOT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_rent_chariot)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_rent_chariot* default_instance_;
};
// -------------------------------------------------------------------

class gp_transform_chariot : public ::google::protobuf::Message {
 public:
  gp_transform_chariot();
  virtual ~gp_transform_chariot();

  gp_transform_chariot(const gp_transform_chariot& from);

  inline gp_transform_chariot& operator=(const gp_transform_chariot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_transform_chariot& default_instance();

  void Swap(gp_transform_chariot* other);

  // implements Message ----------------------------------------------

  gp_transform_chariot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_transform_chariot& from);
  void MergeFrom(const gp_transform_chariot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_TRANSFORM_CHARIOT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional bool geton = 3;
  inline bool has_geton() const;
  inline void clear_geton();
  static const int kGetonFieldNumber = 3;
  inline bool geton() const;
  inline void set_geton(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_transform_chariot)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_geton();
  inline void clear_has_geton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 tid_;
  bool geton_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_transform_chariot* default_instance_;
};
// -------------------------------------------------------------------

class gp_fix_chariot : public ::google::protobuf::Message {
 public:
  gp_fix_chariot();
  virtual ~gp_fix_chariot();

  gp_fix_chariot(const gp_fix_chariot& from);

  inline gp_fix_chariot& operator=(const gp_fix_chariot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_fix_chariot& default_instance();

  void Swap(gp_fix_chariot* other);

  // implements Message ----------------------------------------------

  gp_fix_chariot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_fix_chariot& from);
  void MergeFrom(const gp_fix_chariot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_FIX_CHARIOT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional bool use_diamond = 2;
  inline bool has_use_diamond() const;
  inline void clear_use_diamond();
  static const int kUseDiamondFieldNumber = 2;
  inline bool use_diamond() const;
  inline void set_use_diamond(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_fix_chariot)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_use_diamond();
  inline void clear_has_use_diamond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  bool use_diamond_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_fix_chariot* default_instance_;
};
// -------------------------------------------------------------------

class gp_wuhun_open : public ::google::protobuf::Message {
 public:
  gp_wuhun_open();
  virtual ~gp_wuhun_open();

  gp_wuhun_open(const gp_wuhun_open& from);

  inline gp_wuhun_open& operator=(const gp_wuhun_open& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_wuhun_open& default_instance();

  void Swap(gp_wuhun_open* other);

  // implements Message ----------------------------------------------

  gp_wuhun_open* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_wuhun_open& from);
  void MergeFrom(const gp_wuhun_open& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_WUHUN_OPEN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 wuhun_group_id = 2;
  inline bool has_wuhun_group_id() const;
  inline void clear_wuhun_group_id();
  static const int kWuhunGroupIdFieldNumber = 2;
  inline ::google::protobuf::int32 wuhun_group_id() const;
  inline void set_wuhun_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_wuhun_open)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_wuhun_group_id();
  inline void clear_has_wuhun_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 wuhun_group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_wuhun_open* default_instance_;
};
// -------------------------------------------------------------------

class gp_wuhun_upgrade : public ::google::protobuf::Message {
 public:
  gp_wuhun_upgrade();
  virtual ~gp_wuhun_upgrade();

  gp_wuhun_upgrade(const gp_wuhun_upgrade& from);

  inline gp_wuhun_upgrade& operator=(const gp_wuhun_upgrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_wuhun_upgrade& default_instance();

  void Swap(gp_wuhun_upgrade* other);

  // implements Message ----------------------------------------------

  gp_wuhun_upgrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_wuhun_upgrade& from);
  void MergeFrom(const gp_wuhun_upgrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE WUHUN_UPGRADE_TYPE;
  static const WUHUN_UPGRADE_TYPE WUHUN_UP_EXP = gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UP_EXP;
  static const WUHUN_UPGRADE_TYPE WUHUN_UP_DIAMOND = gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UP_DIAMOND;
  static const WUHUN_UPGRADE_TYPE WUHUN_UP_TASK = gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UP_TASK;
  static const WUHUN_UPGRADE_TYPE WUHUN_UP_TASK_FINISH = gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UP_TASK_FINISH;
  static inline bool WUHUN_UPGRADE_TYPE_IsValid(int value) {
    return gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_IsValid(value);
  }
  static const WUHUN_UPGRADE_TYPE WUHUN_UPGRADE_TYPE_MIN =
    gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UPGRADE_TYPE_MIN;
  static const WUHUN_UPGRADE_TYPE WUHUN_UPGRADE_TYPE_MAX =
    gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UPGRADE_TYPE_MAX;
  static const int WUHUN_UPGRADE_TYPE_ARRAYSIZE =
    gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_WUHUN_UPGRADE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WUHUN_UPGRADE_TYPE_descriptor() {
    return gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_descriptor();
  }
  static inline const ::std::string& WUHUN_UPGRADE_TYPE_Name(WUHUN_UPGRADE_TYPE value) {
    return gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_Name(value);
  }
  static inline bool WUHUN_UPGRADE_TYPE_Parse(const ::std::string& name,
      WUHUN_UPGRADE_TYPE* value) {
    return gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_WUHUN_UPGRADE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 node_id = 2;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  inline ::google::protobuf::int32 node_id() const;
  inline void set_node_id(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 upgrade_type = 4;
  inline bool has_upgrade_type() const;
  inline void clear_upgrade_type();
  static const int kUpgradeTypeFieldNumber = 4;
  inline ::google::protobuf::int32 upgrade_type() const;
  inline void set_upgrade_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_wuhun_upgrade)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_upgrade_type();
  inline void clear_has_upgrade_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 upgrade_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_wuhun_upgrade* default_instance_;
};
// -------------------------------------------------------------------

class use_item_batch : public ::google::protobuf::Message {
 public:
  use_item_batch();
  virtual ~use_item_batch();

  use_item_batch(const use_item_batch& from);

  inline use_item_batch& operator=(const use_item_batch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const use_item_batch& default_instance();

  void Swap(use_item_batch* other);

  // implements Message ----------------------------------------------

  use_item_batch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const use_item_batch& from);
  void MergeFrom(const use_item_batch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_USE_ITEM_BATCH];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional uint32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 location() const;
  inline void set_location(::google::protobuf::uint32 value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 tid = 4;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 4;
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.use_item_batch)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 location_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static use_item_batch* default_instance_;
};
// -------------------------------------------------------------------

class gp_wine_game : public ::google::protobuf::Message {
 public:
  gp_wine_game();
  virtual ~gp_wine_game();

  gp_wine_game(const gp_wine_game& from);

  inline gp_wine_game& operator=(const gp_wine_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_wine_game& default_instance();

  void Swap(gp_wine_game* other);

  // implements Message ----------------------------------------------

  gp_wine_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_wine_game& from);
  void MergeFrom(const gp_wine_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_WINE_GAME];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_wine_game)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_wine_game* default_instance_;
};
// -------------------------------------------------------------------

class gp_strategy_level_up : public ::google::protobuf::Message {
 public:
  gp_strategy_level_up();
  virtual ~gp_strategy_level_up();

  gp_strategy_level_up(const gp_strategy_level_up& from);

  inline gp_strategy_level_up& operator=(const gp_strategy_level_up& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_strategy_level_up& default_instance();

  void Swap(gp_strategy_level_up* other);

  // implements Message ----------------------------------------------

  gp_strategy_level_up* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_strategy_level_up& from);
  void MergeFrom(const gp_strategy_level_up& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_STRATEGY_LEVEL_UP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 strategy_group_tid = 2;
  inline bool has_strategy_group_tid() const;
  inline void clear_strategy_group_tid();
  static const int kStrategyGroupTidFieldNumber = 2;
  inline ::google::protobuf::int32 strategy_group_tid() const;
  inline void set_strategy_group_tid(::google::protobuf::int32 value);

  // optional int32 strategy_tid = 3;
  inline bool has_strategy_tid() const;
  inline void clear_strategy_tid();
  static const int kStrategyTidFieldNumber = 3;
  inline ::google::protobuf::int32 strategy_tid() const;
  inline void set_strategy_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_strategy_level_up)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_strategy_group_tid();
  inline void clear_has_strategy_group_tid();
  inline void set_has_strategy_tid();
  inline void clear_has_strategy_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 strategy_group_tid_;
  ::google::protobuf::int32 strategy_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_strategy_level_up* default_instance_;
};
// -------------------------------------------------------------------

class gp_strategy_star_up : public ::google::protobuf::Message {
 public:
  gp_strategy_star_up();
  virtual ~gp_strategy_star_up();

  gp_strategy_star_up(const gp_strategy_star_up& from);

  inline gp_strategy_star_up& operator=(const gp_strategy_star_up& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_strategy_star_up& default_instance();

  void Swap(gp_strategy_star_up* other);

  // implements Message ----------------------------------------------

  gp_strategy_star_up* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_strategy_star_up& from);
  void MergeFrom(const gp_strategy_star_up& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_STRATEGY_STAR_UP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 strategy_group_tid = 2;
  inline bool has_strategy_group_tid() const;
  inline void clear_strategy_group_tid();
  static const int kStrategyGroupTidFieldNumber = 2;
  inline ::google::protobuf::int32 strategy_group_tid() const;
  inline void set_strategy_group_tid(::google::protobuf::int32 value);

  // optional int32 strategy_tid = 3;
  inline bool has_strategy_tid() const;
  inline void clear_strategy_tid();
  static const int kStrategyTidFieldNumber = 3;
  inline ::google::protobuf::int32 strategy_tid() const;
  inline void set_strategy_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_strategy_star_up)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_strategy_group_tid();
  inline void clear_has_strategy_group_tid();
  inline void set_has_strategy_tid();
  inline void clear_has_strategy_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 strategy_group_tid_;
  ::google::protobuf::int32 strategy_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_strategy_star_up* default_instance_;
};
// -------------------------------------------------------------------

class gp_surface_train : public ::google::protobuf::Message {
 public:
  gp_surface_train();
  virtual ~gp_surface_train();

  gp_surface_train(const gp_surface_train& from);

  inline gp_surface_train& operator=(const gp_surface_train& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_surface_train& default_instance();

  void Swap(gp_surface_train* other);

  // implements Message ----------------------------------------------

  gp_surface_train* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_surface_train& from);
  void MergeFrom(const gp_surface_train& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_SURFACE_TRAIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 surface_tid = 2;
  inline bool has_surface_tid() const;
  inline void clear_surface_tid();
  static const int kSurfaceTidFieldNumber = 2;
  inline ::google::protobuf::int32 surface_tid() const;
  inline void set_surface_tid(::google::protobuf::int32 value);

  // optional int32 item_index = 3;
  inline bool has_item_index() const;
  inline void clear_item_index();
  static const int kItemIndexFieldNumber = 3;
  inline ::google::protobuf::int32 item_index() const;
  inline void set_item_index(::google::protobuf::int32 value);

  // optional int32 item_tid = 4;
  inline bool has_item_tid() const;
  inline void clear_item_tid();
  static const int kItemTidFieldNumber = 4;
  inline ::google::protobuf::int32 item_tid() const;
  inline void set_item_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_surface_train)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_surface_tid();
  inline void clear_has_surface_tid();
  inline void set_has_item_index();
  inline void clear_has_item_index();
  inline void set_has_item_tid();
  inline void clear_has_item_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 surface_tid_;
  ::google::protobuf::int32 item_index_;
  ::google::protobuf::int32 item_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_surface_train* default_instance_;
};
// -------------------------------------------------------------------

class gp_region_war_cheer : public ::google::protobuf::Message {
 public:
  gp_region_war_cheer();
  virtual ~gp_region_war_cheer();

  gp_region_war_cheer(const gp_region_war_cheer& from);

  inline gp_region_war_cheer& operator=(const gp_region_war_cheer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_region_war_cheer& default_instance();

  void Swap(gp_region_war_cheer* other);

  // implements Message ----------------------------------------------

  gp_region_war_cheer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_region_war_cheer& from);
  void MergeFrom(const gp_region_war_cheer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_REGION_WAR_CHEER];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 war_id = 2;
  inline bool has_war_id() const;
  inline void clear_war_id();
  static const int kWarIdFieldNumber = 2;
  inline ::google::protobuf::int32 war_id() const;
  inline void set_war_id(::google::protobuf::int32 value);

  // optional int32 war_side = 3;
  inline bool has_war_side() const;
  inline void clear_war_side();
  static const int kWarSideFieldNumber = 3;
  inline ::google::protobuf::int32 war_side() const;
  inline void set_war_side(::google::protobuf::int32 value);

  // optional int32 cheer_amt = 4;
  inline bool has_cheer_amt() const;
  inline void clear_cheer_amt();
  static const int kCheerAmtFieldNumber = 4;
  inline ::google::protobuf::int32 cheer_amt() const;
  inline void set_cheer_amt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_region_war_cheer)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_war_id();
  inline void clear_has_war_id();
  inline void set_has_war_side();
  inline void clear_has_war_side();
  inline void set_has_cheer_amt();
  inline void clear_has_cheer_amt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 war_id_;
  ::google::protobuf::int32 war_side_;
  ::google::protobuf::int32 cheer_amt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_region_war_cheer* default_instance_;
};
// -------------------------------------------------------------------

class gp_lantern : public ::google::protobuf::Message {
 public:
  gp_lantern();
  virtual ~gp_lantern();

  gp_lantern(const gp_lantern& from);

  inline gp_lantern& operator=(const gp_lantern& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_lantern& default_instance();

  void Swap(gp_lantern* other);

  // implements Message ----------------------------------------------

  gp_lantern* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_lantern& from);
  void MergeFrom(const gp_lantern& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_lantern_LANTERN_TYPE LANTERN_TYPE;
  static const LANTERN_TYPE LT_INVALID = gp_lantern_LANTERN_TYPE_LT_INVALID;
  static const LANTERN_TYPE LT_MONEY = gp_lantern_LANTERN_TYPE_LT_MONEY;
  static const LANTERN_TYPE LT_DIAMOND = gp_lantern_LANTERN_TYPE_LT_DIAMOND;
  static const LANTERN_TYPE LT_ITEM = gp_lantern_LANTERN_TYPE_LT_ITEM;
  static const LANTERN_TYPE LT_HELP = gp_lantern_LANTERN_TYPE_LT_HELP;
  static inline bool LANTERN_TYPE_IsValid(int value) {
    return gp_lantern_LANTERN_TYPE_IsValid(value);
  }
  static const LANTERN_TYPE LANTERN_TYPE_MIN =
    gp_lantern_LANTERN_TYPE_LANTERN_TYPE_MIN;
  static const LANTERN_TYPE LANTERN_TYPE_MAX =
    gp_lantern_LANTERN_TYPE_LANTERN_TYPE_MAX;
  static const int LANTERN_TYPE_ARRAYSIZE =
    gp_lantern_LANTERN_TYPE_LANTERN_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LANTERN_TYPE_descriptor() {
    return gp_lantern_LANTERN_TYPE_descriptor();
  }
  static inline const ::std::string& LANTERN_TYPE_Name(LANTERN_TYPE value) {
    return gp_lantern_LANTERN_TYPE_Name(value);
  }
  static inline bool LANTERN_TYPE_Parse(const ::std::string& name,
      LANTERN_TYPE* value) {
    return gp_lantern_LANTERN_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_LANTERN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional .PB.gp_lantern.LANTERN_TYPE oper_type = 2;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 2;
  inline ::PB::gp_lantern_LANTERN_TYPE oper_type() const;
  inline void set_oper_type(::PB::gp_lantern_LANTERN_TYPE value);

  // optional int32 oper_param1 = 3;
  inline bool has_oper_param1() const;
  inline void clear_oper_param1();
  static const int kOperParam1FieldNumber = 3;
  inline ::google::protobuf::int32 oper_param1() const;
  inline void set_oper_param1(::google::protobuf::int32 value);

  // optional int32 oper_param2 = 4;
  inline bool has_oper_param2() const;
  inline void clear_oper_param2();
  static const int kOperParam2FieldNumber = 4;
  inline ::google::protobuf::int32 oper_param2() const;
  inline void set_oper_param2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_lantern)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_oper_param1();
  inline void clear_has_oper_param1();
  inline void set_has_oper_param2();
  inline void clear_has_oper_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int oper_type_;
  ::google::protobuf::int32 oper_param1_;
  ::google::protobuf::int32 oper_param2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_lantern* default_instance_;
};
// -------------------------------------------------------------------

class gp_exchange_activity : public ::google::protobuf::Message {
 public:
  gp_exchange_activity();
  virtual ~gp_exchange_activity();

  gp_exchange_activity(const gp_exchange_activity& from);

  inline gp_exchange_activity& operator=(const gp_exchange_activity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_exchange_activity& default_instance();

  void Swap(gp_exchange_activity* other);

  // implements Message ----------------------------------------------

  gp_exchange_activity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_exchange_activity& from);
  void MergeFrom(const gp_exchange_activity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_exchange_activity_EXCHANGE_TYPE EXCHANGE_TYPE;
  static const EXCHANGE_TYPE ET_INVALID = gp_exchange_activity_EXCHANGE_TYPE_ET_INVALID;
  static const EXCHANGE_TYPE ET_MONEY = gp_exchange_activity_EXCHANGE_TYPE_ET_MONEY;
  static const EXCHANGE_TYPE ET_DIAMOND = gp_exchange_activity_EXCHANGE_TYPE_ET_DIAMOND;
  static const EXCHANGE_TYPE ET_ITEM = gp_exchange_activity_EXCHANGE_TYPE_ET_ITEM;
  static const EXCHANGE_TYPE ET_HELP = gp_exchange_activity_EXCHANGE_TYPE_ET_HELP;
  static inline bool EXCHANGE_TYPE_IsValid(int value) {
    return gp_exchange_activity_EXCHANGE_TYPE_IsValid(value);
  }
  static const EXCHANGE_TYPE EXCHANGE_TYPE_MIN =
    gp_exchange_activity_EXCHANGE_TYPE_EXCHANGE_TYPE_MIN;
  static const EXCHANGE_TYPE EXCHANGE_TYPE_MAX =
    gp_exchange_activity_EXCHANGE_TYPE_EXCHANGE_TYPE_MAX;
  static const int EXCHANGE_TYPE_ARRAYSIZE =
    gp_exchange_activity_EXCHANGE_TYPE_EXCHANGE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EXCHANGE_TYPE_descriptor() {
    return gp_exchange_activity_EXCHANGE_TYPE_descriptor();
  }
  static inline const ::std::string& EXCHANGE_TYPE_Name(EXCHANGE_TYPE value) {
    return gp_exchange_activity_EXCHANGE_TYPE_Name(value);
  }
  static inline bool EXCHANGE_TYPE_Parse(const ::std::string& name,
      EXCHANGE_TYPE* value) {
    return gp_exchange_activity_EXCHANGE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EXCHANGE_ACTIVITY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional .PB.gp_exchange_activity.EXCHANGE_TYPE oper_type = 2;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 2;
  inline ::PB::gp_exchange_activity_EXCHANGE_TYPE oper_type() const;
  inline void set_oper_type(::PB::gp_exchange_activity_EXCHANGE_TYPE value);

  // optional int32 activity_index = 3;
  inline bool has_activity_index() const;
  inline void clear_activity_index();
  static const int kActivityIndexFieldNumber = 3;
  inline ::google::protobuf::int32 activity_index() const;
  inline void set_activity_index(::google::protobuf::int32 value);

  // optional int32 oper_param = 4;
  inline bool has_oper_param() const;
  inline void clear_oper_param();
  static const int kOperParamFieldNumber = 4;
  inline ::google::protobuf::int32 oper_param() const;
  inline void set_oper_param(::google::protobuf::int32 value);

  // optional int32 array_index = 5;
  inline bool has_array_index() const;
  inline void clear_array_index();
  static const int kArrayIndexFieldNumber = 5;
  inline ::google::protobuf::int32 array_index() const;
  inline void set_array_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_exchange_activity)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_activity_index();
  inline void clear_has_activity_index();
  inline void set_has_oper_param();
  inline void clear_has_oper_param();
  inline void set_has_array_index();
  inline void clear_has_array_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int oper_type_;
  ::google::protobuf::int32 activity_index_;
  ::google::protobuf::int32 oper_param_;
  ::google::protobuf::int32 array_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_exchange_activity* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_attach_mingwen : public ::google::protobuf::Message {
 public:
  gp_equip_attach_mingwen();
  virtual ~gp_equip_attach_mingwen();

  gp_equip_attach_mingwen(const gp_equip_attach_mingwen& from);

  inline gp_equip_attach_mingwen& operator=(const gp_equip_attach_mingwen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_attach_mingwen& default_instance();

  void Swap(gp_equip_attach_mingwen* other);

  // implements Message ----------------------------------------------

  gp_equip_attach_mingwen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_attach_mingwen& from);
  void MergeFrom(const gp_equip_attach_mingwen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_ATTACH_MINGWEN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int32 equip_index = 2;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 2;
  inline ::google::protobuf::int32 equip_index() const;
  inline void set_equip_index(::google::protobuf::int32 value);

  // required int32 equip_tid = 3;
  inline bool has_equip_tid() const;
  inline void clear_equip_tid();
  static const int kEquipTidFieldNumber = 3;
  inline ::google::protobuf::int32 equip_tid() const;
  inline void set_equip_tid(::google::protobuf::int32 value);

  // required int32 hole_index = 4;
  inline bool has_hole_index() const;
  inline void clear_hole_index();
  static const int kHoleIndexFieldNumber = 4;
  inline ::google::protobuf::int32 hole_index() const;
  inline void set_hole_index(::google::protobuf::int32 value);

  // required int32 mingwen_index = 5;
  inline bool has_mingwen_index() const;
  inline void clear_mingwen_index();
  static const int kMingwenIndexFieldNumber = 5;
  inline ::google::protobuf::int32 mingwen_index() const;
  inline void set_mingwen_index(::google::protobuf::int32 value);

  // required int32 mingwen_tid = 6;
  inline bool has_mingwen_tid() const;
  inline void clear_mingwen_tid();
  static const int kMingwenTidFieldNumber = 6;
  inline ::google::protobuf::int32 mingwen_tid() const;
  inline void set_mingwen_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_attach_mingwen)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_equip_tid();
  inline void clear_has_equip_tid();
  inline void set_has_hole_index();
  inline void clear_has_hole_index();
  inline void set_has_mingwen_index();
  inline void clear_has_mingwen_index();
  inline void set_has_mingwen_tid();
  inline void clear_has_mingwen_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 equip_index_;
  ::google::protobuf::int32 equip_tid_;
  ::google::protobuf::int32 hole_index_;
  ::google::protobuf::int32 mingwen_index_;
  ::google::protobuf::int32 mingwen_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_attach_mingwen* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_detach_mingwen : public ::google::protobuf::Message {
 public:
  gp_equip_detach_mingwen();
  virtual ~gp_equip_detach_mingwen();

  gp_equip_detach_mingwen(const gp_equip_detach_mingwen& from);

  inline gp_equip_detach_mingwen& operator=(const gp_equip_detach_mingwen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_detach_mingwen& default_instance();

  void Swap(gp_equip_detach_mingwen* other);

  // implements Message ----------------------------------------------

  gp_equip_detach_mingwen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_detach_mingwen& from);
  void MergeFrom(const gp_equip_detach_mingwen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_DEATTACH_MINGWEN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int32 equip_index = 2;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 2;
  inline ::google::protobuf::int32 equip_index() const;
  inline void set_equip_index(::google::protobuf::int32 value);

  // required int32 equip_tid = 3;
  inline bool has_equip_tid() const;
  inline void clear_equip_tid();
  static const int kEquipTidFieldNumber = 3;
  inline ::google::protobuf::int32 equip_tid() const;
  inline void set_equip_tid(::google::protobuf::int32 value);

  // required int32 hole_index = 4;
  inline bool has_hole_index() const;
  inline void clear_hole_index();
  static const int kHoleIndexFieldNumber = 4;
  inline ::google::protobuf::int32 hole_index() const;
  inline void set_hole_index(::google::protobuf::int32 value);

  // required int32 mingwen_tid = 5;
  inline bool has_mingwen_tid() const;
  inline void clear_mingwen_tid();
  static const int kMingwenTidFieldNumber = 5;
  inline ::google::protobuf::int32 mingwen_tid() const;
  inline void set_mingwen_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_detach_mingwen)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_equip_tid();
  inline void clear_has_equip_tid();
  inline void set_has_hole_index();
  inline void clear_has_hole_index();
  inline void set_has_mingwen_tid();
  inline void clear_has_mingwen_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 equip_index_;
  ::google::protobuf::int32 equip_tid_;
  ::google::protobuf::int32 hole_index_;
  ::google::protobuf::int32 mingwen_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_detach_mingwen* default_instance_;
};
// -------------------------------------------------------------------

class gp_magic_weapon_train : public ::google::protobuf::Message {
 public:
  gp_magic_weapon_train();
  virtual ~gp_magic_weapon_train();

  gp_magic_weapon_train(const gp_magic_weapon_train& from);

  inline gp_magic_weapon_train& operator=(const gp_magic_weapon_train& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_magic_weapon_train& default_instance();

  void Swap(gp_magic_weapon_train* other);

  // implements Message ----------------------------------------------

  gp_magic_weapon_train* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_magic_weapon_train& from);
  void MergeFrom(const gp_magic_weapon_train& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_MAGIC_WEAPON_TRAIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 weapon_tid = 2;
  inline bool has_weapon_tid() const;
  inline void clear_weapon_tid();
  static const int kWeaponTidFieldNumber = 2;
  inline ::google::protobuf::int32 weapon_tid() const;
  inline void set_weapon_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_magic_weapon_train)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_weapon_tid();
  inline void clear_has_weapon_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 weapon_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_magic_weapon_train* default_instance_;
};
// -------------------------------------------------------------------

class gp_magic_weapon_summon : public ::google::protobuf::Message {
 public:
  gp_magic_weapon_summon();
  virtual ~gp_magic_weapon_summon();

  gp_magic_weapon_summon(const gp_magic_weapon_summon& from);

  inline gp_magic_weapon_summon& operator=(const gp_magic_weapon_summon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_magic_weapon_summon& default_instance();

  void Swap(gp_magic_weapon_summon* other);

  // implements Message ----------------------------------------------

  gp_magic_weapon_summon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_magic_weapon_summon& from);
  void MergeFrom(const gp_magic_weapon_summon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_MAGIC_WEAPON_SUMMON];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 weapon_tid = 2;
  inline bool has_weapon_tid() const;
  inline void clear_weapon_tid();
  static const int kWeaponTidFieldNumber = 2;
  inline ::google::protobuf::int32 weapon_tid() const;
  inline void set_weapon_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_magic_weapon_summon)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_weapon_tid();
  inline void clear_has_weapon_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 weapon_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_magic_weapon_summon* default_instance_;
};
// -------------------------------------------------------------------

class gp_magic_weapon_refine : public ::google::protobuf::Message {
 public:
  gp_magic_weapon_refine();
  virtual ~gp_magic_weapon_refine();

  gp_magic_weapon_refine(const gp_magic_weapon_refine& from);

  inline gp_magic_weapon_refine& operator=(const gp_magic_weapon_refine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_magic_weapon_refine& default_instance();

  void Swap(gp_magic_weapon_refine* other);

  // implements Message ----------------------------------------------

  gp_magic_weapon_refine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_magic_weapon_refine& from);
  void MergeFrom(const gp_magic_weapon_refine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_MAGIC_WEAPON_REFINE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 weapon_tid = 2;
  inline bool has_weapon_tid() const;
  inline void clear_weapon_tid();
  static const int kWeaponTidFieldNumber = 2;
  inline ::google::protobuf::int32 weapon_tid() const;
  inline void set_weapon_tid(::google::protobuf::int32 value);

  // optional int32 color_group_index = 3;
  inline bool has_color_group_index() const;
  inline void clear_color_group_index();
  static const int kColorGroupIndexFieldNumber = 3;
  inline ::google::protobuf::int32 color_group_index() const;
  inline void set_color_group_index(::google::protobuf::int32 value);

  // optional int32 color_index = 4;
  inline bool has_color_index() const;
  inline void clear_color_index();
  static const int kColorIndexFieldNumber = 4;
  inline ::google::protobuf::int32 color_index() const;
  inline void set_color_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_magic_weapon_refine)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_weapon_tid();
  inline void clear_has_weapon_tid();
  inline void set_has_color_group_index();
  inline void clear_has_color_group_index();
  inline void set_has_color_index();
  inline void clear_has_color_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 weapon_tid_;
  ::google::protobuf::int32 color_group_index_;
  ::google::protobuf::int32 color_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_magic_weapon_refine* default_instance_;
};
// -------------------------------------------------------------------

class gp_pet_operate : public ::google::protobuf::Message {
 public:
  gp_pet_operate();
  virtual ~gp_pet_operate();

  gp_pet_operate(const gp_pet_operate& from);

  inline gp_pet_operate& operator=(const gp_pet_operate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_pet_operate& default_instance();

  void Swap(gp_pet_operate* other);

  // implements Message ----------------------------------------------

  gp_pet_operate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_pet_operate& from);
  void MergeFrom(const gp_pet_operate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_pet_operate_OPERATE_TYPE OPERATE_TYPE;
  static const OPERATE_TYPE OT_MODIFY_FIGHT_STATE = gp_pet_operate_OPERATE_TYPE_OT_MODIFY_FIGHT_STATE;
  static const OPERATE_TYPE OT_XISUI = gp_pet_operate_OPERATE_TYPE_OT_XISUI;
  static const OPERATE_TYPE OT_FENJIE = gp_pet_operate_OPERATE_TYPE_OT_FENJIE;
  static const OPERATE_TYPE OT_INC_STAR = gp_pet_operate_OPERATE_TYPE_OT_INC_STAR;
  static const OPERATE_TYPE OT_COMPOSE = gp_pet_operate_OPERATE_TYPE_OT_COMPOSE;
  static const OPERATE_TYPE OT_UNLOCK_SKILL = gp_pet_operate_OPERATE_TYPE_OT_UNLOCK_SKILL;
  static const OPERATE_TYPE OT_RESET_LIANYAO = gp_pet_operate_OPERATE_TYPE_OT_RESET_LIANYAO;
  static inline bool OPERATE_TYPE_IsValid(int value) {
    return gp_pet_operate_OPERATE_TYPE_IsValid(value);
  }
  static const OPERATE_TYPE OPERATE_TYPE_MIN =
    gp_pet_operate_OPERATE_TYPE_OPERATE_TYPE_MIN;
  static const OPERATE_TYPE OPERATE_TYPE_MAX =
    gp_pet_operate_OPERATE_TYPE_OPERATE_TYPE_MAX;
  static const int OPERATE_TYPE_ARRAYSIZE =
    gp_pet_operate_OPERATE_TYPE_OPERATE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPERATE_TYPE_descriptor() {
    return gp_pet_operate_OPERATE_TYPE_descriptor();
  }
  static inline const ::std::string& OPERATE_TYPE_Name(OPERATE_TYPE value) {
    return gp_pet_operate_OPERATE_TYPE_Name(value);
  }
  static inline bool OPERATE_TYPE_Parse(const ::std::string& name,
      OPERATE_TYPE* value) {
    return gp_pet_operate_OPERATE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_PET_OPERATE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional .PB.gp_pet_operate.OPERATE_TYPE oper_type = 2;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 2;
  inline ::PB::gp_pet_operate_OPERATE_TYPE oper_type() const;
  inline void set_oper_type(::PB::gp_pet_operate_OPERATE_TYPE value);

  // optional int32 oper_param1 = 3;
  inline bool has_oper_param1() const;
  inline void clear_oper_param1();
  static const int kOperParam1FieldNumber = 3;
  inline ::google::protobuf::int32 oper_param1() const;
  inline void set_oper_param1(::google::protobuf::int32 value);

  // optional int32 oper_param2 = 4;
  inline bool has_oper_param2() const;
  inline void clear_oper_param2();
  static const int kOperParam2FieldNumber = 4;
  inline ::google::protobuf::int32 oper_param2() const;
  inline void set_oper_param2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_pet_operate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_oper_param1();
  inline void clear_has_oper_param1();
  inline void set_has_oper_param2();
  inline void clear_has_oper_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int oper_type_;
  ::google::protobuf::int32 oper_param1_;
  ::google::protobuf::int32 oper_param2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_pet_operate* default_instance_;
};
// -------------------------------------------------------------------

class gp_decompose_batch : public ::google::protobuf::Message {
 public:
  gp_decompose_batch();
  virtual ~gp_decompose_batch();

  gp_decompose_batch(const gp_decompose_batch& from);

  inline gp_decompose_batch& operator=(const gp_decompose_batch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_decompose_batch& default_instance();

  void Swap(gp_decompose_batch* other);

  // implements Message ----------------------------------------------

  gp_decompose_batch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_decompose_batch& from);
  void MergeFrom(const gp_decompose_batch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_DECOMPOSE_BATCH];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::int32 location() const;
  inline void set_location(::google::protobuf::int32 value);

  // optional int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 tid = 4;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 4;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_decompose_batch)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 location_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_decompose_batch* default_instance_;
};
// -------------------------------------------------------------------

class gp_change_prof : public ::google::protobuf::Message {
 public:
  gp_change_prof();
  virtual ~gp_change_prof();

  gp_change_prof(const gp_change_prof& from);

  inline gp_change_prof& operator=(const gp_change_prof& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_change_prof& default_instance();

  void Swap(gp_change_prof* other);

  // implements Message ----------------------------------------------

  gp_change_prof* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_change_prof& from);
  void MergeFrom(const gp_change_prof& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CHANGE_PROF];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // required int32 old_prof = 2;
  inline bool has_old_prof() const;
  inline void clear_old_prof();
  static const int kOldProfFieldNumber = 2;
  inline ::google::protobuf::int32 old_prof() const;
  inline void set_old_prof(::google::protobuf::int32 value);

  // required int32 new_prof = 3;
  inline bool has_new_prof() const;
  inline void clear_new_prof();
  static const int kNewProfFieldNumber = 3;
  inline ::google::protobuf::int32 new_prof() const;
  inline void set_new_prof(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_change_prof)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_old_prof();
  inline void clear_has_old_prof();
  inline void set_has_new_prof();
  inline void clear_has_new_prof();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 old_prof_;
  ::google::protobuf::int32 new_prof_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_change_prof* default_instance_;
};
// -------------------------------------------------------------------

class gp_crack_wuzhuang : public ::google::protobuf::Message {
 public:
  gp_crack_wuzhuang();
  virtual ~gp_crack_wuzhuang();

  gp_crack_wuzhuang(const gp_crack_wuzhuang& from);

  inline gp_crack_wuzhuang& operator=(const gp_crack_wuzhuang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_crack_wuzhuang& default_instance();

  void Swap(gp_crack_wuzhuang* other);

  // implements Message ----------------------------------------------

  gp_crack_wuzhuang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_crack_wuzhuang& from);
  void MergeFrom(const gp_crack_wuzhuang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CRACK_WUZHUANG];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 instance_id = 2;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 2;
  inline ::google::protobuf::int32 instance_id() const;
  inline void set_instance_id(::google::protobuf::int32 value);

  // optional int32 achievement_tid = 3;
  inline bool has_achievement_tid() const;
  inline void clear_achievement_tid();
  static const int kAchievementTidFieldNumber = 3;
  inline ::google::protobuf::int32 achievement_tid() const;
  inline void set_achievement_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_crack_wuzhuang)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_achievement_tid();
  inline void clear_has_achievement_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 instance_id_;
  ::google::protobuf::int32 achievement_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_crack_wuzhuang* default_instance_;
};
// -------------------------------------------------------------------

class gp_roam : public ::google::protobuf::Message {
 public:
  gp_roam();
  virtual ~gp_roam();

  gp_roam(const gp_roam& from);

  inline gp_roam& operator=(const gp_roam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_roam& default_instance();

  void Swap(gp_roam* other);

  // implements Message ----------------------------------------------

  gp_roam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_roam& from);
  void MergeFrom(const gp_roam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_ROAM];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 zoneid = 2;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_roam)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_roam* default_instance_;
};
// -------------------------------------------------------------------

class gp_diamond_repu_exchange : public ::google::protobuf::Message {
 public:
  gp_diamond_repu_exchange();
  virtual ~gp_diamond_repu_exchange();

  gp_diamond_repu_exchange(const gp_diamond_repu_exchange& from);

  inline gp_diamond_repu_exchange& operator=(const gp_diamond_repu_exchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_diamond_repu_exchange& default_instance();

  void Swap(gp_diamond_repu_exchange* other);

  // implements Message ----------------------------------------------

  gp_diamond_repu_exchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_diamond_repu_exchange& from);
  void MergeFrom(const gp_diamond_repu_exchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_DIAMOND_REPU_EXCHANGE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 exchange_val = 2;
  inline bool has_exchange_val() const;
  inline void clear_exchange_val();
  static const int kExchangeValFieldNumber = 2;
  inline ::google::protobuf::int32 exchange_val() const;
  inline void set_exchange_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_diamond_repu_exchange)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_exchange_val();
  inline void clear_has_exchange_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 exchange_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_diamond_repu_exchange* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_soul_equip : public ::google::protobuf::Message {
 public:
  gp_equip_soul_equip();
  virtual ~gp_equip_soul_equip();

  gp_equip_soul_equip(const gp_equip_soul_equip& from);

  inline gp_equip_soul_equip& operator=(const gp_equip_soul_equip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_soul_equip& default_instance();

  void Swap(gp_equip_soul_equip* other);

  // implements Message ----------------------------------------------

  gp_equip_soul_equip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_soul_equip& from);
  void MergeFrom(const gp_equip_soul_equip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 location = 1;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 1;
  inline ::google::protobuf::int32 location() const;
  inline void set_location(::google::protobuf::int32 value);

  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 tid = 3;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 3;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_soul.equip)
 private:
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 location_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_soul_equip* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_soul : public ::google::protobuf::Message {
 public:
  gp_equip_soul();
  virtual ~gp_equip_soul();

  gp_equip_soul(const gp_equip_soul& from);

  inline gp_equip_soul& operator=(const gp_equip_soul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_soul& default_instance();

  void Swap(gp_equip_soul* other);

  // implements Message ----------------------------------------------

  gp_equip_soul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_soul& from);
  void MergeFrom(const gp_equip_soul& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_equip_soul_equip equip;

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_SOUL];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 property_index = 2;
  inline bool has_property_index() const;
  inline void clear_property_index();
  static const int kPropertyIndexFieldNumber = 2;
  inline ::google::protobuf::int32 property_index() const;
  inline void set_property_index(::google::protobuf::int32 value);

  // optional .PB.gp_equip_soul.equip main_equip = 3;
  inline bool has_main_equip() const;
  inline void clear_main_equip();
  static const int kMainEquipFieldNumber = 3;
  inline const ::PB::gp_equip_soul_equip& main_equip() const;
  inline ::PB::gp_equip_soul_equip* mutable_main_equip();
  inline ::PB::gp_equip_soul_equip* release_main_equip();
  inline void set_allocated_main_equip(::PB::gp_equip_soul_equip* main_equip);

  // repeated .PB.gp_equip_soul.equip material_equip = 4;
  inline int material_equip_size() const;
  inline void clear_material_equip();
  static const int kMaterialEquipFieldNumber = 4;
  inline const ::PB::gp_equip_soul_equip& material_equip(int index) const;
  inline ::PB::gp_equip_soul_equip* mutable_material_equip(int index);
  inline ::PB::gp_equip_soul_equip* add_material_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_equip_soul_equip >&
      material_equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::gp_equip_soul_equip >*
      mutable_material_equip();

  // @@protoc_insertion_point(class_scope:PB.gp_equip_soul)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_property_index();
  inline void clear_has_property_index();
  inline void set_has_main_equip();
  inline void clear_has_main_equip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 property_index_;
  ::PB::gp_equip_soul_equip* main_equip_;
  ::google::protobuf::RepeatedPtrField< ::PB::gp_equip_soul_equip > material_equip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_soul* default_instance_;
};
// -------------------------------------------------------------------

class gp_query_roam_battle_target : public ::google::protobuf::Message {
 public:
  gp_query_roam_battle_target();
  virtual ~gp_query_roam_battle_target();

  gp_query_roam_battle_target(const gp_query_roam_battle_target& from);

  inline gp_query_roam_battle_target& operator=(const gp_query_roam_battle_target& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_query_roam_battle_target& default_instance();

  void Swap(gp_query_roam_battle_target* other);

  // implements Message ----------------------------------------------

  gp_query_roam_battle_target* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_query_roam_battle_target& from);
  void MergeFrom(const gp_query_roam_battle_target& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_QUERY_ROAM_BATTLE_TARGET];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional bool refresh = 2;
  inline bool has_refresh() const;
  inline void clear_refresh();
  static const int kRefreshFieldNumber = 2;
  inline bool refresh() const;
  inline void set_refresh(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_query_roam_battle_target)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_refresh();
  inline void clear_has_refresh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  bool refresh_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_query_roam_battle_target* default_instance_;
};
// -------------------------------------------------------------------

class gp_richman_operate : public ::google::protobuf::Message {
 public:
  gp_richman_operate();
  virtual ~gp_richman_operate();

  gp_richman_operate(const gp_richman_operate& from);

  inline gp_richman_operate& operator=(const gp_richman_operate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_richman_operate& default_instance();

  void Swap(gp_richman_operate* other);

  // implements Message ----------------------------------------------

  gp_richman_operate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_richman_operate& from);
  void MergeFrom(const gp_richman_operate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_RICHMAN_OPERATE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 operate_type = 2;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 2;
  inline ::google::protobuf::int32 operate_type() const;
  inline void set_operate_type(::google::protobuf::int32 value);

  // optional int32 operate_param1 = 3;
  inline bool has_operate_param1() const;
  inline void clear_operate_param1();
  static const int kOperateParam1FieldNumber = 3;
  inline ::google::protobuf::int32 operate_param1() const;
  inline void set_operate_param1(::google::protobuf::int32 value);

  // optional int32 operate_param2 = 4;
  inline bool has_operate_param2() const;
  inline void clear_operate_param2();
  static const int kOperateParam2FieldNumber = 4;
  inline ::google::protobuf::int32 operate_param2() const;
  inline void set_operate_param2(::google::protobuf::int32 value);

  // optional int32 operate_param3 = 5;
  inline bool has_operate_param3() const;
  inline void clear_operate_param3();
  static const int kOperateParam3FieldNumber = 5;
  inline ::google::protobuf::int32 operate_param3() const;
  inline void set_operate_param3(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_richman_operate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_operate_param1();
  inline void clear_has_operate_param1();
  inline void set_has_operate_param2();
  inline void clear_has_operate_param2();
  inline void set_has_operate_param3();
  inline void clear_has_operate_param3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 operate_type_;
  ::google::protobuf::int32 operate_param1_;
  ::google::protobuf::int32 operate_param2_;
  ::google::protobuf::int32 operate_param3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_richman_operate* default_instance_;
};
// -------------------------------------------------------------------

class gp_roam_zhaoji : public ::google::protobuf::Message {
 public:
  gp_roam_zhaoji();
  virtual ~gp_roam_zhaoji();

  gp_roam_zhaoji(const gp_roam_zhaoji& from);

  inline gp_roam_zhaoji& operator=(const gp_roam_zhaoji& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_roam_zhaoji& default_instance();

  void Swap(gp_roam_zhaoji* other);

  // implements Message ----------------------------------------------

  gp_roam_zhaoji* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_roam_zhaoji& from);
  void MergeFrom(const gp_roam_zhaoji& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_ROAM_ZHAOJI];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_roam_zhaoji)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_roam_zhaoji* default_instance_;
};
// -------------------------------------------------------------------

class gp_general_soul_op : public ::google::protobuf::Message {
 public:
  gp_general_soul_op();
  virtual ~gp_general_soul_op();

  gp_general_soul_op(const gp_general_soul_op& from);

  inline gp_general_soul_op& operator=(const gp_general_soul_op& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_general_soul_op& default_instance();

  void Swap(gp_general_soul_op* other);

  // implements Message ----------------------------------------------

  gp_general_soul_op* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_general_soul_op& from);
  void MergeFrom(const gp_general_soul_op& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_general_soul_op_soul_operation soul_operation;
  static const soul_operation Summon = gp_general_soul_op_soul_operation_Summon;
  static const soul_operation Gobble = gp_general_soul_op_soul_operation_Gobble;
  static const soul_operation Synthetize = gp_general_soul_op_soul_operation_Synthetize;
  static inline bool soul_operation_IsValid(int value) {
    return gp_general_soul_op_soul_operation_IsValid(value);
  }
  static const soul_operation soul_operation_MIN =
    gp_general_soul_op_soul_operation_soul_operation_MIN;
  static const soul_operation soul_operation_MAX =
    gp_general_soul_op_soul_operation_soul_operation_MAX;
  static const int soul_operation_ARRAYSIZE =
    gp_general_soul_op_soul_operation_soul_operation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  soul_operation_descriptor() {
    return gp_general_soul_op_soul_operation_descriptor();
  }
  static inline const ::std::string& soul_operation_Name(soul_operation value) {
    return gp_general_soul_op_soul_operation_Name(value);
  }
  static inline bool soul_operation_Parse(const ::std::string& name,
      soul_operation* value) {
    return gp_general_soul_op_soul_operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GENERAL_SOUL_OP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 general_tid = 2;
  inline bool has_general_tid() const;
  inline void clear_general_tid();
  static const int kGeneralTidFieldNumber = 2;
  inline ::google::protobuf::int32 general_tid() const;
  inline void set_general_tid(::google::protobuf::int32 value);

  // optional .PB.gp_general_soul_op.soul_operation operation = 3;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 3;
  inline ::PB::gp_general_soul_op_soul_operation operation() const;
  inline void set_operation(::PB::gp_general_soul_op_soul_operation value);

  // @@protoc_insertion_point(class_scope:PB.gp_general_soul_op)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_general_tid();
  inline void clear_has_general_tid();
  inline void set_has_operation();
  inline void clear_has_operation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 general_tid_;
  int operation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_general_soul_op* default_instance_;
};
// -------------------------------------------------------------------

class gp_general_soul_equip_op : public ::google::protobuf::Message {
 public:
  gp_general_soul_equip_op();
  virtual ~gp_general_soul_equip_op();

  gp_general_soul_equip_op(const gp_general_soul_equip_op& from);

  inline gp_general_soul_equip_op& operator=(const gp_general_soul_equip_op& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_general_soul_equip_op& default_instance();

  void Swap(gp_general_soul_equip_op* other);

  // implements Message ----------------------------------------------

  gp_general_soul_equip_op* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_general_soul_equip_op& from);
  void MergeFrom(const gp_general_soul_equip_op& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_general_soul_equip_op_soul_operation soul_operation;
  static const soul_operation On = gp_general_soul_equip_op_soul_operation_On;
  static const soul_operation Off = gp_general_soul_equip_op_soul_operation_Off;
  static const soul_operation Lock = gp_general_soul_equip_op_soul_operation_Lock;
  static const soul_operation Unlock = gp_general_soul_equip_op_soul_operation_Unlock;
  static inline bool soul_operation_IsValid(int value) {
    return gp_general_soul_equip_op_soul_operation_IsValid(value);
  }
  static const soul_operation soul_operation_MIN =
    gp_general_soul_equip_op_soul_operation_soul_operation_MIN;
  static const soul_operation soul_operation_MAX =
    gp_general_soul_equip_op_soul_operation_soul_operation_MAX;
  static const int soul_operation_ARRAYSIZE =
    gp_general_soul_equip_op_soul_operation_soul_operation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  soul_operation_descriptor() {
    return gp_general_soul_equip_op_soul_operation_descriptor();
  }
  static inline const ::std::string& soul_operation_Name(soul_operation value) {
    return gp_general_soul_equip_op_soul_operation_Name(value);
  }
  static inline bool soul_operation_Parse(const ::std::string& name,
      soul_operation* value) {
    return gp_general_soul_equip_op_soul_operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GENERAL_SOUL_EQUIP_OP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::C2S_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::C2S_GS_PROTOC_TYPE value);

  // optional int32 general_tid = 2;
  inline bool has_general_tid() const;
  inline void clear_general_tid();
  static const int kGeneralTidFieldNumber = 2;
  inline ::google::protobuf::int32 general_tid() const;
  inline void set_general_tid(::google::protobuf::int32 value);

  // optional int32 source_index = 3;
  inline bool has_source_index() const;
  inline void clear_source_index();
  static const int kSourceIndexFieldNumber = 3;
  inline ::google::protobuf::int32 source_index() const;
  inline void set_source_index(::google::protobuf::int32 value);

  // optional int32 source_tid = 4;
  inline bool has_source_tid() const;
  inline void clear_source_tid();
  static const int kSourceTidFieldNumber = 4;
  inline ::google::protobuf::int32 source_tid() const;
  inline void set_source_tid(::google::protobuf::int32 value);

  // optional int32 dest_index = 5;
  inline bool has_dest_index() const;
  inline void clear_dest_index();
  static const int kDestIndexFieldNumber = 5;
  inline ::google::protobuf::int32 dest_index() const;
  inline void set_dest_index(::google::protobuf::int32 value);

  // optional int32 dest_tid = 6;
  inline bool has_dest_tid() const;
  inline void clear_dest_tid();
  static const int kDestTidFieldNumber = 6;
  inline ::google::protobuf::int32 dest_tid() const;
  inline void set_dest_tid(::google::protobuf::int32 value);

  // optional .PB.gp_general_soul_equip_op.soul_operation operation = 7;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 7;
  inline ::PB::gp_general_soul_equip_op_soul_operation operation() const;
  inline void set_operation(::PB::gp_general_soul_equip_op_soul_operation value);

  // @@protoc_insertion_point(class_scope:PB.gp_general_soul_equip_op)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_general_tid();
  inline void clear_has_general_tid();
  inline void set_has_source_index();
  inline void clear_has_source_index();
  inline void set_has_source_tid();
  inline void clear_has_source_tid();
  inline void set_has_dest_index();
  inline void clear_has_dest_index();
  inline void set_has_dest_tid();
  inline void clear_has_dest_tid();
  inline void set_has_operation();
  inline void clear_has_operation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 general_tid_;
  ::google::protobuf::int32 source_index_;
  ::google::protobuf::int32 source_tid_;
  ::google::protobuf::int32 dest_index_;
  ::google::protobuf::int32 dest_tid_;
  int operation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_general_soul_equip_op* default_instance_;
};
// -------------------------------------------------------------------

class gp_self_enter_world : public ::google::protobuf::Message {
 public:
  gp_self_enter_world();
  virtual ~gp_self_enter_world();

  gp_self_enter_world(const gp_self_enter_world& from);

  inline gp_self_enter_world& operator=(const gp_self_enter_world& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_self_enter_world& default_instance();

  void Swap(gp_self_enter_world* other);

  // implements Message ----------------------------------------------

  gp_self_enter_world* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_self_enter_world& from);
  void MergeFrom(const gp_self_enter_world& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_self_enter_world];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 world_tid = 4;
  inline bool has_world_tid() const;
  inline void clear_world_tid();
  static const int kWorldTidFieldNumber = 4;
  inline ::google::protobuf::int32 world_tid() const;
  inline void set_world_tid(::google::protobuf::int32 value);

  // required int32 line_id = 2;
  inline bool has_line_id() const;
  inline void clear_line_id();
  static const int kLineIdFieldNumber = 2;
  inline ::google::protobuf::int32 line_id() const;
  inline void set_line_id(::google::protobuf::int32 value);

  // required int32 world_id = 3;
  inline bool has_world_id() const;
  inline void clear_world_id();
  static const int kWorldIdFieldNumber = 3;
  inline ::google::protobuf::int32 world_id() const;
  inline void set_world_id(::google::protobuf::int32 value);

  // required int32 gmt = 5;
  inline bool has_gmt() const;
  inline void clear_gmt();
  static const int kGmtFieldNumber = 5;
  inline ::google::protobuf::int32 gmt() const;
  inline void set_gmt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_self_enter_world)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_world_tid();
  inline void clear_has_world_tid();
  inline void set_has_line_id();
  inline void clear_has_line_id();
  inline void set_has_world_id();
  inline void clear_has_world_id();
  inline void set_has_gmt();
  inline void clear_has_gmt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 world_tid_;
  ::google::protobuf::int32 line_id_;
  ::google::protobuf::int32 world_id_;
  ::google::protobuf::int32 gmt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_self_enter_world* default_instance_;
};
// -------------------------------------------------------------------

class gp_scene_info_param_t : public ::google::protobuf::Message {
 public:
  gp_scene_info_param_t();
  virtual ~gp_scene_info_param_t();

  gp_scene_info_param_t(const gp_scene_info_param_t& from);

  inline gp_scene_info_param_t& operator=(const gp_scene_info_param_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_scene_info_param_t& default_instance();

  void Swap(gp_scene_info_param_t* other);

  // implements Message ----------------------------------------------

  gp_scene_info_param_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_scene_info_param_t& from);
  void MergeFrom(const gp_scene_info_param_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 param = 2;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_scene_info.param_t)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_scene_info_param_t* default_instance_;
};
// -------------------------------------------------------------------

class gp_scene_info : public ::google::protobuf::Message {
 public:
  gp_scene_info();
  virtual ~gp_scene_info();

  gp_scene_info(const gp_scene_info& from);

  inline gp_scene_info& operator=(const gp_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_scene_info& default_instance();

  void Swap(gp_scene_info* other);

  // implements Message ----------------------------------------------

  gp_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_scene_info& from);
  void MergeFrom(const gp_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_scene_info_param_t param_t;

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_scene_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 mirror_id = 9;
  inline bool has_mirror_id() const;
  inline void clear_mirror_id();
  static const int kMirrorIdFieldNumber = 9;
  inline ::google::protobuf::int32 mirror_id() const;
  inline void set_mirror_id(::google::protobuf::int32 value);

  // repeated int32 all_mirrors = 2;
  inline int all_mirrors_size() const;
  inline void clear_all_mirrors();
  static const int kAllMirrorsFieldNumber = 2;
  inline ::google::protobuf::int32 all_mirrors(int index) const;
  inline void set_all_mirrors(int index, ::google::protobuf::int32 value);
  inline void add_all_mirrors(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      all_mirrors() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_all_mirrors();

  // repeated .PB.gp_scene_info.param_t params = 3;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 3;
  inline const ::PB::gp_scene_info_param_t& params(int index) const;
  inline ::PB::gp_scene_info_param_t* mutable_params(int index);
  inline ::PB::gp_scene_info_param_t* add_params();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_scene_info_param_t >&
      params() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::gp_scene_info_param_t >*
      mutable_params();

  // optional int32 lineid = 4;
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineidFieldNumber = 4;
  inline ::google::protobuf::int32 lineid() const;
  inline void set_lineid(::google::protobuf::int32 value);

  // optional int32 mask = 5;
  inline bool has_mask() const;
  inline void clear_mask();
  static const int kMaskFieldNumber = 5;
  inline ::google::protobuf::int32 mask() const;
  inline void set_mask(::google::protobuf::int32 value);

  // optional int32 scene_tid = 6;
  inline bool has_scene_tid() const;
  inline void clear_scene_tid();
  static const int kSceneTidFieldNumber = 6;
  inline ::google::protobuf::int32 scene_tid() const;
  inline void set_scene_tid(::google::protobuf::int32 value);

  // optional int32 server_mod = 7;
  inline bool has_server_mod() const;
  inline void clear_server_mod();
  static const int kServerModFieldNumber = 7;
  inline ::google::protobuf::int32 server_mod() const;
  inline void set_server_mod(::google::protobuf::int32 value);

  // optional bool time_still = 8;
  inline bool has_time_still() const;
  inline void clear_time_still();
  static const int kTimeStillFieldNumber = 8;
  inline bool time_still() const;
  inline void set_time_still(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_scene_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_mirror_id();
  inline void clear_has_mirror_id();
  inline void set_has_lineid();
  inline void clear_has_lineid();
  inline void set_has_mask();
  inline void clear_has_mask();
  inline void set_has_scene_tid();
  inline void clear_has_scene_tid();
  inline void set_has_server_mod();
  inline void clear_has_server_mod();
  inline void set_has_time_still();
  inline void clear_has_time_still();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 mirror_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > all_mirrors_;
  ::google::protobuf::RepeatedPtrField< ::PB::gp_scene_info_param_t > params_;
  ::google::protobuf::int32 lineid_;
  ::google::protobuf::int32 mask_;
  ::google::protobuf::int32 scene_tid_;
  ::google::protobuf::int32 server_mod_;
  bool time_still_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_creature_base_info : public ::google::protobuf::Message {
 public:
  gp_creature_base_info();
  virtual ~gp_creature_base_info();

  gp_creature_base_info(const gp_creature_base_info& from);

  inline gp_creature_base_info& operator=(const gp_creature_base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_creature_base_info& default_instance();

  void Swap(gp_creature_base_info* other);

  // implements Message ----------------------------------------------

  gp_creature_base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_creature_base_info& from);
  void MergeFrom(const gp_creature_base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 clothesid = 1;
  inline bool has_clothesid() const;
  inline void clear_clothesid();
  static const int kClothesidFieldNumber = 1;
  inline ::google::protobuf::int32 clothesid() const;
  inline void set_clothesid(::google::protobuf::int32 value);

  // optional int32 idphoto = 2;
  inline bool has_idphoto() const;
  inline void clear_idphoto();
  static const int kIdphotoFieldNumber = 2;
  inline ::google::protobuf::int32 idphoto() const;
  inline void set_idphoto(::google::protobuf::int32 value);

  // optional int32 faceid = 3;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 3;
  inline ::google::protobuf::int32 faceid() const;
  inline void set_faceid(::google::protobuf::int32 value);

  // optional int32 hairid = 4;
  inline bool has_hairid() const;
  inline void clear_hairid();
  static const int kHairidFieldNumber = 4;
  inline ::google::protobuf::int32 hairid() const;
  inline void set_hairid(::google::protobuf::int32 value);

  // optional int32 haircolor = 5;
  inline bool has_haircolor() const;
  inline void clear_haircolor();
  static const int kHaircolorFieldNumber = 5;
  inline ::google::protobuf::int32 haircolor() const;
  inline void set_haircolor(::google::protobuf::int32 value);

  // optional int32 skincolor = 6;
  inline bool has_skincolor() const;
  inline void clear_skincolor();
  static const int kSkincolorFieldNumber = 6;
  inline ::google::protobuf::int32 skincolor() const;
  inline void set_skincolor(::google::protobuf::int32 value);

  // optional int32 beardid = 7;
  inline bool has_beardid() const;
  inline void clear_beardid();
  static const int kBeardidFieldNumber = 7;
  inline ::google::protobuf::int32 beardid() const;
  inline void set_beardid(::google::protobuf::int32 value);

  // optional int32 tattoo = 8;
  inline bool has_tattoo() const;
  inline void clear_tattoo();
  static const int kTattooFieldNumber = 8;
  inline ::google::protobuf::int32 tattoo() const;
  inline void set_tattoo(::google::protobuf::int32 value);

  // optional int32 sharp = 9;
  inline bool has_sharp() const;
  inline void clear_sharp();
  static const int kSharpFieldNumber = 9;
  inline ::google::protobuf::int32 sharp() const;
  inline void set_sharp(::google::protobuf::int32 value);

  // optional int32 level = 10;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 prof = 11;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 11;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 prof_level = 12;
  inline bool has_prof_level() const;
  inline void clear_prof_level();
  static const int kProfLevelFieldNumber = 12;
  inline ::google::protobuf::int32 prof_level() const;
  inline void set_prof_level(::google::protobuf::int32 value);

  // optional int32 appearance_crc = 13;
  inline bool has_appearance_crc() const;
  inline void clear_appearance_crc();
  static const int kAppearanceCrcFieldNumber = 13;
  inline ::google::protobuf::int32 appearance_crc() const;
  inline void set_appearance_crc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_creature_base_info)
 private:
  inline void set_has_clothesid();
  inline void clear_has_clothesid();
  inline void set_has_idphoto();
  inline void clear_has_idphoto();
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_hairid();
  inline void clear_has_hairid();
  inline void set_has_haircolor();
  inline void clear_has_haircolor();
  inline void set_has_skincolor();
  inline void clear_has_skincolor();
  inline void set_has_beardid();
  inline void clear_has_beardid();
  inline void set_has_tattoo();
  inline void clear_has_tattoo();
  inline void set_has_sharp();
  inline void clear_has_sharp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_prof_level();
  inline void clear_has_prof_level();
  inline void set_has_appearance_crc();
  inline void clear_has_appearance_crc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 clothesid_;
  ::google::protobuf::int32 idphoto_;
  ::google::protobuf::int32 faceid_;
  ::google::protobuf::int32 hairid_;
  ::google::protobuf::int32 haircolor_;
  ::google::protobuf::int32 skincolor_;
  ::google::protobuf::int32 beardid_;
  ::google::protobuf::int32 tattoo_;
  ::google::protobuf::int32 sharp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 prof_level_;
  ::google::protobuf::int32 appearance_crc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_creature_base_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_player_extend_state : public ::google::protobuf::Message {
 public:
  gp_player_extend_state();
  virtual ~gp_player_extend_state();

  gp_player_extend_state(const gp_player_extend_state& from);

  inline gp_player_extend_state& operator=(const gp_player_extend_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_player_extend_state& default_instance();

  void Swap(gp_player_extend_state* other);

  // implements Message ----------------------------------------------

  gp_player_extend_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_player_extend_state& from);
  void MergeFrom(const gp_player_extend_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 extend_state = 1;
  inline bool has_extend_state() const;
  inline void clear_extend_state();
  static const int kExtendStateFieldNumber = 1;
  inline ::google::protobuf::uint64 extend_state() const;
  inline void set_extend_state(::google::protobuf::uint64 value);

  // optional int32 visual_effect = 2;
  inline bool has_visual_effect() const;
  inline void clear_visual_effect();
  static const int kVisualEffectFieldNumber = 2;
  inline ::google::protobuf::int32 visual_effect() const;
  inline void set_visual_effect(::google::protobuf::int32 value);

  // optional int32 action_type = 3;
  inline bool has_action_type() const;
  inline void clear_action_type();
  static const int kActionTypeFieldNumber = 3;
  inline ::google::protobuf::int32 action_type() const;
  inline void set_action_type(::google::protobuf::int32 value);

  // optional int32 action_arg = 4;
  inline bool has_action_arg() const;
  inline void clear_action_arg();
  static const int kActionArgFieldNumber = 4;
  inline ::google::protobuf::int32 action_arg() const;
  inline void set_action_arg(::google::protobuf::int32 value);

  // optional int32 body_size_scale = 5;
  inline bool has_body_size_scale() const;
  inline void clear_body_size_scale();
  static const int kBodySizeScaleFieldNumber = 5;
  inline ::google::protobuf::int32 body_size_scale() const;
  inline void set_body_size_scale(::google::protobuf::int32 value);

  // optional bytes player_signature = 6;
  inline bool has_player_signature() const;
  inline void clear_player_signature();
  static const int kPlayerSignatureFieldNumber = 6;
  inline const ::std::string& player_signature() const;
  inline void set_player_signature(const ::std::string& value);
  inline void set_player_signature(const char* value);
  inline void set_player_signature(const void* value, size_t size);
  inline ::std::string* mutable_player_signature();
  inline ::std::string* release_player_signature();
  inline void set_allocated_player_signature(::std::string* player_signature);

  // optional int32 family_id = 7;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 7;
  inline ::google::protobuf::int32 family_id() const;
  inline void set_family_id(::google::protobuf::int32 value);

  // optional int32 mafia_id = 8;
  inline bool has_mafia_id() const;
  inline void clear_mafia_id();
  static const int kMafiaIdFieldNumber = 8;
  inline ::google::protobuf::int32 mafia_id() const;
  inline void set_mafia_id(::google::protobuf::int32 value);

  // optional int32 mafia_rank = 9;
  inline bool has_mafia_rank() const;
  inline void clear_mafia_rank();
  static const int kMafiaRankFieldNumber = 9;
  inline ::google::protobuf::int32 mafia_rank() const;
  inline void set_mafia_rank(::google::protobuf::int32 value);

  // optional int32 mafia_domain = 10;
  inline bool has_mafia_domain() const;
  inline void clear_mafia_domain();
  static const int kMafiaDomainFieldNumber = 10;
  inline ::google::protobuf::int32 mafia_domain() const;
  inline void set_mafia_domain(::google::protobuf::int32 value);

  // optional int32 mafia_owner = 11;
  inline bool has_mafia_owner() const;
  inline void clear_mafia_owner();
  static const int kMafiaOwnerFieldNumber = 11;
  inline ::google::protobuf::int32 mafia_owner() const;
  inline void set_mafia_owner(::google::protobuf::int32 value);

  // optional int32 title_id = 14;
  inline bool has_title_id() const;
  inline void clear_title_id();
  static const int kTitleIdFieldNumber = 14;
  inline ::google::protobuf::int32 title_id() const;
  inline void set_title_id(::google::protobuf::int32 value);

  // optional bytes tilte = 15;
  inline bool has_tilte() const;
  inline void clear_tilte();
  static const int kTilteFieldNumber = 15;
  inline const ::std::string& tilte() const;
  inline void set_tilte(const ::std::string& value);
  inline void set_tilte(const char* value);
  inline void set_tilte(const void* value, size_t size);
  inline ::std::string* mutable_tilte();
  inline ::std::string* release_tilte();
  inline void set_allocated_tilte(::std::string* tilte);

  // optional int64 spouse_id = 16;
  inline bool has_spouse_id() const;
  inline void clear_spouse_id();
  static const int kSpouseIdFieldNumber = 16;
  inline ::google::protobuf::int64 spouse_id() const;
  inline void set_spouse_id(::google::protobuf::int64 value);

  // optional int32 teamid = 17;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 17;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // optional int32 pos_in_xyxw = 18;
  inline bool has_pos_in_xyxw() const;
  inline void clear_pos_in_xyxw();
  static const int kPosInXyxwFieldNumber = 18;
  inline ::google::protobuf::int32 pos_in_xyxw() const;
  inline void set_pos_in_xyxw(::google::protobuf::int32 value);

  // optional int64 xyxw_id = 19;
  inline bool has_xyxw_id() const;
  inline void clear_xyxw_id();
  static const int kXyxwIdFieldNumber = 19;
  inline ::google::protobuf::int64 xyxw_id() const;
  inline void set_xyxw_id(::google::protobuf::int64 value);

  // optional int32 transform_tid = 20;
  inline bool has_transform_tid() const;
  inline void clear_transform_tid();
  static const int kTransformTidFieldNumber = 20;
  inline ::google::protobuf::int32 transform_tid() const;
  inline void set_transform_tid(::google::protobuf::int32 value);

  // optional int32 native_zoneid = 21;
  inline bool has_native_zoneid() const;
  inline void clear_native_zoneid();
  static const int kNativeZoneidFieldNumber = 21;
  inline ::google::protobuf::int32 native_zoneid() const;
  inline void set_native_zoneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_player_extend_state)
 private:
  inline void set_has_extend_state();
  inline void clear_has_extend_state();
  inline void set_has_visual_effect();
  inline void clear_has_visual_effect();
  inline void set_has_action_type();
  inline void clear_has_action_type();
  inline void set_has_action_arg();
  inline void clear_has_action_arg();
  inline void set_has_body_size_scale();
  inline void clear_has_body_size_scale();
  inline void set_has_player_signature();
  inline void clear_has_player_signature();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_mafia_id();
  inline void clear_has_mafia_id();
  inline void set_has_mafia_rank();
  inline void clear_has_mafia_rank();
  inline void set_has_mafia_domain();
  inline void clear_has_mafia_domain();
  inline void set_has_mafia_owner();
  inline void clear_has_mafia_owner();
  inline void set_has_title_id();
  inline void clear_has_title_id();
  inline void set_has_tilte();
  inline void clear_has_tilte();
  inline void set_has_spouse_id();
  inline void clear_has_spouse_id();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_pos_in_xyxw();
  inline void clear_has_pos_in_xyxw();
  inline void set_has_xyxw_id();
  inline void clear_has_xyxw_id();
  inline void set_has_transform_tid();
  inline void clear_has_transform_tid();
  inline void set_has_native_zoneid();
  inline void clear_has_native_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 extend_state_;
  ::google::protobuf::int32 visual_effect_;
  ::google::protobuf::int32 action_type_;
  ::google::protobuf::int32 action_arg_;
  ::google::protobuf::int32 body_size_scale_;
  ::std::string* player_signature_;
  ::google::protobuf::int32 family_id_;
  ::google::protobuf::int32 mafia_id_;
  ::google::protobuf::int32 mafia_rank_;
  ::google::protobuf::int32 mafia_domain_;
  ::google::protobuf::int32 mafia_owner_;
  ::google::protobuf::int32 title_id_;
  ::std::string* tilte_;
  ::google::protobuf::int64 spouse_id_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 pos_in_xyxw_;
  ::google::protobuf::int64 xyxw_id_;
  ::google::protobuf::int32 transform_tid_;
  ::google::protobuf::int32 native_zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_player_extend_state* default_instance_;
};
// -------------------------------------------------------------------

class gp_player_definite_info : public ::google::protobuf::Message {
 public:
  gp_player_definite_info();
  virtual ~gp_player_definite_info();

  gp_player_definite_info(const gp_player_definite_info& from);

  inline gp_player_definite_info& operator=(const gp_player_definite_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_player_definite_info& default_instance();

  void Swap(gp_player_definite_info* other);

  // implements Message ----------------------------------------------

  gp_player_definite_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_player_definite_info& from);
  void MergeFrom(const gp_player_definite_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_player_definite_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required sint64 roleid = 14;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 14;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required sint32 newobjid = 2;
  inline bool has_newobjid() const;
  inline void clear_newobjid();
  static const int kNewobjidFieldNumber = 2;
  inline ::google::protobuf::int32 newobjid() const;
  inline void set_newobjid(::google::protobuf::int32 value);

  // required .PB.gp_creature_base_info base_info = 3;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 3;
  inline const ::PB::gp_creature_base_info& base_info() const;
  inline ::PB::gp_creature_base_info* mutable_base_info();
  inline ::PB::gp_creature_base_info* release_base_info();
  inline void set_allocated_base_info(::PB::gp_creature_base_info* base_info);

  // required bytes prop = 4;
  inline bool has_prop() const;
  inline void clear_prop();
  static const int kPropFieldNumber = 4;
  inline const ::std::string& prop() const;
  inline void set_prop(const ::std::string& value);
  inline void set_prop(const char* value);
  inline void set_prop(const void* value, size_t size);
  inline ::std::string* mutable_prop();
  inline ::std::string* release_prop();
  inline void set_allocated_prop(::std::string* prop);

  // optional .PB.a3d_pos pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::PB::a3d_pos& pos() const;
  inline ::PB::a3d_pos* mutable_pos();
  inline ::PB::a3d_pos* release_pos();
  inline void set_allocated_pos(::PB::a3d_pos* pos);

  // optional int32 dir = 6;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 6;
  inline ::google::protobuf::int32 dir() const;
  inline void set_dir(::google::protobuf::int32 value);

  // optional int32 faction = 7;
  inline bool has_faction() const;
  inline void clear_faction();
  static const int kFactionFieldNumber = 7;
  inline ::google::protobuf::int32 faction() const;
  inline void set_faction(::google::protobuf::int32 value);

  // optional int32 pk_level = 8;
  inline bool has_pk_level() const;
  inline void clear_pk_level();
  static const int kPkLevelFieldNumber = 8;
  inline ::google::protobuf::int32 pk_level() const;
  inline void set_pk_level(::google::protobuf::int32 value);

  // optional int32 crc = 9;
  inline bool has_crc() const;
  inline void clear_crc();
  static const int kCrcFieldNumber = 9;
  inline ::google::protobuf::int32 crc() const;
  inline void set_crc(::google::protobuf::int32 value);

  // required .PB.gp_player_extend_state extend_state = 10;
  inline bool has_extend_state() const;
  inline void clear_extend_state();
  static const int kExtendStateFieldNumber = 10;
  inline const ::PB::gp_player_extend_state& extend_state() const;
  inline ::PB::gp_player_extend_state* mutable_extend_state();
  inline ::PB::gp_player_extend_state* release_extend_state();
  inline void set_allocated_extend_state(::PB::gp_player_extend_state* extend_state);

  // optional bytes name = 12;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 12;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes alias = 13;
  inline bool has_alias() const;
  inline void clear_alias();
  static const int kAliasFieldNumber = 13;
  inline const ::std::string& alias() const;
  inline void set_alias(const ::std::string& value);
  inline void set_alias(const char* value);
  inline void set_alias(const void* value, size_t size);
  inline ::std::string* mutable_alias();
  inline ::std::string* release_alias();
  inline void set_allocated_alias(::std::string* alias);

  // optional sint32 lock_enemy_state = 15;
  inline bool has_lock_enemy_state() const;
  inline void clear_lock_enemy_state();
  static const int kLockEnemyStateFieldNumber = 15;
  inline ::google::protobuf::int32 lock_enemy_state() const;
  inline void set_lock_enemy_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_player_definite_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_newobjid();
  inline void clear_has_newobjid();
  inline void set_has_base_info();
  inline void clear_has_base_info();
  inline void set_has_prop();
  inline void clear_has_prop();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_faction();
  inline void clear_has_faction();
  inline void set_has_pk_level();
  inline void clear_has_pk_level();
  inline void set_has_crc();
  inline void clear_has_crc();
  inline void set_has_extend_state();
  inline void clear_has_extend_state();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_alias();
  inline void clear_has_alias();
  inline void set_has_lock_enemy_state();
  inline void clear_has_lock_enemy_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 newobjid_;
  ::PB::gp_creature_base_info* base_info_;
  ::std::string* prop_;
  ::PB::a3d_pos* pos_;
  ::google::protobuf::int32 dir_;
  ::google::protobuf::int32 faction_;
  ::google::protobuf::int32 pk_level_;
  ::google::protobuf::int32 crc_;
  ::PB::gp_player_extend_state* extend_state_;
  ::std::string* name_;
  ::std::string* alias_;
  ::google::protobuf::int32 lock_enemy_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_player_definite_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_refresh_result : public ::google::protobuf::Message {
 public:
  gp_equip_refresh_result();
  virtual ~gp_equip_refresh_result();

  gp_equip_refresh_result(const gp_equip_refresh_result& from);

  inline gp_equip_refresh_result& operator=(const gp_equip_refresh_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_refresh_result& default_instance();

  void Swap(gp_equip_refresh_result* other);

  // implements Message ----------------------------------------------

  gp_equip_refresh_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_refresh_result& from);
  void MergeFrom(const gp_equip_refresh_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_refresh_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required uint32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 location() const;
  inline void set_location(::google::protobuf::uint32 value);

  // required uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required uint32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_refresh_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 location_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_refresh_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_gradeup_result : public ::google::protobuf::Message {
 public:
  gp_equip_gradeup_result();
  virtual ~gp_equip_gradeup_result();

  gp_equip_gradeup_result(const gp_equip_gradeup_result& from);

  inline gp_equip_gradeup_result& operator=(const gp_equip_gradeup_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_gradeup_result& default_instance();

  void Swap(gp_equip_gradeup_result* other);

  // implements Message ----------------------------------------------

  gp_equip_gradeup_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_gradeup_result& from);
  void MergeFrom(const gp_equip_gradeup_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_gradeup_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // required bool special = 3;
  inline bool has_special() const;
  inline void clear_special();
  static const int kSpecialFieldNumber = 3;
  inline bool special() const;
  inline void set_special(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_gradeup_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_special();
  inline void clear_has_special();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 ret_;
  bool special_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_gradeup_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_starup_result : public ::google::protobuf::Message {
 public:
  gp_equip_starup_result();
  virtual ~gp_equip_starup_result();

  gp_equip_starup_result(const gp_equip_starup_result& from);

  inline gp_equip_starup_result& operator=(const gp_equip_starup_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_starup_result& default_instance();

  void Swap(gp_equip_starup_result* other);

  // implements Message ----------------------------------------------

  gp_equip_starup_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_starup_result& from);
  void MergeFrom(const gp_equip_starup_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_starup_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required uint32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 location() const;
  inline void set_location(::google::protobuf::uint32 value);

  // required uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required bool result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_starup_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 location_;
  ::google::protobuf::uint32 index_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_starup_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_train_result : public ::google::protobuf::Message {
 public:
  gp_equip_train_result();
  virtual ~gp_equip_train_result();

  gp_equip_train_result(const gp_equip_train_result& from);

  inline gp_equip_train_result& operator=(const gp_equip_train_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_train_result& default_instance();

  void Swap(gp_equip_train_result* other);

  // implements Message ----------------------------------------------

  gp_equip_train_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_train_result& from);
  void MergeFrom(const gp_equip_train_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_train_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 prop_index = 3;
  inline bool has_prop_index() const;
  inline void clear_prop_index();
  static const int kPropIndexFieldNumber = 3;
  inline ::google::protobuf::int32 prop_index() const;
  inline void set_prop_index(::google::protobuf::int32 value);

  // required bool one_button_up = 4;
  inline bool has_one_button_up() const;
  inline void clear_one_button_up();
  static const int kOneButtonUpFieldNumber = 4;
  inline bool one_button_up() const;
  inline void set_one_button_up(bool value);

  // required bool level_up = 5;
  inline bool has_level_up() const;
  inline void clear_level_up();
  static const int kLevelUpFieldNumber = 5;
  inline bool level_up() const;
  inline void set_level_up(bool value);

  // required int32 add = 6;
  inline bool has_add() const;
  inline void clear_add();
  static const int kAddFieldNumber = 6;
  inline ::google::protobuf::int32 add() const;
  inline void set_add(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_train_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_prop_index();
  inline void clear_has_prop_index();
  inline void set_has_one_button_up();
  inline void clear_has_one_button_up();
  inline void set_has_level_up();
  inline void clear_has_level_up();
  inline void set_has_add();
  inline void clear_has_add();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 prop_index_;
  bool one_button_up_;
  bool level_up_;
  ::google::protobuf::int32 add_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_train_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_switch_surface_result : public ::google::protobuf::Message {
 public:
  gp_equip_switch_surface_result();
  virtual ~gp_equip_switch_surface_result();

  gp_equip_switch_surface_result(const gp_equip_switch_surface_result& from);

  inline gp_equip_switch_surface_result& operator=(const gp_equip_switch_surface_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_switch_surface_result& default_instance();

  void Swap(gp_equip_switch_surface_result* other);

  // implements Message ----------------------------------------------

  gp_equip_switch_surface_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_switch_surface_result& from);
  void MergeFrom(const gp_equip_switch_surface_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_switch_surface_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_switch_surface_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_switch_surface_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_gain_surface : public ::google::protobuf::Message {
 public:
  gp_gain_surface();
  virtual ~gp_gain_surface();

  gp_gain_surface(const gp_gain_surface& from);

  inline gp_gain_surface& operator=(const gp_gain_surface& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_gain_surface& default_instance();

  void Swap(gp_gain_surface* other);

  // implements Message ----------------------------------------------

  gp_gain_surface* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_gain_surface& from);
  void MergeFrom(const gp_gain_surface& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_gain_surface];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 surface_tid = 2;
  inline bool has_surface_tid() const;
  inline void clear_surface_tid();
  static const int kSurfaceTidFieldNumber = 2;
  inline ::google::protobuf::int32 surface_tid() const;
  inline void set_surface_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_gain_surface)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_surface_tid();
  inline void clear_has_surface_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 surface_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_gain_surface* default_instance_;
};
// -------------------------------------------------------------------

class gp_revive_times_info : public ::google::protobuf::Message {
 public:
  gp_revive_times_info();
  virtual ~gp_revive_times_info();

  gp_revive_times_info(const gp_revive_times_info& from);

  inline gp_revive_times_info& operator=(const gp_revive_times_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_revive_times_info& default_instance();

  void Swap(gp_revive_times_info* other);

  // implements Message ----------------------------------------------

  gp_revive_times_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_revive_times_info& from);
  void MergeFrom(const gp_revive_times_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_revive_times_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required sint32 stand_revive_times = 2;
  inline bool has_stand_revive_times() const;
  inline void clear_stand_revive_times();
  static const int kStandReviveTimesFieldNumber = 2;
  inline ::google::protobuf::int32 stand_revive_times() const;
  inline void set_stand_revive_times(::google::protobuf::int32 value);

  // required sint32 stand_revive_times_lianxu = 3;
  inline bool has_stand_revive_times_lianxu() const;
  inline void clear_stand_revive_times_lianxu();
  static const int kStandReviveTimesLianxuFieldNumber = 3;
  inline ::google::protobuf::int32 stand_revive_times_lianxu() const;
  inline void set_stand_revive_times_lianxu(::google::protobuf::int32 value);

  // required sint32 perfect_revive_times = 4;
  inline bool has_perfect_revive_times() const;
  inline void clear_perfect_revive_times();
  static const int kPerfectReviveTimesFieldNumber = 4;
  inline ::google::protobuf::int32 perfect_revive_times() const;
  inline void set_perfect_revive_times(::google::protobuf::int32 value);

  // required sint32 perfect_revive_times_lianxu = 5;
  inline bool has_perfect_revive_times_lianxu() const;
  inline void clear_perfect_revive_times_lianxu();
  static const int kPerfectReviveTimesLianxuFieldNumber = 5;
  inline ::google::protobuf::int32 perfect_revive_times_lianxu() const;
  inline void set_perfect_revive_times_lianxu(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_revive_times_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_stand_revive_times();
  inline void clear_has_stand_revive_times();
  inline void set_has_stand_revive_times_lianxu();
  inline void clear_has_stand_revive_times_lianxu();
  inline void set_has_perfect_revive_times();
  inline void clear_has_perfect_revive_times();
  inline void set_has_perfect_revive_times_lianxu();
  inline void clear_has_perfect_revive_times_lianxu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 stand_revive_times_;
  ::google::protobuf::int32 stand_revive_times_lianxu_;
  ::google::protobuf::int32 perfect_revive_times_;
  ::google::protobuf::int32 perfect_revive_times_lianxu_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_revive_times_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_item_combine_result : public ::google::protobuf::Message {
 public:
  gp_item_combine_result();
  virtual ~gp_item_combine_result();

  gp_item_combine_result(const gp_item_combine_result& from);

  inline gp_item_combine_result& operator=(const gp_item_combine_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_item_combine_result& default_instance();

  void Swap(gp_item_combine_result* other);

  // implements Message ----------------------------------------------

  gp_item_combine_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_item_combine_result& from);
  void MergeFrom(const gp_item_combine_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_item_combine_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 stamp = 2;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 2;
  inline ::google::protobuf::int32 stamp() const;
  inline void set_stamp(::google::protobuf::int32 value);

  // required int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_item_combine_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 stamp_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_item_combine_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_nation_escort_mount : public ::google::protobuf::Message {
 public:
  gp_nation_escort_mount();
  virtual ~gp_nation_escort_mount();

  gp_nation_escort_mount(const gp_nation_escort_mount& from);

  inline gp_nation_escort_mount& operator=(const gp_nation_escort_mount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_nation_escort_mount& default_instance();

  void Swap(gp_nation_escort_mount* other);

  // implements Message ----------------------------------------------

  gp_nation_escort_mount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_nation_escort_mount& from);
  void MergeFrom(const gp_nation_escort_mount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_nation_escort_mount];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required int64 npcid = 3;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 3;
  inline ::google::protobuf::int64 npcid() const;
  inline void set_npcid(::google::protobuf::int64 value);

  // required bool mount = 4;
  inline bool has_mount() const;
  inline void clear_mount();
  static const int kMountFieldNumber = 4;
  inline bool mount() const;
  inline void set_mount(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_nation_escort_mount)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_mount();
  inline void clear_has_mount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  bool mount_;
  ::google::protobuf::int64 npcid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_nation_escort_mount* default_instance_;
};
// -------------------------------------------------------------------

class gp_nation_escort_locate : public ::google::protobuf::Message {
 public:
  gp_nation_escort_locate();
  virtual ~gp_nation_escort_locate();

  gp_nation_escort_locate(const gp_nation_escort_locate& from);

  inline gp_nation_escort_locate& operator=(const gp_nation_escort_locate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_nation_escort_locate& default_instance();

  void Swap(gp_nation_escort_locate* other);

  // implements Message ----------------------------------------------

  gp_nation_escort_locate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_nation_escort_locate& from);
  void MergeFrom(const gp_nation_escort_locate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_nation_escort_locate];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int64 npcid = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 2;
  inline ::google::protobuf::int64 npcid() const;
  inline void set_npcid(::google::protobuf::int64 value);

  // required uint32 scene_tag = 3;
  inline bool has_scene_tag() const;
  inline void clear_scene_tag();
  static const int kSceneTagFieldNumber = 3;
  inline ::google::protobuf::uint32 scene_tag() const;
  inline void set_scene_tag(::google::protobuf::uint32 value);

  // required uint32 mirrorid = 4;
  inline bool has_mirrorid() const;
  inline void clear_mirrorid();
  static const int kMirroridFieldNumber = 4;
  inline ::google::protobuf::uint32 mirrorid() const;
  inline void set_mirrorid(::google::protobuf::uint32 value);

  // required .PB.a3d_pos pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::PB::a3d_pos& pos() const;
  inline ::PB::a3d_pos* mutable_pos();
  inline ::PB::a3d_pos* release_pos();
  inline void set_allocated_pos(::PB::a3d_pos* pos);

  // @@protoc_insertion_point(class_scope:PB.gp_nation_escort_locate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_scene_tag();
  inline void clear_has_scene_tag();
  inline void set_has_mirrorid();
  inline void clear_has_mirrorid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 npcid_;
  int type_;
  ::google::protobuf::uint32 scene_tag_;
  ::PB::a3d_pos* pos_;
  ::google::protobuf::uint32 mirrorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_nation_escort_locate* default_instance_;
};
// -------------------------------------------------------------------

class gp_escort_speed_state : public ::google::protobuf::Message {
 public:
  gp_escort_speed_state();
  virtual ~gp_escort_speed_state();

  gp_escort_speed_state(const gp_escort_speed_state& from);

  inline gp_escort_speed_state& operator=(const gp_escort_speed_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_escort_speed_state& default_instance();

  void Swap(gp_escort_speed_state* other);

  // implements Message ----------------------------------------------

  gp_escort_speed_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_escort_speed_state& from);
  void MergeFrom(const gp_escort_speed_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_escort_speed_state];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_escort_speed_state)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_escort_speed_state* default_instance_;
};
// -------------------------------------------------------------------

class gp_transform_state : public ::google::protobuf::Message {
 public:
  gp_transform_state();
  virtual ~gp_transform_state();

  gp_transform_state(const gp_transform_state& from);

  inline gp_transform_state& operator=(const gp_transform_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_transform_state& default_instance();

  void Swap(gp_transform_state* other);

  // implements Message ----------------------------------------------

  gp_transform_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_transform_state& from);
  void MergeFrom(const gp_transform_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_transform_state];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required uint32 tid = 3;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 3;
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_transform_state)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::uint32 tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_transform_state* default_instance_;
};
// -------------------------------------------------------------------

class gp_nation_officer_state : public ::google::protobuf::Message {
 public:
  gp_nation_officer_state();
  virtual ~gp_nation_officer_state();

  gp_nation_officer_state(const gp_nation_officer_state& from);

  inline gp_nation_officer_state& operator=(const gp_nation_officer_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_nation_officer_state& default_instance();

  void Swap(gp_nation_officer_state* other);

  // implements Message ----------------------------------------------

  gp_nation_officer_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_nation_officer_state& from);
  void MergeFrom(const gp_nation_officer_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_nation_officer_state];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required int32 nation_officer = 3;
  inline bool has_nation_officer() const;
  inline void clear_nation_officer();
  static const int kNationOfficerFieldNumber = 3;
  inline ::google::protobuf::int32 nation_officer() const;
  inline void set_nation_officer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_nation_officer_state)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_nation_officer();
  inline void clear_has_nation_officer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 nation_officer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_nation_officer_state* default_instance_;
};
// -------------------------------------------------------------------

class gp_broadcast_value_change : public ::google::protobuf::Message {
 public:
  gp_broadcast_value_change();
  virtual ~gp_broadcast_value_change();

  gp_broadcast_value_change(const gp_broadcast_value_change& from);

  inline gp_broadcast_value_change& operator=(const gp_broadcast_value_change& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_broadcast_value_change& default_instance();

  void Swap(gp_broadcast_value_change* other);

  // implements Message ----------------------------------------------

  gp_broadcast_value_change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_broadcast_value_change& from);
  void MergeFrom(const gp_broadcast_value_change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_broadcast_value_change_VALUE_TYPE VALUE_TYPE;
  static const VALUE_TYPE VT_DUKE_LEVEL = gp_broadcast_value_change_VALUE_TYPE_VT_DUKE_LEVEL;
  static inline bool VALUE_TYPE_IsValid(int value) {
    return gp_broadcast_value_change_VALUE_TYPE_IsValid(value);
  }
  static const VALUE_TYPE VALUE_TYPE_MIN =
    gp_broadcast_value_change_VALUE_TYPE_VALUE_TYPE_MIN;
  static const VALUE_TYPE VALUE_TYPE_MAX =
    gp_broadcast_value_change_VALUE_TYPE_VALUE_TYPE_MAX;
  static const int VALUE_TYPE_ARRAYSIZE =
    gp_broadcast_value_change_VALUE_TYPE_VALUE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VALUE_TYPE_descriptor() {
    return gp_broadcast_value_change_VALUE_TYPE_descriptor();
  }
  static inline const ::std::string& VALUE_TYPE_Name(VALUE_TYPE value) {
    return gp_broadcast_value_change_VALUE_TYPE_Name(value);
  }
  static inline bool VALUE_TYPE_Parse(const ::std::string& name,
      VALUE_TYPE* value) {
    return gp_broadcast_value_change_VALUE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_broadcast_value_change];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required .PB.gp_broadcast_value_change.VALUE_TYPE value_type = 3;
  inline bool has_value_type() const;
  inline void clear_value_type();
  static const int kValueTypeFieldNumber = 3;
  inline ::PB::gp_broadcast_value_change_VALUE_TYPE value_type() const;
  inline void set_value_type(::PB::gp_broadcast_value_change_VALUE_TYPE value);

  // required int32 new_value = 4;
  inline bool has_new_value() const;
  inline void clear_new_value();
  static const int kNewValueFieldNumber = 4;
  inline ::google::protobuf::int32 new_value() const;
  inline void set_new_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_broadcast_value_change)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_value_type();
  inline void clear_has_value_type();
  inline void set_has_new_value();
  inline void clear_has_new_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  int value_type_;
  ::google::protobuf::int32 new_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_broadcast_value_change* default_instance_;
};
// -------------------------------------------------------------------

class gp_object_change_faction : public ::google::protobuf::Message {
 public:
  gp_object_change_faction();
  virtual ~gp_object_change_faction();

  gp_object_change_faction(const gp_object_change_faction& from);

  inline gp_object_change_faction& operator=(const gp_object_change_faction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_object_change_faction& default_instance();

  void Swap(gp_object_change_faction* other);

  // implements Message ----------------------------------------------

  gp_object_change_faction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_object_change_faction& from);
  void MergeFrom(const gp_object_change_faction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_object_change_faction];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required uint32 faction = 3;
  inline bool has_faction() const;
  inline void clear_faction();
  static const int kFactionFieldNumber = 3;
  inline ::google::protobuf::uint32 faction() const;
  inline void set_faction(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_object_change_faction)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_faction();
  inline void clear_has_faction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  int type_;
  ::google::protobuf::uint32 faction_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_object_change_faction* default_instance_;
};
// -------------------------------------------------------------------

class gp_wine_info : public ::google::protobuf::Message {
 public:
  gp_wine_info();
  virtual ~gp_wine_info();

  gp_wine_info(const gp_wine_info& from);

  inline gp_wine_info& operator=(const gp_wine_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_wine_info& default_instance();

  void Swap(gp_wine_info* other);

  // implements Message ----------------------------------------------

  gp_wine_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_wine_info& from);
  void MergeFrom(const gp_wine_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_wine_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required uint32 wine_config_id = 2;
  inline bool has_wine_config_id() const;
  inline void clear_wine_config_id();
  static const int kWineConfigIdFieldNumber = 2;
  inline ::google::protobuf::uint32 wine_config_id() const;
  inline void set_wine_config_id(::google::protobuf::uint32 value);

  // required uint32 wine_remain_drink = 3;
  inline bool has_wine_remain_drink() const;
  inline void clear_wine_remain_drink();
  static const int kWineRemainDrinkFieldNumber = 3;
  inline ::google::protobuf::uint32 wine_remain_drink() const;
  inline void set_wine_remain_drink(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_wine_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_wine_config_id();
  inline void clear_has_wine_config_id();
  inline void set_has_wine_remain_drink();
  inline void clear_has_wine_remain_drink();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 wine_config_id_;
  ::google::protobuf::uint32 wine_remain_drink_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_wine_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_minigame_operate_notify : public ::google::protobuf::Message {
 public:
  gp_minigame_operate_notify();
  virtual ~gp_minigame_operate_notify();

  gp_minigame_operate_notify(const gp_minigame_operate_notify& from);

  inline gp_minigame_operate_notify& operator=(const gp_minigame_operate_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_minigame_operate_notify& default_instance();

  void Swap(gp_minigame_operate_notify* other);

  // implements Message ----------------------------------------------

  gp_minigame_operate_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_minigame_operate_notify& from);
  void MergeFrom(const gp_minigame_operate_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_minigame_operate_notify];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int64 oper_man = 2;
  inline bool has_oper_man() const;
  inline void clear_oper_man();
  static const int kOperManFieldNumber = 2;
  inline ::google::protobuf::int64 oper_man() const;
  inline void set_oper_man(::google::protobuf::int64 value);

  // required uint32 oper = 3;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 3;
  inline ::google::protobuf::uint32 oper() const;
  inline void set_oper(::google::protobuf::uint32 value);

  // required uint32 param1 = 4;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 4;
  inline ::google::protobuf::uint32 param1() const;
  inline void set_param1(::google::protobuf::uint32 value);

  // required uint32 param2 = 5;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 5;
  inline ::google::protobuf::uint32 param2() const;
  inline void set_param2(::google::protobuf::uint32 value);

  // required bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:PB.gp_minigame_operate_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper_man();
  inline void clear_has_oper_man();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 oper_man_;
  int type_;
  ::google::protobuf::uint32 oper_;
  ::google::protobuf::uint32 param1_;
  ::google::protobuf::uint32 param2_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_minigame_operate_notify* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_transfer_reulst : public ::google::protobuf::Message {
 public:
  gp_equip_transfer_reulst();
  virtual ~gp_equip_transfer_reulst();

  gp_equip_transfer_reulst(const gp_equip_transfer_reulst& from);

  inline gp_equip_transfer_reulst& operator=(const gp_equip_transfer_reulst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_transfer_reulst& default_instance();

  void Swap(gp_equip_transfer_reulst* other);

  // implements Message ----------------------------------------------

  gp_equip_transfer_reulst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_transfer_reulst& from);
  void MergeFrom(const gp_equip_transfer_reulst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_transfer_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required uint32 src_location = 2;
  inline bool has_src_location() const;
  inline void clear_src_location();
  static const int kSrcLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 src_location() const;
  inline void set_src_location(::google::protobuf::uint32 value);

  // required uint32 src_index = 3;
  inline bool has_src_index() const;
  inline void clear_src_index();
  static const int kSrcIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 src_index() const;
  inline void set_src_index(::google::protobuf::uint32 value);

  // required uint32 dst_location = 4;
  inline bool has_dst_location() const;
  inline void clear_dst_location();
  static const int kDstLocationFieldNumber = 4;
  inline ::google::protobuf::uint32 dst_location() const;
  inline void set_dst_location(::google::protobuf::uint32 value);

  // required uint32 dst_index = 5;
  inline bool has_dst_index() const;
  inline void clear_dst_index();
  static const int kDstIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 dst_index() const;
  inline void set_dst_index(::google::protobuf::uint32 value);

  // required int32 result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_transfer_reulst)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_src_location();
  inline void clear_has_src_location();
  inline void set_has_src_index();
  inline void clear_has_src_index();
  inline void set_has_dst_location();
  inline void clear_has_dst_location();
  inline void set_has_dst_index();
  inline void clear_has_dst_index();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 src_location_;
  ::google::protobuf::uint32 src_index_;
  ::google::protobuf::uint32 dst_location_;
  ::google::protobuf::uint32 dst_index_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_transfer_reulst* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_refine_reulst : public ::google::protobuf::Message {
 public:
  gp_equip_refine_reulst();
  virtual ~gp_equip_refine_reulst();

  gp_equip_refine_reulst(const gp_equip_refine_reulst& from);

  inline gp_equip_refine_reulst& operator=(const gp_equip_refine_reulst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_refine_reulst& default_instance();

  void Swap(gp_equip_refine_reulst* other);

  // implements Message ----------------------------------------------

  gp_equip_refine_reulst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_refine_reulst& from);
  void MergeFrom(const gp_equip_refine_reulst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_refine_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required uint32 main_location = 2;
  inline bool has_main_location() const;
  inline void clear_main_location();
  static const int kMainLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 main_location() const;
  inline void set_main_location(::google::protobuf::uint32 value);

  // required uint32 main_index = 3;
  inline bool has_main_index() const;
  inline void clear_main_index();
  static const int kMainIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 main_index() const;
  inline void set_main_index(::google::protobuf::uint32 value);

  // required uint32 material_location = 4;
  inline bool has_material_location() const;
  inline void clear_material_location();
  static const int kMaterialLocationFieldNumber = 4;
  inline ::google::protobuf::uint32 material_location() const;
  inline void set_material_location(::google::protobuf::uint32 value);

  // required uint32 material_index = 5;
  inline bool has_material_index() const;
  inline void clear_material_index();
  static const int kMaterialIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 material_index() const;
  inline void set_material_index(::google::protobuf::uint32 value);

  // required int32 result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 random_index = 7;
  inline bool has_random_index() const;
  inline void clear_random_index();
  static const int kRandomIndexFieldNumber = 7;
  inline ::google::protobuf::int32 random_index() const;
  inline void set_random_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_refine_reulst)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_main_location();
  inline void clear_has_main_location();
  inline void set_has_main_index();
  inline void clear_has_main_index();
  inline void set_has_material_location();
  inline void clear_has_material_location();
  inline void set_has_material_index();
  inline void clear_has_material_index();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_random_index();
  inline void clear_has_random_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 main_location_;
  ::google::protobuf::uint32 main_index_;
  ::google::protobuf::uint32 material_location_;
  ::google::protobuf::uint32 material_index_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 random_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_refine_reulst* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_attach_gem_result : public ::google::protobuf::Message {
 public:
  gp_equip_attach_gem_result();
  virtual ~gp_equip_attach_gem_result();

  gp_equip_attach_gem_result(const gp_equip_attach_gem_result& from);

  inline gp_equip_attach_gem_result& operator=(const gp_equip_attach_gem_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_attach_gem_result& default_instance();

  void Swap(gp_equip_attach_gem_result* other);

  // implements Message ----------------------------------------------

  gp_equip_attach_gem_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_attach_gem_result& from);
  void MergeFrom(const gp_equip_attach_gem_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_attach_gem_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required uint32 equip_index = 2;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 equip_index() const;
  inline void set_equip_index(::google::protobuf::uint32 value);

  // required uint32 hole_index = 3;
  inline bool has_hole_index() const;
  inline void clear_hole_index();
  static const int kHoleIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 hole_index() const;
  inline void set_hole_index(::google::protobuf::uint32 value);

  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_attach_gem_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_hole_index();
  inline void clear_has_hole_index();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 equip_index_;
  ::google::protobuf::uint32 hole_index_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_attach_gem_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_detach_gem_result : public ::google::protobuf::Message {
 public:
  gp_equip_detach_gem_result();
  virtual ~gp_equip_detach_gem_result();

  gp_equip_detach_gem_result(const gp_equip_detach_gem_result& from);

  inline gp_equip_detach_gem_result& operator=(const gp_equip_detach_gem_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_detach_gem_result& default_instance();

  void Swap(gp_equip_detach_gem_result* other);

  // implements Message ----------------------------------------------

  gp_equip_detach_gem_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_detach_gem_result& from);
  void MergeFrom(const gp_equip_detach_gem_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_detach_gem_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required uint32 equip_index = 2;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 equip_index() const;
  inline void set_equip_index(::google::protobuf::uint32 value);

  // required uint32 hole_index = 3;
  inline bool has_hole_index() const;
  inline void clear_hole_index();
  static const int kHoleIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 hole_index() const;
  inline void set_hole_index(::google::protobuf::uint32 value);

  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_detach_gem_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_hole_index();
  inline void clear_has_hole_index();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 equip_index_;
  ::google::protobuf::uint32 hole_index_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_detach_gem_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_attach_gem_upgrade_result : public ::google::protobuf::Message {
 public:
  gp_equip_attach_gem_upgrade_result();
  virtual ~gp_equip_attach_gem_upgrade_result();

  gp_equip_attach_gem_upgrade_result(const gp_equip_attach_gem_upgrade_result& from);

  inline gp_equip_attach_gem_upgrade_result& operator=(const gp_equip_attach_gem_upgrade_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_attach_gem_upgrade_result& default_instance();

  void Swap(gp_equip_attach_gem_upgrade_result* other);

  // implements Message ----------------------------------------------

  gp_equip_attach_gem_upgrade_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_attach_gem_upgrade_result& from);
  void MergeFrom(const gp_equip_attach_gem_upgrade_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_attach_gem_upgrade_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required uint32 equip_index = 2;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 equip_index() const;
  inline void set_equip_index(::google::protobuf::uint32 value);

  // required uint32 hole_index = 3;
  inline bool has_hole_index() const;
  inline void clear_hole_index();
  static const int kHoleIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 hole_index() const;
  inline void set_hole_index(::google::protobuf::uint32 value);

  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_attach_gem_upgrade_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_hole_index();
  inline void clear_has_hole_index();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 equip_index_;
  ::google::protobuf::uint32 hole_index_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_attach_gem_upgrade_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_bingfa_info_bingfa_cell : public ::google::protobuf::Message {
 public:
  gp_bingfa_info_bingfa_cell();
  virtual ~gp_bingfa_info_bingfa_cell();

  gp_bingfa_info_bingfa_cell(const gp_bingfa_info_bingfa_cell& from);

  inline gp_bingfa_info_bingfa_cell& operator=(const gp_bingfa_info_bingfa_cell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_bingfa_info_bingfa_cell& default_instance();

  void Swap(gp_bingfa_info_bingfa_cell* other);

  // implements Message ----------------------------------------------

  gp_bingfa_info_bingfa_cell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_bingfa_info_bingfa_cell& from);
  void MergeFrom(const gp_bingfa_info_bingfa_cell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bingfa_id = 1;
  inline bool has_bingfa_id() const;
  inline void clear_bingfa_id();
  static const int kBingfaIdFieldNumber = 1;
  inline ::google::protobuf::int32 bingfa_id() const;
  inline void set_bingfa_id(::google::protobuf::int32 value);

  // required int32 bingfa_level = 2;
  inline bool has_bingfa_level() const;
  inline void clear_bingfa_level();
  static const int kBingfaLevelFieldNumber = 2;
  inline ::google::protobuf::int32 bingfa_level() const;
  inline void set_bingfa_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_bingfa_info.bingfa_cell)
 private:
  inline void set_has_bingfa_id();
  inline void clear_has_bingfa_id();
  inline void set_has_bingfa_level();
  inline void clear_has_bingfa_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bingfa_id_;
  ::google::protobuf::int32 bingfa_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_bingfa_info_bingfa_cell* default_instance_;
};
// -------------------------------------------------------------------

class gp_bingfa_info : public ::google::protobuf::Message {
 public:
  gp_bingfa_info();
  virtual ~gp_bingfa_info();

  gp_bingfa_info(const gp_bingfa_info& from);

  inline gp_bingfa_info& operator=(const gp_bingfa_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_bingfa_info& default_instance();

  void Swap(gp_bingfa_info* other);

  // implements Message ----------------------------------------------

  gp_bingfa_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_bingfa_info& from);
  void MergeFrom(const gp_bingfa_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_bingfa_info_bingfa_cell bingfa_cell;

  typedef gp_bingfa_info_BINGFA_INFO_TYPE BINGFA_INFO_TYPE;
  static const BINGFA_INFO_TYPE BINGFA_INFO_SYNC = gp_bingfa_info_BINGFA_INFO_TYPE_BINGFA_INFO_SYNC;
  static const BINGFA_INFO_TYPE BINGFA_INFO_UPDATE = gp_bingfa_info_BINGFA_INFO_TYPE_BINGFA_INFO_UPDATE;
  static inline bool BINGFA_INFO_TYPE_IsValid(int value) {
    return gp_bingfa_info_BINGFA_INFO_TYPE_IsValid(value);
  }
  static const BINGFA_INFO_TYPE BINGFA_INFO_TYPE_MIN =
    gp_bingfa_info_BINGFA_INFO_TYPE_BINGFA_INFO_TYPE_MIN;
  static const BINGFA_INFO_TYPE BINGFA_INFO_TYPE_MAX =
    gp_bingfa_info_BINGFA_INFO_TYPE_BINGFA_INFO_TYPE_MAX;
  static const int BINGFA_INFO_TYPE_ARRAYSIZE =
    gp_bingfa_info_BINGFA_INFO_TYPE_BINGFA_INFO_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BINGFA_INFO_TYPE_descriptor() {
    return gp_bingfa_info_BINGFA_INFO_TYPE_descriptor();
  }
  static inline const ::std::string& BINGFA_INFO_TYPE_Name(BINGFA_INFO_TYPE value) {
    return gp_bingfa_info_BINGFA_INFO_TYPE_Name(value);
  }
  static inline bool BINGFA_INFO_TYPE_Parse(const ::std::string& name,
      BINGFA_INFO_TYPE* value) {
    return gp_bingfa_info_BINGFA_INFO_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_bingfa_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::int32 location() const;
  inline void set_location(::google::protobuf::int32 value);

  // required .PB.gp_bingfa_info.BINGFA_INFO_TYPE info_type = 3;
  inline bool has_info_type() const;
  inline void clear_info_type();
  static const int kInfoTypeFieldNumber = 3;
  inline ::PB::gp_bingfa_info_BINGFA_INFO_TYPE info_type() const;
  inline void set_info_type(::PB::gp_bingfa_info_BINGFA_INFO_TYPE value);

  // repeated .PB.gp_bingfa_info.bingfa_cell bingfa_cells = 4;
  inline int bingfa_cells_size() const;
  inline void clear_bingfa_cells();
  static const int kBingfaCellsFieldNumber = 4;
  inline const ::PB::gp_bingfa_info_bingfa_cell& bingfa_cells(int index) const;
  inline ::PB::gp_bingfa_info_bingfa_cell* mutable_bingfa_cells(int index);
  inline ::PB::gp_bingfa_info_bingfa_cell* add_bingfa_cells();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_bingfa_info_bingfa_cell >&
      bingfa_cells() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::gp_bingfa_info_bingfa_cell >*
      mutable_bingfa_cells();

  // @@protoc_insertion_point(class_scope:PB.gp_bingfa_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_info_type();
  inline void clear_has_info_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 location_;
  ::google::protobuf::RepeatedPtrField< ::PB::gp_bingfa_info_bingfa_cell > bingfa_cells_;
  int info_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_bingfa_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_wuhun_info_wuhun_cell : public ::google::protobuf::Message {
 public:
  gp_wuhun_info_wuhun_cell();
  virtual ~gp_wuhun_info_wuhun_cell();

  gp_wuhun_info_wuhun_cell(const gp_wuhun_info_wuhun_cell& from);

  inline gp_wuhun_info_wuhun_cell& operator=(const gp_wuhun_info_wuhun_cell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_wuhun_info_wuhun_cell& default_instance();

  void Swap(gp_wuhun_info_wuhun_cell* other);

  // implements Message ----------------------------------------------

  gp_wuhun_info_wuhun_cell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_wuhun_info_wuhun_cell& from);
  void MergeFrom(const gp_wuhun_info_wuhun_cell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 wuhun_node_id = 1;
  inline bool has_wuhun_node_id() const;
  inline void clear_wuhun_node_id();
  static const int kWuhunNodeIdFieldNumber = 1;
  inline ::google::protobuf::int32 wuhun_node_id() const;
  inline void set_wuhun_node_id(::google::protobuf::int32 value);

  // required int32 wuhun_node_level = 2;
  inline bool has_wuhun_node_level() const;
  inline void clear_wuhun_node_level();
  static const int kWuhunNodeLevelFieldNumber = 2;
  inline ::google::protobuf::int32 wuhun_node_level() const;
  inline void set_wuhun_node_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_wuhun_info.wuhun_cell)
 private:
  inline void set_has_wuhun_node_id();
  inline void clear_has_wuhun_node_id();
  inline void set_has_wuhun_node_level();
  inline void clear_has_wuhun_node_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wuhun_node_id_;
  ::google::protobuf::int32 wuhun_node_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_wuhun_info_wuhun_cell* default_instance_;
};
// -------------------------------------------------------------------

class gp_wuhun_info_wuhun_upgrade : public ::google::protobuf::Message {
 public:
  gp_wuhun_info_wuhun_upgrade();
  virtual ~gp_wuhun_info_wuhun_upgrade();

  gp_wuhun_info_wuhun_upgrade(const gp_wuhun_info_wuhun_upgrade& from);

  inline gp_wuhun_info_wuhun_upgrade& operator=(const gp_wuhun_info_wuhun_upgrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_wuhun_info_wuhun_upgrade& default_instance();

  void Swap(gp_wuhun_info_wuhun_upgrade* other);

  // implements Message ----------------------------------------------

  gp_wuhun_info_wuhun_upgrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_wuhun_info_wuhun_upgrade& from);
  void MergeFrom(const gp_wuhun_info_wuhun_upgrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 upgrade_type = 1;
  inline bool has_upgrade_type() const;
  inline void clear_upgrade_type();
  static const int kUpgradeTypeFieldNumber = 1;
  inline ::google::protobuf::int32 upgrade_type() const;
  inline void set_upgrade_type(::google::protobuf::int32 value);

  // optional int32 upgrade_node_id = 2;
  inline bool has_upgrade_node_id() const;
  inline void clear_upgrade_node_id();
  static const int kUpgradeNodeIdFieldNumber = 2;
  inline ::google::protobuf::int32 upgrade_node_id() const;
  inline void set_upgrade_node_id(::google::protobuf::int32 value);

  // optional int32 upgrade_finish_time = 3;
  inline bool has_upgrade_finish_time() const;
  inline void clear_upgrade_finish_time();
  static const int kUpgradeFinishTimeFieldNumber = 3;
  inline ::google::protobuf::int32 upgrade_finish_time() const;
  inline void set_upgrade_finish_time(::google::protobuf::int32 value);

  // optional int32 upgrade_task = 4;
  inline bool has_upgrade_task() const;
  inline void clear_upgrade_task();
  static const int kUpgradeTaskFieldNumber = 4;
  inline ::google::protobuf::int32 upgrade_task() const;
  inline void set_upgrade_task(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_wuhun_info.wuhun_upgrade)
 private:
  inline void set_has_upgrade_type();
  inline void clear_has_upgrade_type();
  inline void set_has_upgrade_node_id();
  inline void clear_has_upgrade_node_id();
  inline void set_has_upgrade_finish_time();
  inline void clear_has_upgrade_finish_time();
  inline void set_has_upgrade_task();
  inline void clear_has_upgrade_task();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 upgrade_type_;
  ::google::protobuf::int32 upgrade_node_id_;
  ::google::protobuf::int32 upgrade_finish_time_;
  ::google::protobuf::int32 upgrade_task_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_wuhun_info_wuhun_upgrade* default_instance_;
};
// -------------------------------------------------------------------

class gp_wuhun_info : public ::google::protobuf::Message {
 public:
  gp_wuhun_info();
  virtual ~gp_wuhun_info();

  gp_wuhun_info(const gp_wuhun_info& from);

  inline gp_wuhun_info& operator=(const gp_wuhun_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_wuhun_info& default_instance();

  void Swap(gp_wuhun_info* other);

  // implements Message ----------------------------------------------

  gp_wuhun_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_wuhun_info& from);
  void MergeFrom(const gp_wuhun_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_wuhun_info_wuhun_cell wuhun_cell;
  typedef gp_wuhun_info_wuhun_upgrade wuhun_upgrade;

  typedef gp_wuhun_info_WUHUN_INFO_TYPE WUHUN_INFO_TYPE;
  static const WUHUN_INFO_TYPE WUHUN_INFO_SYNC = gp_wuhun_info_WUHUN_INFO_TYPE_WUHUN_INFO_SYNC;
  static const WUHUN_INFO_TYPE WUHUN_INFO_UPDATE = gp_wuhun_info_WUHUN_INFO_TYPE_WUHUN_INFO_UPDATE;
  static inline bool WUHUN_INFO_TYPE_IsValid(int value) {
    return gp_wuhun_info_WUHUN_INFO_TYPE_IsValid(value);
  }
  static const WUHUN_INFO_TYPE WUHUN_INFO_TYPE_MIN =
    gp_wuhun_info_WUHUN_INFO_TYPE_WUHUN_INFO_TYPE_MIN;
  static const WUHUN_INFO_TYPE WUHUN_INFO_TYPE_MAX =
    gp_wuhun_info_WUHUN_INFO_TYPE_WUHUN_INFO_TYPE_MAX;
  static const int WUHUN_INFO_TYPE_ARRAYSIZE =
    gp_wuhun_info_WUHUN_INFO_TYPE_WUHUN_INFO_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WUHUN_INFO_TYPE_descriptor() {
    return gp_wuhun_info_WUHUN_INFO_TYPE_descriptor();
  }
  static inline const ::std::string& WUHUN_INFO_TYPE_Name(WUHUN_INFO_TYPE value) {
    return gp_wuhun_info_WUHUN_INFO_TYPE_Name(value);
  }
  static inline bool WUHUN_INFO_TYPE_Parse(const ::std::string& name,
      WUHUN_INFO_TYPE* value) {
    return gp_wuhun_info_WUHUN_INFO_TYPE_Parse(name, value);
  }

  typedef gp_wuhun_info_WUHUN_UPGRADE_STATE WUHUN_UPGRADE_STATE;
  static const WUHUN_UPGRADE_STATE WUHUN_UP_NONE = gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UP_NONE;
  static const WUHUN_UPGRADE_STATE WUHUN_UP_EXP = gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UP_EXP;
  static const WUHUN_UPGRADE_STATE WUHUN_UP_DIAMOND = gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UP_DIAMOND;
  static const WUHUN_UPGRADE_STATE WUHUN_UP_TASK = gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UP_TASK;
  static const WUHUN_UPGRADE_STATE WUHUN_UP_TASK_FINISH = gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UP_TASK_FINISH;
  static inline bool WUHUN_UPGRADE_STATE_IsValid(int value) {
    return gp_wuhun_info_WUHUN_UPGRADE_STATE_IsValid(value);
  }
  static const WUHUN_UPGRADE_STATE WUHUN_UPGRADE_STATE_MIN =
    gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UPGRADE_STATE_MIN;
  static const WUHUN_UPGRADE_STATE WUHUN_UPGRADE_STATE_MAX =
    gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UPGRADE_STATE_MAX;
  static const int WUHUN_UPGRADE_STATE_ARRAYSIZE =
    gp_wuhun_info_WUHUN_UPGRADE_STATE_WUHUN_UPGRADE_STATE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WUHUN_UPGRADE_STATE_descriptor() {
    return gp_wuhun_info_WUHUN_UPGRADE_STATE_descriptor();
  }
  static inline const ::std::string& WUHUN_UPGRADE_STATE_Name(WUHUN_UPGRADE_STATE value) {
    return gp_wuhun_info_WUHUN_UPGRADE_STATE_Name(value);
  }
  static inline bool WUHUN_UPGRADE_STATE_Parse(const ::std::string& name,
      WUHUN_UPGRADE_STATE* value) {
    return gp_wuhun_info_WUHUN_UPGRADE_STATE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_wuhun_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required .PB.gp_wuhun_info.WUHUN_INFO_TYPE info_type = 2;
  inline bool has_info_type() const;
  inline void clear_info_type();
  static const int kInfoTypeFieldNumber = 2;
  inline ::PB::gp_wuhun_info_WUHUN_INFO_TYPE info_type() const;
  inline void set_info_type(::PB::gp_wuhun_info_WUHUN_INFO_TYPE value);

  // repeated int32 wuhun_pages = 3;
  inline int wuhun_pages_size() const;
  inline void clear_wuhun_pages();
  static const int kWuhunPagesFieldNumber = 3;
  inline ::google::protobuf::int32 wuhun_pages(int index) const;
  inline void set_wuhun_pages(int index, ::google::protobuf::int32 value);
  inline void add_wuhun_pages(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      wuhun_pages() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_wuhun_pages();

  // repeated .PB.gp_wuhun_info.wuhun_cell wuhun_nodes = 4;
  inline int wuhun_nodes_size() const;
  inline void clear_wuhun_nodes();
  static const int kWuhunNodesFieldNumber = 4;
  inline const ::PB::gp_wuhun_info_wuhun_cell& wuhun_nodes(int index) const;
  inline ::PB::gp_wuhun_info_wuhun_cell* mutable_wuhun_nodes(int index);
  inline ::PB::gp_wuhun_info_wuhun_cell* add_wuhun_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_wuhun_info_wuhun_cell >&
      wuhun_nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::gp_wuhun_info_wuhun_cell >*
      mutable_wuhun_nodes();

  // optional .PB.gp_wuhun_info.wuhun_upgrade upgrade_info = 5;
  inline bool has_upgrade_info() const;
  inline void clear_upgrade_info();
  static const int kUpgradeInfoFieldNumber = 5;
  inline const ::PB::gp_wuhun_info_wuhun_upgrade& upgrade_info() const;
  inline ::PB::gp_wuhun_info_wuhun_upgrade* mutable_upgrade_info();
  inline ::PB::gp_wuhun_info_wuhun_upgrade* release_upgrade_info();
  inline void set_allocated_upgrade_info(::PB::gp_wuhun_info_wuhun_upgrade* upgrade_info);

  // @@protoc_insertion_point(class_scope:PB.gp_wuhun_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info_type();
  inline void clear_has_info_type();
  inline void set_has_upgrade_info();
  inline void clear_has_upgrade_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int info_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > wuhun_pages_;
  ::google::protobuf::RepeatedPtrField< ::PB::gp_wuhun_info_wuhun_cell > wuhun_nodes_;
  ::PB::gp_wuhun_info_wuhun_upgrade* upgrade_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_wuhun_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_pk_man : public ::google::protobuf::Message {
 public:
  gp_pk_man();
  virtual ~gp_pk_man();

  gp_pk_man(const gp_pk_man& from);

  inline gp_pk_man& operator=(const gp_pk_man& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_pk_man& default_instance();

  void Swap(gp_pk_man* other);

  // implements Message ----------------------------------------------

  gp_pk_man* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_pk_man& from);
  void MergeFrom(const gp_pk_man& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_pk_man];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional int32 pk_level = 3;
  inline bool has_pk_level() const;
  inline void clear_pk_level();
  static const int kPkLevelFieldNumber = 3;
  inline ::google::protobuf::int32 pk_level() const;
  inline void set_pk_level(::google::protobuf::int32 value);

  // optional int32 pk_setting = 4;
  inline bool has_pk_setting() const;
  inline void clear_pk_setting();
  static const int kPkSettingFieldNumber = 4;
  inline ::google::protobuf::int32 pk_setting() const;
  inline void set_pk_setting(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_pk_man)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_pk_level();
  inline void clear_has_pk_level();
  inline void set_has_pk_setting();
  inline void clear_has_pk_setting();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 pk_level_;
  ::google::protobuf::int32 pk_setting_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_pk_man* default_instance_;
};
// -------------------------------------------------------------------

class gp_fight_back_list : public ::google::protobuf::Message {
 public:
  gp_fight_back_list();
  virtual ~gp_fight_back_list();

  gp_fight_back_list(const gp_fight_back_list& from);

  inline gp_fight_back_list& operator=(const gp_fight_back_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_fight_back_list& default_instance();

  void Swap(gp_fight_back_list* other);

  // implements Message ----------------------------------------------

  gp_fight_back_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_fight_back_list& from);
  void MergeFrom(const gp_fight_back_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_fight_back_list];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional bool insert = 2;
  inline bool has_insert() const;
  inline void clear_insert();
  static const int kInsertFieldNumber = 2;
  inline bool insert() const;
  inline void set_insert(bool value);

  // optional int64 roleid = 4;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 4;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.gp_fight_back_list)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_insert();
  inline void clear_has_insert();
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  bool insert_;
  ::google::protobuf::int64 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_fight_back_list* default_instance_;
};
// -------------------------------------------------------------------

class gp_auto_reward_list_reward_entry : public ::google::protobuf::Message {
 public:
  gp_auto_reward_list_reward_entry();
  virtual ~gp_auto_reward_list_reward_entry();

  gp_auto_reward_list_reward_entry(const gp_auto_reward_list_reward_entry& from);

  inline gp_auto_reward_list_reward_entry& operator=(const gp_auto_reward_list_reward_entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_auto_reward_list_reward_entry& default_instance();

  void Swap(gp_auto_reward_list_reward_entry* other);

  // implements Message ----------------------------------------------

  gp_auto_reward_list_reward_entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_auto_reward_list_reward_entry& from);
  void MergeFrom(const gp_auto_reward_list_reward_entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline ::google::protobuf::int32 reward() const;
  inline void set_reward(::google::protobuf::int32 value);

  // required int64 data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::int64 data() const;
  inline void set_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.gp_auto_reward_list.reward_entry)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 reward_;
  ::google::protobuf::int64 data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_auto_reward_list_reward_entry* default_instance_;
};
// -------------------------------------------------------------------

class gp_auto_reward_list : public ::google::protobuf::Message {
 public:
  gp_auto_reward_list();
  virtual ~gp_auto_reward_list();

  gp_auto_reward_list(const gp_auto_reward_list& from);

  inline gp_auto_reward_list& operator=(const gp_auto_reward_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_auto_reward_list& default_instance();

  void Swap(gp_auto_reward_list* other);

  // implements Message ----------------------------------------------

  gp_auto_reward_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_auto_reward_list& from);
  void MergeFrom(const gp_auto_reward_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_auto_reward_list_reward_entry reward_entry;

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_auto_reward_list];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // repeated .PB.gp_auto_reward_list.reward_entry entry = 2;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 2;
  inline const ::PB::gp_auto_reward_list_reward_entry& entry(int index) const;
  inline ::PB::gp_auto_reward_list_reward_entry* mutable_entry(int index);
  inline ::PB::gp_auto_reward_list_reward_entry* add_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_auto_reward_list_reward_entry >&
      entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::gp_auto_reward_list_reward_entry >*
      mutable_entry();

  // @@protoc_insertion_point(class_scope:PB.gp_auto_reward_list)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::gp_auto_reward_list_reward_entry > entry_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_auto_reward_list* default_instance_;
};
// -------------------------------------------------------------------

class gp_vip_info_online_info : public ::google::protobuf::Message {
 public:
  gp_vip_info_online_info();
  virtual ~gp_vip_info_online_info();

  gp_vip_info_online_info(const gp_vip_info_online_info& from);

  inline gp_vip_info_online_info& operator=(const gp_vip_info_online_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_vip_info_online_info& default_instance();

  void Swap(gp_vip_info_online_info* other);

  // implements Message ----------------------------------------------

  gp_vip_info_online_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_vip_info_online_info& from);
  void MergeFrom(const gp_vip_info_online_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 save_second = 1;
  inline bool has_save_second() const;
  inline void clear_save_second();
  static const int kSaveSecondFieldNumber = 1;
  inline ::google::protobuf::int64 save_second() const;
  inline void set_save_second(::google::protobuf::int64 value);

  // optional int64 offline_second = 2;
  inline bool has_offline_second() const;
  inline void clear_offline_second();
  static const int kOfflineSecondFieldNumber = 2;
  inline ::google::protobuf::int64 offline_second() const;
  inline void set_offline_second(::google::protobuf::int64 value);

  // optional int64 logout_exp_last = 3;
  inline bool has_logout_exp_last() const;
  inline void clear_logout_exp_last();
  static const int kLogoutExpLastFieldNumber = 3;
  inline ::google::protobuf::int64 logout_exp_last() const;
  inline void set_logout_exp_last(::google::protobuf::int64 value);

  // optional int64 login_timestamp = 4;
  inline bool has_login_timestamp() const;
  inline void clear_login_timestamp();
  static const int kLoginTimestampFieldNumber = 4;
  inline ::google::protobuf::int64 login_timestamp() const;
  inline void set_login_timestamp(::google::protobuf::int64 value);

  // optional int32 online_second = 5;
  inline bool has_online_second() const;
  inline void clear_online_second();
  static const int kOnlineSecondFieldNumber = 5;
  inline ::google::protobuf::int32 online_second() const;
  inline void set_online_second(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_vip_info.online_info)
 private:
  inline void set_has_save_second();
  inline void clear_has_save_second();
  inline void set_has_offline_second();
  inline void clear_has_offline_second();
  inline void set_has_logout_exp_last();
  inline void clear_has_logout_exp_last();
  inline void set_has_login_timestamp();
  inline void clear_has_login_timestamp();
  inline void set_has_online_second();
  inline void clear_has_online_second();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 save_second_;
  ::google::protobuf::int64 offline_second_;
  ::google::protobuf::int64 logout_exp_last_;
  ::google::protobuf::int64 login_timestamp_;
  ::google::protobuf::int32 online_second_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_vip_info_online_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_vip_info : public ::google::protobuf::Message {
 public:
  gp_vip_info();
  virtual ~gp_vip_info();

  gp_vip_info(const gp_vip_info& from);

  inline gp_vip_info& operator=(const gp_vip_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_vip_info& default_instance();

  void Swap(gp_vip_info* other);

  // implements Message ----------------------------------------------

  gp_vip_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_vip_info& from);
  void MergeFrom(const gp_vip_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_vip_info_online_info online_info;

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_vip_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional uint32 cur_vip_level = 2;
  inline bool has_cur_vip_level() const;
  inline void clear_cur_vip_level();
  static const int kCurVipLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_vip_level() const;
  inline void set_cur_vip_level(::google::protobuf::uint32 value);

  // optional uint32 reward_vip_level = 3;
  inline bool has_reward_vip_level() const;
  inline void clear_reward_vip_level();
  static const int kRewardVipLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 reward_vip_level() const;
  inline void set_reward_vip_level(::google::protobuf::uint32 value);

  // optional uint32 reward_vip_end_time = 4;
  inline bool has_reward_vip_end_time() const;
  inline void clear_reward_vip_end_time();
  static const int kRewardVipEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 reward_vip_end_time() const;
  inline void set_reward_vip_end_time(::google::protobuf::uint32 value);

  // optional int32 new_id = 5;
  inline bool has_new_id() const;
  inline void clear_new_id();
  static const int kNewIdFieldNumber = 5;
  inline ::google::protobuf::int32 new_id() const;
  inline void set_new_id(::google::protobuf::int32 value);

  // optional bool system_close = 6 [default = false];
  inline bool has_system_close() const;
  inline void clear_system_close();
  static const int kSystemCloseFieldNumber = 6;
  inline bool system_close() const;
  inline void set_system_close(bool value);

  // optional uint32 buy_force_times_today = 7;
  inline bool has_buy_force_times_today() const;
  inline void clear_buy_force_times_today();
  static const int kBuyForceTimesTodayFieldNumber = 7;
  inline ::google::protobuf::uint32 buy_force_times_today() const;
  inline void set_buy_force_times_today(::google::protobuf::uint32 value);

  // optional .PB.gp_vip_info.online_info online = 8;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 8;
  inline const ::PB::gp_vip_info_online_info& online() const;
  inline ::PB::gp_vip_info_online_info* mutable_online();
  inline ::PB::gp_vip_info_online_info* release_online();
  inline void set_allocated_online(::PB::gp_vip_info_online_info* online);

  // optional uint32 vip_upgrade_time = 9;
  inline bool has_vip_upgrade_time() const;
  inline void clear_vip_upgrade_time();
  static const int kVipUpgradeTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 vip_upgrade_time() const;
  inline void set_vip_upgrade_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_vip_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cur_vip_level();
  inline void clear_has_cur_vip_level();
  inline void set_has_reward_vip_level();
  inline void clear_has_reward_vip_level();
  inline void set_has_reward_vip_end_time();
  inline void clear_has_reward_vip_end_time();
  inline void set_has_new_id();
  inline void clear_has_new_id();
  inline void set_has_system_close();
  inline void clear_has_system_close();
  inline void set_has_buy_force_times_today();
  inline void clear_has_buy_force_times_today();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_vip_upgrade_time();
  inline void clear_has_vip_upgrade_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 cur_vip_level_;
  ::google::protobuf::uint32 reward_vip_level_;
  ::google::protobuf::uint32 reward_vip_end_time_;
  ::google::protobuf::int32 new_id_;
  bool system_close_;
  ::PB::gp_vip_info_online_info* online_;
  ::google::protobuf::uint32 buy_force_times_today_;
  ::google::protobuf::uint32 vip_upgrade_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_vip_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_object_state : public ::google::protobuf::Message {
 public:
  gp_object_state();
  virtual ~gp_object_state();

  gp_object_state(const gp_object_state& from);

  inline gp_object_state& operator=(const gp_object_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_object_state& default_instance();

  void Swap(gp_object_state* other);

  // implements Message ----------------------------------------------

  gp_object_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_object_state& from);
  void MergeFrom(const gp_object_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_object_state];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional uint64 object_state = 3;
  inline bool has_object_state() const;
  inline void clear_object_state();
  static const int kObjectStateFieldNumber = 3;
  inline ::google::protobuf::uint64 object_state() const;
  inline void set_object_state(::google::protobuf::uint64 value);

  // optional uint32 mount_tid = 4;
  inline bool has_mount_tid() const;
  inline void clear_mount_tid();
  static const int kMountTidFieldNumber = 4;
  inline ::google::protobuf::uint32 mount_tid() const;
  inline void set_mount_tid(::google::protobuf::uint32 value);

  // optional bool clear_quit_state = 5;
  inline bool has_clear_quit_state() const;
  inline void clear_clear_quit_state();
  static const int kClearQuitStateFieldNumber = 5;
  inline bool clear_quit_state() const;
  inline void set_clear_quit_state(bool value);

  // optional uint32 mount_quality = 6;
  inline bool has_mount_quality() const;
  inline void clear_mount_quality();
  static const int kMountQualityFieldNumber = 6;
  inline ::google::protobuf::uint32 mount_quality() const;
  inline void set_mount_quality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_object_state)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_object_state();
  inline void clear_has_object_state();
  inline void set_has_mount_tid();
  inline void clear_has_mount_tid();
  inline void set_has_clear_quit_state();
  inline void clear_has_clear_quit_state();
  inline void set_has_mount_quality();
  inline void clear_has_mount_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::uint32 mount_tid_;
  ::google::protobuf::uint64 object_state_;
  bool clear_quit_state_;
  ::google::protobuf::uint32 mount_quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_object_state* default_instance_;
};
// -------------------------------------------------------------------

class gp_hero_defined_info_hero_info : public ::google::protobuf::Message {
 public:
  gp_hero_defined_info_hero_info();
  virtual ~gp_hero_defined_info_hero_info();

  gp_hero_defined_info_hero_info(const gp_hero_defined_info_hero_info& from);

  inline gp_hero_defined_info_hero_info& operator=(const gp_hero_defined_info_hero_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_hero_defined_info_hero_info& default_instance();

  void Swap(gp_hero_defined_info_hero_info* other);

  // implements Message ----------------------------------------------

  gp_hero_defined_info_hero_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_hero_defined_info_hero_info& from);
  void MergeFrom(const gp_hero_defined_info_hero_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional bytes property = 3;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 3;
  inline const ::std::string& property() const;
  inline void set_property(const ::std::string& value);
  inline void set_property(const char* value);
  inline void set_property(const void* value, size_t size);
  inline ::std::string* mutable_property();
  inline ::std::string* release_property();
  inline void set_allocated_property(::std::string* property);

  // optional int32 quality = 4;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 4;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 exp = 5;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 5;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 prof_exp = 7;
  inline bool has_prof_exp() const;
  inline void clear_prof_exp();
  static const int kProfExpFieldNumber = 7;
  inline ::google::protobuf::int32 prof_exp() const;
  inline void set_prof_exp(::google::protobuf::int32 value);

  // optional int32 prof_level = 8;
  inline bool has_prof_level() const;
  inline void clear_prof_level();
  static const int kProfLevelFieldNumber = 8;
  inline ::google::protobuf::int32 prof_level() const;
  inline void set_prof_level(::google::protobuf::int32 value);

  // optional bool is_summoned = 9;
  inline bool has_is_summoned() const;
  inline void clear_is_summoned();
  static const int kIsSummonedFieldNumber = 9;
  inline bool is_summoned() const;
  inline void set_is_summoned(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_hero_defined_info.hero_info)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_property();
  inline void clear_has_property();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_prof_exp();
  inline void clear_has_prof_exp();
  inline void set_has_prof_level();
  inline void clear_has_prof_level();
  inline void set_has_is_summoned();
  inline void clear_has_is_summoned();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 tid_;
  ::std::string* property_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 prof_exp_;
  ::google::protobuf::int32 prof_level_;
  bool is_summoned_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_hero_defined_info_hero_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_hero_defined_info : public ::google::protobuf::Message {
 public:
  gp_hero_defined_info();
  virtual ~gp_hero_defined_info();

  gp_hero_defined_info(const gp_hero_defined_info& from);

  inline gp_hero_defined_info& operator=(const gp_hero_defined_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_hero_defined_info& default_instance();

  void Swap(gp_hero_defined_info* other);

  // implements Message ----------------------------------------------

  gp_hero_defined_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_hero_defined_info& from);
  void MergeFrom(const gp_hero_defined_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_hero_defined_info_hero_info hero_info;

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_hero_defined_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // repeated .PB.gp_hero_defined_info.hero_info heros = 3;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 3;
  inline const ::PB::gp_hero_defined_info_hero_info& heros(int index) const;
  inline ::PB::gp_hero_defined_info_hero_info* mutable_heros(int index);
  inline ::PB::gp_hero_defined_info_hero_info* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_hero_defined_info_hero_info >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::gp_hero_defined_info_hero_info >*
      mutable_heros();

  // optional int32 cmd_type = 4;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 4;
  inline ::google::protobuf::int32 cmd_type() const;
  inline void set_cmd_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_hero_defined_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 cmd_type_;
  ::google::protobuf::RepeatedPtrField< ::PB::gp_hero_defined_info_hero_info > heros_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_hero_defined_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_hero_incre_info : public ::google::protobuf::Message {
 public:
  gp_hero_incre_info();
  virtual ~gp_hero_incre_info();

  gp_hero_incre_info(const gp_hero_incre_info& from);

  inline gp_hero_incre_info& operator=(const gp_hero_incre_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_hero_incre_info& default_instance();

  void Swap(gp_hero_incre_info* other);

  // implements Message ----------------------------------------------

  gp_hero_incre_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_hero_incre_info& from);
  void MergeFrom(const gp_hero_incre_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_hero_incre_info_CMD_TYPE CMD_TYPE;
  static const CMD_TYPE MODIFY_PROF_EXP = gp_hero_incre_info_CMD_TYPE_MODIFY_PROF_EXP;
  static const CMD_TYPE MODIFY_EXP = gp_hero_incre_info_CMD_TYPE_MODIFY_EXP;
  static const CMD_TYPE PROF_LEVEL_UP = gp_hero_incre_info_CMD_TYPE_PROF_LEVEL_UP;
  static const CMD_TYPE SUMMON_HERO = gp_hero_incre_info_CMD_TYPE_SUMMON_HERO;
  static inline bool CMD_TYPE_IsValid(int value) {
    return gp_hero_incre_info_CMD_TYPE_IsValid(value);
  }
  static const CMD_TYPE CMD_TYPE_MIN =
    gp_hero_incre_info_CMD_TYPE_CMD_TYPE_MIN;
  static const CMD_TYPE CMD_TYPE_MAX =
    gp_hero_incre_info_CMD_TYPE_CMD_TYPE_MAX;
  static const int CMD_TYPE_ARRAYSIZE =
    gp_hero_incre_info_CMD_TYPE_CMD_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMD_TYPE_descriptor() {
    return gp_hero_incre_info_CMD_TYPE_descriptor();
  }
  static inline const ::std::string& CMD_TYPE_Name(CMD_TYPE value) {
    return gp_hero_incre_info_CMD_TYPE_Name(value);
  }
  static inline bool CMD_TYPE_Parse(const ::std::string& name,
      CMD_TYPE* value) {
    return gp_hero_incre_info_CMD_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_hero_incre_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required .PB.gp_hero_incre_info.CMD_TYPE cmd_type = 3;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 3;
  inline ::PB::gp_hero_incre_info_CMD_TYPE cmd_type() const;
  inline void set_cmd_type(::PB::gp_hero_incre_info_CMD_TYPE value);

  // optional int32 quality = 4;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 4;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 exp = 5;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 5;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 prof_exp = 7;
  inline bool has_prof_exp() const;
  inline void clear_prof_exp();
  static const int kProfExpFieldNumber = 7;
  inline ::google::protobuf::int32 prof_exp() const;
  inline void set_prof_exp(::google::protobuf::int32 value);

  // optional int32 prof_level = 8;
  inline bool has_prof_level() const;
  inline void clear_prof_level();
  static const int kProfLevelFieldNumber = 8;
  inline ::google::protobuf::int32 prof_level() const;
  inline void set_prof_level(::google::protobuf::int32 value);

  // optional bool is_summoned = 9;
  inline bool has_is_summoned() const;
  inline void clear_is_summoned();
  static const int kIsSummonedFieldNumber = 9;
  inline bool is_summoned() const;
  inline void set_is_summoned(bool value);

  // optional int32 value = 10;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 10;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional bool is_level_up = 11;
  inline bool has_is_level_up() const;
  inline void clear_is_level_up();
  static const int kIsLevelUpFieldNumber = 11;
  inline bool is_level_up() const;
  inline void set_is_level_up(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_hero_incre_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_prof_exp();
  inline void clear_has_prof_exp();
  inline void set_has_prof_level();
  inline void clear_has_prof_level();
  inline void set_has_is_summoned();
  inline void clear_has_is_summoned();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_is_level_up();
  inline void clear_has_is_level_up();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 index_;
  int cmd_type_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 prof_exp_;
  ::google::protobuf::int32 prof_level_;
  ::google::protobuf::int32 value_;
  bool is_summoned_;
  bool is_level_up_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_hero_incre_info* default_instance_;
};
// -------------------------------------------------------------------

class enemy_info : public ::google::protobuf::Message {
 public:
  enemy_info();
  virtual ~enemy_info();

  enemy_info(const enemy_info& from);

  inline enemy_info& operator=(const enemy_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enemy_info& default_instance();

  void Swap(enemy_info* other);

  // implements Message ----------------------------------------------

  enemy_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enemy_info& from);
  void MergeFrom(const enemy_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required int32 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // optional bytes role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const void* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // @@protoc_insertion_point(class_scope:PB.enemy_info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_role_name();
  inline void clear_has_role_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  ::std::string* role_name_;
  ::google::protobuf::int32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static enemy_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_enemy_list : public ::google::protobuf::Message {
 public:
  gp_enemy_list();
  virtual ~gp_enemy_list();

  gp_enemy_list(const gp_enemy_list& from);

  inline gp_enemy_list& operator=(const gp_enemy_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_enemy_list& default_instance();

  void Swap(gp_enemy_list* other);

  // implements Message ----------------------------------------------

  gp_enemy_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_enemy_list& from);
  void MergeFrom(const gp_enemy_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_enemy_list];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 mode = 2;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // repeated .PB.enemy_info enemy_infos = 3;
  inline int enemy_infos_size() const;
  inline void clear_enemy_infos();
  static const int kEnemyInfosFieldNumber = 3;
  inline const ::PB::enemy_info& enemy_infos(int index) const;
  inline ::PB::enemy_info* mutable_enemy_infos(int index);
  inline ::PB::enemy_info* add_enemy_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::enemy_info >&
      enemy_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::enemy_info >*
      mutable_enemy_infos();

  // @@protoc_insertion_point(class_scope:PB.gp_enemy_list)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::RepeatedPtrField< ::PB::enemy_info > enemy_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_enemy_list* default_instance_;
};
// -------------------------------------------------------------------

class gp_auto_combat_config_s2c : public ::google::protobuf::Message {
 public:
  gp_auto_combat_config_s2c();
  virtual ~gp_auto_combat_config_s2c();

  gp_auto_combat_config_s2c(const gp_auto_combat_config_s2c& from);

  inline gp_auto_combat_config_s2c& operator=(const gp_auto_combat_config_s2c& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_auto_combat_config_s2c& default_instance();

  void Swap(gp_auto_combat_config_s2c* other);

  // implements Message ----------------------------------------------

  gp_auto_combat_config_s2c* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_auto_combat_config_s2c& from);
  void MergeFrom(const gp_auto_combat_config_s2c& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_auto_combat_config];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.auto_combat_config config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::PB::auto_combat_config& config() const;
  inline ::PB::auto_combat_config* mutable_config();
  inline ::PB::auto_combat_config* release_config();
  inline void set_allocated_config(::PB::auto_combat_config* config);

  // @@protoc_insertion_point(class_scope:PB.gp_auto_combat_config_s2c)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::auto_combat_config* config_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_auto_combat_config_s2c* default_instance_;
};
// -------------------------------------------------------------------

class gp_lottery_prize_repu_str : public ::google::protobuf::Message {
 public:
  gp_lottery_prize_repu_str();
  virtual ~gp_lottery_prize_repu_str();

  gp_lottery_prize_repu_str(const gp_lottery_prize_repu_str& from);

  inline gp_lottery_prize_repu_str& operator=(const gp_lottery_prize_repu_str& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_lottery_prize_repu_str& default_instance();

  void Swap(gp_lottery_prize_repu_str* other);

  // implements Message ----------------------------------------------

  gp_lottery_prize_repu_str* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_lottery_prize_repu_str& from);
  void MergeFrom(const gp_lottery_prize_repu_str& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 repuid = 1;
  inline bool has_repuid() const;
  inline void clear_repuid();
  static const int kRepuidFieldNumber = 1;
  inline ::google::protobuf::uint32 repuid() const;
  inline void set_repuid(::google::protobuf::uint32 value);

  // optional uint32 repu_value = 2;
  inline bool has_repu_value() const;
  inline void clear_repu_value();
  static const int kRepuValueFieldNumber = 2;
  inline ::google::protobuf::uint32 repu_value() const;
  inline void set_repu_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_lottery_prize.repu_str)
 private:
  inline void set_has_repuid();
  inline void clear_has_repuid();
  inline void set_has_repu_value();
  inline void clear_has_repu_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 repuid_;
  ::google::protobuf::uint32 repu_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_lottery_prize_repu_str* default_instance_;
};
// -------------------------------------------------------------------

class gp_lottery_prize_item_str : public ::google::protobuf::Message {
 public:
  gp_lottery_prize_item_str();
  virtual ~gp_lottery_prize_item_str();

  gp_lottery_prize_item_str(const gp_lottery_prize_item_str& from);

  inline gp_lottery_prize_item_str& operator=(const gp_lottery_prize_item_str& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_lottery_prize_item_str& default_instance();

  void Swap(gp_lottery_prize_item_str* other);

  // implements Message ----------------------------------------------

  gp_lottery_prize_item_str* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_lottery_prize_item_str& from);
  void MergeFrom(const gp_lottery_prize_item_str& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 quality = 3;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_lottery_prize.item_str)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_lottery_prize_item_str* default_instance_;
};
// -------------------------------------------------------------------

class gp_lottery_prize : public ::google::protobuf::Message {
 public:
  gp_lottery_prize();
  virtual ~gp_lottery_prize();

  gp_lottery_prize(const gp_lottery_prize& from);

  inline gp_lottery_prize& operator=(const gp_lottery_prize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_lottery_prize& default_instance();

  void Swap(gp_lottery_prize* other);

  // implements Message ----------------------------------------------

  gp_lottery_prize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_lottery_prize& from);
  void MergeFrom(const gp_lottery_prize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_lottery_prize_repu_str repu_str;
  typedef gp_lottery_prize_item_str item_str;

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_lottery_prize];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional uint32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint64 bind_money = 3;
  inline bool has_bind_money() const;
  inline void clear_bind_money();
  static const int kBindMoneyFieldNumber = 3;
  inline ::google::protobuf::uint64 bind_money() const;
  inline void set_bind_money(::google::protobuf::uint64 value);

  // optional uint64 trade_money = 4;
  inline bool has_trade_money() const;
  inline void clear_trade_money();
  static const int kTradeMoneyFieldNumber = 4;
  inline ::google::protobuf::uint64 trade_money() const;
  inline void set_trade_money(::google::protobuf::uint64 value);

  // optional uint32 prof_exp = 5;
  inline bool has_prof_exp() const;
  inline void clear_prof_exp();
  static const int kProfExpFieldNumber = 5;
  inline ::google::protobuf::uint32 prof_exp() const;
  inline void set_prof_exp(::google::protobuf::uint32 value);

  // optional uint32 exp = 6;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // repeated .PB.gp_lottery_prize.repu_str repus = 7;
  inline int repus_size() const;
  inline void clear_repus();
  static const int kRepusFieldNumber = 7;
  inline const ::PB::gp_lottery_prize_repu_str& repus(int index) const;
  inline ::PB::gp_lottery_prize_repu_str* mutable_repus(int index);
  inline ::PB::gp_lottery_prize_repu_str* add_repus();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_lottery_prize_repu_str >&
      repus() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::gp_lottery_prize_repu_str >*
      mutable_repus();

  // repeated .PB.gp_lottery_prize.item_str itmes = 8;
  inline int itmes_size() const;
  inline void clear_itmes();
  static const int kItmesFieldNumber = 8;
  inline const ::PB::gp_lottery_prize_item_str& itmes(int index) const;
  inline ::PB::gp_lottery_prize_item_str* mutable_itmes(int index);
  inline ::PB::gp_lottery_prize_item_str* add_itmes();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_lottery_prize_item_str >&
      itmes() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::gp_lottery_prize_item_str >*
      mutable_itmes();

  // optional uint32 vp = 9;
  inline bool has_vp() const;
  inline void clear_vp();
  static const int kVpFieldNumber = 9;
  inline ::google::protobuf::uint32 vp() const;
  inline void set_vp(::google::protobuf::uint32 value);

  // optional uint32 cur_service_tid = 10;
  inline bool has_cur_service_tid() const;
  inline void clear_cur_service_tid();
  static const int kCurServiceTidFieldNumber = 10;
  inline ::google::protobuf::uint32 cur_service_tid() const;
  inline void set_cur_service_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_lottery_prize)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_bind_money();
  inline void clear_has_bind_money();
  inline void set_has_trade_money();
  inline void clear_has_trade_money();
  inline void set_has_prof_exp();
  inline void clear_has_prof_exp();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_vp();
  inline void clear_has_vp();
  inline void set_has_cur_service_tid();
  inline void clear_has_cur_service_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint64 bind_money_;
  ::google::protobuf::uint64 trade_money_;
  ::google::protobuf::uint32 prof_exp_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::RepeatedPtrField< ::PB::gp_lottery_prize_repu_str > repus_;
  ::google::protobuf::RepeatedPtrField< ::PB::gp_lottery_prize_item_str > itmes_;
  ::google::protobuf::uint32 vp_;
  ::google::protobuf::uint32 cur_service_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_lottery_prize* default_instance_;
};
// -------------------------------------------------------------------

class gp_suit_info : public ::google::protobuf::Message {
 public:
  gp_suit_info();
  virtual ~gp_suit_info();

  gp_suit_info(const gp_suit_info& from);

  inline gp_suit_info& operator=(const gp_suit_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_suit_info& default_instance();

  void Swap(gp_suit_info* other);

  // implements Message ----------------------------------------------

  gp_suit_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_suit_info& from);
  void MergeFrom(const gp_suit_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_suit_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional uint32 quality_suit_id = 2;
  inline bool has_quality_suit_id() const;
  inline void clear_quality_suit_id();
  static const int kQualitySuitIdFieldNumber = 2;
  inline ::google::protobuf::uint32 quality_suit_id() const;
  inline void set_quality_suit_id(::google::protobuf::uint32 value);

  // optional uint32 star_suit_id = 3;
  inline bool has_star_suit_id() const;
  inline void clear_star_suit_id();
  static const int kStarSuitIdFieldNumber = 3;
  inline ::google::protobuf::uint32 star_suit_id() const;
  inline void set_star_suit_id(::google::protobuf::uint32 value);

  // optional bool is_init = 4;
  inline bool has_is_init() const;
  inline void clear_is_init();
  static const int kIsInitFieldNumber = 4;
  inline bool is_init() const;
  inline void set_is_init(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_suit_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_quality_suit_id();
  inline void clear_has_quality_suit_id();
  inline void set_has_star_suit_id();
  inline void clear_has_star_suit_id();
  inline void set_has_is_init();
  inline void clear_has_is_init();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 quality_suit_id_;
  ::google::protobuf::uint32 star_suit_id_;
  bool is_init_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_suit_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_attack_loop : public ::google::protobuf::Message {
 public:
  gp_attack_loop();
  virtual ~gp_attack_loop();

  gp_attack_loop(const gp_attack_loop& from);

  inline gp_attack_loop& operator=(const gp_attack_loop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_attack_loop& default_instance();

  void Swap(gp_attack_loop* other);

  // implements Message ----------------------------------------------

  gp_attack_loop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_attack_loop& from);
  void MergeFrom(const gp_attack_loop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_attack_loop];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional uint32 object_new_id = 2;
  inline bool has_object_new_id() const;
  inline void clear_object_new_id();
  static const int kObjectNewIdFieldNumber = 2;
  inline ::google::protobuf::uint32 object_new_id() const;
  inline void set_object_new_id(::google::protobuf::uint32 value);

  // optional bool start = 3;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 3;
  inline bool start() const;
  inline void set_start(bool value);

  // optional uint32 skill = 4;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 4;
  inline ::google::protobuf::uint32 skill() const;
  inline void set_skill(::google::protobuf::uint32 value);

  // optional uint32 target_new_id = 5;
  inline bool has_target_new_id() const;
  inline void clear_target_new_id();
  static const int kTargetNewIdFieldNumber = 5;
  inline ::google::protobuf::uint32 target_new_id() const;
  inline void set_target_new_id(::google::protobuf::uint32 value);

  // optional bool is_main_hand = 6;
  inline bool has_is_main_hand() const;
  inline void clear_is_main_hand();
  static const int kIsMainHandFieldNumber = 6;
  inline bool is_main_hand() const;
  inline void set_is_main_hand(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_attack_loop)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_object_new_id();
  inline void clear_has_object_new_id();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_target_new_id();
  inline void clear_has_target_new_id();
  inline void set_has_is_main_hand();
  inline void clear_has_is_main_hand();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 object_new_id_;
  ::google::protobuf::uint32 skill_;
  bool start_;
  bool is_main_hand_;
  ::google::protobuf::uint32 target_new_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_attack_loop* default_instance_;
};
// -------------------------------------------------------------------

class gp_operation_result : public ::google::protobuf::Message {
 public:
  gp_operation_result();
  virtual ~gp_operation_result();

  gp_operation_result(const gp_operation_result& from);

  inline gp_operation_result& operator=(const gp_operation_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_operation_result& default_instance();

  void Swap(gp_operation_result* other);

  // implements Message ----------------------------------------------

  gp_operation_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_operation_result& from);
  void MergeFrom(const gp_operation_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_operation_result_OPER_TYPE OPER_TYPE;
  static const OPER_TYPE OT_NATION_DONATE = gp_operation_result_OPER_TYPE_OT_NATION_DONATE;
  static inline bool OPER_TYPE_IsValid(int value) {
    return gp_operation_result_OPER_TYPE_IsValid(value);
  }
  static const OPER_TYPE OPER_TYPE_MIN =
    gp_operation_result_OPER_TYPE_OPER_TYPE_MIN;
  static const OPER_TYPE OPER_TYPE_MAX =
    gp_operation_result_OPER_TYPE_OPER_TYPE_MAX;
  static const int OPER_TYPE_ARRAYSIZE =
    gp_operation_result_OPER_TYPE_OPER_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPER_TYPE_descriptor() {
    return gp_operation_result_OPER_TYPE_descriptor();
  }
  static inline const ::std::string& OPER_TYPE_Name(OPER_TYPE value) {
    return gp_operation_result_OPER_TYPE_Name(value);
  }
  static inline bool OPER_TYPE_Parse(const ::std::string& name,
      OPER_TYPE* value) {
    return gp_operation_result_OPER_TYPE_Parse(name, value);
  }

  typedef gp_operation_result_OPER_RESULT OPER_RESULT;
  static const OPER_RESULT OR_NATION_DONATE_SUCCESS = gp_operation_result_OPER_RESULT_OR_NATION_DONATE_SUCCESS;
  static const OPER_RESULT OR_NATION_DONATE_FAIL = gp_operation_result_OPER_RESULT_OR_NATION_DONATE_FAIL;
  static inline bool OPER_RESULT_IsValid(int value) {
    return gp_operation_result_OPER_RESULT_IsValid(value);
  }
  static const OPER_RESULT OPER_RESULT_MIN =
    gp_operation_result_OPER_RESULT_OPER_RESULT_MIN;
  static const OPER_RESULT OPER_RESULT_MAX =
    gp_operation_result_OPER_RESULT_OPER_RESULT_MAX;
  static const int OPER_RESULT_ARRAYSIZE =
    gp_operation_result_OPER_RESULT_OPER_RESULT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPER_RESULT_descriptor() {
    return gp_operation_result_OPER_RESULT_descriptor();
  }
  static inline const ::std::string& OPER_RESULT_Name(OPER_RESULT value) {
    return gp_operation_result_OPER_RESULT_Name(value);
  }
  static inline bool OPER_RESULT_Parse(const ::std::string& name,
      OPER_RESULT* value) {
    return gp_operation_result_OPER_RESULT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_operation_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.gp_operation_result.OPER_TYPE oper_type = 2;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 2;
  inline ::PB::gp_operation_result_OPER_TYPE oper_type() const;
  inline void set_oper_type(::PB::gp_operation_result_OPER_TYPE value);

  // optional .PB.gp_operation_result.OPER_RESULT oper_result = 3;
  inline bool has_oper_result() const;
  inline void clear_oper_result();
  static const int kOperResultFieldNumber = 3;
  inline ::PB::gp_operation_result_OPER_RESULT oper_result() const;
  inline void set_oper_result(::PB::gp_operation_result_OPER_RESULT value);

  // @@protoc_insertion_point(class_scope:PB.gp_operation_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_oper_result();
  inline void clear_has_oper_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int oper_type_;
  int oper_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_operation_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_start_cg : public ::google::protobuf::Message {
 public:
  gp_start_cg();
  virtual ~gp_start_cg();

  gp_start_cg(const gp_start_cg& from);

  inline gp_start_cg& operator=(const gp_start_cg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_start_cg& default_instance();

  void Swap(gp_start_cg* other);

  // implements Message ----------------------------------------------

  gp_start_cg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_start_cg& from);
  void MergeFrom(const gp_start_cg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_start_cg];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 cg_id = 2;
  inline bool has_cg_id() const;
  inline void clear_cg_id();
  static const int kCgIdFieldNumber = 2;
  inline ::google::protobuf::int32 cg_id() const;
  inline void set_cg_id(::google::protobuf::int32 value);

  // optional bool stop_attack = 3 [default = false];
  inline bool has_stop_attack() const;
  inline void clear_stop_attack();
  static const int kStopAttackFieldNumber = 3;
  inline bool stop_attack() const;
  inline void set_stop_attack(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_start_cg)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cg_id();
  inline void clear_has_cg_id();
  inline void set_has_stop_attack();
  inline void clear_has_stop_attack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 cg_id_;
  bool stop_attack_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_start_cg* default_instance_;
};
// -------------------------------------------------------------------

class gp_stop_cg : public ::google::protobuf::Message {
 public:
  gp_stop_cg();
  virtual ~gp_stop_cg();

  gp_stop_cg(const gp_stop_cg& from);

  inline gp_stop_cg& operator=(const gp_stop_cg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_stop_cg& default_instance();

  void Swap(gp_stop_cg* other);

  // implements Message ----------------------------------------------

  gp_stop_cg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_stop_cg& from);
  void MergeFrom(const gp_stop_cg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_stop_cg];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional bool cg_player_complete = 2 [default = true];
  inline bool has_cg_player_complete() const;
  inline void clear_cg_player_complete();
  static const int kCgPlayerCompleteFieldNumber = 2;
  inline bool cg_player_complete() const;
  inline void set_cg_player_complete(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_stop_cg)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cg_player_complete();
  inline void clear_has_cg_player_complete();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  bool cg_player_complete_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_stop_cg* default_instance_;
};
// -------------------------------------------------------------------

class gp_player_stune_config : public ::google::protobuf::Message {
 public:
  gp_player_stune_config();
  virtual ~gp_player_stune_config();

  gp_player_stune_config(const gp_player_stune_config& from);

  inline gp_player_stune_config& operator=(const gp_player_stune_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_player_stune_config& default_instance();

  void Swap(gp_player_stune_config* other);

  // implements Message ----------------------------------------------

  gp_player_stune_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_player_stune_config& from);
  void MergeFrom(const gp_player_stune_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_stunt_config];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.player_stune_config config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::PB::player_stune_config& config() const;
  inline ::PB::player_stune_config* mutable_config();
  inline ::PB::player_stune_config* release_config();
  inline void set_allocated_config(::PB::player_stune_config* config);

  // @@protoc_insertion_point(class_scope:PB.gp_player_stune_config)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::player_stune_config* config_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_player_stune_config* default_instance_;
};
// -------------------------------------------------------------------

class gp_stunt_config_res : public ::google::protobuf::Message {
 public:
  gp_stunt_config_res();
  virtual ~gp_stunt_config_res();

  gp_stunt_config_res(const gp_stunt_config_res& from);

  inline gp_stunt_config_res& operator=(const gp_stunt_config_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_stunt_config_res& default_instance();

  void Swap(gp_stunt_config_res* other);

  // implements Message ----------------------------------------------

  gp_stunt_config_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_stunt_config_res& from);
  void MergeFrom(const gp_stunt_config_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_stunt_config_res];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 retcode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required .PB.STUNT_CONFIG_TYPE op = 3;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 3;
  inline ::PB::STUNT_CONFIG_TYPE op() const;
  inline void set_op(::PB::STUNT_CONFIG_TYPE value);

  // optional int32 rune_set_index = 4;
  inline bool has_rune_set_index() const;
  inline void clear_rune_set_index();
  static const int kRuneSetIndexFieldNumber = 4;
  inline ::google::protobuf::int32 rune_set_index() const;
  inline void set_rune_set_index(::google::protobuf::int32 value);

  // optional int32 master_skill_id = 5;
  inline bool has_master_skill_id() const;
  inline void clear_master_skill_id();
  static const int kMasterSkillIdFieldNumber = 5;
  inline ::google::protobuf::int32 master_skill_id() const;
  inline void set_master_skill_id(::google::protobuf::int32 value);

  // optional int32 rune_index = 6;
  inline bool has_rune_index() const;
  inline void clear_rune_index();
  static const int kRuneIndexFieldNumber = 6;
  inline ::google::protobuf::int32 rune_index() const;
  inline void set_rune_index(::google::protobuf::int32 value);

  // optional int32 ret_value = 7;
  inline bool has_ret_value() const;
  inline void clear_ret_value();
  static const int kRetValueFieldNumber = 7;
  inline ::google::protobuf::int32 ret_value() const;
  inline void set_ret_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_stunt_config_res)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_rune_set_index();
  inline void clear_has_rune_set_index();
  inline void set_has_master_skill_id();
  inline void clear_has_master_skill_id();
  inline void set_has_rune_index();
  inline void clear_has_rune_index();
  inline void set_has_ret_value();
  inline void clear_has_ret_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 retcode_;
  int op_;
  ::google::protobuf::int32 rune_set_index_;
  ::google::protobuf::int32 master_skill_id_;
  ::google::protobuf::int32 rune_index_;
  ::google::protobuf::int32 ret_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_stunt_config_res* default_instance_;
};
// -------------------------------------------------------------------

class gp_card_data_notify : public ::google::protobuf::Message {
 public:
  gp_card_data_notify();
  virtual ~gp_card_data_notify();

  gp_card_data_notify(const gp_card_data_notify& from);

  inline gp_card_data_notify& operator=(const gp_card_data_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_card_data_notify& default_instance();

  void Swap(gp_card_data_notify* other);

  // implements Message ----------------------------------------------

  gp_card_data_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_card_data_notify& from);
  void MergeFrom(const gp_card_data_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_card_data_notify_N_TYPE N_TYPE;
  static const N_TYPE N_TYPE_SYNCALL = gp_card_data_notify_N_TYPE_N_TYPE_SYNCALL;
  static const N_TYPE N_TYPE_ADDCARD = gp_card_data_notify_N_TYPE_N_TYPE_ADDCARD;
  static const N_TYPE N_TYPE_ACTIVESUIT = gp_card_data_notify_N_TYPE_N_TYPE_ACTIVESUIT;
  static const N_TYPE N_TYPE_DECOMPOSE = gp_card_data_notify_N_TYPE_N_TYPE_DECOMPOSE;
  static inline bool N_TYPE_IsValid(int value) {
    return gp_card_data_notify_N_TYPE_IsValid(value);
  }
  static const N_TYPE N_TYPE_MIN =
    gp_card_data_notify_N_TYPE_N_TYPE_MIN;
  static const N_TYPE N_TYPE_MAX =
    gp_card_data_notify_N_TYPE_N_TYPE_MAX;
  static const int N_TYPE_ARRAYSIZE =
    gp_card_data_notify_N_TYPE_N_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  N_TYPE_descriptor() {
    return gp_card_data_notify_N_TYPE_descriptor();
  }
  static inline const ::std::string& N_TYPE_Name(N_TYPE value) {
    return gp_card_data_notify_N_TYPE_Name(value);
  }
  static inline bool N_TYPE_Parse(const ::std::string& name,
      N_TYPE* value) {
    return gp_card_data_notify_N_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_card_data_notify];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required .PB.gp_card_data_notify.N_TYPE notify_type = 2;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 2;
  inline ::PB::gp_card_data_notify_N_TYPE notify_type() const;
  inline void set_notify_type(::PB::gp_card_data_notify_N_TYPE value);

  // repeated .PB.card_info cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::PB::card_info& cards(int index) const;
  inline ::PB::card_info* mutable_cards(int index);
  inline ::PB::card_info* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::card_info >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::card_info >*
      mutable_cards();

  // repeated int32 card_suits = 4;
  inline int card_suits_size() const;
  inline void clear_card_suits();
  static const int kCardSuitsFieldNumber = 4;
  inline ::google::protobuf::int32 card_suits(int index) const;
  inline void set_card_suits(int index, ::google::protobuf::int32 value);
  inline void add_card_suits(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card_suits() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card_suits();

  // @@protoc_insertion_point(class_scope:PB.gp_card_data_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_notify_type();
  inline void clear_has_notify_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int notify_type_;
  ::google::protobuf::RepeatedPtrField< ::PB::card_info > cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_suits_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_card_data_notify* default_instance_;
};
// -------------------------------------------------------------------

class gp_load_protoc_finish : public ::google::protobuf::Message {
 public:
  gp_load_protoc_finish();
  virtual ~gp_load_protoc_finish();

  gp_load_protoc_finish(const gp_load_protoc_finish& from);

  inline gp_load_protoc_finish& operator=(const gp_load_protoc_finish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_load_protoc_finish& default_instance();

  void Swap(gp_load_protoc_finish* other);

  // implements Message ----------------------------------------------

  gp_load_protoc_finish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_load_protoc_finish& from);
  void MergeFrom(const gp_load_protoc_finish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_load_protoc_finish];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional bool is_login = 2;
  inline bool has_is_login() const;
  inline void clear_is_login();
  static const int kIsLoginFieldNumber = 2;
  inline bool is_login() const;
  inline void set_is_login(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_load_protoc_finish)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_login();
  inline void clear_has_is_login();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  bool is_login_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_load_protoc_finish* default_instance_;
};
// -------------------------------------------------------------------

class gp_magicshop_notify : public ::google::protobuf::Message {
 public:
  gp_magicshop_notify();
  virtual ~gp_magicshop_notify();

  gp_magicshop_notify(const gp_magicshop_notify& from);

  inline gp_magicshop_notify& operator=(const gp_magicshop_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_magicshop_notify& default_instance();

  void Swap(gp_magicshop_notify* other);

  // implements Message ----------------------------------------------

  gp_magicshop_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_magicshop_notify& from);
  void MergeFrom(const gp_magicshop_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_magicshop_notify_NOTIFY_TYPE NOTIFY_TYPE;
  static const NOTIFY_TYPE NT_SYNCALL = gp_magicshop_notify_NOTIFY_TYPE_NT_SYNCALL;
  static const NOTIFY_TYPE NT_UPDATE_SHOP = gp_magicshop_notify_NOTIFY_TYPE_NT_UPDATE_SHOP;
  static const NOTIFY_TYPE NT_UPDATE_GOODS = gp_magicshop_notify_NOTIFY_TYPE_NT_UPDATE_GOODS;
  static inline bool NOTIFY_TYPE_IsValid(int value) {
    return gp_magicshop_notify_NOTIFY_TYPE_IsValid(value);
  }
  static const NOTIFY_TYPE NOTIFY_TYPE_MIN =
    gp_magicshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_MIN;
  static const NOTIFY_TYPE NOTIFY_TYPE_MAX =
    gp_magicshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_MAX;
  static const int NOTIFY_TYPE_ARRAYSIZE =
    gp_magicshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NOTIFY_TYPE_descriptor() {
    return gp_magicshop_notify_NOTIFY_TYPE_descriptor();
  }
  static inline const ::std::string& NOTIFY_TYPE_Name(NOTIFY_TYPE value) {
    return gp_magicshop_notify_NOTIFY_TYPE_Name(value);
  }
  static inline bool NOTIFY_TYPE_Parse(const ::std::string& name,
      NOTIFY_TYPE* value) {
    return gp_magicshop_notify_NOTIFY_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_climbtower_magic_shop];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required .PB.gp_magicshop_notify.NOTIFY_TYPE notify_type = 2;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 2;
  inline ::PB::gp_magicshop_notify_NOTIFY_TYPE notify_type() const;
  inline void set_notify_type(::PB::gp_magicshop_notify_NOTIFY_TYPE value);

  // repeated .PB.climbtower_magic_shop_info climbtower_shops = 3;
  inline int climbtower_shops_size() const;
  inline void clear_climbtower_shops();
  static const int kClimbtowerShopsFieldNumber = 3;
  inline const ::PB::climbtower_magic_shop_info& climbtower_shops(int index) const;
  inline ::PB::climbtower_magic_shop_info* mutable_climbtower_shops(int index);
  inline ::PB::climbtower_magic_shop_info* add_climbtower_shops();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info >&
      climbtower_shops() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info >*
      mutable_climbtower_shops();

  // @@protoc_insertion_point(class_scope:PB.gp_magicshop_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_notify_type();
  inline void clear_has_notify_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int notify_type_;
  ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info > climbtower_shops_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_magicshop_notify* default_instance_;
};
// -------------------------------------------------------------------

class gp_blackshop_notify : public ::google::protobuf::Message {
 public:
  gp_blackshop_notify();
  virtual ~gp_blackshop_notify();

  gp_blackshop_notify(const gp_blackshop_notify& from);

  inline gp_blackshop_notify& operator=(const gp_blackshop_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_blackshop_notify& default_instance();

  void Swap(gp_blackshop_notify* other);

  // implements Message ----------------------------------------------

  gp_blackshop_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_blackshop_notify& from);
  void MergeFrom(const gp_blackshop_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_blackshop_notify_NOTIFY_TYPE NOTIFY_TYPE;
  static const NOTIFY_TYPE NT_SYNCALL = gp_blackshop_notify_NOTIFY_TYPE_NT_SYNCALL;
  static const NOTIFY_TYPE NT_UPDATE_SHOP = gp_blackshop_notify_NOTIFY_TYPE_NT_UPDATE_SHOP;
  static const NOTIFY_TYPE NT_UPDATE_GOODS = gp_blackshop_notify_NOTIFY_TYPE_NT_UPDATE_GOODS;
  static inline bool NOTIFY_TYPE_IsValid(int value) {
    return gp_blackshop_notify_NOTIFY_TYPE_IsValid(value);
  }
  static const NOTIFY_TYPE NOTIFY_TYPE_MIN =
    gp_blackshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_MIN;
  static const NOTIFY_TYPE NOTIFY_TYPE_MAX =
    gp_blackshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_MAX;
  static const int NOTIFY_TYPE_ARRAYSIZE =
    gp_blackshop_notify_NOTIFY_TYPE_NOTIFY_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NOTIFY_TYPE_descriptor() {
    return gp_blackshop_notify_NOTIFY_TYPE_descriptor();
  }
  static inline const ::std::string& NOTIFY_TYPE_Name(NOTIFY_TYPE value) {
    return gp_blackshop_notify_NOTIFY_TYPE_Name(value);
  }
  static inline bool NOTIFY_TYPE_Parse(const ::std::string& name,
      NOTIFY_TYPE* value) {
    return gp_blackshop_notify_NOTIFY_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_blackshop_notify];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required .PB.gp_blackshop_notify.NOTIFY_TYPE notify_type = 2;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 2;
  inline ::PB::gp_blackshop_notify_NOTIFY_TYPE notify_type() const;
  inline void set_notify_type(::PB::gp_blackshop_notify_NOTIFY_TYPE value);

  // repeated .PB.black_shop_info shops = 3;
  inline int shops_size() const;
  inline void clear_shops();
  static const int kShopsFieldNumber = 3;
  inline const ::PB::black_shop_info& shops(int index) const;
  inline ::PB::black_shop_info* mutable_shops(int index);
  inline ::PB::black_shop_info* add_shops();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info >&
      shops() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info >*
      mutable_shops();

  // @@protoc_insertion_point(class_scope:PB.gp_blackshop_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_notify_type();
  inline void clear_has_notify_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int notify_type_;
  ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info > shops_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_blackshop_notify* default_instance_;
};
// -------------------------------------------------------------------

class gp_hero_trial_config : public ::google::protobuf::Message {
 public:
  gp_hero_trial_config();
  virtual ~gp_hero_trial_config();

  gp_hero_trial_config(const gp_hero_trial_config& from);

  inline gp_hero_trial_config& operator=(const gp_hero_trial_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_hero_trial_config& default_instance();

  void Swap(gp_hero_trial_config* other);

  // implements Message ----------------------------------------------

  gp_hero_trial_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_hero_trial_config& from);
  void MergeFrom(const gp_hero_trial_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_hero_trial_config];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.db_hero_trial_config config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::PB::db_hero_trial_config& config() const;
  inline ::PB::db_hero_trial_config* mutable_config();
  inline ::PB::db_hero_trial_config* release_config();
  inline void set_allocated_config(::PB::db_hero_trial_config* config);

  // @@protoc_insertion_point(class_scope:PB.gp_hero_trial_config)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::db_hero_trial_config* config_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_hero_trial_config* default_instance_;
};
// -------------------------------------------------------------------

class gp_duke_notify : public ::google::protobuf::Message {
 public:
  gp_duke_notify();
  virtual ~gp_duke_notify();

  gp_duke_notify(const gp_duke_notify& from);

  inline gp_duke_notify& operator=(const gp_duke_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_duke_notify& default_instance();

  void Swap(gp_duke_notify* other);

  // implements Message ----------------------------------------------

  gp_duke_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_duke_notify& from);
  void MergeFrom(const gp_duke_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_duke_notify_NOTIFY_TYPE NOTIFY_TYPE;
  static const NOTIFY_TYPE NT_SYNCALL = gp_duke_notify_NOTIFY_TYPE_NT_SYNCALL;
  static inline bool NOTIFY_TYPE_IsValid(int value) {
    return gp_duke_notify_NOTIFY_TYPE_IsValid(value);
  }
  static const NOTIFY_TYPE NOTIFY_TYPE_MIN =
    gp_duke_notify_NOTIFY_TYPE_NOTIFY_TYPE_MIN;
  static const NOTIFY_TYPE NOTIFY_TYPE_MAX =
    gp_duke_notify_NOTIFY_TYPE_NOTIFY_TYPE_MAX;
  static const int NOTIFY_TYPE_ARRAYSIZE =
    gp_duke_notify_NOTIFY_TYPE_NOTIFY_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NOTIFY_TYPE_descriptor() {
    return gp_duke_notify_NOTIFY_TYPE_descriptor();
  }
  static inline const ::std::string& NOTIFY_TYPE_Name(NOTIFY_TYPE value) {
    return gp_duke_notify_NOTIFY_TYPE_Name(value);
  }
  static inline bool NOTIFY_TYPE_Parse(const ::std::string& name,
      NOTIFY_TYPE* value) {
    return gp_duke_notify_NOTIFY_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_duke_notify];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required .PB.gp_duke_notify.NOTIFY_TYPE notify_type = 2;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 2;
  inline ::PB::gp_duke_notify_NOTIFY_TYPE notify_type() const;
  inline void set_notify_type(::PB::gp_duke_notify_NOTIFY_TYPE value);

  // optional int32 duke_level = 3;
  inline bool has_duke_level() const;
  inline void clear_duke_level();
  static const int kDukeLevelFieldNumber = 3;
  inline ::google::protobuf::int32 duke_level() const;
  inline void set_duke_level(::google::protobuf::int32 value);

  // optional int32 active_duke_skill = 4;
  inline bool has_active_duke_skill() const;
  inline void clear_active_duke_skill();
  static const int kActiveDukeSkillFieldNumber = 4;
  inline ::google::protobuf::int32 active_duke_skill() const;
  inline void set_active_duke_skill(::google::protobuf::int32 value);

  // optional int32 reward_count = 5;
  inline bool has_reward_count() const;
  inline void clear_reward_count();
  static const int kRewardCountFieldNumber = 5;
  inline ::google::protobuf::int32 reward_count() const;
  inline void set_reward_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_duke_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_duke_level();
  inline void clear_has_duke_level();
  inline void set_has_active_duke_skill();
  inline void clear_has_active_duke_skill();
  inline void set_has_reward_count();
  inline void clear_has_reward_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int notify_type_;
  ::google::protobuf::int32 duke_level_;
  ::google::protobuf::int32 active_duke_skill_;
  ::google::protobuf::int32 reward_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_duke_notify* default_instance_;
};
// -------------------------------------------------------------------

class gp_player_corp_config : public ::google::protobuf::Message {
 public:
  gp_player_corp_config();
  virtual ~gp_player_corp_config();

  gp_player_corp_config(const gp_player_corp_config& from);

  inline gp_player_corp_config& operator=(const gp_player_corp_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_player_corp_config& default_instance();

  void Swap(gp_player_corp_config* other);

  // implements Message ----------------------------------------------

  gp_player_corp_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_player_corp_config& from);
  void MergeFrom(const gp_player_corp_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_player_crop_config];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.player_corps_attr_config config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::PB::player_corps_attr_config& config() const;
  inline ::PB::player_corps_attr_config* mutable_config();
  inline ::PB::player_corps_attr_config* release_config();
  inline void set_allocated_config(::PB::player_corps_attr_config* config);

  // @@protoc_insertion_point(class_scope:PB.gp_player_corp_config)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::player_corps_attr_config* config_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_player_corp_config* default_instance_;
};
// -------------------------------------------------------------------

class gp_net_error_message : public ::google::protobuf::Message {
 public:
  gp_net_error_message();
  virtual ~gp_net_error_message();

  gp_net_error_message(const gp_net_error_message& from);

  inline gp_net_error_message& operator=(const gp_net_error_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_net_error_message& default_instance();

  void Swap(gp_net_error_message* other);

  // implements Message ----------------------------------------------

  gp_net_error_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_net_error_message& from);
  void MergeFrom(const gp_net_error_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_net_error_message];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 for_ipt_proto_type = 2;
  inline bool has_for_ipt_proto_type() const;
  inline void clear_for_ipt_proto_type();
  static const int kForIptProtoTypeFieldNumber = 2;
  inline ::google::protobuf::int32 for_ipt_proto_type() const;
  inline void set_for_ipt_proto_type(::google::protobuf::int32 value);

  // optional int32 error_code = 3;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_net_error_message)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_for_ipt_proto_type();
  inline void clear_has_for_ipt_proto_type();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 for_ipt_proto_type_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_net_error_message* default_instance_;
};
// -------------------------------------------------------------------

class gp_gs_error_message : public ::google::protobuf::Message {
 public:
  gp_gs_error_message();
  virtual ~gp_gs_error_message();

  gp_gs_error_message(const gp_gs_error_message& from);

  inline gp_gs_error_message& operator=(const gp_gs_error_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_gs_error_message& default_instance();

  void Swap(gp_gs_error_message* other);

  // implements Message ----------------------------------------------

  gp_gs_error_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_gs_error_message& from);
  void MergeFrom(const gp_gs_error_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_gs_error_message];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 proto_type = 2;
  inline bool has_proto_type() const;
  inline void clear_proto_type();
  static const int kProtoTypeFieldNumber = 2;
  inline ::google::protobuf::int32 proto_type() const;
  inline void set_proto_type(::google::protobuf::int32 value);

  // optional int32 error_code = 3;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional int32 param = 4;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 4;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_gs_error_message)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_proto_type();
  inline void clear_has_proto_type();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 proto_type_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_gs_error_message* default_instance_;
};
// -------------------------------------------------------------------

class instance_info_t : public ::google::protobuf::Message {
 public:
  instance_info_t();
  virtual ~instance_info_t();

  instance_info_t(const instance_info_t& from);

  inline instance_info_t& operator=(const instance_info_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const instance_info_t& default_instance();

  void Swap(instance_info_t* other);

  // implements Message ----------------------------------------------

  instance_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const instance_info_t& from);
  void MergeFrom(const instance_info_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 addition_count = 4;
  inline bool has_addition_count() const;
  inline void clear_addition_count();
  static const int kAdditionCountFieldNumber = 4;
  inline ::google::protobuf::int32 addition_count() const;
  inline void set_addition_count(::google::protobuf::int32 value);

  // optional int32 professional = 5;
  inline bool has_professional() const;
  inline void clear_professional();
  static const int kProfessionalFieldNumber = 5;
  inline ::google::protobuf::int32 professional() const;
  inline void set_professional(::google::protobuf::int32 value);

  // optional int32 refresh_timestamp = 6;
  inline bool has_refresh_timestamp() const;
  inline void clear_refresh_timestamp();
  static const int kRefreshTimestampFieldNumber = 6;
  inline ::google::protobuf::int32 refresh_timestamp() const;
  inline void set_refresh_timestamp(::google::protobuf::int32 value);

  // optional int32 use_time = 7;
  inline bool has_use_time() const;
  inline void clear_use_time();
  static const int kUseTimeFieldNumber = 7;
  inline ::google::protobuf::int32 use_time() const;
  inline void set_use_time(::google::protobuf::int32 value);

  // optional int32 max_difficulty = 8;
  inline bool has_max_difficulty() const;
  inline void clear_max_difficulty();
  static const int kMaxDifficultyFieldNumber = 8;
  inline ::google::protobuf::int32 max_difficulty() const;
  inline void set_max_difficulty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.instance_info_t)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_addition_count();
  inline void clear_has_addition_count();
  inline void set_has_professional();
  inline void clear_has_professional();
  inline void set_has_refresh_timestamp();
  inline void clear_has_refresh_timestamp();
  inline void set_has_use_time();
  inline void clear_has_use_time();
  inline void set_has_max_difficulty();
  inline void clear_has_max_difficulty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 addition_count_;
  ::google::protobuf::int32 professional_;
  ::google::protobuf::int32 refresh_timestamp_;
  ::google::protobuf::int32 use_time_;
  ::google::protobuf::int32 max_difficulty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static instance_info_t* default_instance_;
};
// -------------------------------------------------------------------

class gp_instance_info : public ::google::protobuf::Message {
 public:
  gp_instance_info();
  virtual ~gp_instance_info();

  gp_instance_info(const gp_instance_info& from);

  inline gp_instance_info& operator=(const gp_instance_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_instance_info& default_instance();

  void Swap(gp_instance_info* other);

  // implements Message ----------------------------------------------

  gp_instance_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_instance_info& from);
  void MergeFrom(const gp_instance_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_instance_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 mode = 2 [default = -1];
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // repeated .PB.instance_info_t info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::PB::instance_info_t& info(int index) const;
  inline ::PB::instance_info_t* mutable_info(int index);
  inline ::PB::instance_info_t* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::instance_info_t >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::instance_info_t >*
      mutable_info();

  // repeated int32 passed_instance = 4;
  inline int passed_instance_size() const;
  inline void clear_passed_instance();
  static const int kPassedInstanceFieldNumber = 4;
  inline ::google::protobuf::int32 passed_instance(int index) const;
  inline void set_passed_instance(int index, ::google::protobuf::int32 value);
  inline void add_passed_instance(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      passed_instance() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_passed_instance();

  // optional bool total_info = 5 [default = false];
  inline bool has_total_info() const;
  inline void clear_total_info();
  static const int kTotalInfoFieldNumber = 5;
  inline bool total_info() const;
  inline void set_total_info(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_instance_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_total_info();
  inline void clear_has_total_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::RepeatedPtrField< ::PB::instance_info_t > info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > passed_instance_;
  bool total_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_instance_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_inventory_size : public ::google::protobuf::Message {
 public:
  gp_inventory_size();
  virtual ~gp_inventory_size();

  gp_inventory_size(const gp_inventory_size& from);

  inline gp_inventory_size& operator=(const gp_inventory_size& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_inventory_size& default_instance();

  void Swap(gp_inventory_size* other);

  // implements Message ----------------------------------------------

  gp_inventory_size* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_inventory_size& from);
  void MergeFrom(const gp_inventory_size& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_inventory_size];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 inventory_type = 2 [default = 0];
  inline bool has_inventory_type() const;
  inline void clear_inventory_type();
  static const int kInventoryTypeFieldNumber = 2;
  inline ::google::protobuf::int32 inventory_type() const;
  inline void set_inventory_type(::google::protobuf::int32 value);

  // optional int32 cur_size = 3;
  inline bool has_cur_size() const;
  inline void clear_cur_size();
  static const int kCurSizeFieldNumber = 3;
  inline ::google::protobuf::int32 cur_size() const;
  inline void set_cur_size(::google::protobuf::int32 value);

  // optional int32 reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_inventory_size)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_inventory_type();
  inline void clear_has_inventory_type();
  inline void set_has_cur_size();
  inline void clear_has_cur_size();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 inventory_type_;
  ::google::protobuf::int32 cur_size_;
  ::google::protobuf::int32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_inventory_size* default_instance_;
};
// -------------------------------------------------------------------

class gp_level_result : public ::google::protobuf::Message {
 public:
  gp_level_result();
  virtual ~gp_level_result();

  gp_level_result(const gp_level_result& from);

  inline gp_level_result& operator=(const gp_level_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_level_result& default_instance();

  void Swap(gp_level_result* other);

  // implements Message ----------------------------------------------

  gp_level_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_level_result& from);
  void MergeFrom(const gp_level_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_level_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated bytes list_name = 3;
  inline int list_name_size() const;
  inline void clear_list_name();
  static const int kListNameFieldNumber = 3;
  inline const ::std::string& list_name(int index) const;
  inline ::std::string* mutable_list_name(int index);
  inline void set_list_name(int index, const ::std::string& value);
  inline void set_list_name(int index, const char* value);
  inline void set_list_name(int index, const void* value, size_t size);
  inline ::std::string* add_list_name();
  inline void add_list_name(const ::std::string& value);
  inline void add_list_name(const char* value);
  inline void add_list_name(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& list_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list_name();

  // repeated int32 list_score = 4;
  inline int list_score_size() const;
  inline void clear_list_score();
  static const int kListScoreFieldNumber = 4;
  inline ::google::protobuf::int32 list_score(int index) const;
  inline void set_list_score(int index, ::google::protobuf::int32 value);
  inline void add_list_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      list_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_list_score();

  // @@protoc_insertion_point(class_scope:PB.gp_level_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedPtrField< ::std::string> list_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > list_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_level_result* default_instance_;
};
// -------------------------------------------------------------------

class modify_corps_data : public ::google::protobuf::Message {
 public:
  modify_corps_data();
  virtual ~modify_corps_data();

  modify_corps_data(const modify_corps_data& from);

  inline modify_corps_data& operator=(const modify_corps_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const modify_corps_data& default_instance();

  void Swap(modify_corps_data* other);

  // implements Message ----------------------------------------------

  modify_corps_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const modify_corps_data& from);
  void MergeFrom(const modify_corps_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 padding = 1;
  inline bool has_padding() const;
  inline void clear_padding();
  static const int kPaddingFieldNumber = 1;
  inline ::google::protobuf::int32 padding() const;
  inline void set_padding(::google::protobuf::int32 value);

  // required int32 corpsid = 2;
  inline bool has_corpsid() const;
  inline void clear_corpsid();
  static const int kCorpsidFieldNumber = 2;
  inline ::google::protobuf::int32 corpsid() const;
  inline void set_corpsid(::google::protobuf::int32 value);

  // optional int32 mode = 3;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 3;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // optional int64 roleid = 5;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 5;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional int64 money = 6;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 6;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // optional int64 contribution = 7;
  inline bool has_contribution() const;
  inline void clear_contribution();
  static const int kContributionFieldNumber = 7;
  inline ::google::protobuf::int64 contribution() const;
  inline void set_contribution(::google::protobuf::int64 value);

  // optional int64 key = 8;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 8;
  inline ::google::protobuf::int64 key() const;
  inline void set_key(::google::protobuf::int64 value);

  // optional int64 value = 9;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 9;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.modify_corps_data)
 private:
  inline void set_has_padding();
  inline void clear_has_padding();
  inline void set_has_corpsid();
  inline void clear_has_corpsid();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_contribution();
  inline void clear_has_contribution();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 padding_;
  ::google::protobuf::int32 corpsid_;
  ::google::protobuf::int64 roleid_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int64 contribution_;
  ::google::protobuf::int64 key_;
  ::google::protobuf::int64 value_;
  ::google::protobuf::int32 mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static modify_corps_data* default_instance_;
};
// -------------------------------------------------------------------

class gp_ipt_container : public ::google::protobuf::Message {
 public:
  gp_ipt_container();
  virtual ~gp_ipt_container();

  gp_ipt_container(const gp_ipt_container& from);

  inline gp_ipt_container& operator=(const gp_ipt_container& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_ipt_container& default_instance();

  void Swap(gp_ipt_container* other);

  // implements Message ----------------------------------------------

  gp_ipt_container* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_ipt_container& from);
  void MergeFrom(const gp_ipt_container& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_ipt_container];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.modify_corps_data corps_info = 2;
  inline bool has_corps_info() const;
  inline void clear_corps_info();
  static const int kCorpsInfoFieldNumber = 2;
  inline const ::PB::modify_corps_data& corps_info() const;
  inline ::PB::modify_corps_data* mutable_corps_info();
  inline ::PB::modify_corps_data* release_corps_info();
  inline void set_allocated_corps_info(::PB::modify_corps_data* corps_info);

  // @@protoc_insertion_point(class_scope:PB.gp_ipt_container)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_corps_info();
  inline void clear_has_corps_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::modify_corps_data* corps_info_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_ipt_container* default_instance_;
};
// -------------------------------------------------------------------

class db_corp_farm_data : public ::google::protobuf::Message {
 public:
  db_corp_farm_data();
  virtual ~db_corp_farm_data();

  db_corp_farm_data(const db_corp_farm_data& from);

  inline db_corp_farm_data& operator=(const db_corp_farm_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_corp_farm_data& default_instance();

  void Swap(db_corp_farm_data* other);

  // implements Message ----------------------------------------------

  db_corp_farm_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_corp_farm_data& from);
  void MergeFrom(const db_corp_farm_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // repeated .PB.corp_farmland farmlands = 3;
  inline int farmlands_size() const;
  inline void clear_farmlands();
  static const int kFarmlandsFieldNumber = 3;
  inline const ::PB::corp_farmland& farmlands(int index) const;
  inline ::PB::corp_farmland* mutable_farmlands(int index);
  inline ::PB::corp_farmland* add_farmlands();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_farmland >&
      farmlands() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::corp_farmland >*
      mutable_farmlands();

  // @@protoc_insertion_point(class_scope:PB.db_corp_farm_data)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::RepeatedPtrField< ::PB::corp_farmland > farmlands_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_corp_farm_data* default_instance_;
};
// -------------------------------------------------------------------

class gp_farm_data : public ::google::protobuf::Message {
 public:
  gp_farm_data();
  virtual ~gp_farm_data();

  gp_farm_data(const gp_farm_data& from);

  inline gp_farm_data& operator=(const gp_farm_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_farm_data& default_instance();

  void Swap(gp_farm_data* other);

  // implements Message ----------------------------------------------

  gp_farm_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_farm_data& from);
  void MergeFrom(const gp_farm_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_farm_data];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.db_corp_farm_data whole = 2;
  inline bool has_whole() const;
  inline void clear_whole();
  static const int kWholeFieldNumber = 2;
  inline const ::PB::db_corp_farm_data& whole() const;
  inline ::PB::db_corp_farm_data* mutable_whole();
  inline ::PB::db_corp_farm_data* release_whole();
  inline void set_allocated_whole(::PB::db_corp_farm_data* whole);

  // optional .PB.corp_farmland part_farmland = 3;
  inline bool has_part_farmland() const;
  inline void clear_part_farmland();
  static const int kPartFarmlandFieldNumber = 3;
  inline const ::PB::corp_farmland& part_farmland() const;
  inline ::PB::corp_farmland* mutable_part_farmland();
  inline ::PB::corp_farmland* release_part_farmland();
  inline void set_allocated_part_farmland(::PB::corp_farmland* part_farmland);

  // optional uint32 part_farmland_index = 4;
  inline bool has_part_farmland_index() const;
  inline void clear_part_farmland_index();
  static const int kPartFarmlandIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 part_farmland_index() const;
  inline void set_part_farmland_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_farm_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_whole();
  inline void clear_has_whole();
  inline void set_has_part_farmland();
  inline void clear_has_part_farmland();
  inline void set_has_part_farmland_index();
  inline void clear_has_part_farmland_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::db_corp_farm_data* whole_;
  int type_;
  ::google::protobuf::uint32 part_farmland_index_;
  ::PB::corp_farmland* part_farmland_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_farm_data* default_instance_;
};
// -------------------------------------------------------------------

class gp_climb_tower : public ::google::protobuf::Message {
 public:
  gp_climb_tower();
  virtual ~gp_climb_tower();

  gp_climb_tower(const gp_climb_tower& from);

  inline gp_climb_tower& operator=(const gp_climb_tower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_climb_tower& default_instance();

  void Swap(gp_climb_tower* other);

  // implements Message ----------------------------------------------

  gp_climb_tower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_climb_tower& from);
  void MergeFrom(const gp_climb_tower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_climb_tower];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 max_tower_lvl = 2;
  inline bool has_max_tower_lvl() const;
  inline void clear_max_tower_lvl();
  static const int kMaxTowerLvlFieldNumber = 2;
  inline ::google::protobuf::int32 max_tower_lvl() const;
  inline void set_max_tower_lvl(::google::protobuf::int32 value);

  // required int32 cur_tower_lvl = 3;
  inline bool has_cur_tower_lvl() const;
  inline void clear_cur_tower_lvl();
  static const int kCurTowerLvlFieldNumber = 3;
  inline ::google::protobuf::int32 cur_tower_lvl() const;
  inline void set_cur_tower_lvl(::google::protobuf::int32 value);

  // required bool is_auto_running = 5;
  inline bool has_is_auto_running() const;
  inline void clear_is_auto_running();
  static const int kIsAutoRunningFieldNumber = 5;
  inline bool is_auto_running() const;
  inline void set_is_auto_running(bool value);

  // required int32 auto_begin_time = 6;
  inline bool has_auto_begin_time() const;
  inline void clear_auto_begin_time();
  static const int kAutoBeginTimeFieldNumber = 6;
  inline ::google::protobuf::int32 auto_begin_time() const;
  inline void set_auto_begin_time(::google::protobuf::int32 value);

  // required int32 auto_begin_lvl = 7;
  inline bool has_auto_begin_lvl() const;
  inline void clear_auto_begin_lvl();
  static const int kAutoBeginLvlFieldNumber = 7;
  inline ::google::protobuf::int32 auto_begin_lvl() const;
  inline void set_auto_begin_lvl(::google::protobuf::int32 value);

  // required int32 auto_reward_begin = 8;
  inline bool has_auto_reward_begin() const;
  inline void clear_auto_reward_begin();
  static const int kAutoRewardBeginFieldNumber = 8;
  inline ::google::protobuf::int32 auto_reward_begin() const;
  inline void set_auto_reward_begin(::google::protobuf::int32 value);

  // required int32 auto_reward_end = 9;
  inline bool has_auto_reward_end() const;
  inline void clear_auto_reward_end();
  static const int kAutoRewardEndFieldNumber = 9;
  inline ::google::protobuf::int32 auto_reward_end() const;
  inline void set_auto_reward_end(::google::protobuf::int32 value);

  // required int32 auto_cur_lvl = 10;
  inline bool has_auto_cur_lvl() const;
  inline void clear_auto_cur_lvl();
  static const int kAutoCurLvlFieldNumber = 10;
  inline ::google::protobuf::int32 auto_cur_lvl() const;
  inline void set_auto_cur_lvl(::google::protobuf::int32 value);

  // repeated .PB.level_shopid level4shopid = 11;
  inline int level4shopid_size() const;
  inline void clear_level4shopid();
  static const int kLevel4ShopidFieldNumber = 11;
  inline const ::PB::level_shopid& level4shopid(int index) const;
  inline ::PB::level_shopid* mutable_level4shopid(int index);
  inline ::PB::level_shopid* add_level4shopid();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::level_shopid >&
      level4shopid() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::level_shopid >*
      mutable_level4shopid();

  // @@protoc_insertion_point(class_scope:PB.gp_climb_tower)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_max_tower_lvl();
  inline void clear_has_max_tower_lvl();
  inline void set_has_cur_tower_lvl();
  inline void clear_has_cur_tower_lvl();
  inline void set_has_is_auto_running();
  inline void clear_has_is_auto_running();
  inline void set_has_auto_begin_time();
  inline void clear_has_auto_begin_time();
  inline void set_has_auto_begin_lvl();
  inline void clear_has_auto_begin_lvl();
  inline void set_has_auto_reward_begin();
  inline void clear_has_auto_reward_begin();
  inline void set_has_auto_reward_end();
  inline void clear_has_auto_reward_end();
  inline void set_has_auto_cur_lvl();
  inline void clear_has_auto_cur_lvl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 max_tower_lvl_;
  ::google::protobuf::int32 cur_tower_lvl_;
  bool is_auto_running_;
  ::google::protobuf::int32 auto_begin_time_;
  ::google::protobuf::int32 auto_begin_lvl_;
  ::google::protobuf::int32 auto_reward_begin_;
  ::google::protobuf::int32 auto_reward_end_;
  ::google::protobuf::RepeatedPtrField< ::PB::level_shopid > level4shopid_;
  ::google::protobuf::int32 auto_cur_lvl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_climb_tower* default_instance_;
};
// -------------------------------------------------------------------

class gp_s2c_gs_ping : public ::google::protobuf::Message {
 public:
  gp_s2c_gs_ping();
  virtual ~gp_s2c_gs_ping();

  gp_s2c_gs_ping(const gp_s2c_gs_ping& from);

  inline gp_s2c_gs_ping& operator=(const gp_s2c_gs_ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_s2c_gs_ping& default_instance();

  void Swap(gp_s2c_gs_ping* other);

  // implements Message ----------------------------------------------

  gp_s2c_gs_ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_s2c_gs_ping& from);
  void MergeFrom(const gp_s2c_gs_ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_gs_ping];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 client_send_time = 2;
  inline bool has_client_send_time() const;
  inline void clear_client_send_time();
  static const int kClientSendTimeFieldNumber = 2;
  inline ::google::protobuf::int32 client_send_time() const;
  inline void set_client_send_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_s2c_gs_ping)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_client_send_time();
  inline void clear_has_client_send_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 client_send_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_s2c_gs_ping* default_instance_;
};
// -------------------------------------------------------------------

class gp_level_score : public ::google::protobuf::Message {
 public:
  gp_level_score();
  virtual ~gp_level_score();

  gp_level_score(const gp_level_score& from);

  inline gp_level_score& operator=(const gp_level_score& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_level_score& default_instance();

  void Swap(gp_level_score* other);

  // implements Message ----------------------------------------------

  gp_level_score* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_level_score& from);
  void MergeFrom(const gp_level_score& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_level_score];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 score = 2 [default = -1];
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_level_score)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_level_score* default_instance_;
};
// -------------------------------------------------------------------

class gp_player_list_info : public ::google::protobuf::Message {
 public:
  gp_player_list_info();
  virtual ~gp_player_list_info();

  gp_player_list_info(const gp_player_list_info& from);

  inline gp_player_list_info& operator=(const gp_player_list_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_player_list_info& default_instance();

  void Swap(gp_player_list_info* other);

  // implements Message ----------------------------------------------

  gp_player_list_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_player_list_info& from);
  void MergeFrom(const gp_player_list_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_player_list_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // repeated int32 new_id = 2;
  inline int new_id_size() const;
  inline void clear_new_id();
  static const int kNewIdFieldNumber = 2;
  inline ::google::protobuf::int32 new_id(int index) const;
  inline void set_new_id(int index, ::google::protobuf::int32 value);
  inline void add_new_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      new_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_new_id();

  // repeated int32 fightcapacity = 3;
  inline int fightcapacity_size() const;
  inline void clear_fightcapacity();
  static const int kFightcapacityFieldNumber = 3;
  inline ::google::protobuf::int32 fightcapacity(int index) const;
  inline void set_fightcapacity(int index, ::google::protobuf::int32 value);
  inline void add_fightcapacity(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fightcapacity() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fightcapacity();

  // @@protoc_insertion_point(class_scope:PB.gp_player_list_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > new_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fightcapacity_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_player_list_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_level_info : public ::google::protobuf::Message {
 public:
  gp_level_info();
  virtual ~gp_level_info();

  gp_level_info(const gp_level_info& from);

  inline gp_level_info& operator=(const gp_level_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_level_info& default_instance();

  void Swap(gp_level_info* other);

  // implements Message ----------------------------------------------

  gp_level_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_level_info& from);
  void MergeFrom(const gp_level_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_level_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 inst_start_time = 2;
  inline bool has_inst_start_time() const;
  inline void clear_inst_start_time();
  static const int kInstStartTimeFieldNumber = 2;
  inline ::google::protobuf::int32 inst_start_time() const;
  inline void set_inst_start_time(::google::protobuf::int32 value);

  // optional int32 stage_start_time = 3;
  inline bool has_stage_start_time() const;
  inline void clear_stage_start_time();
  static const int kStageStartTimeFieldNumber = 3;
  inline ::google::protobuf::int32 stage_start_time() const;
  inline void set_stage_start_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_level_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_inst_start_time();
  inline void clear_has_inst_start_time();
  inline void set_has_stage_start_time();
  inline void clear_has_stage_start_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 inst_start_time_;
  ::google::protobuf::int32 stage_start_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_level_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_ask_help : public ::google::protobuf::Message {
 public:
  gp_notify_ask_help();
  virtual ~gp_notify_ask_help();

  gp_notify_ask_help(const gp_notify_ask_help& from);

  inline gp_notify_ask_help& operator=(const gp_notify_ask_help& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_ask_help& default_instance();

  void Swap(gp_notify_ask_help* other);

  // implements Message ----------------------------------------------

  gp_notify_ask_help* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_ask_help& from);
  void MergeFrom(const gp_notify_ask_help& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_ask_help];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_ask_help)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_ask_help* default_instance_;
};
// -------------------------------------------------------------------

class gp_find_way_result : public ::google::protobuf::Message {
 public:
  gp_find_way_result();
  virtual ~gp_find_way_result();

  gp_find_way_result(const gp_find_way_result& from);

  inline gp_find_way_result& operator=(const gp_find_way_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_find_way_result& default_instance();

  void Swap(gp_find_way_result* other);

  // implements Message ----------------------------------------------

  gp_find_way_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_find_way_result& from);
  void MergeFrom(const gp_find_way_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_find_way_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 retcode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // repeated .PB.a3d_pos way_point = 3;
  inline int way_point_size() const;
  inline void clear_way_point();
  static const int kWayPointFieldNumber = 3;
  inline const ::PB::a3d_pos& way_point(int index) const;
  inline ::PB::a3d_pos* mutable_way_point(int index);
  inline ::PB::a3d_pos* add_way_point();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::a3d_pos >&
      way_point() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::a3d_pos >*
      mutable_way_point();

  // optional int32 reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_find_way_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::RepeatedPtrField< ::PB::a3d_pos > way_point_;
  ::google::protobuf::int32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_find_way_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_npc_info : public ::google::protobuf::Message {
 public:
  gp_npc_info();
  virtual ~gp_npc_info();

  gp_npc_info(const gp_npc_info& from);

  inline gp_npc_info& operator=(const gp_npc_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_npc_info& default_instance();

  void Swap(gp_npc_info* other);

  // implements Message ----------------------------------------------

  gp_npc_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_npc_info& from);
  void MergeFrom(const gp_npc_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_npc_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional uint32 newtype = 2;
  inline bool has_newtype() const;
  inline void clear_newtype();
  static const int kNewtypeFieldNumber = 2;
  inline ::google::protobuf::uint32 newtype() const;
  inline void set_newtype(::google::protobuf::uint32 value);

  // optional bool can_be_attacked = 3;
  inline bool has_can_be_attacked() const;
  inline void clear_can_be_attacked();
  static const int kCanBeAttackedFieldNumber = 3;
  inline bool can_be_attacked() const;
  inline void set_can_be_attacked(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_npc_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_newtype();
  inline void clear_has_newtype();
  inline void set_has_can_be_attacked();
  inline void clear_has_can_be_attacked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 newtype_;
  bool can_be_attacked_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_npc_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_easy_mall_service_end : public ::google::protobuf::Message {
 public:
  gp_easy_mall_service_end();
  virtual ~gp_easy_mall_service_end();

  gp_easy_mall_service_end(const gp_easy_mall_service_end& from);

  inline gp_easy_mall_service_end& operator=(const gp_easy_mall_service_end& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_easy_mall_service_end& default_instance();

  void Swap(gp_easy_mall_service_end* other);

  // implements Message ----------------------------------------------

  gp_easy_mall_service_end* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_easy_mall_service_end& from);
  void MergeFrom(const gp_easy_mall_service_end& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_easy_mall_service_end];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 retcode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_easy_mall_service_end)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_easy_mall_service_end* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_plant_gp_seed : public ::google::protobuf::Message {
 public:
  gp_notify_plant_gp_seed();
  virtual ~gp_notify_plant_gp_seed();

  gp_notify_plant_gp_seed(const gp_notify_plant_gp_seed& from);

  inline gp_notify_plant_gp_seed& operator=(const gp_notify_plant_gp_seed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_plant_gp_seed& default_instance();

  void Swap(gp_notify_plant_gp_seed* other);

  // implements Message ----------------------------------------------

  gp_notify_plant_gp_seed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_plant_gp_seed& from);
  void MergeFrom(const gp_notify_plant_gp_seed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seed_id = 1;
  inline bool has_seed_id() const;
  inline void clear_seed_id();
  static const int kSeedIdFieldNumber = 1;
  inline ::google::protobuf::int32 seed_id() const;
  inline void set_seed_id(::google::protobuf::int32 value);

  // optional int32 sow_time = 2;
  inline bool has_sow_time() const;
  inline void clear_sow_time();
  static const int kSowTimeFieldNumber = 2;
  inline ::google::protobuf::int32 sow_time() const;
  inline void set_sow_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_plant.gp_seed)
 private:
  inline void set_has_seed_id();
  inline void clear_has_seed_id();
  inline void set_has_sow_time();
  inline void clear_has_sow_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seed_id_;
  ::google::protobuf::int32 sow_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_plant_gp_seed* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_plant : public ::google::protobuf::Message {
 public:
  gp_notify_plant();
  virtual ~gp_notify_plant();

  gp_notify_plant(const gp_notify_plant& from);

  inline gp_notify_plant& operator=(const gp_notify_plant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_plant& default_instance();

  void Swap(gp_notify_plant* other);

  // implements Message ----------------------------------------------

  gp_notify_plant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_plant& from);
  void MergeFrom(const gp_notify_plant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_notify_plant_gp_seed gp_seed;

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_plant];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // repeated .PB.gp_notify_plant.gp_seed seeds = 2;
  inline int seeds_size() const;
  inline void clear_seeds();
  static const int kSeedsFieldNumber = 2;
  inline const ::PB::gp_notify_plant_gp_seed& seeds(int index) const;
  inline ::PB::gp_notify_plant_gp_seed* mutable_seeds(int index);
  inline ::PB::gp_notify_plant_gp_seed* add_seeds();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_notify_plant_gp_seed >&
      seeds() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::gp_notify_plant_gp_seed >*
      mutable_seeds();

  // optional int32 remain_times = 3;
  inline bool has_remain_times() const;
  inline void clear_remain_times();
  static const int kRemainTimesFieldNumber = 3;
  inline ::google::protobuf::int32 remain_times() const;
  inline void set_remain_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_plant)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_remain_times();
  inline void clear_has_remain_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::gp_notify_plant_gp_seed > seeds_;
  int type_;
  ::google::protobuf::int32 remain_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_plant* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_cash_change : public ::google::protobuf::Message {
 public:
  gp_notify_cash_change();
  virtual ~gp_notify_cash_change();

  gp_notify_cash_change(const gp_notify_cash_change& from);

  inline gp_notify_cash_change& operator=(const gp_notify_cash_change& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_cash_change& default_instance();

  void Swap(gp_notify_cash_change* other);

  // implements Message ----------------------------------------------

  gp_notify_cash_change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_cash_change& from);
  void MergeFrom(const gp_notify_cash_change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gp_notify_cash_change_CC_TYPE CC_TYPE;
  static const CC_TYPE CASH_CHANGE_TYPE_USE = gp_notify_cash_change_CC_TYPE_CASH_CHANGE_TYPE_USE;
  static const CC_TYPE CASH_CHANGE_TYPE_RETURN = gp_notify_cash_change_CC_TYPE_CASH_CHANGE_TYPE_RETURN;
  static const CC_TYPE CASH_CHANGE_TYPE_PRESENT = gp_notify_cash_change_CC_TYPE_CASH_CHANGE_TYPE_PRESENT;
  static inline bool CC_TYPE_IsValid(int value) {
    return gp_notify_cash_change_CC_TYPE_IsValid(value);
  }
  static const CC_TYPE CC_TYPE_MIN =
    gp_notify_cash_change_CC_TYPE_CC_TYPE_MIN;
  static const CC_TYPE CC_TYPE_MAX =
    gp_notify_cash_change_CC_TYPE_CC_TYPE_MAX;
  static const int CC_TYPE_ARRAYSIZE =
    gp_notify_cash_change_CC_TYPE_CC_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CC_TYPE_descriptor() {
    return gp_notify_cash_change_CC_TYPE_descriptor();
  }
  static inline const ::std::string& CC_TYPE_Name(CC_TYPE value) {
    return gp_notify_cash_change_CC_TYPE_Name(value);
  }
  static inline bool CC_TYPE_Parse(const ::std::string& name,
      CC_TYPE* value) {
    return gp_notify_cash_change_CC_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_cash_change];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.gp_notify_cash_change.CC_TYPE change_type = 2;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 2;
  inline ::PB::gp_notify_cash_change_CC_TYPE change_type() const;
  inline void set_change_type(::PB::gp_notify_cash_change_CC_TYPE value);

  // optional uint32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_cash_change)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int change_type_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_cash_change* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_monitor_blood : public ::google::protobuf::Message {
 public:
  gp_notify_monitor_blood();
  virtual ~gp_notify_monitor_blood();

  gp_notify_monitor_blood(const gp_notify_monitor_blood& from);

  inline gp_notify_monitor_blood& operator=(const gp_notify_monitor_blood& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_monitor_blood& default_instance();

  void Swap(gp_notify_monitor_blood* other);

  // implements Message ----------------------------------------------

  gp_notify_monitor_blood* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_monitor_blood& from);
  void MergeFrom(const gp_notify_monitor_blood& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_monitor_blood];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // repeated int64 id = 2;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int64 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int64 value);
  inline void add_id(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_id();

  // repeated int32 slot = 3;
  inline int slot_size() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 3;
  inline ::google::protobuf::int32 slot(int index) const;
  inline void set_slot(int index, ::google::protobuf::int32 value);
  inline void add_slot(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      slot() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_slot();

  // repeated bool can_be_attack = 4;
  inline int can_be_attack_size() const;
  inline void clear_can_be_attack();
  static const int kCanBeAttackFieldNumber = 4;
  inline bool can_be_attack(int index) const;
  inline void set_can_be_attack(int index, bool value);
  inline void add_can_be_attack(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      can_be_attack() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_can_be_attack();

  // @@protoc_insertion_point(class_scope:PB.gp_notify_monitor_blood)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > slot_;
  ::google::protobuf::RepeatedField< bool > can_be_attack_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_monitor_blood* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_prop_ready : public ::google::protobuf::Message {
 public:
  gp_notify_prop_ready();
  virtual ~gp_notify_prop_ready();

  gp_notify_prop_ready(const gp_notify_prop_ready& from);

  inline gp_notify_prop_ready& operator=(const gp_notify_prop_ready& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_prop_ready& default_instance();

  void Swap(gp_notify_prop_ready* other);

  // implements Message ----------------------------------------------

  gp_notify_prop_ready* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_prop_ready& from);
  void MergeFrom(const gp_notify_prop_ready& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_prop_ready];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional bool ready = 2;
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 2;
  inline bool ready() const;
  inline void set_ready(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_prop_ready)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ready();
  inline void clear_has_ready();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  bool ready_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_prop_ready* default_instance_;
};
// -------------------------------------------------------------------

class retrieve_info_str : public ::google::protobuf::Message {
 public:
  retrieve_info_str();
  virtual ~retrieve_info_str();

  retrieve_info_str(const retrieve_info_str& from);

  inline retrieve_info_str& operator=(const retrieve_info_str& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const retrieve_info_str& default_instance();

  void Swap(retrieve_info_str* other);

  // implements Message ----------------------------------------------

  retrieve_info_str* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const retrieve_info_str& from);
  void MergeFrom(const retrieve_info_str& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 left_count = 3;
  inline bool has_left_count() const;
  inline void clear_left_count();
  static const int kLeftCountFieldNumber = 3;
  inline ::google::protobuf::int32 left_count() const;
  inline void set_left_count(::google::protobuf::int32 value);

  // optional int32 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // optional int32 retrieve_count = 5;
  inline bool has_retrieve_count() const;
  inline void clear_retrieve_count();
  static const int kRetrieveCountFieldNumber = 5;
  inline ::google::protobuf::int32 retrieve_count() const;
  inline void set_retrieve_count(::google::protobuf::int32 value);

  // optional int32 activity_id = 6;
  inline bool has_activity_id() const;
  inline void clear_activity_id();
  static const int kActivityIdFieldNumber = 6;
  inline ::google::protobuf::int32 activity_id() const;
  inline void set_activity_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.retrieve_info_str)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_left_count();
  inline void clear_has_left_count();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_retrieve_count();
  inline void clear_has_retrieve_count();
  inline void set_has_activity_id();
  inline void clear_has_activity_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 left_count_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 retrieve_count_;
  ::google::protobuf::int32 activity_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static retrieve_info_str* default_instance_;
};
// -------------------------------------------------------------------

class retrieve_info : public ::google::protobuf::Message {
 public:
  retrieve_info();
  virtual ~retrieve_info();

  retrieve_info(const retrieve_info& from);

  inline retrieve_info& operator=(const retrieve_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const retrieve_info& default_instance();

  void Swap(retrieve_info* other);

  // implements Message ----------------------------------------------

  retrieve_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const retrieve_info& from);
  void MergeFrom(const retrieve_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.retrieve_info_str retrieve = 1;
  inline int retrieve_size() const;
  inline void clear_retrieve();
  static const int kRetrieveFieldNumber = 1;
  inline const ::PB::retrieve_info_str& retrieve(int index) const;
  inline ::PB::retrieve_info_str* mutable_retrieve(int index);
  inline ::PB::retrieve_info_str* add_retrieve();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::retrieve_info_str >&
      retrieve() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::retrieve_info_str >*
      mutable_retrieve();

  // @@protoc_insertion_point(class_scope:PB.retrieve_info)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::retrieve_info_str > retrieve_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static retrieve_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_retrieve_info : public ::google::protobuf::Message {
 public:
  gp_retrieve_info();
  virtual ~gp_retrieve_info();

  gp_retrieve_info(const gp_retrieve_info& from);

  inline gp_retrieve_info& operator=(const gp_retrieve_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_retrieve_info& default_instance();

  void Swap(gp_retrieve_info* other);

  // implements Message ----------------------------------------------

  gp_retrieve_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_retrieve_info& from);
  void MergeFrom(const gp_retrieve_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_retrieve_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.retrieve_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PB::retrieve_info& info() const;
  inline ::PB::retrieve_info* mutable_info();
  inline ::PB::retrieve_info* release_info();
  inline void set_allocated_info(::PB::retrieve_info* info);

  // optional .PB.retrieve_info_str one = 3;
  inline bool has_one() const;
  inline void clear_one();
  static const int kOneFieldNumber = 3;
  inline const ::PB::retrieve_info_str& one() const;
  inline ::PB::retrieve_info_str* mutable_one();
  inline ::PB::retrieve_info_str* release_one();
  inline void set_allocated_one(::PB::retrieve_info_str* one);

  // optional bool single_data = 4;
  inline bool has_single_data() const;
  inline void clear_single_data();
  static const int kSingleDataFieldNumber = 4;
  inline bool single_data() const;
  inline void set_single_data(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_retrieve_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_one();
  inline void clear_has_one();
  inline void set_has_single_data();
  inline void clear_has_single_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::retrieve_info* info_;
  int type_;
  bool single_data_;
  ::PB::retrieve_info_str* one_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_retrieve_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_red_packet : public ::google::protobuf::Message {
 public:
  gp_red_packet();
  virtual ~gp_red_packet();

  gp_red_packet(const gp_red_packet& from);

  inline gp_red_packet& operator=(const gp_red_packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_red_packet& default_instance();

  void Swap(gp_red_packet* other);

  // implements Message ----------------------------------------------

  gp_red_packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_red_packet& from);
  void MergeFrom(const gp_red_packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_red_packet];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int64 src = 4;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 4;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // optional bytes src_name = 5;
  inline bool has_src_name() const;
  inline void clear_src_name();
  static const int kSrcNameFieldNumber = 5;
  inline const ::std::string& src_name() const;
  inline void set_src_name(const ::std::string& value);
  inline void set_src_name(const char* value);
  inline void set_src_name(const void* value, size_t size);
  inline ::std::string* mutable_src_name();
  inline ::std::string* release_src_name();
  inline void set_allocated_src_name(::std::string* src_name);

  // optional int32 timestamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // optional int32 timeout = 7;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 7;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_red_packet)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_src_name();
  inline void clear_has_src_name();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_timeout();
  inline void clear_has_timeout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int64 src_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 timestamp_;
  ::std::string* src_name_;
  ::google::protobuf::int32 timeout_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_red_packet* default_instance_;
};
// -------------------------------------------------------------------

class gp_secure_idip : public ::google::protobuf::Message {
 public:
  gp_secure_idip();
  virtual ~gp_secure_idip();

  gp_secure_idip(const gp_secure_idip& from);

  inline gp_secure_idip& operator=(const gp_secure_idip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_secure_idip& default_instance();

  void Swap(gp_secure_idip* other);

  // implements Message ----------------------------------------------

  gp_secure_idip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_secure_idip& from);
  void MergeFrom(const gp_secure_idip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_secure_idip];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 mode = 2;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // optional bytes content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 para1 = 4;
  inline bool has_para1() const;
  inline void clear_para1();
  static const int kPara1FieldNumber = 4;
  inline ::google::protobuf::int32 para1() const;
  inline void set_para1(::google::protobuf::int32 value);

  // optional int32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_secure_idip)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_para1();
  inline void clear_has_para1();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 mode_;
  ::std::string* content_;
  ::google::protobuf::int32 para1_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_secure_idip* default_instance_;
};
// -------------------------------------------------------------------

class gp_multi_exp : public ::google::protobuf::Message {
 public:
  gp_multi_exp();
  virtual ~gp_multi_exp();

  gp_multi_exp(const gp_multi_exp& from);

  inline gp_multi_exp& operator=(const gp_multi_exp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_multi_exp& default_instance();

  void Swap(gp_multi_exp* other);

  // implements Message ----------------------------------------------

  gp_multi_exp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_multi_exp& from);
  void MergeFrom(const gp_multi_exp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_multi_exp];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 rate = 2;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 2;
  inline ::google::protobuf::int32 rate() const;
  inline void set_rate(::google::protobuf::int32 value);

  // optional int32 left_time = 3;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 3;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);

  // optional int32 login_time = 4;
  inline bool has_login_time() const;
  inline void clear_login_time();
  static const int kLoginTimeFieldNumber = 4;
  inline ::google::protobuf::int32 login_time() const;
  inline void set_login_time(::google::protobuf::int32 value);

  // optional int32 tid = 5;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 5;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_multi_exp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_left_time();
  inline void clear_has_left_time();
  inline void set_has_login_time();
  inline void clear_has_login_time();
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 rate_;
  ::google::protobuf::int32 left_time_;
  ::google::protobuf::int32 login_time_;
  ::google::protobuf::int32 tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_multi_exp* default_instance_;
};
// -------------------------------------------------------------------

class gp_refuse_fight : public ::google::protobuf::Message {
 public:
  gp_refuse_fight();
  virtual ~gp_refuse_fight();

  gp_refuse_fight(const gp_refuse_fight& from);

  inline gp_refuse_fight& operator=(const gp_refuse_fight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_refuse_fight& default_instance();

  void Swap(gp_refuse_fight* other);

  // implements Message ----------------------------------------------

  gp_refuse_fight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_refuse_fight& from);
  void MergeFrom(const gp_refuse_fight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_refuse_fight];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 end_timestamp = 3;
  inline bool has_end_timestamp() const;
  inline void clear_end_timestamp();
  static const int kEndTimestampFieldNumber = 3;
  inline ::google::protobuf::int32 end_timestamp() const;
  inline void set_end_timestamp(::google::protobuf::int32 value);

  // optional bool cancel_in_war = 4;
  inline bool has_cancel_in_war() const;
  inline void clear_cancel_in_war();
  static const int kCancelInWarFieldNumber = 4;
  inline bool cancel_in_war() const;
  inline void set_cancel_in_war(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_refuse_fight)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_end_timestamp();
  inline void clear_has_end_timestamp();
  inline void set_has_cancel_in_war();
  inline void clear_has_cancel_in_war();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 end_timestamp_;
  bool cancel_in_war_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_refuse_fight* default_instance_;
};
// -------------------------------------------------------------------

class gp_old_prof_skill_level : public ::google::protobuf::Message {
 public:
  gp_old_prof_skill_level();
  virtual ~gp_old_prof_skill_level();

  gp_old_prof_skill_level(const gp_old_prof_skill_level& from);

  inline gp_old_prof_skill_level& operator=(const gp_old_prof_skill_level& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_old_prof_skill_level& default_instance();

  void Swap(gp_old_prof_skill_level* other);

  // implements Message ----------------------------------------------

  gp_old_prof_skill_level* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_old_prof_skill_level& from);
  void MergeFrom(const gp_old_prof_skill_level& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_old_prof_skill_level];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 skill_id = 2;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);

  // required int32 skill_level = 3;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 3;
  inline ::google::protobuf::int32 skill_level() const;
  inline void set_skill_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_old_prof_skill_level)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 skill_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_old_prof_skill_level* default_instance_;
};
// -------------------------------------------------------------------

class gp_deliver_compensation : public ::google::protobuf::Message {
 public:
  gp_deliver_compensation();
  virtual ~gp_deliver_compensation();

  gp_deliver_compensation(const gp_deliver_compensation& from);

  inline gp_deliver_compensation& operator=(const gp_deliver_compensation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_deliver_compensation& default_instance();

  void Swap(gp_deliver_compensation* other);

  // implements Message ----------------------------------------------

  gp_deliver_compensation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_deliver_compensation& from);
  void MergeFrom(const gp_deliver_compensation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_deliver_compensation];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // repeated .PB.gp_compensation list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::PB::gp_compensation& list(int index) const;
  inline ::PB::gp_compensation* mutable_list(int index);
  inline ::PB::gp_compensation* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_compensation >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::gp_compensation >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:PB.gp_deliver_compensation)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::gp_compensation > list_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_deliver_compensation* default_instance_;
};
// -------------------------------------------------------------------

class level_sorted_info : public ::google::protobuf::Message {
 public:
  level_sorted_info();
  virtual ~level_sorted_info();

  level_sorted_info(const level_sorted_info& from);

  inline level_sorted_info& operator=(const level_sorted_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const level_sorted_info& default_instance();

  void Swap(level_sorted_info* other);

  // implements Message ----------------------------------------------

  level_sorted_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const level_sorted_info& from);
  void MergeFrom(const level_sorted_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.level_sorted_info)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static level_sorted_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_send_level_sorted_info : public ::google::protobuf::Message {
 public:
  gp_send_level_sorted_info();
  virtual ~gp_send_level_sorted_info();

  gp_send_level_sorted_info(const gp_send_level_sorted_info& from);

  inline gp_send_level_sorted_info& operator=(const gp_send_level_sorted_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_send_level_sorted_info& default_instance();

  void Swap(gp_send_level_sorted_info* other);

  // implements Message ----------------------------------------------

  gp_send_level_sorted_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_send_level_sorted_info& from);
  void MergeFrom(const gp_send_level_sorted_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_send_level_sorted_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // repeated .PB.level_sorted_info list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::PB::level_sorted_info& list(int index) const;
  inline ::PB::level_sorted_info* mutable_list(int index);
  inline ::PB::level_sorted_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::level_sorted_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::level_sorted_info >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:PB.gp_send_level_sorted_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::level_sorted_info > list_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_send_level_sorted_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_send_level_info_with_time : public ::google::protobuf::Message {
 public:
  gp_send_level_info_with_time();
  virtual ~gp_send_level_info_with_time();

  gp_send_level_info_with_time(const gp_send_level_info_with_time& from);

  inline gp_send_level_info_with_time& operator=(const gp_send_level_info_with_time& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_send_level_info_with_time& default_instance();

  void Swap(gp_send_level_info_with_time* other);

  // implements Message ----------------------------------------------

  gp_send_level_info_with_time* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_send_level_info_with_time& from);
  void MergeFrom(const gp_send_level_info_with_time& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_send_level_info_with_time];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // repeated int32 info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline ::google::protobuf::int32 info(int index) const;
  inline void set_info(int index, ::google::protobuf::int32 value);
  inline void add_info(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      info() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:PB.gp_send_level_info_with_time)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_send_level_info_with_time* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_strategy_vectors : public ::google::protobuf::Message {
 public:
  gp_notify_strategy_vectors();
  virtual ~gp_notify_strategy_vectors();

  gp_notify_strategy_vectors(const gp_notify_strategy_vectors& from);

  inline gp_notify_strategy_vectors& operator=(const gp_notify_strategy_vectors& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_strategy_vectors& default_instance();

  void Swap(gp_notify_strategy_vectors* other);

  // implements Message ----------------------------------------------

  gp_notify_strategy_vectors* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_strategy_vectors& from);
  void MergeFrom(const gp_notify_strategy_vectors& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_strategis];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.db_strategy_vectors db_strategies = 2;
  inline bool has_db_strategies() const;
  inline void clear_db_strategies();
  static const int kDbStrategiesFieldNumber = 2;
  inline const ::PB::db_strategy_vectors& db_strategies() const;
  inline ::PB::db_strategy_vectors* mutable_db_strategies();
  inline ::PB::db_strategy_vectors* release_db_strategies();
  inline void set_allocated_db_strategies(::PB::db_strategy_vectors* db_strategies);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_strategy_vectors)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_db_strategies();
  inline void clear_has_db_strategies();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::db_strategy_vectors* db_strategies_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_strategy_vectors* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_strategy_levelup : public ::google::protobuf::Message {
 public:
  gp_notify_strategy_levelup();
  virtual ~gp_notify_strategy_levelup();

  gp_notify_strategy_levelup(const gp_notify_strategy_levelup& from);

  inline gp_notify_strategy_levelup& operator=(const gp_notify_strategy_levelup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_strategy_levelup& default_instance();

  void Swap(gp_notify_strategy_levelup* other);

  // implements Message ----------------------------------------------

  gp_notify_strategy_levelup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_strategy_levelup& from);
  void MergeFrom(const gp_notify_strategy_levelup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_strategy_levelup];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 strategy_group_tid = 2;
  inline bool has_strategy_group_tid() const;
  inline void clear_strategy_group_tid();
  static const int kStrategyGroupTidFieldNumber = 2;
  inline ::google::protobuf::int32 strategy_group_tid() const;
  inline void set_strategy_group_tid(::google::protobuf::int32 value);

  // optional int32 strategy_tid = 3;
  inline bool has_strategy_tid() const;
  inline void clear_strategy_tid();
  static const int kStrategyTidFieldNumber = 3;
  inline ::google::protobuf::int32 strategy_tid() const;
  inline void set_strategy_tid(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 chip_count = 5;
  inline bool has_chip_count() const;
  inline void clear_chip_count();
  static const int kChipCountFieldNumber = 5;
  inline ::google::protobuf::int32 chip_count() const;
  inline void set_chip_count(::google::protobuf::int32 value);

  // optional bool result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_strategy_levelup)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_strategy_group_tid();
  inline void clear_has_strategy_group_tid();
  inline void set_has_strategy_tid();
  inline void clear_has_strategy_tid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_chip_count();
  inline void clear_has_chip_count();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 strategy_group_tid_;
  ::google::protobuf::int32 strategy_tid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 chip_count_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_strategy_levelup* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_strategy_starup : public ::google::protobuf::Message {
 public:
  gp_notify_strategy_starup();
  virtual ~gp_notify_strategy_starup();

  gp_notify_strategy_starup(const gp_notify_strategy_starup& from);

  inline gp_notify_strategy_starup& operator=(const gp_notify_strategy_starup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_strategy_starup& default_instance();

  void Swap(gp_notify_strategy_starup* other);

  // implements Message ----------------------------------------------

  gp_notify_strategy_starup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_strategy_starup& from);
  void MergeFrom(const gp_notify_strategy_starup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_strategy_starup];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 strategy_group_tid = 2;
  inline bool has_strategy_group_tid() const;
  inline void clear_strategy_group_tid();
  static const int kStrategyGroupTidFieldNumber = 2;
  inline ::google::protobuf::int32 strategy_group_tid() const;
  inline void set_strategy_group_tid(::google::protobuf::int32 value);

  // optional int32 strategy_tid = 3;
  inline bool has_strategy_tid() const;
  inline void clear_strategy_tid();
  static const int kStrategyTidFieldNumber = 3;
  inline ::google::protobuf::int32 strategy_tid() const;
  inline void set_strategy_tid(::google::protobuf::int32 value);

  // optional int32 star_level = 4;
  inline bool has_star_level() const;
  inline void clear_star_level();
  static const int kStarLevelFieldNumber = 4;
  inline ::google::protobuf::int32 star_level() const;
  inline void set_star_level(::google::protobuf::int32 value);

  // optional int32 blessing_num = 5;
  inline bool has_blessing_num() const;
  inline void clear_blessing_num();
  static const int kBlessingNumFieldNumber = 5;
  inline ::google::protobuf::int32 blessing_num() const;
  inline void set_blessing_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_strategy_starup)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_strategy_group_tid();
  inline void clear_has_strategy_group_tid();
  inline void set_has_strategy_tid();
  inline void clear_has_strategy_tid();
  inline void set_has_star_level();
  inline void clear_has_star_level();
  inline void set_has_blessing_num();
  inline void clear_has_blessing_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 strategy_group_tid_;
  ::google::protobuf::int32 strategy_tid_;
  ::google::protobuf::int32 star_level_;
  ::google::protobuf::int32 blessing_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_strategy_starup* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_surface_train : public ::google::protobuf::Message {
 public:
  gp_notify_surface_train();
  virtual ~gp_notify_surface_train();

  gp_notify_surface_train(const gp_notify_surface_train& from);

  inline gp_notify_surface_train& operator=(const gp_notify_surface_train& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_surface_train& default_instance();

  void Swap(gp_notify_surface_train* other);

  // implements Message ----------------------------------------------

  gp_notify_surface_train* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_surface_train& from);
  void MergeFrom(const gp_notify_surface_train& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_surface_train];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 surface_tid = 2;
  inline bool has_surface_tid() const;
  inline void clear_surface_tid();
  static const int kSurfaceTidFieldNumber = 2;
  inline ::google::protobuf::int32 surface_tid() const;
  inline void set_surface_tid(::google::protobuf::int32 value);

  // optional int32 train_level = 3;
  inline bool has_train_level() const;
  inline void clear_train_level();
  static const int kTrainLevelFieldNumber = 3;
  inline ::google::protobuf::int32 train_level() const;
  inline void set_train_level(::google::protobuf::int32 value);

  // optional int32 train_result = 4;
  inline bool has_train_result() const;
  inline void clear_train_result();
  static const int kTrainResultFieldNumber = 4;
  inline ::google::protobuf::int32 train_result() const;
  inline void set_train_result(::google::protobuf::int32 value);

  // repeated .PB.db_surface_soul souls = 5;
  inline int souls_size() const;
  inline void clear_souls();
  static const int kSoulsFieldNumber = 5;
  inline const ::PB::db_surface_soul& souls(int index) const;
  inline ::PB::db_surface_soul* mutable_souls(int index);
  inline ::PB::db_surface_soul* add_souls();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul >&
      souls() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul >*
      mutable_souls();

  // @@protoc_insertion_point(class_scope:PB.gp_notify_surface_train)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_surface_tid();
  inline void clear_has_surface_tid();
  inline void set_has_train_level();
  inline void clear_has_train_level();
  inline void set_has_train_result();
  inline void clear_has_train_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 surface_tid_;
  ::google::protobuf::int32 train_level_;
  ::google::protobuf::int32 train_result_;
  ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul > souls_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_surface_train* default_instance_;
};
// -------------------------------------------------------------------

class gp_punishment_time : public ::google::protobuf::Message {
 public:
  gp_punishment_time();
  virtual ~gp_punishment_time();

  gp_punishment_time(const gp_punishment_time& from);

  inline gp_punishment_time& operator=(const gp_punishment_time& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_punishment_time& default_instance();

  void Swap(gp_punishment_time* other);

  // implements Message ----------------------------------------------

  gp_punishment_time* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_punishment_time& from);
  void MergeFrom(const gp_punishment_time& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_punishment_time];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 punishment_type = 2;
  inline bool has_punishment_type() const;
  inline void clear_punishment_type();
  static const int kPunishmentTypeFieldNumber = 2;
  inline ::google::protobuf::int32 punishment_type() const;
  inline void set_punishment_type(::google::protobuf::int32 value);

  // required int32 end_time = 3;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int32 end_time() const;
  inline void set_end_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_punishment_time)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_punishment_type();
  inline void clear_has_punishment_type();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 punishment_type_;
  ::google::protobuf::int32 end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_punishment_time* default_instance_;
};
// -------------------------------------------------------------------

class faction_battle_player_info : public ::google::protobuf::Message {
 public:
  faction_battle_player_info();
  virtual ~faction_battle_player_info();

  faction_battle_player_info(const faction_battle_player_info& from);

  inline faction_battle_player_info& operator=(const faction_battle_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const faction_battle_player_info& default_instance();

  void Swap(faction_battle_player_info* other);

  // implements Message ----------------------------------------------

  faction_battle_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const faction_battle_player_info& from);
  void MergeFrom(const faction_battle_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 kill = 4;
  inline bool has_kill() const;
  inline void clear_kill();
  static const int kKillFieldNumber = 4;
  inline ::google::protobuf::int32 kill() const;
  inline void set_kill(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.faction_battle_player_info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_kill();
  inline void clear_has_kill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  ::std::string* name_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 kill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static faction_battle_player_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_faction_battle_player_info : public ::google::protobuf::Message {
 public:
  gp_faction_battle_player_info();
  virtual ~gp_faction_battle_player_info();

  gp_faction_battle_player_info(const gp_faction_battle_player_info& from);

  inline gp_faction_battle_player_info& operator=(const gp_faction_battle_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_faction_battle_player_info& default_instance();

  void Swap(gp_faction_battle_player_info* other);

  // implements Message ----------------------------------------------

  gp_faction_battle_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_faction_battle_player_info& from);
  void MergeFrom(const gp_faction_battle_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_faction_battle_player_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 camp = 2;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 2;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // repeated .PB.faction_battle_player_info info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::PB::faction_battle_player_info& info(int index) const;
  inline ::PB::faction_battle_player_info* mutable_info(int index);
  inline ::PB::faction_battle_player_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::faction_battle_player_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::faction_battle_player_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:PB.gp_faction_battle_player_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_camp();
  inline void clear_has_camp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 camp_;
  ::google::protobuf::RepeatedPtrField< ::PB::faction_battle_player_info > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_faction_battle_player_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_attach_mingwen_result : public ::google::protobuf::Message {
 public:
  gp_equip_attach_mingwen_result();
  virtual ~gp_equip_attach_mingwen_result();

  gp_equip_attach_mingwen_result(const gp_equip_attach_mingwen_result& from);

  inline gp_equip_attach_mingwen_result& operator=(const gp_equip_attach_mingwen_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_attach_mingwen_result& default_instance();

  void Swap(gp_equip_attach_mingwen_result* other);

  // implements Message ----------------------------------------------

  gp_equip_attach_mingwen_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_attach_mingwen_result& from);
  void MergeFrom(const gp_equip_attach_mingwen_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_attach_mingwen_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 equip_index = 2;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 2;
  inline ::google::protobuf::int32 equip_index() const;
  inline void set_equip_index(::google::protobuf::int32 value);

  // required int32 hole_index = 3;
  inline bool has_hole_index() const;
  inline void clear_hole_index();
  static const int kHoleIndexFieldNumber = 3;
  inline ::google::protobuf::int32 hole_index() const;
  inline void set_hole_index(::google::protobuf::int32 value);

  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_attach_mingwen_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_hole_index();
  inline void clear_has_hole_index();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 equip_index_;
  ::google::protobuf::int32 hole_index_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_attach_mingwen_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_detach_mingwen_result : public ::google::protobuf::Message {
 public:
  gp_equip_detach_mingwen_result();
  virtual ~gp_equip_detach_mingwen_result();

  gp_equip_detach_mingwen_result(const gp_equip_detach_mingwen_result& from);

  inline gp_equip_detach_mingwen_result& operator=(const gp_equip_detach_mingwen_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_detach_mingwen_result& default_instance();

  void Swap(gp_equip_detach_mingwen_result* other);

  // implements Message ----------------------------------------------

  gp_equip_detach_mingwen_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_detach_mingwen_result& from);
  void MergeFrom(const gp_equip_detach_mingwen_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_detach_mingwen_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required int32 equip_index = 2;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 2;
  inline ::google::protobuf::int32 equip_index() const;
  inline void set_equip_index(::google::protobuf::int32 value);

  // required int32 hole_index = 3;
  inline bool has_hole_index() const;
  inline void clear_hole_index();
  static const int kHoleIndexFieldNumber = 3;
  inline ::google::protobuf::int32 hole_index() const;
  inline void set_hole_index(::google::protobuf::int32 value);

  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_detach_mingwen_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_hole_index();
  inline void clear_has_hole_index();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 equip_index_;
  ::google::protobuf::int32 hole_index_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_detach_mingwen_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_magic_weapon : public ::google::protobuf::Message {
 public:
  gp_notify_magic_weapon();
  virtual ~gp_notify_magic_weapon();

  gp_notify_magic_weapon(const gp_notify_magic_weapon& from);

  inline gp_notify_magic_weapon& operator=(const gp_notify_magic_weapon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_magic_weapon& default_instance();

  void Swap(gp_notify_magic_weapon* other);

  // implements Message ----------------------------------------------

  gp_notify_magic_weapon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_magic_weapon& from);
  void MergeFrom(const gp_notify_magic_weapon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_magic_weapon];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.db_magic_weapons weapons = 2;
  inline bool has_weapons() const;
  inline void clear_weapons();
  static const int kWeaponsFieldNumber = 2;
  inline const ::PB::db_magic_weapons& weapons() const;
  inline ::PB::db_magic_weapons* mutable_weapons();
  inline ::PB::db_magic_weapons* release_weapons();
  inline void set_allocated_weapons(::PB::db_magic_weapons* weapons);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_magic_weapon)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_weapons();
  inline void clear_has_weapons();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::db_magic_weapons* weapons_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_magic_weapon* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_magic_weapon_train_result : public ::google::protobuf::Message {
 public:
  gp_notify_magic_weapon_train_result();
  virtual ~gp_notify_magic_weapon_train_result();

  gp_notify_magic_weapon_train_result(const gp_notify_magic_weapon_train_result& from);

  inline gp_notify_magic_weapon_train_result& operator=(const gp_notify_magic_weapon_train_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_magic_weapon_train_result& default_instance();

  void Swap(gp_notify_magic_weapon_train_result* other);

  // implements Message ----------------------------------------------

  gp_notify_magic_weapon_train_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_magic_weapon_train_result& from);
  void MergeFrom(const gp_notify_magic_weapon_train_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_magic_weapon_train_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 weapon_tid = 2;
  inline bool has_weapon_tid() const;
  inline void clear_weapon_tid();
  static const int kWeaponTidFieldNumber = 2;
  inline ::google::protobuf::int32 weapon_tid() const;
  inline void set_weapon_tid(::google::protobuf::int32 value);

  // optional int32 property_index = 3;
  inline bool has_property_index() const;
  inline void clear_property_index();
  static const int kPropertyIndexFieldNumber = 3;
  inline ::google::protobuf::int32 property_index() const;
  inline void set_property_index(::google::protobuf::int32 value);

  // optional int32 multime = 4;
  inline bool has_multime() const;
  inline void clear_multime();
  static const int kMultimeFieldNumber = 4;
  inline ::google::protobuf::int32 multime() const;
  inline void set_multime(::google::protobuf::int32 value);

  // optional int32 exp_value = 5;
  inline bool has_exp_value() const;
  inline void clear_exp_value();
  static const int kExpValueFieldNumber = 5;
  inline ::google::protobuf::int32 exp_value() const;
  inline void set_exp_value(::google::protobuf::int32 value);

  // optional int32 end_time = 6;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  inline ::google::protobuf::int32 end_time() const;
  inline void set_end_time(::google::protobuf::int32 value);

  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional bool active = 8;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 8;
  inline bool active() const;
  inline void set_active(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_magic_weapon_train_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_weapon_tid();
  inline void clear_has_weapon_tid();
  inline void set_has_property_index();
  inline void clear_has_property_index();
  inline void set_has_multime();
  inline void clear_has_multime();
  inline void set_has_exp_value();
  inline void clear_has_exp_value();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_active();
  inline void clear_has_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 weapon_tid_;
  ::google::protobuf::int32 property_index_;
  ::google::protobuf::int32 multime_;
  ::google::protobuf::int32 exp_value_;
  ::google::protobuf::int32 end_time_;
  ::google::protobuf::int32 level_;
  bool active_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_magic_weapon_train_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_magic_weapon_summon_result : public ::google::protobuf::Message {
 public:
  gp_notify_magic_weapon_summon_result();
  virtual ~gp_notify_magic_weapon_summon_result();

  gp_notify_magic_weapon_summon_result(const gp_notify_magic_weapon_summon_result& from);

  inline gp_notify_magic_weapon_summon_result& operator=(const gp_notify_magic_weapon_summon_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_magic_weapon_summon_result& default_instance();

  void Swap(gp_notify_magic_weapon_summon_result* other);

  // implements Message ----------------------------------------------

  gp_notify_magic_weapon_summon_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_magic_weapon_summon_result& from);
  void MergeFrom(const gp_notify_magic_weapon_summon_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_magic_weapon_summon_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 weapon_tid = 2;
  inline bool has_weapon_tid() const;
  inline void clear_weapon_tid();
  static const int kWeaponTidFieldNumber = 2;
  inline ::google::protobuf::int32 weapon_tid() const;
  inline void set_weapon_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_magic_weapon_summon_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_weapon_tid();
  inline void clear_has_weapon_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 weapon_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_magic_weapon_summon_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_magic_weapon_refine_result : public ::google::protobuf::Message {
 public:
  gp_notify_magic_weapon_refine_result();
  virtual ~gp_notify_magic_weapon_refine_result();

  gp_notify_magic_weapon_refine_result(const gp_notify_magic_weapon_refine_result& from);

  inline gp_notify_magic_weapon_refine_result& operator=(const gp_notify_magic_weapon_refine_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_magic_weapon_refine_result& default_instance();

  void Swap(gp_notify_magic_weapon_refine_result* other);

  // implements Message ----------------------------------------------

  gp_notify_magic_weapon_refine_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_magic_weapon_refine_result& from);
  void MergeFrom(const gp_notify_magic_weapon_refine_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_magic_weapon_refine_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 weapon_tid = 2;
  inline bool has_weapon_tid() const;
  inline void clear_weapon_tid();
  static const int kWeaponTidFieldNumber = 2;
  inline ::google::protobuf::int32 weapon_tid() const;
  inline void set_weapon_tid(::google::protobuf::int32 value);

  // optional int32 color_group_index = 3;
  inline bool has_color_group_index() const;
  inline void clear_color_group_index();
  static const int kColorGroupIndexFieldNumber = 3;
  inline ::google::protobuf::int32 color_group_index() const;
  inline void set_color_group_index(::google::protobuf::int32 value);

  // optional int32 color_index = 4;
  inline bool has_color_index() const;
  inline void clear_color_index();
  static const int kColorIndexFieldNumber = 4;
  inline ::google::protobuf::int32 color_index() const;
  inline void set_color_index(::google::protobuf::int32 value);

  // optional int32 train_level = 5;
  inline bool has_train_level() const;
  inline void clear_train_level();
  static const int kTrainLevelFieldNumber = 5;
  inline ::google::protobuf::int32 train_level() const;
  inline void set_train_level(::google::protobuf::int32 value);

  // optional int32 blessing_value = 6;
  inline bool has_blessing_value() const;
  inline void clear_blessing_value();
  static const int kBlessingValueFieldNumber = 6;
  inline ::google::protobuf::int32 blessing_value() const;
  inline void set_blessing_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_magic_weapon_refine_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_weapon_tid();
  inline void clear_has_weapon_tid();
  inline void set_has_color_group_index();
  inline void clear_has_color_group_index();
  inline void set_has_color_index();
  inline void clear_has_color_index();
  inline void set_has_train_level();
  inline void clear_has_train_level();
  inline void set_has_blessing_value();
  inline void clear_has_blessing_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 weapon_tid_;
  ::google::protobuf::int32 color_group_index_;
  ::google::protobuf::int32 color_index_;
  ::google::protobuf::int32 train_level_;
  ::google::protobuf::int32 blessing_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_magic_weapon_refine_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_magic_weapon_change : public ::google::protobuf::Message {
 public:
  gp_notify_magic_weapon_change();
  virtual ~gp_notify_magic_weapon_change();

  gp_notify_magic_weapon_change(const gp_notify_magic_weapon_change& from);

  inline gp_notify_magic_weapon_change& operator=(const gp_notify_magic_weapon_change& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_magic_weapon_change& default_instance();

  void Swap(gp_notify_magic_weapon_change* other);

  // implements Message ----------------------------------------------

  gp_notify_magic_weapon_change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_magic_weapon_change& from);
  void MergeFrom(const gp_notify_magic_weapon_change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_magic_weapon_change];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional int32 weapon_tid = 3;
  inline bool has_weapon_tid() const;
  inline void clear_weapon_tid();
  static const int kWeaponTidFieldNumber = 3;
  inline ::google::protobuf::int32 weapon_tid() const;
  inline void set_weapon_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_magic_weapon_change)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_weapon_tid();
  inline void clear_has_weapon_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 weapon_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_magic_weapon_change* default_instance_;
};
// -------------------------------------------------------------------

class gp_equip_soul_result : public ::google::protobuf::Message {
 public:
  gp_equip_soul_result();
  virtual ~gp_equip_soul_result();

  gp_equip_soul_result(const gp_equip_soul_result& from);

  inline gp_equip_soul_result& operator=(const gp_equip_soul_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_equip_soul_result& default_instance();

  void Swap(gp_equip_soul_result* other);

  // implements Message ----------------------------------------------

  gp_equip_soul_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_equip_soul_result& from);
  void MergeFrom(const gp_equip_soul_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_soul_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 pet_location = 2;
  inline bool has_pet_location() const;
  inline void clear_pet_location();
  static const int kPetLocationFieldNumber = 2;
  inline ::google::protobuf::int32 pet_location() const;
  inline void set_pet_location(::google::protobuf::int32 value);

  // optional int32 equip_index = 3;
  inline bool has_equip_index() const;
  inline void clear_equip_index();
  static const int kEquipIndexFieldNumber = 3;
  inline ::google::protobuf::int32 equip_index() const;
  inline void set_equip_index(::google::protobuf::int32 value);

  // optional int32 property_index = 4;
  inline bool has_property_index() const;
  inline void clear_property_index();
  static const int kPropertyIndexFieldNumber = 4;
  inline ::google::protobuf::int32 property_index() const;
  inline void set_property_index(::google::protobuf::int32 value);

  // optional int32 exp_change = 5;
  inline bool has_exp_change() const;
  inline void clear_exp_change();
  static const int kExpChangeFieldNumber = 5;
  inline ::google::protobuf::int32 exp_change() const;
  inline void set_exp_change(::google::protobuf::int32 value);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 result = 7;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 7;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_equip_soul_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pet_location();
  inline void clear_has_pet_location();
  inline void set_has_equip_index();
  inline void clear_has_equip_index();
  inline void set_has_property_index();
  inline void clear_has_property_index();
  inline void set_has_exp_change();
  inline void clear_has_exp_change();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 pet_location_;
  ::google::protobuf::int32 equip_index_;
  ::google::protobuf::int32 property_index_;
  ::google::protobuf::int32 exp_change_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_equip_soul_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_crack_wuzhuang_result : public ::google::protobuf::Message {
 public:
  gp_crack_wuzhuang_result();
  virtual ~gp_crack_wuzhuang_result();

  gp_crack_wuzhuang_result(const gp_crack_wuzhuang_result& from);

  inline gp_crack_wuzhuang_result& operator=(const gp_crack_wuzhuang_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_crack_wuzhuang_result& default_instance();

  void Swap(gp_crack_wuzhuang_result* other);

  // implements Message ----------------------------------------------

  gp_crack_wuzhuang_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_crack_wuzhuang_result& from);
  void MergeFrom(const gp_crack_wuzhuang_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_crack_wuzhuang_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 achievement_id = 2;
  inline bool has_achievement_id() const;
  inline void clear_achievement_id();
  static const int kAchievementIdFieldNumber = 2;
  inline ::google::protobuf::int32 achievement_id() const;
  inline void set_achievement_id(::google::protobuf::int32 value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_crack_wuzhuang_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_achievement_id();
  inline void clear_has_achievement_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 achievement_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_crack_wuzhuang_result* default_instance_;
};
// -------------------------------------------------------------------

class achievement_info : public ::google::protobuf::Message {
 public:
  achievement_info();
  virtual ~achievement_info();

  achievement_info(const achievement_info& from);

  inline achievement_info& operator=(const achievement_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const achievement_info& default_instance();

  void Swap(achievement_info* other);

  // implements Message ----------------------------------------------

  achievement_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const achievement_info& from);
  void MergeFrom(const achievement_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bool accomplish = 2;
  inline bool has_accomplish() const;
  inline void clear_accomplish();
  static const int kAccomplishFieldNumber = 2;
  inline bool accomplish() const;
  inline void set_accomplish(bool value);

  // repeated int32 condition_data = 3;
  inline int condition_data_size() const;
  inline void clear_condition_data();
  static const int kConditionDataFieldNumber = 3;
  inline ::google::protobuf::int32 condition_data(int index) const;
  inline void set_condition_data(int index, ::google::protobuf::int32 value);
  inline void add_condition_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      condition_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_condition_data();

  // @@protoc_insertion_point(class_scope:PB.achievement_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_accomplish();
  inline void clear_has_accomplish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  bool accomplish_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > condition_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static achievement_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_roam_battle_achievement : public ::google::protobuf::Message {
 public:
  gp_roam_battle_achievement();
  virtual ~gp_roam_battle_achievement();

  gp_roam_battle_achievement(const gp_roam_battle_achievement& from);

  inline gp_roam_battle_achievement& operator=(const gp_roam_battle_achievement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_roam_battle_achievement& default_instance();

  void Swap(gp_roam_battle_achievement* other);

  // implements Message ----------------------------------------------

  gp_roam_battle_achievement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_roam_battle_achievement& from);
  void MergeFrom(const gp_roam_battle_achievement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_roam_battle_achievement];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // repeated .PB.achievement_info achievements = 3;
  inline int achievements_size() const;
  inline void clear_achievements();
  static const int kAchievementsFieldNumber = 3;
  inline const ::PB::achievement_info& achievements(int index) const;
  inline ::PB::achievement_info* mutable_achievements(int index);
  inline ::PB::achievement_info* add_achievements();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::achievement_info >&
      achievements() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::achievement_info >*
      mutable_achievements();

  // @@protoc_insertion_point(class_scope:PB.gp_roam_battle_achievement)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::achievement_info > achievements_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_roam_battle_achievement* default_instance_;
};
// -------------------------------------------------------------------

class gp_richman_operate_re : public ::google::protobuf::Message {
 public:
  gp_richman_operate_re();
  virtual ~gp_richman_operate_re();

  gp_richman_operate_re(const gp_richman_operate_re& from);

  inline gp_richman_operate_re& operator=(const gp_richman_operate_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_richman_operate_re& default_instance();

  void Swap(gp_richman_operate_re* other);

  // implements Message ----------------------------------------------

  gp_richman_operate_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_richman_operate_re& from);
  void MergeFrom(const gp_richman_operate_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_richman_operate_re];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 operate_type = 2;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 2;
  inline ::google::protobuf::int32 operate_type() const;
  inline void set_operate_type(::google::protobuf::int32 value);

  // optional int32 operate_result = 3;
  inline bool has_operate_result() const;
  inline void clear_operate_result();
  static const int kOperateResultFieldNumber = 3;
  inline ::google::protobuf::int32 operate_result() const;
  inline void set_operate_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_richman_operate_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_operate_result();
  inline void clear_has_operate_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 operate_type_;
  ::google::protobuf::int32 operate_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_richman_operate_re* default_instance_;
};
// -------------------------------------------------------------------

class richman_passby_award : public ::google::protobuf::Message {
 public:
  richman_passby_award();
  virtual ~richman_passby_award();

  richman_passby_award(const richman_passby_award& from);

  inline richman_passby_award& operator=(const richman_passby_award& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const richman_passby_award& default_instance();

  void Swap(richman_passby_award* other);

  // implements Message ----------------------------------------------

  richman_passby_award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const richman_passby_award& from);
  void MergeFrom(const richman_passby_award& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cell_pos = 1;
  inline bool has_cell_pos() const;
  inline void clear_cell_pos();
  static const int kCellPosFieldNumber = 1;
  inline ::google::protobuf::int32 cell_pos() const;
  inline void set_cell_pos(::google::protobuf::int32 value);

  // optional int32 award_tid = 2;
  inline bool has_award_tid() const;
  inline void clear_award_tid();
  static const int kAwardTidFieldNumber = 2;
  inline ::google::protobuf::int32 award_tid() const;
  inline void set_award_tid(::google::protobuf::int32 value);

  // optional int32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.richman_passby_award)
 private:
  inline void set_has_cell_pos();
  inline void clear_has_cell_pos();
  inline void set_has_award_tid();
  inline void clear_has_award_tid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cell_pos_;
  ::google::protobuf::int32 award_tid_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static richman_passby_award* default_instance_;
};
// -------------------------------------------------------------------

class richman_data : public ::google::protobuf::Message {
 public:
  richman_data();
  virtual ~richman_data();

  richman_data(const richman_data& from);

  inline richman_data& operator=(const richman_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const richman_data& default_instance();

  void Swap(richman_data* other);

  // implements Message ----------------------------------------------

  richman_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const richman_data& from);
  void MergeFrom(const richman_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_RICHMAN_DATA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // optional int32 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // optional int32 step_pos = 3;
  inline bool has_step_pos() const;
  inline void clear_step_pos();
  static const int kStepPosFieldNumber = 3;
  inline ::google::protobuf::int32 step_pos() const;
  inline void set_step_pos(::google::protobuf::int32 value);

  // repeated int32 game_cells = 4;
  inline int game_cells_size() const;
  inline void clear_game_cells();
  static const int kGameCellsFieldNumber = 4;
  inline ::google::protobuf::int32 game_cells(int index) const;
  inline void set_game_cells(int index, ::google::protobuf::int32 value);
  inline void add_game_cells(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      game_cells() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_game_cells();

  // repeated .PB.richman_passby_award passby_award = 5;
  inline int passby_award_size() const;
  inline void clear_passby_award();
  static const int kPassbyAwardFieldNumber = 5;
  inline const ::PB::richman_passby_award& passby_award(int index) const;
  inline ::PB::richman_passby_award* mutable_passby_award(int index);
  inline ::PB::richman_passby_award* add_passby_award();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::richman_passby_award >&
      passby_award() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::richman_passby_award >*
      mutable_passby_award();

  // repeated int32 touched_cells = 6;
  inline int touched_cells_size() const;
  inline void clear_touched_cells();
  static const int kTouchedCellsFieldNumber = 6;
  inline ::google::protobuf::int32 touched_cells(int index) const;
  inline void set_touched_cells(int index, ::google::protobuf::int32 value);
  inline void add_touched_cells(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      touched_cells() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_touched_cells();

  // @@protoc_insertion_point(class_scope:PB.richman_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_step_pos();
  inline void clear_has_step_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 game_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > game_cells_;
  ::google::protobuf::RepeatedPtrField< ::PB::richman_passby_award > passby_award_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > touched_cells_;
  ::google::protobuf::int32 step_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static richman_data* default_instance_;
};
// -------------------------------------------------------------------

class gp_richman_data : public ::google::protobuf::Message {
 public:
  gp_richman_data();
  virtual ~gp_richman_data();

  gp_richman_data(const gp_richman_data& from);

  inline gp_richman_data& operator=(const gp_richman_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_richman_data& default_instance();

  void Swap(gp_richman_data* other);

  // implements Message ----------------------------------------------

  gp_richman_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_richman_data& from);
  void MergeFrom(const gp_richman_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_richman_data];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.richman_data data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::PB::richman_data& data() const;
  inline ::PB::richman_data* mutable_data();
  inline ::PB::richman_data* release_data();
  inline void set_allocated_data(::PB::richman_data* data);

  // @@protoc_insertion_point(class_scope:PB.gp_richman_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::richman_data* data_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_richman_data* default_instance_;
};
// -------------------------------------------------------------------

class gp_roam_zhaoji_notify : public ::google::protobuf::Message {
 public:
  gp_roam_zhaoji_notify();
  virtual ~gp_roam_zhaoji_notify();

  gp_roam_zhaoji_notify(const gp_roam_zhaoji_notify& from);

  inline gp_roam_zhaoji_notify& operator=(const gp_roam_zhaoji_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_roam_zhaoji_notify& default_instance();

  void Swap(gp_roam_zhaoji_notify* other);

  // implements Message ----------------------------------------------

  gp_roam_zhaoji_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_roam_zhaoji_notify& from);
  void MergeFrom(const gp_roam_zhaoji_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_roam_zhaoji];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_roam_zhaoji_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 timestamp_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_roam_zhaoji_notify* default_instance_;
};
// -------------------------------------------------------------------

class hero_event : public ::google::protobuf::Message {
 public:
  hero_event();
  virtual ~hero_event();

  hero_event(const hero_event& from);

  inline hero_event& operator=(const hero_event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_event& default_instance();

  void Swap(hero_event* other);

  // implements Message ----------------------------------------------

  hero_event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_event& from);
  void MergeFrom(const hero_event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 eventType = 1;
  inline bool has_eventtype() const;
  inline void clear_eventtype();
  static const int kEventTypeFieldNumber = 1;
  inline ::google::protobuf::int32 eventtype() const;
  inline void set_eventtype(::google::protobuf::int32 value);

  // optional int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PB.hero_event)
 private:
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 eventtype_;
  ::google::protobuf::int32 time_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static hero_event* default_instance_;
};
// -------------------------------------------------------------------

class gp_hero_event : public ::google::protobuf::Message {
 public:
  gp_hero_event();
  virtual ~gp_hero_event();

  gp_hero_event(const gp_hero_event& from);

  inline gp_hero_event& operator=(const gp_hero_event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_hero_event& default_instance();

  void Swap(gp_hero_event* other);

  // implements Message ----------------------------------------------

  gp_hero_event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_hero_event& from);
  void MergeFrom(const gp_hero_event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_hero_event];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 camp = 2;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 2;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // repeated .PB.hero_event event = 3;
  inline int event_size() const;
  inline void clear_event();
  static const int kEventFieldNumber = 3;
  inline const ::PB::hero_event& event(int index) const;
  inline ::PB::hero_event* mutable_event(int index);
  inline ::PB::hero_event* add_event();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::hero_event >&
      event() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::hero_event >*
      mutable_event();

  // @@protoc_insertion_point(class_scope:PB.gp_hero_event)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_camp();
  inline void clear_has_camp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 camp_;
  ::google::protobuf::RepeatedPtrField< ::PB::hero_event > event_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_hero_event* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_general_souls : public ::google::protobuf::Message {
 public:
  gp_notify_general_souls();
  virtual ~gp_notify_general_souls();

  gp_notify_general_souls(const gp_notify_general_souls& from);

  inline gp_notify_general_souls& operator=(const gp_notify_general_souls& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_general_souls& default_instance();

  void Swap(gp_notify_general_souls* other);

  // implements Message ----------------------------------------------

  gp_notify_general_souls* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_general_souls& from);
  void MergeFrom(const gp_notify_general_souls& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_general_soul];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.db_general_souls generals = 2;
  inline bool has_generals() const;
  inline void clear_generals();
  static const int kGeneralsFieldNumber = 2;
  inline const ::PB::db_general_souls& generals() const;
  inline ::PB::db_general_souls* mutable_generals();
  inline ::PB::db_general_souls* release_generals();
  inline void set_allocated_generals(::PB::db_general_souls* generals);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_general_souls)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_generals();
  inline void clear_has_generals();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::db_general_souls* generals_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_general_souls* default_instance_;
};
// -------------------------------------------------------------------

class gp_gain_general_soul : public ::google::protobuf::Message {
 public:
  gp_gain_general_soul();
  virtual ~gp_gain_general_soul();

  gp_gain_general_soul(const gp_gain_general_soul& from);

  inline gp_gain_general_soul& operator=(const gp_gain_general_soul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_gain_general_soul& default_instance();

  void Swap(gp_gain_general_soul* other);

  // implements Message ----------------------------------------------

  gp_gain_general_soul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_gain_general_soul& from);
  void MergeFrom(const gp_gain_general_soul& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_gain_general_soul];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 general_tid = 2;
  inline bool has_general_tid() const;
  inline void clear_general_tid();
  static const int kGeneralTidFieldNumber = 2;
  inline ::google::protobuf::int32 general_tid() const;
  inline void set_general_tid(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_gain_general_soul)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_general_tid();
  inline void clear_has_general_tid();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 general_tid_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_gain_general_soul* default_instance_;
};
// -------------------------------------------------------------------

class gp_notify_general_soul : public ::google::protobuf::Message {
 public:
  gp_notify_general_soul();
  virtual ~gp_notify_general_soul();

  gp_notify_general_soul(const gp_notify_general_soul& from);

  inline gp_notify_general_soul& operator=(const gp_notify_general_soul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_notify_general_soul& default_instance();

  void Swap(gp_notify_general_soul* other);

  // implements Message ----------------------------------------------

  gp_notify_general_soul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_notify_general_soul& from);
  void MergeFrom(const gp_notify_general_soul& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_general_soul];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 general_tid = 2;
  inline bool has_general_tid() const;
  inline void clear_general_tid();
  static const int kGeneralTidFieldNumber = 2;
  inline ::google::protobuf::int32 general_tid() const;
  inline void set_general_tid(::google::protobuf::int32 value);

  // optional .PB.db_general_soul general_soul = 3;
  inline bool has_general_soul() const;
  inline void clear_general_soul();
  static const int kGeneralSoulFieldNumber = 3;
  inline const ::PB::db_general_soul& general_soul() const;
  inline ::PB::db_general_soul* mutable_general_soul();
  inline ::PB::db_general_soul* release_general_soul();
  inline void set_allocated_general_soul(::PB::db_general_soul* general_soul);

  // @@protoc_insertion_point(class_scope:PB.gp_notify_general_soul)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_general_tid();
  inline void clear_has_general_tid();
  inline void set_has_general_soul();
  inline void clear_has_general_soul();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 general_tid_;
  ::PB::db_general_soul* general_soul_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_notify_general_soul* default_instance_;
};
// -------------------------------------------------------------------

class gp_synthetize_result : public ::google::protobuf::Message {
 public:
  gp_synthetize_result();
  virtual ~gp_synthetize_result();

  gp_synthetize_result(const gp_synthetize_result& from);

  inline gp_synthetize_result& operator=(const gp_synthetize_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_synthetize_result& default_instance();

  void Swap(gp_synthetize_result* other);

  // implements Message ----------------------------------------------

  gp_synthetize_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_synthetize_result& from);
  void MergeFrom(const gp_synthetize_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_synthetize_result];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.general_list success_list = 2;
  inline bool has_success_list() const;
  inline void clear_success_list();
  static const int kSuccessListFieldNumber = 2;
  inline const ::PB::general_list& success_list() const;
  inline ::PB::general_list* mutable_success_list();
  inline ::PB::general_list* release_success_list();
  inline void set_allocated_success_list(::PB::general_list* success_list);

  // optional .PB.general_list fail_list = 3;
  inline bool has_fail_list() const;
  inline void clear_fail_list();
  static const int kFailListFieldNumber = 3;
  inline const ::PB::general_list& fail_list() const;
  inline ::PB::general_list* mutable_fail_list();
  inline ::PB::general_list* release_fail_list();
  inline void set_allocated_fail_list(::PB::general_list* fail_list);

  // @@protoc_insertion_point(class_scope:PB.gp_synthetize_result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_success_list();
  inline void clear_has_success_list();
  inline void set_has_fail_list();
  inline void clear_has_fail_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::general_list* success_list_;
  ::PB::general_list* fail_list_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_synthetize_result* default_instance_;
};
// -------------------------------------------------------------------

class gp_dynamic_move_map : public ::google::protobuf::Message {
 public:
  gp_dynamic_move_map();
  virtual ~gp_dynamic_move_map();

  gp_dynamic_move_map(const gp_dynamic_move_map& from);

  inline gp_dynamic_move_map& operator=(const gp_dynamic_move_map& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_dynamic_move_map& default_instance();

  void Swap(gp_dynamic_move_map* other);

  // implements Message ----------------------------------------------

  gp_dynamic_move_map* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_dynamic_move_map& from);
  void MergeFrom(const gp_dynamic_move_map& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_dynamic_move_map];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // repeated int32 map_seq = 2;
  inline int map_seq_size() const;
  inline void clear_map_seq();
  static const int kMapSeqFieldNumber = 2;
  inline ::google::protobuf::int32 map_seq(int index) const;
  inline void set_map_seq(int index, ::google::protobuf::int32 value);
  inline void add_map_seq(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      map_seq() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_map_seq();

  // optional int32 scene_id = 4;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 4;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_dynamic_move_map)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > map_seq_;
  int type_;
  ::google::protobuf::int32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_dynamic_move_map* default_instance_;
};
// -------------------------------------------------------------------

class level_object_info : public ::google::protobuf::Message {
 public:
  level_object_info();
  virtual ~level_object_info();

  level_object_info(const level_object_info& from);

  inline level_object_info& operator=(const level_object_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const level_object_info& default_instance();

  void Swap(level_object_info* other);

  // implements Message ----------------------------------------------

  level_object_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const level_object_info& from);
  void MergeFrom(const level_object_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ruid = 1;
  inline bool has_ruid() const;
  inline void clear_ruid();
  static const int kRuidFieldNumber = 1;
  inline ::google::protobuf::int64 ruid() const;
  inline void set_ruid(::google::protobuf::int64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated int32 param = 3;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline ::google::protobuf::int32 param(int index) const;
  inline void set_param(int index, ::google::protobuf::int32 value);
  inline void add_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_param();

  // @@protoc_insertion_point(class_scope:PB.level_object_info)
 private:
  inline void set_has_ruid();
  inline void clear_has_ruid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 ruid_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static level_object_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_level_object_info : public ::google::protobuf::Message {
 public:
  gp_level_object_info();
  virtual ~gp_level_object_info();

  gp_level_object_info(const gp_level_object_info& from);

  inline gp_level_object_info& operator=(const gp_level_object_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_level_object_info& default_instance();

  void Swap(gp_level_object_info* other);

  // implements Message ----------------------------------------------

  gp_level_object_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_level_object_info& from);
  void MergeFrom(const gp_level_object_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_level_object_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // repeated .PB.level_object_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PB::level_object_info& info(int index) const;
  inline ::PB::level_object_info* mutable_info(int index);
  inline ::PB::level_object_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::level_object_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::level_object_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:PB.gp_level_object_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::level_object_info > info_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_level_object_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_self_leave_scene : public ::google::protobuf::Message {
 public:
  gp_self_leave_scene();
  virtual ~gp_self_leave_scene();

  gp_self_leave_scene(const gp_self_leave_scene& from);

  inline gp_self_leave_scene& operator=(const gp_self_leave_scene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_self_leave_scene& default_instance();

  void Swap(gp_self_leave_scene* other);

  // implements Message ----------------------------------------------

  gp_self_leave_scene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_self_leave_scene& from);
  void MergeFrom(const gp_self_leave_scene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_self_leave_scene];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional uint32 scene_tag = 2;
  inline bool has_scene_tag() const;
  inline void clear_scene_tag();
  static const int kSceneTagFieldNumber = 2;
  inline ::google::protobuf::uint32 scene_tag() const;
  inline void set_scene_tag(::google::protobuf::uint32 value);

  // optional bool is_seamless = 3 [default = false];
  inline bool has_is_seamless() const;
  inline void clear_is_seamless();
  static const int kIsSeamlessFieldNumber = 3;
  inline bool is_seamless() const;
  inline void set_is_seamless(bool value);

  // @@protoc_insertion_point(class_scope:PB.gp_self_leave_scene)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_scene_tag();
  inline void clear_has_scene_tag();
  inline void set_has_is_seamless();
  inline void clear_has_is_seamless();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 scene_tag_;
  bool is_seamless_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_self_leave_scene* default_instance_;
};
// -------------------------------------------------------------------

class gp_self_misc_property : public ::google::protobuf::Message {
 public:
  gp_self_misc_property();
  virtual ~gp_self_misc_property();

  gp_self_misc_property(const gp_self_misc_property& from);

  inline gp_self_misc_property& operator=(const gp_self_misc_property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_self_misc_property& default_instance();

  void Swap(gp_self_misc_property* other);

  // implements Message ----------------------------------------------

  gp_self_misc_property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_self_misc_property& from);
  void MergeFrom(const gp_self_misc_property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_self_misc_property];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional uint32 cur_skill_spec_index = 2;
  inline bool has_cur_skill_spec_index() const;
  inline void clear_cur_skill_spec_index();
  static const int kCurSkillSpecIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_skill_spec_index() const;
  inline void set_cur_skill_spec_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_self_misc_property)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cur_skill_spec_index();
  inline void clear_has_cur_skill_spec_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 cur_skill_spec_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_self_misc_property* default_instance_;
};
// -------------------------------------------------------------------

class db_player_misc_revive_data : public ::google::protobuf::Message {
 public:
  db_player_misc_revive_data();
  virtual ~db_player_misc_revive_data();

  db_player_misc_revive_data(const db_player_misc_revive_data& from);

  inline db_player_misc_revive_data& operator=(const db_player_misc_revive_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_misc_revive_data& default_instance();

  void Swap(db_player_misc_revive_data* other);

  // implements Message ----------------------------------------------

  db_player_misc_revive_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_misc_revive_data& from);
  void MergeFrom(const db_player_misc_revive_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool revive_on_enter = 1;
  inline bool has_revive_on_enter() const;
  inline void clear_revive_on_enter();
  static const int kReviveOnEnterFieldNumber = 1;
  inline bool revive_on_enter() const;
  inline void set_revive_on_enter(bool value);

  // @@protoc_insertion_point(class_scope:PB.db_player_misc.revive_data)
 private:
  inline void set_has_revive_on_enter();
  inline void clear_has_revive_on_enter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool revive_on_enter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_player_misc_revive_data* default_instance_;
};
// -------------------------------------------------------------------

class db_player_misc : public ::google::protobuf::Message {
 public:
  db_player_misc();
  virtual ~db_player_misc();

  db_player_misc(const db_player_misc& from);

  inline db_player_misc& operator=(const db_player_misc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_misc& default_instance();

  void Swap(db_player_misc* other);

  // implements Message ----------------------------------------------

  db_player_misc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_misc& from);
  void MergeFrom(const db_player_misc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef db_player_misc_revive_data revive_data;

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_PLAYER_MISC];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // optional .PB.db_player_misc.revive_data revive = 2;
  inline bool has_revive() const;
  inline void clear_revive();
  static const int kReviveFieldNumber = 2;
  inline const ::PB::db_player_misc_revive_data& revive() const;
  inline ::PB::db_player_misc_revive_data* mutable_revive();
  inline ::PB::db_player_misc_revive_data* release_revive();
  inline void set_allocated_revive(::PB::db_player_misc_revive_data* revive);

  // optional int32 prev_levelup_time_used = 3;
  inline bool has_prev_levelup_time_used() const;
  inline void clear_prev_levelup_time_used();
  static const int kPrevLevelupTimeUsedFieldNumber = 3;
  inline ::google::protobuf::int32 prev_levelup_time_used() const;
  inline void set_prev_levelup_time_used(::google::protobuf::int32 value);

  // optional .PB.gp_multi_exp multi_exp = 4;
  inline bool has_multi_exp() const;
  inline void clear_multi_exp();
  static const int kMultiExpFieldNumber = 4;
  inline const ::PB::gp_multi_exp& multi_exp() const;
  inline ::PB::gp_multi_exp* mutable_multi_exp();
  inline ::PB::gp_multi_exp* release_multi_exp();
  inline void set_allocated_multi_exp(::PB::gp_multi_exp* multi_exp);

  // optional .PB.gp_refuse_fight refuse_fight = 5;
  inline bool has_refuse_fight() const;
  inline void clear_refuse_fight();
  static const int kRefuseFightFieldNumber = 5;
  inline const ::PB::gp_refuse_fight& refuse_fight() const;
  inline ::PB::gp_refuse_fight* mutable_refuse_fight();
  inline ::PB::gp_refuse_fight* release_refuse_fight();
  inline void set_allocated_refuse_fight(::PB::gp_refuse_fight* refuse_fight);

  // optional int32 old_prof_mask = 6;
  inline bool has_old_prof_mask() const;
  inline void clear_old_prof_mask();
  static const int kOldProfMaskFieldNumber = 6;
  inline ::google::protobuf::int32 old_prof_mask() const;
  inline void set_old_prof_mask(::google::protobuf::int32 value);

  // repeated .PB.gp_old_prof_skill_level old_skill_info = 7;
  inline int old_skill_info_size() const;
  inline void clear_old_skill_info();
  static const int kOldSkillInfoFieldNumber = 7;
  inline const ::PB::gp_old_prof_skill_level& old_skill_info(int index) const;
  inline ::PB::gp_old_prof_skill_level* mutable_old_skill_info(int index);
  inline ::PB::gp_old_prof_skill_level* add_old_skill_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_old_prof_skill_level >&
      old_skill_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::gp_old_prof_skill_level >*
      mutable_old_skill_info();

  // @@protoc_insertion_point(class_scope:PB.db_player_misc)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_revive();
  inline void clear_has_revive();
  inline void set_has_prev_levelup_time_used();
  inline void clear_has_prev_levelup_time_used();
  inline void set_has_multi_exp();
  inline void clear_has_multi_exp();
  inline void set_has_refuse_fight();
  inline void clear_has_refuse_fight();
  inline void set_has_old_prof_mask();
  inline void clear_has_old_prof_mask();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::db_player_misc_revive_data* revive_;
  int type_;
  ::google::protobuf::int32 prev_levelup_time_used_;
  ::PB::gp_multi_exp* multi_exp_;
  ::PB::gp_refuse_fight* refuse_fight_;
  ::google::protobuf::RepeatedPtrField< ::PB::gp_old_prof_skill_level > old_skill_info_;
  ::google::protobuf::int32 old_prof_mask_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_player_misc* default_instance_;
};
// -------------------------------------------------------------------

class npt_get_qqgroup_openid_req : public ::google::protobuf::Message {
 public:
  npt_get_qqgroup_openid_req();
  virtual ~npt_get_qqgroup_openid_req();

  npt_get_qqgroup_openid_req(const npt_get_qqgroup_openid_req& from);

  inline npt_get_qqgroup_openid_req& operator=(const npt_get_qqgroup_openid_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_get_qqgroup_openid_req& default_instance();

  void Swap(npt_get_qqgroup_openid_req* other);

  // implements Message ----------------------------------------------

  npt_get_qqgroup_openid_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_get_qqgroup_openid_req& from);
  void MergeFrom(const npt_get_qqgroup_openid_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_QQGROUP_OPENID];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional int32 unionid = 3;
  inline bool has_unionid() const;
  inline void clear_unionid();
  static const int kUnionidFieldNumber = 3;
  inline ::google::protobuf::int32 unionid() const;
  inline void set_unionid(::google::protobuf::int32 value);

  // optional int32 opt = 4 [default = 0];
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 4;
  inline ::google::protobuf::int32 opt() const;
  inline void set_opt(::google::protobuf::int32 value);

  // optional int32 groupcode = 5;
  inline bool has_groupcode() const;
  inline void clear_groupcode();
  static const int kGroupcodeFieldNumber = 5;
  inline ::google::protobuf::int32 groupcode() const;
  inline void set_groupcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_get_qqgroup_openid_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_unionid();
  inline void clear_has_unionid();
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_groupcode();
  inline void clear_has_groupcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 unionid_;
  ::google::protobuf::int32 opt_;
  ::google::protobuf::int32 groupcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_get_qqgroup_openid_req* default_instance_;
};
// -------------------------------------------------------------------

class npt_get_qqgroup_openid_resp : public ::google::protobuf::Message {
 public:
  npt_get_qqgroup_openid_resp();
  virtual ~npt_get_qqgroup_openid_resp();

  npt_get_qqgroup_openid_resp(const npt_get_qqgroup_openid_resp& from);

  inline npt_get_qqgroup_openid_resp& operator=(const npt_get_qqgroup_openid_resp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_get_qqgroup_openid_resp& default_instance();

  void Swap(npt_get_qqgroup_openid_resp* other);

  // implements Message ----------------------------------------------

  npt_get_qqgroup_openid_resp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_get_qqgroup_openid_resp& from);
  void MergeFrom(const npt_get_qqgroup_openid_resp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RESP_QQGROUP_OPENID];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 retcode = 2 [default = 1000];
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int64 roleid = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 3;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional int32 unionid = 4;
  inline bool has_unionid() const;
  inline void clear_unionid();
  static const int kUnionidFieldNumber = 4;
  inline ::google::protobuf::int32 unionid() const;
  inline void set_unionid(::google::protobuf::int32 value);

  // optional int32 opt = 5 [default = 0];
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 5;
  inline ::google::protobuf::int32 opt() const;
  inline void set_opt(::google::protobuf::int32 value);

  // optional int32 groupcode = 6;
  inline bool has_groupcode() const;
  inline void clear_groupcode();
  static const int kGroupcodeFieldNumber = 6;
  inline ::google::protobuf::int32 groupcode() const;
  inline void set_groupcode(::google::protobuf::int32 value);

  // optional int32 is_lost = 7 [default = 0];
  inline bool has_is_lost() const;
  inline void clear_is_lost();
  static const int kIsLostFieldNumber = 7;
  inline ::google::protobuf::int32 is_lost() const;
  inline void set_is_lost(::google::protobuf::int32 value);

  // optional bytes group_openid = 8;
  inline bool has_group_openid() const;
  inline void clear_group_openid();
  static const int kGroupOpenidFieldNumber = 8;
  inline const ::std::string& group_openid() const;
  inline void set_group_openid(const ::std::string& value);
  inline void set_group_openid(const char* value);
  inline void set_group_openid(const void* value, size_t size);
  inline ::std::string* mutable_group_openid();
  inline ::std::string* release_group_openid();
  inline void set_allocated_group_openid(::std::string* group_openid);

  // optional bytes msg = 9;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 9;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional bytes group_name = 10;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 10;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const void* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // @@protoc_insertion_point(class_scope:PB.npt_get_qqgroup_openid_resp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_unionid();
  inline void clear_has_unionid();
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_groupcode();
  inline void clear_has_groupcode();
  inline void set_has_is_lost();
  inline void clear_has_is_lost();
  inline void set_has_group_openid();
  inline void clear_has_group_openid();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_group_name();
  inline void clear_has_group_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int64 roleid_;
  ::google::protobuf::int32 unionid_;
  ::google::protobuf::int32 opt_;
  ::google::protobuf::int32 groupcode_;
  ::google::protobuf::int32 is_lost_;
  ::std::string* group_openid_;
  ::std::string* msg_;
  ::std::string* group_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_get_qqgroup_openid_resp* default_instance_;
};
// -------------------------------------------------------------------

class npt_get_http_req : public ::google::protobuf::Message {
 public:
  npt_get_http_req();
  virtual ~npt_get_http_req();

  npt_get_http_req(const npt_get_http_req& from);

  inline npt_get_http_req& operator=(const npt_get_http_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_get_http_req& default_instance();

  void Swap(npt_get_http_req* other);

  // implements Message ----------------------------------------------

  npt_get_http_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_get_http_req& from);
  void MergeFrom(const npt_get_http_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_HTTP_REQ];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 method = 2 [default = 0];
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 2;
  inline ::google::protobuf::int32 method() const;
  inline void set_method(::google::protobuf::int32 value);

  // optional bytes url = 3;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const void* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional bytes body = 4;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 4;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // optional int32 reserved = 5;
  inline bool has_reserved() const;
  inline void clear_reserved();
  static const int kReservedFieldNumber = 5;
  inline ::google::protobuf::int32 reserved() const;
  inline void set_reserved(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_get_http_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_reserved();
  inline void clear_has_reserved();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 method_;
  ::std::string* url_;
  ::std::string* body_;
  ::google::protobuf::int32 reserved_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_get_http_req* default_instance_;
};
// -------------------------------------------------------------------

class npt_get_http_resp : public ::google::protobuf::Message {
 public:
  npt_get_http_resp();
  virtual ~npt_get_http_resp();

  npt_get_http_resp(const npt_get_http_resp& from);

  inline npt_get_http_resp& operator=(const npt_get_http_resp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_get_http_resp& default_instance();

  void Swap(npt_get_http_resp* other);

  // implements Message ----------------------------------------------

  npt_get_http_resp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_get_http_resp& from);
  void MergeFrom(const npt_get_http_resp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_HTTP_RESP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 method = 2 [default = 0];
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 2;
  inline ::google::protobuf::int32 method() const;
  inline void set_method(::google::protobuf::int32 value);

  // optional int32 retcode = 3 [default = 200];
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional bytes contents = 4;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 4;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const void* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // optional int32 reserved = 5;
  inline bool has_reserved() const;
  inline void clear_reserved();
  static const int kReservedFieldNumber = 5;
  inline ::google::protobuf::int32 reserved() const;
  inline void set_reserved(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_get_http_resp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_contents();
  inline void clear_has_contents();
  inline void set_has_reserved();
  inline void clear_has_reserved();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 method_;
  ::std::string* contents_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 reserved_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_get_http_resp* default_instance_;
};
// -------------------------------------------------------------------

class npt_unbind_qqgroup_req : public ::google::protobuf::Message {
 public:
  npt_unbind_qqgroup_req();
  virtual ~npt_unbind_qqgroup_req();

  npt_unbind_qqgroup_req(const npt_unbind_qqgroup_req& from);

  inline npt_unbind_qqgroup_req& operator=(const npt_unbind_qqgroup_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_unbind_qqgroup_req& default_instance();

  void Swap(npt_unbind_qqgroup_req* other);

  // implements Message ----------------------------------------------

  npt_unbind_qqgroup_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_unbind_qqgroup_req& from);
  void MergeFrom(const npt_unbind_qqgroup_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_UNBIND_QQGROUP_REQ];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required int32 unionid = 3;
  inline bool has_unionid() const;
  inline void clear_unionid();
  static const int kUnionidFieldNumber = 3;
  inline ::google::protobuf::int32 unionid() const;
  inline void set_unionid(::google::protobuf::int32 value);

  // required bytes group_openid = 4;
  inline bool has_group_openid() const;
  inline void clear_group_openid();
  static const int kGroupOpenidFieldNumber = 4;
  inline const ::std::string& group_openid() const;
  inline void set_group_openid(const ::std::string& value);
  inline void set_group_openid(const char* value);
  inline void set_group_openid(const void* value, size_t size);
  inline ::std::string* mutable_group_openid();
  inline ::std::string* release_group_openid();
  inline void set_allocated_group_openid(::std::string* group_openid);

  // optional int32 opt = 5 [default = 0];
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 5;
  inline ::google::protobuf::int32 opt() const;
  inline void set_opt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_unbind_qqgroup_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_unionid();
  inline void clear_has_unionid();
  inline void set_has_group_openid();
  inline void clear_has_group_openid();
  inline void set_has_opt();
  inline void clear_has_opt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 unionid_;
  ::std::string* group_openid_;
  ::google::protobuf::int32 opt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_unbind_qqgroup_req* default_instance_;
};
// -------------------------------------------------------------------

class npt_unbind_qqgroup_resp : public ::google::protobuf::Message {
 public:
  npt_unbind_qqgroup_resp();
  virtual ~npt_unbind_qqgroup_resp();

  npt_unbind_qqgroup_resp(const npt_unbind_qqgroup_resp& from);

  inline npt_unbind_qqgroup_resp& operator=(const npt_unbind_qqgroup_resp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_unbind_qqgroup_resp& default_instance();

  void Swap(npt_unbind_qqgroup_resp* other);

  // implements Message ----------------------------------------------

  npt_unbind_qqgroup_resp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_unbind_qqgroup_resp& from);
  void MergeFrom(const npt_unbind_qqgroup_resp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_UNBIND_QQGROUP_RESP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 retcode = 2 [default = 1000];
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int64 roleid = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 3;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional int32 is_lost = 4 [default = 0];
  inline bool has_is_lost() const;
  inline void clear_is_lost();
  static const int kIsLostFieldNumber = 4;
  inline ::google::protobuf::int32 is_lost() const;
  inline void set_is_lost(::google::protobuf::int32 value);

  // optional bytes msg = 5;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 5;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:PB.npt_unbind_qqgroup_resp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_is_lost();
  inline void clear_has_is_lost();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int64 roleid_;
  ::std::string* msg_;
  ::google::protobuf::int32 is_lost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_unbind_qqgroup_resp* default_instance_;
};
// -------------------------------------------------------------------

class npt_recharge_plat_vip : public ::google::protobuf::Message {
 public:
  npt_recharge_plat_vip();
  virtual ~npt_recharge_plat_vip();

  npt_recharge_plat_vip(const npt_recharge_plat_vip& from);

  inline npt_recharge_plat_vip& operator=(const npt_recharge_plat_vip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_recharge_plat_vip& default_instance();

  void Swap(npt_recharge_plat_vip* other);

  // implements Message ----------------------------------------------

  npt_recharge_plat_vip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_recharge_plat_vip& from);
  void MergeFrom(const npt_recharge_plat_vip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECHARGE_PLAT_VIP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 vipKind = 2;
  inline bool has_vipkind() const;
  inline void clear_vipkind();
  static const int kVipKindFieldNumber = 2;
  inline ::google::protobuf::int32 vipkind() const;
  inline void set_vipkind(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_recharge_plat_vip)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_vipkind();
  inline void clear_has_vipkind();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 vipkind_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_recharge_plat_vip* default_instance_;
};
// -------------------------------------------------------------------

class npt_send_tlog_info : public ::google::protobuf::Message {
 public:
  npt_send_tlog_info();
  virtual ~npt_send_tlog_info();

  npt_send_tlog_info(const npt_send_tlog_info& from);

  inline npt_send_tlog_info& operator=(const npt_send_tlog_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_send_tlog_info& default_instance();

  void Swap(npt_send_tlog_info* other);

  // implements Message ----------------------------------------------

  npt_send_tlog_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_send_tlog_info& from);
  void MergeFrom(const npt_send_tlog_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_send_tlog_info_TLOG_TYPE TLOG_TYPE;
  static const TLOG_TYPE TLOG_TYPE_GUIDE = npt_send_tlog_info_TLOG_TYPE_TLOG_TYPE_GUIDE;
  static const TLOG_TYPE TLOG_TYPE_ACTIVITY = npt_send_tlog_info_TLOG_TYPE_TLOG_TYPE_ACTIVITY;
  static inline bool TLOG_TYPE_IsValid(int value) {
    return npt_send_tlog_info_TLOG_TYPE_IsValid(value);
  }
  static const TLOG_TYPE TLOG_TYPE_MIN =
    npt_send_tlog_info_TLOG_TYPE_TLOG_TYPE_MIN;
  static const TLOG_TYPE TLOG_TYPE_MAX =
    npt_send_tlog_info_TLOG_TYPE_TLOG_TYPE_MAX;
  static const int TLOG_TYPE_ARRAYSIZE =
    npt_send_tlog_info_TLOG_TYPE_TLOG_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TLOG_TYPE_descriptor() {
    return npt_send_tlog_info_TLOG_TYPE_descriptor();
  }
  static inline const ::std::string& TLOG_TYPE_Name(TLOG_TYPE value) {
    return npt_send_tlog_info_TLOG_TYPE_Name(value);
  }
  static inline bool TLOG_TYPE_Parse(const ::std::string& name,
      TLOG_TYPE* value) {
    return npt_send_tlog_info_TLOG_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_TLOG_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 tlog_type = 2;
  inline bool has_tlog_type() const;
  inline void clear_tlog_type();
  static const int kTlogTypeFieldNumber = 2;
  inline ::google::protobuf::int32 tlog_type() const;
  inline void set_tlog_type(::google::protobuf::int32 value);

  // optional int32 param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // optional int32 param2 = 4;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 4;
  inline ::google::protobuf::int32 param2() const;
  inline void set_param2(::google::protobuf::int32 value);

  // optional int32 param3 = 5;
  inline bool has_param3() const;
  inline void clear_param3();
  static const int kParam3FieldNumber = 5;
  inline ::google::protobuf::int32 param3() const;
  inline void set_param3(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_send_tlog_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tlog_type();
  inline void clear_has_tlog_type();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_param3();
  inline void clear_has_param3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 tlog_type_;
  ::google::protobuf::int32 param1_;
  ::google::protobuf::int32 param2_;
  ::google::protobuf::int32 param3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_send_tlog_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_qqgroup_joinkey_req : public ::google::protobuf::Message {
 public:
  npt_qqgroup_joinkey_req();
  virtual ~npt_qqgroup_joinkey_req();

  npt_qqgroup_joinkey_req(const npt_qqgroup_joinkey_req& from);

  inline npt_qqgroup_joinkey_req& operator=(const npt_qqgroup_joinkey_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_qqgroup_joinkey_req& default_instance();

  void Swap(npt_qqgroup_joinkey_req* other);

  // implements Message ----------------------------------------------

  npt_qqgroup_joinkey_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_qqgroup_joinkey_req& from);
  void MergeFrom(const npt_qqgroup_joinkey_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_QQGROUP_JOINKEY_REQ];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required int32 unionid = 3;
  inline bool has_unionid() const;
  inline void clear_unionid();
  static const int kUnionidFieldNumber = 3;
  inline ::google::protobuf::int32 unionid() const;
  inline void set_unionid(::google::protobuf::int32 value);

  // required bytes group_openid = 4;
  inline bool has_group_openid() const;
  inline void clear_group_openid();
  static const int kGroupOpenidFieldNumber = 4;
  inline const ::std::string& group_openid() const;
  inline void set_group_openid(const ::std::string& value);
  inline void set_group_openid(const char* value);
  inline void set_group_openid(const void* value, size_t size);
  inline ::std::string* mutable_group_openid();
  inline ::std::string* release_group_openid();
  inline void set_allocated_group_openid(::std::string* group_openid);

  // @@protoc_insertion_point(class_scope:PB.npt_qqgroup_joinkey_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_unionid();
  inline void clear_has_unionid();
  inline void set_has_group_openid();
  inline void clear_has_group_openid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 unionid_;
  ::std::string* group_openid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_qqgroup_joinkey_req* default_instance_;
};
// -------------------------------------------------------------------

class npt_qqgroup_joinkey_resp : public ::google::protobuf::Message {
 public:
  npt_qqgroup_joinkey_resp();
  virtual ~npt_qqgroup_joinkey_resp();

  npt_qqgroup_joinkey_resp(const npt_qqgroup_joinkey_resp& from);

  inline npt_qqgroup_joinkey_resp& operator=(const npt_qqgroup_joinkey_resp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_qqgroup_joinkey_resp& default_instance();

  void Swap(npt_qqgroup_joinkey_resp* other);

  // implements Message ----------------------------------------------

  npt_qqgroup_joinkey_resp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_qqgroup_joinkey_resp& from);
  void MergeFrom(const npt_qqgroup_joinkey_resp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_QQGROUP_JOINKEY_RESP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 retcode = 2 [default = 1000];
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int64 roleid = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 3;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional int32 is_lost = 4 [default = 0];
  inline bool has_is_lost() const;
  inline void clear_is_lost();
  static const int kIsLostFieldNumber = 4;
  inline ::google::protobuf::int32 is_lost() const;
  inline void set_is_lost(::google::protobuf::int32 value);

  // required bytes join_group_key = 5;
  inline bool has_join_group_key() const;
  inline void clear_join_group_key();
  static const int kJoinGroupKeyFieldNumber = 5;
  inline const ::std::string& join_group_key() const;
  inline void set_join_group_key(const ::std::string& value);
  inline void set_join_group_key(const char* value);
  inline void set_join_group_key(const void* value, size_t size);
  inline ::std::string* mutable_join_group_key();
  inline ::std::string* release_join_group_key();
  inline void set_allocated_join_group_key(::std::string* join_group_key);

  // optional bytes msg = 6;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 6;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:PB.npt_qqgroup_joinkey_resp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_is_lost();
  inline void clear_has_is_lost();
  inline void set_has_join_group_key();
  inline void clear_has_join_group_key();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int64 roleid_;
  ::std::string* join_group_key_;
  ::std::string* msg_;
  ::google::protobuf::int32 is_lost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_qqgroup_joinkey_resp* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_get_self_plat_vip_info : public ::google::protobuf::Message {
 public:
  npt_grc_get_self_plat_vip_info();
  virtual ~npt_grc_get_self_plat_vip_info();

  npt_grc_get_self_plat_vip_info(const npt_grc_get_self_plat_vip_info& from);

  inline npt_grc_get_self_plat_vip_info& operator=(const npt_grc_get_self_plat_vip_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_get_self_plat_vip_info& default_instance();

  void Swap(npt_grc_get_self_plat_vip_info* other);

  // implements Message ----------------------------------------------

  npt_grc_get_self_plat_vip_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_get_self_plat_vip_info& from);
  void MergeFrom(const npt_grc_get_self_plat_vip_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GET_SELF_PLAT_VIP_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 plat_vip_kind = 2;
  inline bool has_plat_vip_kind() const;
  inline void clear_plat_vip_kind();
  static const int kPlatVipKindFieldNumber = 2;
  inline ::google::protobuf::int32 plat_vip_kind() const;
  inline void set_plat_vip_kind(::google::protobuf::int32 value);

  // required int32 retcode = 3;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_grc_get_self_plat_vip_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_plat_vip_kind();
  inline void clear_has_plat_vip_kind();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 plat_vip_kind_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_get_self_plat_vip_info* default_instance_;
};
// -------------------------------------------------------------------

class greet_investor_info_cl : public ::google::protobuf::Message {
 public:
  greet_investor_info_cl();
  virtual ~greet_investor_info_cl();

  greet_investor_info_cl(const greet_investor_info_cl& from);

  inline greet_investor_info_cl& operator=(const greet_investor_info_cl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const greet_investor_info_cl& default_instance();

  void Swap(greet_investor_info_cl* other);

  // implements Message ----------------------------------------------

  greet_investor_info_cl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const greet_investor_info_cl& from);
  void MergeFrom(const greet_investor_info_cl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 greet_tid = 1;
  inline bool has_greet_tid() const;
  inline void clear_greet_tid();
  static const int kGreetTidFieldNumber = 1;
  inline ::google::protobuf::int32 greet_tid() const;
  inline void set_greet_tid(::google::protobuf::int32 value);

  // optional int32 valid_time = 2;
  inline bool has_valid_time() const;
  inline void clear_valid_time();
  static const int kValidTimeFieldNumber = 2;
  inline ::google::protobuf::int32 valid_time() const;
  inline void set_valid_time(::google::protobuf::int32 value);

  // repeated .PB.player_id_name investor_list = 3;
  inline int investor_list_size() const;
  inline void clear_investor_list();
  static const int kInvestorListFieldNumber = 3;
  inline const ::PB::player_id_name& investor_list(int index) const;
  inline ::PB::player_id_name* mutable_investor_list(int index);
  inline ::PB::player_id_name* add_investor_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::player_id_name >&
      investor_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::player_id_name >*
      mutable_investor_list();

  // @@protoc_insertion_point(class_scope:PB.greet_investor_info_cl)
 private:
  inline void set_has_greet_tid();
  inline void clear_has_greet_tid();
  inline void set_has_valid_time();
  inline void clear_has_valid_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 greet_tid_;
  ::google::protobuf::int32 valid_time_;
  ::google::protobuf::RepeatedPtrField< ::PB::player_id_name > investor_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static greet_investor_info_cl* default_instance_;
};
// -------------------------------------------------------------------

class greet_investee_info_cl : public ::google::protobuf::Message {
 public:
  greet_investee_info_cl();
  virtual ~greet_investee_info_cl();

  greet_investee_info_cl(const greet_investee_info_cl& from);

  inline greet_investee_info_cl& operator=(const greet_investee_info_cl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const greet_investee_info_cl& default_instance();

  void Swap(greet_investee_info_cl* other);

  // implements Message ----------------------------------------------

  greet_investee_info_cl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const greet_investee_info_cl& from);
  void MergeFrom(const greet_investee_info_cl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 greet_tid = 1;
  inline bool has_greet_tid() const;
  inline void clear_greet_tid();
  static const int kGreetTidFieldNumber = 1;
  inline ::google::protobuf::int32 greet_tid() const;
  inline void set_greet_tid(::google::protobuf::int32 value);

  // optional int32 valid_time = 2;
  inline bool has_valid_time() const;
  inline void clear_valid_time();
  static const int kValidTimeFieldNumber = 2;
  inline ::google::protobuf::int32 valid_time() const;
  inline void set_valid_time(::google::protobuf::int32 value);

  // optional .PB.player_id_name dst_role = 3;
  inline bool has_dst_role() const;
  inline void clear_dst_role();
  static const int kDstRoleFieldNumber = 3;
  inline const ::PB::player_id_name& dst_role() const;
  inline ::PB::player_id_name* mutable_dst_role();
  inline ::PB::player_id_name* release_dst_role();
  inline void set_allocated_dst_role(::PB::player_id_name* dst_role);

  // @@protoc_insertion_point(class_scope:PB.greet_investee_info_cl)
 private:
  inline void set_has_greet_tid();
  inline void clear_has_greet_tid();
  inline void set_has_valid_time();
  inline void clear_has_valid_time();
  inline void set_has_dst_role();
  inline void clear_has_dst_role();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 greet_tid_;
  ::google::protobuf::int32 valid_time_;
  ::PB::player_id_name* dst_role_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static greet_investee_info_cl* default_instance_;
};
// -------------------------------------------------------------------

class greet_reward_info_cl : public ::google::protobuf::Message {
 public:
  greet_reward_info_cl();
  virtual ~greet_reward_info_cl();

  greet_reward_info_cl(const greet_reward_info_cl& from);

  inline greet_reward_info_cl& operator=(const greet_reward_info_cl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const greet_reward_info_cl& default_instance();

  void Swap(greet_reward_info_cl* other);

  // implements Message ----------------------------------------------

  greet_reward_info_cl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const greet_reward_info_cl& from);
  void MergeFrom(const greet_reward_info_cl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 greet_tid = 1;
  inline bool has_greet_tid() const;
  inline void clear_greet_tid();
  static const int kGreetTidFieldNumber = 1;
  inline ::google::protobuf::int32 greet_tid() const;
  inline void set_greet_tid(::google::protobuf::int32 value);

  // optional int32 award_tid = 2;
  inline bool has_award_tid() const;
  inline void clear_award_tid();
  static const int kAwardTidFieldNumber = 2;
  inline ::google::protobuf::int32 award_tid() const;
  inline void set_award_tid(::google::protobuf::int32 value);

  // optional int32 award_count = 3;
  inline bool has_award_count() const;
  inline void clear_award_count();
  static const int kAwardCountFieldNumber = 3;
  inline ::google::protobuf::int32 award_count() const;
  inline void set_award_count(::google::protobuf::int32 value);

  // optional int64 role_id = 4;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.greet_reward_info_cl)
 private:
  inline void set_has_greet_tid();
  inline void clear_has_greet_tid();
  inline void set_has_award_tid();
  inline void clear_has_award_tid();
  inline void set_has_award_count();
  inline void clear_has_award_count();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 greet_tid_;
  ::google::protobuf::int32 award_tid_;
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 award_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static greet_reward_info_cl* default_instance_;
};
// -------------------------------------------------------------------

class npt_greet_invest_info : public ::google::protobuf::Message {
 public:
  npt_greet_invest_info();
  virtual ~npt_greet_invest_info();

  npt_greet_invest_info(const npt_greet_invest_info& from);

  inline npt_greet_invest_info& operator=(const npt_greet_invest_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_greet_invest_info& default_instance();

  void Swap(npt_greet_invest_info* other);

  // implements Message ----------------------------------------------

  npt_greet_invest_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_greet_invest_info& from);
  void MergeFrom(const npt_greet_invest_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREET_INVEST_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.greet_investor_info_cl investor = 2;
  inline int investor_size() const;
  inline void clear_investor();
  static const int kInvestorFieldNumber = 2;
  inline const ::PB::greet_investor_info_cl& investor(int index) const;
  inline ::PB::greet_investor_info_cl* mutable_investor(int index);
  inline ::PB::greet_investor_info_cl* add_investor();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::greet_investor_info_cl >&
      investor() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::greet_investor_info_cl >*
      mutable_investor();

  // repeated .PB.greet_investee_info_cl investee = 3;
  inline int investee_size() const;
  inline void clear_investee();
  static const int kInvesteeFieldNumber = 3;
  inline const ::PB::greet_investee_info_cl& investee(int index) const;
  inline ::PB::greet_investee_info_cl* mutable_investee(int index);
  inline ::PB::greet_investee_info_cl* add_investee();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::greet_investee_info_cl >&
      investee() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::greet_investee_info_cl >*
      mutable_investee();

  // repeated .PB.greet_reward_info_cl award = 4;
  inline int award_size() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 4;
  inline const ::PB::greet_reward_info_cl& award(int index) const;
  inline ::PB::greet_reward_info_cl* mutable_award(int index);
  inline ::PB::greet_reward_info_cl* add_award();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::greet_reward_info_cl >&
      award() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::greet_reward_info_cl >*
      mutable_award();

  // @@protoc_insertion_point(class_scope:PB.npt_greet_invest_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::greet_investor_info_cl > investor_;
  ::google::protobuf::RepeatedPtrField< ::PB::greet_investee_info_cl > investee_;
  ::google::protobuf::RepeatedPtrField< ::PB::greet_reward_info_cl > award_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_greet_invest_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_greet_invest_award : public ::google::protobuf::Message {
 public:
  npt_greet_invest_award();
  virtual ~npt_greet_invest_award();

  npt_greet_invest_award(const npt_greet_invest_award& from);

  inline npt_greet_invest_award& operator=(const npt_greet_invest_award& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_greet_invest_award& default_instance();

  void Swap(npt_greet_invest_award* other);

  // implements Message ----------------------------------------------

  npt_greet_invest_award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_greet_invest_award& from);
  void MergeFrom(const npt_greet_invest_award& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_greet_invest_award_AWARD_TYPE AWARD_TYPE;
  static const AWARD_TYPE INVESTOR = npt_greet_invest_award_AWARD_TYPE_INVESTOR;
  static const AWARD_TYPE INVESTEE = npt_greet_invest_award_AWARD_TYPE_INVESTEE;
  static inline bool AWARD_TYPE_IsValid(int value) {
    return npt_greet_invest_award_AWARD_TYPE_IsValid(value);
  }
  static const AWARD_TYPE AWARD_TYPE_MIN =
    npt_greet_invest_award_AWARD_TYPE_AWARD_TYPE_MIN;
  static const AWARD_TYPE AWARD_TYPE_MAX =
    npt_greet_invest_award_AWARD_TYPE_AWARD_TYPE_MAX;
  static const int AWARD_TYPE_ARRAYSIZE =
    npt_greet_invest_award_AWARD_TYPE_AWARD_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AWARD_TYPE_descriptor() {
    return npt_greet_invest_award_AWARD_TYPE_descriptor();
  }
  static inline const ::std::string& AWARD_TYPE_Name(AWARD_TYPE value) {
    return npt_greet_invest_award_AWARD_TYPE_Name(value);
  }
  static inline bool AWARD_TYPE_Parse(const ::std::string& name,
      AWARD_TYPE* value) {
    return npt_greet_invest_award_AWARD_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREET_INVEST_AWARD];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 reserved = 2;
  inline bool has_reserved() const;
  inline void clear_reserved();
  static const int kReservedFieldNumber = 2;
  inline ::google::protobuf::int32 reserved() const;
  inline void set_reserved(::google::protobuf::int32 value);

  // optional .PB.npt_greet_invest_award.AWARD_TYPE award_type = 3;
  inline bool has_award_type() const;
  inline void clear_award_type();
  static const int kAwardTypeFieldNumber = 3;
  inline ::PB::npt_greet_invest_award_AWARD_TYPE award_type() const;
  inline void set_award_type(::PB::npt_greet_invest_award_AWARD_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.npt_greet_invest_award)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_reserved();
  inline void clear_has_reserved();
  inline void set_has_award_type();
  inline void clear_has_award_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 reserved_;
  int award_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_greet_invest_award* default_instance_;
};
// -------------------------------------------------------------------

class npt_wine_game_operate : public ::google::protobuf::Message {
 public:
  npt_wine_game_operate();
  virtual ~npt_wine_game_operate();

  npt_wine_game_operate(const npt_wine_game_operate& from);

  inline npt_wine_game_operate& operator=(const npt_wine_game_operate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_wine_game_operate& default_instance();

  void Swap(npt_wine_game_operate* other);

  // implements Message ----------------------------------------------

  npt_wine_game_operate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_wine_game_operate& from);
  void MergeFrom(const npt_wine_game_operate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_wine_game_operate_OPER_TYPE OPER_TYPE;
  static const OPER_TYPE CHANGE_PEER = npt_wine_game_operate_OPER_TYPE_CHANGE_PEER;
  static const OPER_TYPE BEGIN_GAME = npt_wine_game_operate_OPER_TYPE_BEGIN_GAME;
  static const OPER_TYPE GAME_HUAQUAN = npt_wine_game_operate_OPER_TYPE_GAME_HUAQUAN;
  static const OPER_TYPE GAME_GANBEI = npt_wine_game_operate_OPER_TYPE_GAME_GANBEI;
  static const OPER_TYPE GAME_GUAN = npt_wine_game_operate_OPER_TYPE_GAME_GUAN;
  static const OPER_TYPE GAME_INIT = npt_wine_game_operate_OPER_TYPE_GAME_INIT;
  static const OPER_TYPE GAME_END = npt_wine_game_operate_OPER_TYPE_GAME_END;
  static inline bool OPER_TYPE_IsValid(int value) {
    return npt_wine_game_operate_OPER_TYPE_IsValid(value);
  }
  static const OPER_TYPE OPER_TYPE_MIN =
    npt_wine_game_operate_OPER_TYPE_OPER_TYPE_MIN;
  static const OPER_TYPE OPER_TYPE_MAX =
    npt_wine_game_operate_OPER_TYPE_OPER_TYPE_MAX;
  static const int OPER_TYPE_ARRAYSIZE =
    npt_wine_game_operate_OPER_TYPE_OPER_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPER_TYPE_descriptor() {
    return npt_wine_game_operate_OPER_TYPE_descriptor();
  }
  static inline const ::std::string& OPER_TYPE_Name(OPER_TYPE value) {
    return npt_wine_game_operate_OPER_TYPE_Name(value);
  }
  static inline bool OPER_TYPE_Parse(const ::std::string& name,
      OPER_TYPE* value) {
    return npt_wine_game_operate_OPER_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WINE_GAME_OPERATE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.npt_wine_game_operate.OPER_TYPE oper_type = 2;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 2;
  inline ::PB::npt_wine_game_operate_OPER_TYPE oper_type() const;
  inline void set_oper_type(::PB::npt_wine_game_operate_OPER_TYPE value);

  // optional int32 oper_param1 = 3;
  inline bool has_oper_param1() const;
  inline void clear_oper_param1();
  static const int kOperParam1FieldNumber = 3;
  inline ::google::protobuf::int32 oper_param1() const;
  inline void set_oper_param1(::google::protobuf::int32 value);

  // optional int32 oper_param2 = 4;
  inline bool has_oper_param2() const;
  inline void clear_oper_param2();
  static const int kOperParam2FieldNumber = 4;
  inline ::google::protobuf::int32 oper_param2() const;
  inline void set_oper_param2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_wine_game_operate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_oper_param1();
  inline void clear_has_oper_param1();
  inline void set_has_oper_param2();
  inline void clear_has_oper_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int oper_type_;
  ::google::protobuf::int32 oper_param1_;
  ::google::protobuf::int32 oper_param2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_wine_game_operate* default_instance_;
};
// -------------------------------------------------------------------

class npt_wine_game_sync_data : public ::google::protobuf::Message {
 public:
  npt_wine_game_sync_data();
  virtual ~npt_wine_game_sync_data();

  npt_wine_game_sync_data(const npt_wine_game_sync_data& from);

  inline npt_wine_game_sync_data& operator=(const npt_wine_game_sync_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_wine_game_sync_data& default_instance();

  void Swap(npt_wine_game_sync_data* other);

  // implements Message ----------------------------------------------

  npt_wine_game_sync_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_wine_game_sync_data& from);
  void MergeFrom(const npt_wine_game_sync_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WINE_GAME_SYNC_DATA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.player_id_name peer_info = 2;
  inline bool has_peer_info() const;
  inline void clear_peer_info();
  static const int kPeerInfoFieldNumber = 2;
  inline const ::PB::player_id_name& peer_info() const;
  inline ::PB::player_id_name* mutable_peer_info();
  inline ::PB::player_id_name* release_peer_info();
  inline void set_allocated_peer_info(::PB::player_id_name* peer_info);

  // optional int32 mine_status = 3;
  inline bool has_mine_status() const;
  inline void clear_mine_status();
  static const int kMineStatusFieldNumber = 3;
  inline ::google::protobuf::int32 mine_status() const;
  inline void set_mine_status(::google::protobuf::int32 value);

  // optional int32 peer_status = 4;
  inline bool has_peer_status() const;
  inline void clear_peer_status();
  static const int kPeerStatusFieldNumber = 4;
  inline ::google::protobuf::int32 peer_status() const;
  inline void set_peer_status(::google::protobuf::int32 value);

  // optional int32 game_status = 5;
  inline bool has_game_status() const;
  inline void clear_game_status();
  static const int kGameStatusFieldNumber = 5;
  inline ::google::protobuf::int32 game_status() const;
  inline void set_game_status(::google::protobuf::int32 value);

  // optional int32 peer_professional = 6;
  inline bool has_peer_professional() const;
  inline void clear_peer_professional();
  static const int kPeerProfessionalFieldNumber = 6;
  inline ::google::protobuf::int32 peer_professional() const;
  inline void set_peer_professional(::google::protobuf::int32 value);

  // optional int32 peer_gender = 7;
  inline bool has_peer_gender() const;
  inline void clear_peer_gender();
  static const int kPeerGenderFieldNumber = 7;
  inline ::google::protobuf::int32 peer_gender() const;
  inline void set_peer_gender(::google::protobuf::int32 value);

  // optional int32 param = 8;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 8;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_wine_game_sync_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_peer_info();
  inline void clear_has_peer_info();
  inline void set_has_mine_status();
  inline void clear_has_mine_status();
  inline void set_has_peer_status();
  inline void clear_has_peer_status();
  inline void set_has_game_status();
  inline void clear_has_game_status();
  inline void set_has_peer_professional();
  inline void clear_has_peer_professional();
  inline void set_has_peer_gender();
  inline void clear_has_peer_gender();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::player_id_name* peer_info_;
  int type_;
  ::google::protobuf::int32 mine_status_;
  ::google::protobuf::int32 peer_status_;
  ::google::protobuf::int32 game_status_;
  ::google::protobuf::int32 peer_professional_;
  ::google::protobuf::int32 peer_gender_;
  ::google::protobuf::int32 param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_wine_game_sync_data* default_instance_;
};
// -------------------------------------------------------------------

class npt_wine_game_history : public ::google::protobuf::Message {
 public:
  npt_wine_game_history();
  virtual ~npt_wine_game_history();

  npt_wine_game_history(const npt_wine_game_history& from);

  inline npt_wine_game_history& operator=(const npt_wine_game_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_wine_game_history& default_instance();

  void Swap(npt_wine_game_history* other);

  // implements Message ----------------------------------------------

  npt_wine_game_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_wine_game_history& from);
  void MergeFrom(const npt_wine_game_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WINE_GAME_HISTORY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.npt_wine_game_history)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_wine_game_history* default_instance_;
};
// -------------------------------------------------------------------

class npt_wine_game_history_re : public ::google::protobuf::Message {
 public:
  npt_wine_game_history_re();
  virtual ~npt_wine_game_history_re();

  npt_wine_game_history_re(const npt_wine_game_history_re& from);

  inline npt_wine_game_history_re& operator=(const npt_wine_game_history_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_wine_game_history_re& default_instance();

  void Swap(npt_wine_game_history_re* other);

  // implements Message ----------------------------------------------

  npt_wine_game_history_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_wine_game_history_re& from);
  void MergeFrom(const npt_wine_game_history_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WINE_GAME_HISTORY_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.wine_game_history historys = 2;
  inline int historys_size() const;
  inline void clear_historys();
  static const int kHistorysFieldNumber = 2;
  inline const ::PB::wine_game_history& historys(int index) const;
  inline ::PB::wine_game_history* mutable_historys(int index);
  inline ::PB::wine_game_history* add_historys();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::wine_game_history >&
      historys() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::wine_game_history >*
      mutable_historys();

  // required int32 play_count = 3;
  inline bool has_play_count() const;
  inline void clear_play_count();
  static const int kPlayCountFieldNumber = 3;
  inline ::google::protobuf::int32 play_count() const;
  inline void set_play_count(::google::protobuf::int32 value);

  // required int32 peer_change_count = 4;
  inline bool has_peer_change_count() const;
  inline void clear_peer_change_count();
  static const int kPeerChangeCountFieldNumber = 4;
  inline ::google::protobuf::int32 peer_change_count() const;
  inline void set_peer_change_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_wine_game_history_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_play_count();
  inline void clear_has_play_count();
  inline void set_has_peer_change_count();
  inline void clear_has_peer_change_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::wine_game_history > historys_;
  int type_;
  ::google::protobuf::int32 play_count_;
  ::google::protobuf::int32 peer_change_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_wine_game_history_re* default_instance_;
};
// -------------------------------------------------------------------

class region_history : public ::google::protobuf::Message {
 public:
  region_history();
  virtual ~region_history();

  region_history(const region_history& from);

  inline region_history& operator=(const region_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const region_history& default_instance();

  void Swap(region_history* other);

  // implements Message ----------------------------------------------

  region_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const region_history& from);
  void MergeFrom(const region_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef region_history_EVNET_TYPE EVNET_TYPE;
  static const EVNET_TYPE OWNER_CHANGE = region_history_EVNET_TYPE_OWNER_CHANGE;
  static inline bool EVNET_TYPE_IsValid(int value) {
    return region_history_EVNET_TYPE_IsValid(value);
  }
  static const EVNET_TYPE EVNET_TYPE_MIN =
    region_history_EVNET_TYPE_EVNET_TYPE_MIN;
  static const EVNET_TYPE EVNET_TYPE_MAX =
    region_history_EVNET_TYPE_EVNET_TYPE_MAX;
  static const int EVNET_TYPE_ARRAYSIZE =
    region_history_EVNET_TYPE_EVNET_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EVNET_TYPE_descriptor() {
    return region_history_EVNET_TYPE_descriptor();
  }
  static inline const ::std::string& EVNET_TYPE_Name(EVNET_TYPE value) {
    return region_history_EVNET_TYPE_Name(value);
  }
  static inline bool EVNET_TYPE_Parse(const ::std::string& name,
      EVNET_TYPE* value) {
    return region_history_EVNET_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 event_time = 1;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 1;
  inline ::google::protobuf::int32 event_time() const;
  inline void set_event_time(::google::protobuf::int32 value);

  // optional int32 event_type = 2;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  inline ::google::protobuf::int32 event_type() const;
  inline void set_event_type(::google::protobuf::int32 value);

  // optional bytes event_msg1 = 3;
  inline bool has_event_msg1() const;
  inline void clear_event_msg1();
  static const int kEventMsg1FieldNumber = 3;
  inline const ::std::string& event_msg1() const;
  inline void set_event_msg1(const ::std::string& value);
  inline void set_event_msg1(const char* value);
  inline void set_event_msg1(const void* value, size_t size);
  inline ::std::string* mutable_event_msg1();
  inline ::std::string* release_event_msg1();
  inline void set_allocated_event_msg1(::std::string* event_msg1);

  // optional bytes event_msg2 = 4;
  inline bool has_event_msg2() const;
  inline void clear_event_msg2();
  static const int kEventMsg2FieldNumber = 4;
  inline const ::std::string& event_msg2() const;
  inline void set_event_msg2(const ::std::string& value);
  inline void set_event_msg2(const char* value);
  inline void set_event_msg2(const void* value, size_t size);
  inline ::std::string* mutable_event_msg2();
  inline ::std::string* release_event_msg2();
  inline void set_allocated_event_msg2(::std::string* event_msg2);

  // @@protoc_insertion_point(class_scope:PB.region_history)
 private:
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_event_msg1();
  inline void clear_has_event_msg1();
  inline void set_has_event_msg2();
  inline void clear_has_event_msg2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 event_time_;
  ::google::protobuf::int32 event_type_;
  ::std::string* event_msg1_;
  ::std::string* event_msg2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static region_history* default_instance_;
};
// -------------------------------------------------------------------

class region_info_t : public ::google::protobuf::Message {
 public:
  region_info_t();
  virtual ~region_info_t();

  region_info_t(const region_info_t& from);

  inline region_info_t& operator=(const region_info_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const region_info_t& default_instance();

  void Swap(region_info_t* other);

  // implements Message ----------------------------------------------

  region_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const region_info_t& from);
  void MergeFrom(const region_info_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // optional int32 region_status = 2;
  inline bool has_region_status() const;
  inline void clear_region_status();
  static const int kRegionStatusFieldNumber = 2;
  inline ::google::protobuf::int32 region_status() const;
  inline void set_region_status(::google::protobuf::int32 value);

  // optional int64 region_owner = 3;
  inline bool has_region_owner() const;
  inline void clear_region_owner();
  static const int kRegionOwnerFieldNumber = 3;
  inline ::google::protobuf::int64 region_owner() const;
  inline void set_region_owner(::google::protobuf::int64 value);

  // optional int32 region_owner_nation = 4;
  inline bool has_region_owner_nation() const;
  inline void clear_region_owner_nation();
  static const int kRegionOwnerNationFieldNumber = 4;
  inline ::google::protobuf::int32 region_owner_nation() const;
  inline void set_region_owner_nation(::google::protobuf::int32 value);

  // optional bytes region_owner_name = 5;
  inline bool has_region_owner_name() const;
  inline void clear_region_owner_name();
  static const int kRegionOwnerNameFieldNumber = 5;
  inline const ::std::string& region_owner_name() const;
  inline void set_region_owner_name(const ::std::string& value);
  inline void set_region_owner_name(const char* value);
  inline void set_region_owner_name(const void* value, size_t size);
  inline ::std::string* mutable_region_owner_name();
  inline ::std::string* release_region_owner_name();
  inline void set_allocated_region_owner_name(::std::string* region_owner_name);

  // repeated .PB.region_history historys = 6;
  inline int historys_size() const;
  inline void clear_historys();
  static const int kHistorysFieldNumber = 6;
  inline const ::PB::region_history& historys(int index) const;
  inline ::PB::region_history* mutable_historys(int index);
  inline ::PB::region_history* add_historys();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::region_history >&
      historys() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::region_history >*
      mutable_historys();

  // @@protoc_insertion_point(class_scope:PB.region_info_t)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_region_status();
  inline void clear_has_region_status();
  inline void set_has_region_owner();
  inline void clear_has_region_owner();
  inline void set_has_region_owner_nation();
  inline void clear_has_region_owner_nation();
  inline void set_has_region_owner_name();
  inline void clear_has_region_owner_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 region_id_;
  ::google::protobuf::int32 region_status_;
  ::google::protobuf::int64 region_owner_;
  ::std::string* region_owner_name_;
  ::google::protobuf::RepeatedPtrField< ::PB::region_history > historys_;
  ::google::protobuf::int32 region_owner_nation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static region_info_t* default_instance_;
};
// -------------------------------------------------------------------

class region_war_t : public ::google::protobuf::Message {
 public:
  region_war_t();
  virtual ~region_war_t();

  region_war_t(const region_war_t& from);

  inline region_war_t& operator=(const region_war_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const region_war_t& default_instance();

  void Swap(region_war_t* other);

  // implements Message ----------------------------------------------

  region_war_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const region_war_t& from);
  void MergeFrom(const region_war_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 war_id = 1;
  inline bool has_war_id() const;
  inline void clear_war_id();
  static const int kWarIdFieldNumber = 1;
  inline ::google::protobuf::int32 war_id() const;
  inline void set_war_id(::google::protobuf::int32 value);

  // optional int32 war_status = 2;
  inline bool has_war_status() const;
  inline void clear_war_status();
  static const int kWarStatusFieldNumber = 2;
  inline ::google::protobuf::int32 war_status() const;
  inline void set_war_status(::google::protobuf::int32 value);

  // optional int32 war_time = 3;
  inline bool has_war_time() const;
  inline void clear_war_time();
  static const int kWarTimeFieldNumber = 3;
  inline ::google::protobuf::int32 war_time() const;
  inline void set_war_time(::google::protobuf::int32 value);

  // optional int32 war_region_id = 4;
  inline bool has_war_region_id() const;
  inline void clear_war_region_id();
  static const int kWarRegionIdFieldNumber = 4;
  inline ::google::protobuf::int32 war_region_id() const;
  inline void set_war_region_id(::google::protobuf::int32 value);

  // optional int64 war_cost = 5;
  inline bool has_war_cost() const;
  inline void clear_war_cost();
  static const int kWarCostFieldNumber = 5;
  inline ::google::protobuf::int64 war_cost() const;
  inline void set_war_cost(::google::protobuf::int64 value);

  // optional int64 war_attacker = 6;
  inline bool has_war_attacker() const;
  inline void clear_war_attacker();
  static const int kWarAttackerFieldNumber = 6;
  inline ::google::protobuf::int64 war_attacker() const;
  inline void set_war_attacker(::google::protobuf::int64 value);

  // optional bytes attacker_name = 7;
  inline bool has_attacker_name() const;
  inline void clear_attacker_name();
  static const int kAttackerNameFieldNumber = 7;
  inline const ::std::string& attacker_name() const;
  inline void set_attacker_name(const ::std::string& value);
  inline void set_attacker_name(const char* value);
  inline void set_attacker_name(const void* value, size_t size);
  inline ::std::string* mutable_attacker_name();
  inline ::std::string* release_attacker_name();
  inline void set_allocated_attacker_name(::std::string* attacker_name);

  // optional int64 war_defender = 8;
  inline bool has_war_defender() const;
  inline void clear_war_defender();
  static const int kWarDefenderFieldNumber = 8;
  inline ::google::protobuf::int64 war_defender() const;
  inline void set_war_defender(::google::protobuf::int64 value);

  // optional bytes defender_name = 9;
  inline bool has_defender_name() const;
  inline void clear_defender_name();
  static const int kDefenderNameFieldNumber = 9;
  inline const ::std::string& defender_name() const;
  inline void set_defender_name(const ::std::string& value);
  inline void set_defender_name(const char* value);
  inline void set_defender_name(const void* value, size_t size);
  inline ::std::string* mutable_defender_name();
  inline ::std::string* release_defender_name();
  inline void set_allocated_defender_name(::std::string* defender_name);

  // optional int64 bless_value_attack = 10;
  inline bool has_bless_value_attack() const;
  inline void clear_bless_value_attack();
  static const int kBlessValueAttackFieldNumber = 10;
  inline ::google::protobuf::int64 bless_value_attack() const;
  inline void set_bless_value_attack(::google::protobuf::int64 value);

  // optional int64 bless_value_defend = 11;
  inline bool has_bless_value_defend() const;
  inline void clear_bless_value_defend();
  static const int kBlessValueDefendFieldNumber = 11;
  inline ::google::protobuf::int64 bless_value_defend() const;
  inline void set_bless_value_defend(::google::protobuf::int64 value);

  // optional int64 defender_war_cost = 12;
  inline bool has_defender_war_cost() const;
  inline void clear_defender_war_cost();
  static const int kDefenderWarCostFieldNumber = 12;
  inline ::google::protobuf::int64 defender_war_cost() const;
  inline void set_defender_war_cost(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.region_war_t)
 private:
  inline void set_has_war_id();
  inline void clear_has_war_id();
  inline void set_has_war_status();
  inline void clear_has_war_status();
  inline void set_has_war_time();
  inline void clear_has_war_time();
  inline void set_has_war_region_id();
  inline void clear_has_war_region_id();
  inline void set_has_war_cost();
  inline void clear_has_war_cost();
  inline void set_has_war_attacker();
  inline void clear_has_war_attacker();
  inline void set_has_attacker_name();
  inline void clear_has_attacker_name();
  inline void set_has_war_defender();
  inline void clear_has_war_defender();
  inline void set_has_defender_name();
  inline void clear_has_defender_name();
  inline void set_has_bless_value_attack();
  inline void clear_has_bless_value_attack();
  inline void set_has_bless_value_defend();
  inline void clear_has_bless_value_defend();
  inline void set_has_defender_war_cost();
  inline void clear_has_defender_war_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 war_id_;
  ::google::protobuf::int32 war_status_;
  ::google::protobuf::int32 war_time_;
  ::google::protobuf::int32 war_region_id_;
  ::google::protobuf::int64 war_cost_;
  ::google::protobuf::int64 war_attacker_;
  ::std::string* attacker_name_;
  ::google::protobuf::int64 war_defender_;
  ::std::string* defender_name_;
  ::google::protobuf::int64 bless_value_attack_;
  ::google::protobuf::int64 bless_value_defend_;
  ::google::protobuf::int64 defender_war_cost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static region_war_t* default_instance_;
};
// -------------------------------------------------------------------

class region_bid_t_bid_t : public ::google::protobuf::Message {
 public:
  region_bid_t_bid_t();
  virtual ~region_bid_t_bid_t();

  region_bid_t_bid_t(const region_bid_t_bid_t& from);

  inline region_bid_t_bid_t& operator=(const region_bid_t_bid_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const region_bid_t_bid_t& default_instance();

  void Swap(region_bid_t_bid_t* other);

  // implements Message ----------------------------------------------

  region_bid_t_bid_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const region_bid_t_bid_t& from);
  void MergeFrom(const region_bid_t_bid_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 bider_id = 1;
  inline bool has_bider_id() const;
  inline void clear_bider_id();
  static const int kBiderIdFieldNumber = 1;
  inline ::google::protobuf::int64 bider_id() const;
  inline void set_bider_id(::google::protobuf::int64 value);

  // optional int32 bidder_nation = 2;
  inline bool has_bidder_nation() const;
  inline void clear_bidder_nation();
  static const int kBidderNationFieldNumber = 2;
  inline ::google::protobuf::int32 bidder_nation() const;
  inline void set_bidder_nation(::google::protobuf::int32 value);

  // optional bytes bidder_name = 3;
  inline bool has_bidder_name() const;
  inline void clear_bidder_name();
  static const int kBidderNameFieldNumber = 3;
  inline const ::std::string& bidder_name() const;
  inline void set_bidder_name(const ::std::string& value);
  inline void set_bidder_name(const char* value);
  inline void set_bidder_name(const void* value, size_t size);
  inline ::std::string* mutable_bidder_name();
  inline ::std::string* release_bidder_name();
  inline void set_allocated_bidder_name(::std::string* bidder_name);

  // optional int64 bid_money = 4;
  inline bool has_bid_money() const;
  inline void clear_bid_money();
  static const int kBidMoneyFieldNumber = 4;
  inline ::google::protobuf::int64 bid_money() const;
  inline void set_bid_money(::google::protobuf::int64 value);

  // optional int64 bid_diamond = 5;
  inline bool has_bid_diamond() const;
  inline void clear_bid_diamond();
  static const int kBidDiamondFieldNumber = 5;
  inline ::google::protobuf::int64 bid_diamond() const;
  inline void set_bid_diamond(::google::protobuf::int64 value);

  // optional int64 total_bid_money = 6;
  inline bool has_total_bid_money() const;
  inline void clear_total_bid_money();
  static const int kTotalBidMoneyFieldNumber = 6;
  inline ::google::protobuf::int64 total_bid_money() const;
  inline void set_total_bid_money(::google::protobuf::int64 value);

  // optional int64 total_bid_diamond = 7;
  inline bool has_total_bid_diamond() const;
  inline void clear_total_bid_diamond();
  static const int kTotalBidDiamondFieldNumber = 7;
  inline ::google::protobuf::int64 total_bid_diamond() const;
  inline void set_total_bid_diamond(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.region_bid_t.bid_t)
 private:
  inline void set_has_bider_id();
  inline void clear_has_bider_id();
  inline void set_has_bidder_nation();
  inline void clear_has_bidder_nation();
  inline void set_has_bidder_name();
  inline void clear_has_bidder_name();
  inline void set_has_bid_money();
  inline void clear_has_bid_money();
  inline void set_has_bid_diamond();
  inline void clear_has_bid_diamond();
  inline void set_has_total_bid_money();
  inline void clear_has_total_bid_money();
  inline void set_has_total_bid_diamond();
  inline void clear_has_total_bid_diamond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 bider_id_;
  ::std::string* bidder_name_;
  ::google::protobuf::int64 bid_money_;
  ::google::protobuf::int64 bid_diamond_;
  ::google::protobuf::int64 total_bid_money_;
  ::google::protobuf::int64 total_bid_diamond_;
  ::google::protobuf::int32 bidder_nation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static region_bid_t_bid_t* default_instance_;
};
// -------------------------------------------------------------------

class region_bid_t : public ::google::protobuf::Message {
 public:
  region_bid_t();
  virtual ~region_bid_t();

  region_bid_t(const region_bid_t& from);

  inline region_bid_t& operator=(const region_bid_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const region_bid_t& default_instance();

  void Swap(region_bid_t* other);

  // implements Message ----------------------------------------------

  region_bid_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const region_bid_t& from);
  void MergeFrom(const region_bid_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef region_bid_t_bid_t bid_t;

  // accessors -------------------------------------------------------

  // optional int32 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // repeated .PB.region_bid_t.bid_t bid_list = 2;
  inline int bid_list_size() const;
  inline void clear_bid_list();
  static const int kBidListFieldNumber = 2;
  inline const ::PB::region_bid_t_bid_t& bid_list(int index) const;
  inline ::PB::region_bid_t_bid_t* mutable_bid_list(int index);
  inline ::PB::region_bid_t_bid_t* add_bid_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t_bid_t >&
      bid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t_bid_t >*
      mutable_bid_list();

  // @@protoc_insertion_point(class_scope:PB.region_bid_t)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t_bid_t > bid_list_;
  ::google::protobuf::int32 region_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static region_bid_t* default_instance_;
};
// -------------------------------------------------------------------

class region_war_data : public ::google::protobuf::Message {
 public:
  region_war_data();
  virtual ~region_war_data();

  region_war_data(const region_war_data& from);

  inline region_war_data& operator=(const region_war_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const region_war_data& default_instance();

  void Swap(region_war_data* other);

  // implements Message ----------------------------------------------

  region_war_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const region_war_data& from);
  void MergeFrom(const region_war_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 game_status = 1;
  inline bool has_game_status() const;
  inline void clear_game_status();
  static const int kGameStatusFieldNumber = 1;
  inline ::google::protobuf::int32 game_status() const;
  inline void set_game_status(::google::protobuf::int32 value);

  // optional int32 game_open_time = 2;
  inline bool has_game_open_time() const;
  inline void clear_game_open_time();
  static const int kGameOpenTimeFieldNumber = 2;
  inline ::google::protobuf::int32 game_open_time() const;
  inline void set_game_open_time(::google::protobuf::int32 value);

  // optional int32 next_war_id = 3;
  inline bool has_next_war_id() const;
  inline void clear_next_war_id();
  static const int kNextWarIdFieldNumber = 3;
  inline ::google::protobuf::int32 next_war_id() const;
  inline void set_next_war_id(::google::protobuf::int32 value);

  // optional int32 update_timestamp = 4;
  inline bool has_update_timestamp() const;
  inline void clear_update_timestamp();
  static const int kUpdateTimestampFieldNumber = 4;
  inline ::google::protobuf::int32 update_timestamp() const;
  inline void set_update_timestamp(::google::protobuf::int32 value);

  // repeated .PB.region_info_t region_list = 5;
  inline int region_list_size() const;
  inline void clear_region_list();
  static const int kRegionListFieldNumber = 5;
  inline const ::PB::region_info_t& region_list(int index) const;
  inline ::PB::region_info_t* mutable_region_list(int index);
  inline ::PB::region_info_t* add_region_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::region_info_t >&
      region_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::region_info_t >*
      mutable_region_list();

  // repeated .PB.region_war_t war_list = 6;
  inline int war_list_size() const;
  inline void clear_war_list();
  static const int kWarListFieldNumber = 6;
  inline const ::PB::region_war_t& war_list(int index) const;
  inline ::PB::region_war_t* mutable_war_list(int index);
  inline ::PB::region_war_t* add_war_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::region_war_t >&
      war_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::region_war_t >*
      mutable_war_list();

  // repeated .PB.region_bid_t bid_list = 7;
  inline int bid_list_size() const;
  inline void clear_bid_list();
  static const int kBidListFieldNumber = 7;
  inline const ::PB::region_bid_t& bid_list(int index) const;
  inline ::PB::region_bid_t* mutable_bid_list(int index);
  inline ::PB::region_bid_t* add_bid_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t >&
      bid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t >*
      mutable_bid_list();

  // repeated int64 daily_bonus_roles = 8;
  inline int daily_bonus_roles_size() const;
  inline void clear_daily_bonus_roles();
  static const int kDailyBonusRolesFieldNumber = 8;
  inline ::google::protobuf::int64 daily_bonus_roles(int index) const;
  inline void set_daily_bonus_roles(int index, ::google::protobuf::int64 value);
  inline void add_daily_bonus_roles(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      daily_bonus_roles() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_daily_bonus_roles();

  // @@protoc_insertion_point(class_scope:PB.region_war_data)
 private:
  inline void set_has_game_status();
  inline void clear_has_game_status();
  inline void set_has_game_open_time();
  inline void clear_has_game_open_time();
  inline void set_has_next_war_id();
  inline void clear_has_next_war_id();
  inline void set_has_update_timestamp();
  inline void clear_has_update_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 game_status_;
  ::google::protobuf::int32 game_open_time_;
  ::google::protobuf::int32 next_war_id_;
  ::google::protobuf::int32 update_timestamp_;
  ::google::protobuf::RepeatedPtrField< ::PB::region_info_t > region_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::region_war_t > war_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t > bid_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > daily_bonus_roles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static region_war_data* default_instance_;
};
// -------------------------------------------------------------------

class int32_pair : public ::google::protobuf::Message {
 public:
  int32_pair();
  virtual ~int32_pair();

  int32_pair(const int32_pair& from);

  inline int32_pair& operator=(const int32_pair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const int32_pair& default_instance();

  void Swap(int32_pair* other);

  // implements Message ----------------------------------------------

  int32_pair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const int32_pair& from);
  void MergeFrom(const int32_pair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 first = 1;
  inline bool has_first() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 1;
  inline ::google::protobuf::int32 first() const;
  inline void set_first(::google::protobuf::int32 value);

  // optional int32 second = 2;
  inline bool has_second() const;
  inline void clear_second();
  static const int kSecondFieldNumber = 2;
  inline ::google::protobuf::int32 second() const;
  inline void set_second(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.int32_pair)
 private:
  inline void set_has_first();
  inline void clear_has_first();
  inline void set_has_second();
  inline void clear_has_second();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 first_;
  ::google::protobuf::int32 second_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static int32_pair* default_instance_;
};
// -------------------------------------------------------------------

class npt_region_war_operate : public ::google::protobuf::Message {
 public:
  npt_region_war_operate();
  virtual ~npt_region_war_operate();

  npt_region_war_operate(const npt_region_war_operate& from);

  inline npt_region_war_operate& operator=(const npt_region_war_operate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_region_war_operate& default_instance();

  void Swap(npt_region_war_operate* other);

  // implements Message ----------------------------------------------

  npt_region_war_operate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_region_war_operate& from);
  void MergeFrom(const npt_region_war_operate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_region_war_operate_OPER_TYPE OPER_TYPE;
  static const OPER_TYPE WAR_QUERY_REGION = npt_region_war_operate_OPER_TYPE_WAR_QUERY_REGION;
  static const OPER_TYPE WAR_QUERY_BID = npt_region_war_operate_OPER_TYPE_WAR_QUERY_BID;
  static const OPER_TYPE WAR_BID = npt_region_war_operate_OPER_TYPE_WAR_BID;
  static const OPER_TYPE WAR_BID_ADD = npt_region_war_operate_OPER_TYPE_WAR_BID_ADD;
  static const OPER_TYPE WAR_QUERY_WAR = npt_region_war_operate_OPER_TYPE_WAR_QUERY_WAR;
  static const OPER_TYPE WAR_GET_DAILY_BONUS = npt_region_war_operate_OPER_TYPE_WAR_GET_DAILY_BONUS;
  static const OPER_TYPE WAR_QUERY_REGION_BID = npt_region_war_operate_OPER_TYPE_WAR_QUERY_REGION_BID;
  static const OPER_TYPE WAR_RECIEVE_COMPENSATION_TASK = npt_region_war_operate_OPER_TYPE_WAR_RECIEVE_COMPENSATION_TASK;
  static const OPER_TYPE WAR_GET_SELF_BID_REGION = npt_region_war_operate_OPER_TYPE_WAR_GET_SELF_BID_REGION;
  static inline bool OPER_TYPE_IsValid(int value) {
    return npt_region_war_operate_OPER_TYPE_IsValid(value);
  }
  static const OPER_TYPE OPER_TYPE_MIN =
    npt_region_war_operate_OPER_TYPE_OPER_TYPE_MIN;
  static const OPER_TYPE OPER_TYPE_MAX =
    npt_region_war_operate_OPER_TYPE_OPER_TYPE_MAX;
  static const int OPER_TYPE_ARRAYSIZE =
    npt_region_war_operate_OPER_TYPE_OPER_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPER_TYPE_descriptor() {
    return npt_region_war_operate_OPER_TYPE_descriptor();
  }
  static inline const ::std::string& OPER_TYPE_Name(OPER_TYPE value) {
    return npt_region_war_operate_OPER_TYPE_Name(value);
  }
  static inline bool OPER_TYPE_Parse(const ::std::string& name,
      OPER_TYPE* value) {
    return npt_region_war_operate_OPER_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REGION_WAR_OPERATE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.npt_region_war_operate.OPER_TYPE oper_type = 2;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 2;
  inline ::PB::npt_region_war_operate_OPER_TYPE oper_type() const;
  inline void set_oper_type(::PB::npt_region_war_operate_OPER_TYPE value);

  // optional int64 oper_param1 = 3;
  inline bool has_oper_param1() const;
  inline void clear_oper_param1();
  static const int kOperParam1FieldNumber = 3;
  inline ::google::protobuf::int64 oper_param1() const;
  inline void set_oper_param1(::google::protobuf::int64 value);

  // optional int64 oper_param2 = 4;
  inline bool has_oper_param2() const;
  inline void clear_oper_param2();
  static const int kOperParam2FieldNumber = 4;
  inline ::google::protobuf::int64 oper_param2() const;
  inline void set_oper_param2(::google::protobuf::int64 value);

  // optional int64 oper_param3 = 5;
  inline bool has_oper_param3() const;
  inline void clear_oper_param3();
  static const int kOperParam3FieldNumber = 5;
  inline ::google::protobuf::int64 oper_param3() const;
  inline void set_oper_param3(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.npt_region_war_operate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_oper_param1();
  inline void clear_has_oper_param1();
  inline void set_has_oper_param2();
  inline void clear_has_oper_param2();
  inline void set_has_oper_param3();
  inline void clear_has_oper_param3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int oper_type_;
  ::google::protobuf::int64 oper_param1_;
  ::google::protobuf::int64 oper_param2_;
  ::google::protobuf::int64 oper_param3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_region_war_operate* default_instance_;
};
// -------------------------------------------------------------------

class npt_region_war_get_info_re : public ::google::protobuf::Message {
 public:
  npt_region_war_get_info_re();
  virtual ~npt_region_war_get_info_re();

  npt_region_war_get_info_re(const npt_region_war_get_info_re& from);

  inline npt_region_war_get_info_re& operator=(const npt_region_war_get_info_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_region_war_get_info_re& default_instance();

  void Swap(npt_region_war_get_info_re* other);

  // implements Message ----------------------------------------------

  npt_region_war_get_info_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_region_war_get_info_re& from);
  void MergeFrom(const npt_region_war_get_info_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_region_war_get_info_re_OPER_TYPE OPER_TYPE;
  static const OPER_TYPE WAR_QUERY_REGION_RE = npt_region_war_get_info_re_OPER_TYPE_WAR_QUERY_REGION_RE;
  static const OPER_TYPE WAR_QUERY_BID_RE = npt_region_war_get_info_re_OPER_TYPE_WAR_QUERY_BID_RE;
  static const OPER_TYPE WAR_BID_RE = npt_region_war_get_info_re_OPER_TYPE_WAR_BID_RE;
  static const OPER_TYPE WAR_BID_ADD_RE = npt_region_war_get_info_re_OPER_TYPE_WAR_BID_ADD_RE;
  static const OPER_TYPE WAR_QUERY_WAR_RE = npt_region_war_get_info_re_OPER_TYPE_WAR_QUERY_WAR_RE;
  static const OPER_TYPE WAR_GET_DAILY_BONUS_RE = npt_region_war_get_info_re_OPER_TYPE_WAR_GET_DAILY_BONUS_RE;
  static const OPER_TYPE WAR_QUERY_REGION_BID_RE = npt_region_war_get_info_re_OPER_TYPE_WAR_QUERY_REGION_BID_RE;
  static const OPER_TYPE WAR_RECIEVE_COMPENSATION_TASK_RE = npt_region_war_get_info_re_OPER_TYPE_WAR_RECIEVE_COMPENSATION_TASK_RE;
  static const OPER_TYPE WAR_GET_SELF_BID_REGION_RE = npt_region_war_get_info_re_OPER_TYPE_WAR_GET_SELF_BID_REGION_RE;
  static inline bool OPER_TYPE_IsValid(int value) {
    return npt_region_war_get_info_re_OPER_TYPE_IsValid(value);
  }
  static const OPER_TYPE OPER_TYPE_MIN =
    npt_region_war_get_info_re_OPER_TYPE_OPER_TYPE_MIN;
  static const OPER_TYPE OPER_TYPE_MAX =
    npt_region_war_get_info_re_OPER_TYPE_OPER_TYPE_MAX;
  static const int OPER_TYPE_ARRAYSIZE =
    npt_region_war_get_info_re_OPER_TYPE_OPER_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPER_TYPE_descriptor() {
    return npt_region_war_get_info_re_OPER_TYPE_descriptor();
  }
  static inline const ::std::string& OPER_TYPE_Name(OPER_TYPE value) {
    return npt_region_war_get_info_re_OPER_TYPE_Name(value);
  }
  static inline bool OPER_TYPE_Parse(const ::std::string& name,
      OPER_TYPE* value) {
    return npt_region_war_get_info_re_OPER_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REGION_WAR_GET_INFO_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.npt_region_war_get_info_re.OPER_TYPE oper_type = 2;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 2;
  inline ::PB::npt_region_war_get_info_re_OPER_TYPE oper_type() const;
  inline void set_oper_type(::PB::npt_region_war_get_info_re_OPER_TYPE value);

  // repeated .PB.region_info_t region_list = 3;
  inline int region_list_size() const;
  inline void clear_region_list();
  static const int kRegionListFieldNumber = 3;
  inline const ::PB::region_info_t& region_list(int index) const;
  inline ::PB::region_info_t* mutable_region_list(int index);
  inline ::PB::region_info_t* add_region_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::region_info_t >&
      region_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::region_info_t >*
      mutable_region_list();

  // repeated .PB.region_bid_t bid_list = 4;
  inline int bid_list_size() const;
  inline void clear_bid_list();
  static const int kBidListFieldNumber = 4;
  inline const ::PB::region_bid_t& bid_list(int index) const;
  inline ::PB::region_bid_t* mutable_bid_list(int index);
  inline ::PB::region_bid_t* add_bid_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t >&
      bid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t >*
      mutable_bid_list();

  // repeated .PB.region_war_t war_list = 5;
  inline int war_list_size() const;
  inline void clear_war_list();
  static const int kWarListFieldNumber = 5;
  inline const ::PB::region_war_t& war_list(int index) const;
  inline ::PB::region_war_t* mutable_war_list(int index);
  inline ::PB::region_war_t* add_war_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::region_war_t >&
      war_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::region_war_t >*
      mutable_war_list();

  // @@protoc_insertion_point(class_scope:PB.npt_region_war_get_info_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int oper_type_;
  ::google::protobuf::RepeatedPtrField< ::PB::region_info_t > region_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t > bid_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::region_war_t > war_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_region_war_get_info_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_region_war_operate_re : public ::google::protobuf::Message {
 public:
  npt_region_war_operate_re();
  virtual ~npt_region_war_operate_re();

  npt_region_war_operate_re(const npt_region_war_operate_re& from);

  inline npt_region_war_operate_re& operator=(const npt_region_war_operate_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_region_war_operate_re& default_instance();

  void Swap(npt_region_war_operate_re* other);

  // implements Message ----------------------------------------------

  npt_region_war_operate_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_region_war_operate_re& from);
  void MergeFrom(const npt_region_war_operate_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_region_war_operate_re_OPER_TYPE OPER_TYPE;
  static const OPER_TYPE OPERATE_WAR_BID_RE = npt_region_war_operate_re_OPER_TYPE_OPERATE_WAR_BID_RE;
  static const OPER_TYPE OPERATE_WAR_CHEER_RE = npt_region_war_operate_re_OPER_TYPE_OPERATE_WAR_CHEER_RE;
  static const OPER_TYPE OPERATE_WAR_QUERY_REGION_BID_RE = npt_region_war_operate_re_OPER_TYPE_OPERATE_WAR_QUERY_REGION_BID_RE;
  static const OPER_TYPE OPERATE_WAR_QUERY_SELF_REGION_RE = npt_region_war_operate_re_OPER_TYPE_OPERATE_WAR_QUERY_SELF_REGION_RE;
  static inline bool OPER_TYPE_IsValid(int value) {
    return npt_region_war_operate_re_OPER_TYPE_IsValid(value);
  }
  static const OPER_TYPE OPER_TYPE_MIN =
    npt_region_war_operate_re_OPER_TYPE_OPER_TYPE_MIN;
  static const OPER_TYPE OPER_TYPE_MAX =
    npt_region_war_operate_re_OPER_TYPE_OPER_TYPE_MAX;
  static const int OPER_TYPE_ARRAYSIZE =
    npt_region_war_operate_re_OPER_TYPE_OPER_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPER_TYPE_descriptor() {
    return npt_region_war_operate_re_OPER_TYPE_descriptor();
  }
  static inline const ::std::string& OPER_TYPE_Name(OPER_TYPE value) {
    return npt_region_war_operate_re_OPER_TYPE_Name(value);
  }
  static inline bool OPER_TYPE_Parse(const ::std::string& name,
      OPER_TYPE* value) {
    return npt_region_war_operate_re_OPER_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REGION_WAR_OPERATE_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.npt_region_war_operate_re.OPER_TYPE oper_type = 2;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 2;
  inline ::PB::npt_region_war_operate_re_OPER_TYPE oper_type() const;
  inline void set_oper_type(::PB::npt_region_war_operate_re_OPER_TYPE value);

  // optional int32 oper_result = 3;
  inline bool has_oper_result() const;
  inline void clear_oper_result();
  static const int kOperResultFieldNumber = 3;
  inline ::google::protobuf::int32 oper_result() const;
  inline void set_oper_result(::google::protobuf::int32 value);

  // repeated .PB.int32_pair int_list = 4;
  inline int int_list_size() const;
  inline void clear_int_list();
  static const int kIntListFieldNumber = 4;
  inline const ::PB::int32_pair& int_list(int index) const;
  inline ::PB::int32_pair* mutable_int_list(int index);
  inline ::PB::int32_pair* add_int_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::int32_pair >&
      int_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::int32_pair >*
      mutable_int_list();

  // @@protoc_insertion_point(class_scope:PB.npt_region_war_operate_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_oper_result();
  inline void clear_has_oper_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int oper_type_;
  ::google::protobuf::RepeatedPtrField< ::PB::int32_pair > int_list_;
  ::google::protobuf::int32 oper_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_region_war_operate_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_region_war_begin_notify : public ::google::protobuf::Message {
 public:
  npt_region_war_begin_notify();
  virtual ~npt_region_war_begin_notify();

  npt_region_war_begin_notify(const npt_region_war_begin_notify& from);

  inline npt_region_war_begin_notify& operator=(const npt_region_war_begin_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_region_war_begin_notify& default_instance();

  void Swap(npt_region_war_begin_notify* other);

  // implements Message ----------------------------------------------

  npt_region_war_begin_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_region_war_begin_notify& from);
  void MergeFrom(const npt_region_war_begin_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REGION_WAR_BEGIN_NOTIFY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int64 attacker = 2;
  inline bool has_attacker() const;
  inline void clear_attacker();
  static const int kAttackerFieldNumber = 2;
  inline ::google::protobuf::int64 attacker() const;
  inline void set_attacker(::google::protobuf::int64 value);

  // optional int64 defender = 3;
  inline bool has_defender() const;
  inline void clear_defender();
  static const int kDefenderFieldNumber = 3;
  inline ::google::protobuf::int64 defender() const;
  inline void set_defender(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.npt_region_war_begin_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_attacker();
  inline void clear_has_attacker();
  inline void set_has_defender();
  inline void clear_has_defender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 attacker_;
  ::google::protobuf::int64 defender_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_region_war_begin_notify* default_instance_;
};
// -------------------------------------------------------------------

class gmshutdownserver_notify : public ::google::protobuf::Message {
 public:
  gmshutdownserver_notify();
  virtual ~gmshutdownserver_notify();

  gmshutdownserver_notify(const gmshutdownserver_notify& from);

  inline gmshutdownserver_notify& operator=(const gmshutdownserver_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gmshutdownserver_notify& default_instance();

  void Swap(gmshutdownserver_notify* other);

  // implements Message ----------------------------------------------

  gmshutdownserver_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gmshutdownserver_notify& from);
  void MergeFrom(const gmshutdownserver_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GM_SHUT_DOWN_SERVER];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 zoneid = 2;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // optional int64 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional int32 speakid = 4;
  inline bool has_speakid() const;
  inline void clear_speakid();
  static const int kSpeakidFieldNumber = 4;
  inline ::google::protobuf::int32 speakid() const;
  inline void set_speakid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gmshutdownserver_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_speakid();
  inline void clear_has_speakid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 zoneid_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 speakid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gmshutdownserver_notify* default_instance_;
};
// -------------------------------------------------------------------

class npt_notify_regionwar_deltatime : public ::google::protobuf::Message {
 public:
  npt_notify_regionwar_deltatime();
  virtual ~npt_notify_regionwar_deltatime();

  npt_notify_regionwar_deltatime(const npt_notify_regionwar_deltatime& from);

  inline npt_notify_regionwar_deltatime& operator=(const npt_notify_regionwar_deltatime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_notify_regionwar_deltatime& default_instance();

  void Swap(npt_notify_regionwar_deltatime* other);

  // implements Message ----------------------------------------------

  npt_notify_regionwar_deltatime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_notify_regionwar_deltatime& from);
  void MergeFrom(const npt_notify_regionwar_deltatime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NOTIFY_REGIONWAR_DELTATIME];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 delta_time = 2;
  inline bool has_delta_time() const;
  inline void clear_delta_time();
  static const int kDeltaTimeFieldNumber = 2;
  inline ::google::protobuf::int32 delta_time() const;
  inline void set_delta_time(::google::protobuf::int32 value);

  // optional int32 server_open_time = 3;
  inline bool has_server_open_time() const;
  inline void clear_server_open_time();
  static const int kServerOpenTimeFieldNumber = 3;
  inline ::google::protobuf::int32 server_open_time() const;
  inline void set_server_open_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_notify_regionwar_deltatime)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_delta_time();
  inline void clear_has_delta_time();
  inline void set_has_server_open_time();
  inline void clear_has_server_open_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 delta_time_;
  ::google::protobuf::int32 server_open_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_notify_regionwar_deltatime* default_instance_;
};
// -------------------------------------------------------------------

class npt_notify_regionwar_dailybonus : public ::google::protobuf::Message {
 public:
  npt_notify_regionwar_dailybonus();
  virtual ~npt_notify_regionwar_dailybonus();

  npt_notify_regionwar_dailybonus(const npt_notify_regionwar_dailybonus& from);

  inline npt_notify_regionwar_dailybonus& operator=(const npt_notify_regionwar_dailybonus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_notify_regionwar_dailybonus& default_instance();

  void Swap(npt_notify_regionwar_dailybonus* other);

  // implements Message ----------------------------------------------

  npt_notify_regionwar_dailybonus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_notify_regionwar_dailybonus& from);
  void MergeFrom(const npt_notify_regionwar_dailybonus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NOTIFY_REGIONWAR_DAILYBONUS];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 has_bonus = 2;
  inline bool has_has_bonus() const;
  inline void clear_has_bonus();
  static const int kHasBonusFieldNumber = 2;
  inline ::google::protobuf::int32 has_bonus() const;
  inline void set_has_bonus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_notify_regionwar_dailybonus)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_has_bonus();
  inline void clear_has_has_bonus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 has_bonus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_notify_regionwar_dailybonus* default_instance_;
};
// -------------------------------------------------------------------

class npt_get_corps_info : public ::google::protobuf::Message {
 public:
  npt_get_corps_info();
  virtual ~npt_get_corps_info();

  npt_get_corps_info(const npt_get_corps_info& from);

  inline npt_get_corps_info& operator=(const npt_get_corps_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_get_corps_info& default_instance();

  void Swap(npt_get_corps_info* other);

  // implements Message ----------------------------------------------

  npt_get_corps_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_get_corps_info& from);
  void MergeFrom(const npt_get_corps_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_CORPS_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 corps_id = 2;
  inline bool has_corps_id() const;
  inline void clear_corps_id();
  static const int kCorpsIdFieldNumber = 2;
  inline ::google::protobuf::int32 corps_id() const;
  inline void set_corps_id(::google::protobuf::int32 value);

  // optional int32 corps_level = 3;
  inline bool has_corps_level() const;
  inline void clear_corps_level();
  static const int kCorpsLevelFieldNumber = 3;
  inline ::google::protobuf::int32 corps_level() const;
  inline void set_corps_level(::google::protobuf::int32 value);

  // optional int32 corps_members = 4;
  inline bool has_corps_members() const;
  inline void clear_corps_members();
  static const int kCorpsMembersFieldNumber = 4;
  inline ::google::protobuf::int32 corps_members() const;
  inline void set_corps_members(::google::protobuf::int32 value);

  // optional int32 corps_nation = 5;
  inline bool has_corps_nation() const;
  inline void clear_corps_nation();
  static const int kCorpsNationFieldNumber = 5;
  inline ::google::protobuf::int32 corps_nation() const;
  inline void set_corps_nation(::google::protobuf::int32 value);

  // optional int64 corps_master_id = 6;
  inline bool has_corps_master_id() const;
  inline void clear_corps_master_id();
  static const int kCorpsMasterIdFieldNumber = 6;
  inline ::google::protobuf::int64 corps_master_id() const;
  inline void set_corps_master_id(::google::protobuf::int64 value);

  // optional bytes corps_master_name = 7;
  inline bool has_corps_master_name() const;
  inline void clear_corps_master_name();
  static const int kCorpsMasterNameFieldNumber = 7;
  inline const ::std::string& corps_master_name() const;
  inline void set_corps_master_name(const ::std::string& value);
  inline void set_corps_master_name(const char* value);
  inline void set_corps_master_name(const void* value, size_t size);
  inline ::std::string* mutable_corps_master_name();
  inline ::std::string* release_corps_master_name();
  inline void set_allocated_corps_master_name(::std::string* corps_master_name);

  // optional int32 region_id = 8;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 8;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_get_corps_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_corps_id();
  inline void clear_has_corps_id();
  inline void set_has_corps_level();
  inline void clear_has_corps_level();
  inline void set_has_corps_members();
  inline void clear_has_corps_members();
  inline void set_has_corps_nation();
  inline void clear_has_corps_nation();
  inline void set_has_corps_master_id();
  inline void clear_has_corps_master_id();
  inline void set_has_corps_master_name();
  inline void clear_has_corps_master_name();
  inline void set_has_region_id();
  inline void clear_has_region_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 corps_id_;
  ::google::protobuf::int32 corps_level_;
  ::google::protobuf::int32 corps_members_;
  ::google::protobuf::int64 corps_master_id_;
  ::google::protobuf::int32 corps_nation_;
  ::google::protobuf::int32 region_id_;
  ::std::string* corps_master_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_get_corps_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_get_region_cheer_info : public ::google::protobuf::Message {
 public:
  npt_get_region_cheer_info();
  virtual ~npt_get_region_cheer_info();

  npt_get_region_cheer_info(const npt_get_region_cheer_info& from);

  inline npt_get_region_cheer_info& operator=(const npt_get_region_cheer_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_get_region_cheer_info& default_instance();

  void Swap(npt_get_region_cheer_info* other);

  // implements Message ----------------------------------------------

  npt_get_region_cheer_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_get_region_cheer_info& from);
  void MergeFrom(const npt_get_region_cheer_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_REGION_CHEER_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 region_id = 2;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_get_region_cheer_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_region_id();
  inline void clear_has_region_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 region_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_get_region_cheer_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_get_region_cheer_info_re : public ::google::protobuf::Message {
 public:
  npt_get_region_cheer_info_re();
  virtual ~npt_get_region_cheer_info_re();

  npt_get_region_cheer_info_re(const npt_get_region_cheer_info_re& from);

  inline npt_get_region_cheer_info_re& operator=(const npt_get_region_cheer_info_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_get_region_cheer_info_re& default_instance();

  void Swap(npt_get_region_cheer_info_re* other);

  // implements Message ----------------------------------------------

  npt_get_region_cheer_info_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_get_region_cheer_info_re& from);
  void MergeFrom(const npt_get_region_cheer_info_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_REGION_CHEER_INFO_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 region_id = 2;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // optional int32 attack_value = 3;
  inline bool has_attack_value() const;
  inline void clear_attack_value();
  static const int kAttackValueFieldNumber = 3;
  inline ::google::protobuf::int32 attack_value() const;
  inline void set_attack_value(::google::protobuf::int32 value);

  // optional int32 defend_value = 4;
  inline bool has_defend_value() const;
  inline void clear_defend_value();
  static const int kDefendValueFieldNumber = 4;
  inline ::google::protobuf::int32 defend_value() const;
  inline void set_defend_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_get_region_cheer_info_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_attack_value();
  inline void clear_has_attack_value();
  inline void set_has_defend_value();
  inline void clear_has_defend_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 region_id_;
  ::google::protobuf::int32 attack_value_;
  ::google::protobuf::int32 defend_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_get_region_cheer_info_re* default_instance_;
};
// -------------------------------------------------------------------

class item_data : public ::google::protobuf::Message {
 public:
  item_data();
  virtual ~item_data();

  item_data(const item_data& from);

  inline item_data& operator=(const item_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_data& default_instance();

  void Swap(item_data* other);

  // implements Message ----------------------------------------------

  item_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_data& from);
  void MergeFrom(const item_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_ITEM_DATA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 count_normal = 4;
  inline bool has_count_normal() const;
  inline void clear_count_normal();
  static const int kCountNormalFieldNumber = 4;
  inline ::google::protobuf::int32 count_normal() const;
  inline void set_count_normal(::google::protobuf::int32 value);

  // optional int32 count_bind = 5;
  inline bool has_count_bind() const;
  inline void clear_count_bind();
  static const int kCountBindFieldNumber = 5;
  inline ::google::protobuf::int32 count_bind() const;
  inline void set_count_bind(::google::protobuf::int32 value);

  // optional int32 state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 expire_date = 7;
  inline bool has_expire_date() const;
  inline void clear_expire_date();
  static const int kExpireDateFieldNumber = 7;
  inline ::google::protobuf::int32 expire_date() const;
  inline void set_expire_date(::google::protobuf::int32 value);

  // optional bytes content = 8;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 8;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:PB.item_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_count_normal();
  inline void clear_has_count_normal();
  inline void set_has_count_bind();
  inline void clear_has_count_bind();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_expire_date();
  inline void clear_has_expire_date();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 count_normal_;
  ::google::protobuf::int32 count_bind_;
  ::google::protobuf::int32 state_;
  ::std::string* content_;
  ::google::protobuf::int32 expire_date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static item_data* default_instance_;
};
// -------------------------------------------------------------------

class item_list_data : public ::google::protobuf::Message {
 public:
  item_list_data();
  virtual ~item_list_data();

  item_list_data(const item_list_data& from);

  inline item_list_data& operator=(const item_list_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_list_data& default_instance();

  void Swap(item_list_data* other);

  // implements Message ----------------------------------------------

  item_list_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_list_data& from);
  void MergeFrom(const item_list_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_ITEM_LIST_DATA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // repeated .PB.item_data item_list = 2;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 2;
  inline const ::PB::item_data& item_list(int index) const;
  inline ::PB::item_data* mutable_item_list(int index);
  inline ::PB::item_data* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::item_data >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::item_data >*
      mutable_item_list();

  // @@protoc_insertion_point(class_scope:PB.item_list_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::item_data > item_list_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static item_list_data* default_instance_;
};
// -------------------------------------------------------------------

class xiulian_data : public ::google::protobuf::Message {
 public:
  xiulian_data();
  virtual ~xiulian_data();

  xiulian_data(const xiulian_data& from);

  inline xiulian_data& operator=(const xiulian_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const xiulian_data& default_instance();

  void Swap(xiulian_data* other);

  // implements Message ----------------------------------------------

  xiulian_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const xiulian_data& from);
  void MergeFrom(const xiulian_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.item_list_data items = 2;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::PB::item_list_data& items() const;
  inline ::PB::item_list_data* mutable_items();
  inline ::PB::item_list_data* release_items();
  inline void set_allocated_items(::PB::item_list_data* items);

  // @@protoc_insertion_point(class_scope:PB.xiulian_data)
 private:
  inline void set_has_items();
  inline void clear_has_items();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::item_list_data* items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static xiulian_data* default_instance_;
};
// -------------------------------------------------------------------

class pet_data : public ::google::protobuf::Message {
 public:
  pet_data();
  virtual ~pet_data();

  pet_data(const pet_data& from);

  inline pet_data& operator=(const pet_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_data& default_instance();

  void Swap(pet_data* other);

  // implements Message ----------------------------------------------

  pet_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_data& from);
  void MergeFrom(const pet_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef pet_data_PET_STATE PET_STATE;
  static const PET_STATE ST_PET_NONE = pet_data_PET_STATE_ST_PET_NONE;
  static const PET_STATE ST_PET_FIGHT = pet_data_PET_STATE_ST_PET_FIGHT;
  static const PET_STATE ST_PET_ASSIST = pet_data_PET_STATE_ST_PET_ASSIST;
  static inline bool PET_STATE_IsValid(int value) {
    return pet_data_PET_STATE_IsValid(value);
  }
  static const PET_STATE PET_STATE_MIN =
    pet_data_PET_STATE_PET_STATE_MIN;
  static const PET_STATE PET_STATE_MAX =
    pet_data_PET_STATE_PET_STATE_MAX;
  static const int PET_STATE_ARRAYSIZE =
    pet_data_PET_STATE_PET_STATE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PET_STATE_descriptor() {
    return pet_data_PET_STATE_descriptor();
  }
  static inline const ::std::string& PET_STATE_Name(PET_STATE value) {
    return pet_data_PET_STATE_Name(value);
  }
  static inline bool PET_STATE_Parse(const ::std::string& name,
      PET_STATE* value) {
    return pet_data_PET_STATE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_PET_DATA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // optional int32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int64 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional int32 quality_color = 5;
  inline bool has_quality_color() const;
  inline void clear_quality_color();
  static const int kQualityColorFieldNumber = 5;
  inline ::google::protobuf::int32 quality_color() const;
  inline void set_quality_color(::google::protobuf::int32 value);

  // optional int32 quality_star = 6;
  inline bool has_quality_star() const;
  inline void clear_quality_star();
  static const int kQualityStarFieldNumber = 6;
  inline ::google::protobuf::int32 quality_star() const;
  inline void set_quality_star(::google::protobuf::int32 value);

  // optional float talent = 7;
  inline bool has_talent() const;
  inline void clear_talent();
  static const int kTalentFieldNumber = 7;
  inline float talent() const;
  inline void set_talent(float value);

  // optional .PB.item_list_data equipment = 8;
  inline bool has_equipment() const;
  inline void clear_equipment();
  static const int kEquipmentFieldNumber = 8;
  inline const ::PB::item_list_data& equipment() const;
  inline ::PB::item_list_data* mutable_equipment();
  inline ::PB::item_list_data* release_equipment();
  inline void set_allocated_equipment(::PB::item_list_data* equipment);

  // optional bytes prop_data = 9;
  inline bool has_prop_data() const;
  inline void clear_prop_data();
  static const int kPropDataFieldNumber = 9;
  inline const ::std::string& prop_data() const;
  inline void set_prop_data(const ::std::string& value);
  inline void set_prop_data(const char* value);
  inline void set_prop_data(const void* value, size_t size);
  inline ::std::string* mutable_prop_data();
  inline ::std::string* release_prop_data();
  inline void set_allocated_prop_data(::std::string* prop_data);

  // repeated int32 skill_addon = 10;
  inline int skill_addon_size() const;
  inline void clear_skill_addon();
  static const int kSkillAddonFieldNumber = 10;
  inline ::google::protobuf::int32 skill_addon(int index) const;
  inline void set_skill_addon(int index, ::google::protobuf::int32 value);
  inline void add_skill_addon(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skill_addon() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skill_addon();

  // optional int32 pos_index = 11;
  inline bool has_pos_index() const;
  inline void clear_pos_index();
  static const int kPosIndexFieldNumber = 11;
  inline ::google::protobuf::int32 pos_index() const;
  inline void set_pos_index(::google::protobuf::int32 value);

  // optional .PB.pet_data.PET_STATE fight_state = 12;
  inline bool has_fight_state() const;
  inline void clear_fight_state();
  static const int kFightStateFieldNumber = 12;
  inline ::PB::pet_data_PET_STATE fight_state() const;
  inline void set_fight_state(::PB::pet_data_PET_STATE value);

  // optional int32 star_bless_value = 13;
  inline bool has_star_bless_value() const;
  inline void clear_star_bless_value();
  static const int kStarBlessValueFieldNumber = 13;
  inline ::google::protobuf::int32 star_bless_value() const;
  inline void set_star_bless_value(::google::protobuf::int32 value);

  // optional int32 star_bless_stamp = 14;
  inline bool has_star_bless_stamp() const;
  inline void clear_star_bless_stamp();
  static const int kStarBlessStampFieldNumber = 14;
  inline ::google::protobuf::int32 star_bless_stamp() const;
  inline void set_star_bless_stamp(::google::protobuf::int32 value);

  // optional int32 special_prop_1 = 15;
  inline bool has_special_prop_1() const;
  inline void clear_special_prop_1();
  static const int kSpecialProp1FieldNumber = 15;
  inline ::google::protobuf::int32 special_prop_1() const;
  inline void set_special_prop_1(::google::protobuf::int32 value);

  // optional int32 special_prop_2 = 16;
  inline bool has_special_prop_2() const;
  inline void clear_special_prop_2();
  static const int kSpecialProp2FieldNumber = 16;
  inline ::google::protobuf::int32 special_prop_2() const;
  inline void set_special_prop_2(::google::protobuf::int32 value);

  // optional int32 skill_unlock = 17;
  inline bool has_skill_unlock() const;
  inline void clear_skill_unlock();
  static const int kSkillUnlockFieldNumber = 17;
  inline ::google::protobuf::int32 skill_unlock() const;
  inline void set_skill_unlock(::google::protobuf::int32 value);

  // optional int32 base_ratio = 18;
  inline bool has_base_ratio() const;
  inline void clear_base_ratio();
  static const int kBaseRatioFieldNumber = 18;
  inline ::google::protobuf::int32 base_ratio() const;
  inline void set_base_ratio(::google::protobuf::int32 value);

  // repeated int32 base_prop_ratio = 19;
  inline int base_prop_ratio_size() const;
  inline void clear_base_prop_ratio();
  static const int kBasePropRatioFieldNumber = 19;
  inline ::google::protobuf::int32 base_prop_ratio(int index) const;
  inline void set_base_prop_ratio(int index, ::google::protobuf::int32 value);
  inline void add_base_prop_ratio(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      base_prop_ratio() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_base_prop_ratio();

  // @@protoc_insertion_point(class_scope:PB.pet_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_quality_color();
  inline void clear_has_quality_color();
  inline void set_has_quality_star();
  inline void clear_has_quality_star();
  inline void set_has_talent();
  inline void clear_has_talent();
  inline void set_has_equipment();
  inline void clear_has_equipment();
  inline void set_has_prop_data();
  inline void clear_has_prop_data();
  inline void set_has_pos_index();
  inline void clear_has_pos_index();
  inline void set_has_fight_state();
  inline void clear_has_fight_state();
  inline void set_has_star_bless_value();
  inline void clear_has_star_bless_value();
  inline void set_has_star_bless_stamp();
  inline void clear_has_star_bless_stamp();
  inline void set_has_special_prop_1();
  inline void clear_has_special_prop_1();
  inline void set_has_special_prop_2();
  inline void clear_has_special_prop_2();
  inline void set_has_skill_unlock();
  inline void clear_has_skill_unlock();
  inline void set_has_base_ratio();
  inline void clear_has_base_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 quality_color_;
  ::google::protobuf::int32 quality_star_;
  float talent_;
  ::PB::item_list_data* equipment_;
  ::std::string* prop_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skill_addon_;
  ::google::protobuf::int32 pos_index_;
  int fight_state_;
  ::google::protobuf::int32 star_bless_value_;
  ::google::protobuf::int32 star_bless_stamp_;
  ::google::protobuf::int32 special_prop_1_;
  ::google::protobuf::int32 special_prop_2_;
  ::google::protobuf::int32 skill_unlock_;
  ::google::protobuf::int32 base_ratio_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > base_prop_ratio_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static pet_data* default_instance_;
};
// -------------------------------------------------------------------

class pet_list_data : public ::google::protobuf::Message {
 public:
  pet_list_data();
  virtual ~pet_list_data();

  pet_list_data(const pet_list_data& from);

  inline pet_list_data& operator=(const pet_list_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_list_data& default_instance();

  void Swap(pet_list_data* other);

  // implements Message ----------------------------------------------

  pet_list_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_list_data& from);
  void MergeFrom(const pet_list_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_PET_LIST_DATA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // optional int32 list_capacity = 2;
  inline bool has_list_capacity() const;
  inline void clear_list_capacity();
  static const int kListCapacityFieldNumber = 2;
  inline ::google::protobuf::int32 list_capacity() const;
  inline void set_list_capacity(::google::protobuf::int32 value);

  // repeated .PB.pet_data pet_list = 3;
  inline int pet_list_size() const;
  inline void clear_pet_list();
  static const int kPetListFieldNumber = 3;
  inline const ::PB::pet_data& pet_list(int index) const;
  inline ::PB::pet_data* mutable_pet_list(int index);
  inline ::PB::pet_data* add_pet_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::pet_data >&
      pet_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::pet_data >*
      mutable_pet_list();

  // @@protoc_insertion_point(class_scope:PB.pet_list_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_list_capacity();
  inline void clear_has_list_capacity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 list_capacity_;
  ::google::protobuf::RepeatedPtrField< ::PB::pet_data > pet_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static pet_list_data* default_instance_;
};
// -------------------------------------------------------------------

class gp_pet_list_info : public ::google::protobuf::Message {
 public:
  gp_pet_list_info();
  virtual ~gp_pet_list_info();

  gp_pet_list_info(const gp_pet_list_info& from);

  inline gp_pet_list_info& operator=(const gp_pet_list_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_pet_list_info& default_instance();

  void Swap(gp_pet_list_info* other);

  // implements Message ----------------------------------------------

  gp_pet_list_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_pet_list_info& from);
  void MergeFrom(const gp_pet_list_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_pet_list_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional .PB.pet_list_data pet_list = 2;
  inline bool has_pet_list() const;
  inline void clear_pet_list();
  static const int kPetListFieldNumber = 2;
  inline const ::PB::pet_list_data& pet_list() const;
  inline ::PB::pet_list_data* mutable_pet_list();
  inline ::PB::pet_list_data* release_pet_list();
  inline void set_allocated_pet_list(::PB::pet_list_data* pet_list);

  // @@protoc_insertion_point(class_scope:PB.gp_pet_list_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pet_list();
  inline void clear_has_pet_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::pet_list_data* pet_list_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_pet_list_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_pet_info : public ::google::protobuf::Message {
 public:
  gp_pet_info();
  virtual ~gp_pet_info();

  gp_pet_info(const gp_pet_info& from);

  inline gp_pet_info& operator=(const gp_pet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_pet_info& default_instance();

  void Swap(gp_pet_info* other);

  // implements Message ----------------------------------------------

  gp_pet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_pet_info& from);
  void MergeFrom(const gp_pet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_pet_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 list_pos = 2;
  inline bool has_list_pos() const;
  inline void clear_list_pos();
  static const int kListPosFieldNumber = 2;
  inline ::google::protobuf::int32 list_pos() const;
  inline void set_list_pos(::google::protobuf::int32 value);

  // optional .PB.pet_data pet_info = 3;
  inline bool has_pet_info() const;
  inline void clear_pet_info();
  static const int kPetInfoFieldNumber = 3;
  inline const ::PB::pet_data& pet_info() const;
  inline ::PB::pet_data* mutable_pet_info();
  inline ::PB::pet_data* release_pet_info();
  inline void set_allocated_pet_info(::PB::pet_data* pet_info);

  // optional int32 has_equip = 4;
  inline bool has_has_equip() const;
  inline void clear_has_equip();
  static const int kHasEquipFieldNumber = 4;
  inline ::google::protobuf::int32 has_equip() const;
  inline void set_has_equip(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_pet_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_list_pos();
  inline void clear_has_list_pos();
  inline void set_has_pet_info();
  inline void clear_has_pet_info();
  inline void set_has_has_equip();
  inline void clear_has_has_equip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 list_pos_;
  ::PB::pet_data* pet_info_;
  ::google::protobuf::int32 has_equip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_pet_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_pet_operate_re : public ::google::protobuf::Message {
 public:
  gp_pet_operate_re();
  virtual ~gp_pet_operate_re();

  gp_pet_operate_re(const gp_pet_operate_re& from);

  inline gp_pet_operate_re& operator=(const gp_pet_operate_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_pet_operate_re& default_instance();

  void Swap(gp_pet_operate_re* other);

  // implements Message ----------------------------------------------

  gp_pet_operate_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_pet_operate_re& from);
  void MergeFrom(const gp_pet_operate_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_pet_operate_re];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int32 oper_type = 2;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 2;
  inline ::google::protobuf::int32 oper_type() const;
  inline void set_oper_type(::google::protobuf::int32 value);

  // optional int32 oper_retcode = 3;
  inline bool has_oper_retcode() const;
  inline void clear_oper_retcode();
  static const int kOperRetcodeFieldNumber = 3;
  inline ::google::protobuf::int32 oper_retcode() const;
  inline void set_oper_retcode(::google::protobuf::int32 value);

  // optional int32 result_param1 = 4;
  inline bool has_result_param1() const;
  inline void clear_result_param1();
  static const int kResultParam1FieldNumber = 4;
  inline ::google::protobuf::int32 result_param1() const;
  inline void set_result_param1(::google::protobuf::int32 value);

  // optional int32 result_param2 = 5;
  inline bool has_result_param2() const;
  inline void clear_result_param2();
  static const int kResultParam2FieldNumber = 5;
  inline ::google::protobuf::int32 result_param2() const;
  inline void set_result_param2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_pet_operate_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_oper_retcode();
  inline void clear_has_oper_retcode();
  inline void set_has_result_param1();
  inline void clear_has_result_param1();
  inline void set_has_result_param2();
  inline void clear_has_result_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 oper_type_;
  ::google::protobuf::int32 oper_retcode_;
  ::google::protobuf::int32 result_param1_;
  ::google::protobuf::int32 result_param2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_pet_operate_re* default_instance_;
};
// -------------------------------------------------------------------

class gp_level_extern_info : public ::google::protobuf::Message {
 public:
  gp_level_extern_info();
  virtual ~gp_level_extern_info();

  gp_level_extern_info(const gp_level_extern_info& from);

  inline gp_level_extern_info& operator=(const gp_level_extern_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_level_extern_info& default_instance();

  void Swap(gp_level_extern_info* other);

  // implements Message ----------------------------------------------

  gp_level_extern_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_level_extern_info& from);
  void MergeFrom(const gp_level_extern_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_level_extern_info];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // required .PB.instance_extend_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PB::instance_extend_info& info() const;
  inline ::PB::instance_extend_info* mutable_info();
  inline ::PB::instance_extend_info* release_info();
  inline void set_allocated_info(::PB::instance_extend_info* info);

  // @@protoc_insertion_point(class_scope:PB.gp_level_extern_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::instance_extend_info* info_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_level_extern_info* default_instance_;
};
// -------------------------------------------------------------------

class gp_buff_broken : public ::google::protobuf::Message {
 public:
  gp_buff_broken();
  virtual ~gp_buff_broken();

  gp_buff_broken(const gp_buff_broken& from);

  inline gp_buff_broken& operator=(const gp_buff_broken& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_buff_broken& default_instance();

  void Swap(gp_buff_broken* other);

  // implements Message ----------------------------------------------

  gp_buff_broken* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_buff_broken& from);
  void MergeFrom(const gp_buff_broken& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_def_buff_broken];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional int32 skillid = 3;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 3;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional int32 buffid = 4;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffidFieldNumber = 4;
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);

  // optional int32 effectid = 5;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectidFieldNumber = 5;
  inline ::google::protobuf::int32 effectid() const;
  inline void set_effectid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_buff_broken)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_effectid();
  inline void clear_has_effectid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 buffid_;
  ::google::protobuf::int32 effectid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_buff_broken* default_instance_;
};
// -------------------------------------------------------------------

class npt_pixiu_buy_records : public ::google::protobuf::Message {
 public:
  npt_pixiu_buy_records();
  virtual ~npt_pixiu_buy_records();

  npt_pixiu_buy_records(const npt_pixiu_buy_records& from);

  inline npt_pixiu_buy_records& operator=(const npt_pixiu_buy_records& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_pixiu_buy_records& default_instance();

  void Swap(npt_pixiu_buy_records* other);

  // implements Message ----------------------------------------------

  npt_pixiu_buy_records* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_pixiu_buy_records& from);
  void MergeFrom(const npt_pixiu_buy_records& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RESET_DOUBLERECHAGE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // repeated .PB.pixiu_service_buy_record record = 3;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 3;
  inline const ::PB::pixiu_service_buy_record& record(int index) const;
  inline ::PB::pixiu_service_buy_record* mutable_record(int index);
  inline ::PB::pixiu_service_buy_record* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::pixiu_service_buy_record >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::pixiu_service_buy_record >*
      mutable_record();

  // optional int64 firstbuy_sn = 4 [default = 0];
  inline bool has_firstbuy_sn() const;
  inline void clear_firstbuy_sn();
  static const int kFirstbuySnFieldNumber = 4;
  inline ::google::protobuf::int64 firstbuy_sn() const;
  inline void set_firstbuy_sn(::google::protobuf::int64 value);

  // optional int64 system_firstbuy_sn = 5 [default = 0];
  inline bool has_system_firstbuy_sn() const;
  inline void clear_system_firstbuy_sn();
  static const int kSystemFirstbuySnFieldNumber = 5;
  inline ::google::protobuf::int64 system_firstbuy_sn() const;
  inline void set_system_firstbuy_sn(::google::protobuf::int64 value);

  // optional bool reset_doublecharge = 6 [default = false];
  inline bool has_reset_doublecharge() const;
  inline void clear_reset_doublecharge();
  static const int kResetDoublechargeFieldNumber = 6;
  inline bool reset_doublecharge() const;
  inline void set_reset_doublecharge(bool value);

  // @@protoc_insertion_point(class_scope:PB.npt_pixiu_buy_records)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_firstbuy_sn();
  inline void clear_has_firstbuy_sn();
  inline void set_has_system_firstbuy_sn();
  inline void clear_has_system_firstbuy_sn();
  inline void set_has_reset_doublecharge();
  inline void clear_has_reset_doublecharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  ::google::protobuf::RepeatedPtrField< ::PB::pixiu_service_buy_record > record_;
  int type_;
  bool reset_doublecharge_;
  ::google::protobuf::int64 firstbuy_sn_;
  ::google::protobuf::int64 system_firstbuy_sn_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_pixiu_buy_records* default_instance_;
};
// -------------------------------------------------------------------

class gp_pet_object_fight : public ::google::protobuf::Message {
 public:
  gp_pet_object_fight();
  virtual ~gp_pet_object_fight();

  gp_pet_object_fight(const gp_pet_object_fight& from);

  inline gp_pet_object_fight& operator=(const gp_pet_object_fight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_pet_object_fight& default_instance();

  void Swap(gp_pet_object_fight* other);

  // implements Message ----------------------------------------------

  gp_pet_object_fight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_pet_object_fight& from);
  void MergeFrom(const gp_pet_object_fight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_pet_object_fight];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::S2C_GS_PROTOC_TYPE type() const;
  inline void set_type(::PB::S2C_GS_PROTOC_TYPE value);

  // optional int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional uint64 object_state = 3;
  inline bool has_object_state() const;
  inline void clear_object_state();
  static const int kObjectStateFieldNumber = 3;
  inline ::google::protobuf::uint64 object_state() const;
  inline void set_object_state(::google::protobuf::uint64 value);

  // optional int32 pet_tid = 4;
  inline bool has_pet_tid() const;
  inline void clear_pet_tid();
  static const int kPetTidFieldNumber = 4;
  inline ::google::protobuf::int32 pet_tid() const;
  inline void set_pet_tid(::google::protobuf::int32 value);

  // optional int32 pet_star = 5;
  inline bool has_pet_star() const;
  inline void clear_pet_star();
  static const int kPetStarFieldNumber = 5;
  inline ::google::protobuf::int32 pet_star() const;
  inline void set_pet_star(::google::protobuf::int32 value);

  // optional int32 pet_level = 6;
  inline bool has_pet_level() const;
  inline void clear_pet_level();
  static const int kPetLevelFieldNumber = 6;
  inline ::google::protobuf::int32 pet_level() const;
  inline void set_pet_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.gp_pet_object_fight)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_object_state();
  inline void clear_has_object_state();
  inline void set_has_pet_tid();
  inline void clear_has_pet_tid();
  inline void set_has_pet_star();
  inline void clear_has_pet_star();
  inline void set_has_pet_level();
  inline void clear_has_pet_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 pet_tid_;
  ::google::protobuf::uint64 object_state_;
  ::google::protobuf::int32 pet_star_;
  ::google::protobuf::int32 pet_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_pet_object_fight* default_instance_;
};
// -------------------------------------------------------------------

class gp_zone_sn : public ::google::protobuf::Message {
 public:
  gp_zone_sn();
  virtual ~gp_zone_sn();

  gp_zone_sn(const gp_zone_sn& from);

  inline gp_zone_sn& operator=(const gp_zone_sn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_zone_sn& default_instance();

  void Swap(gp_zone_sn* other);

  // implements Message ----------------------------------------------

  gp_zone_sn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_zone_sn& from);
  void MergeFrom(const gp_zone_sn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // optional int64 game_sn = 2;
  inline bool has_game_sn() const;
  inline void clear_game_sn();
  static const int kGameSnFieldNumber = 2;
  inline ::google::protobuf::int64 game_sn() const;
  inline void set_game_sn(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.gp_zone_sn)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_game_sn();
  inline void clear_has_game_sn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 game_sn_;
  ::google::protobuf::int32 zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_zone_sn* default_instance_;
};
// -------------------------------------------------------------------

class gp_zonelist : public ::google::protobuf::Message {
 public:
  gp_zonelist();
  virtual ~gp_zonelist();

  gp_zonelist(const gp_zonelist& from);

  inline gp_zonelist& operator=(const gp_zonelist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gp_zonelist& default_instance();

  void Swap(gp_zonelist* other);

  // implements Message ----------------------------------------------

  gp_zonelist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gp_zonelist& from);
  void MergeFrom(const gp_zonelist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_ZONELIST];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // repeated .PB.gp_zone_sn zones = 2;
  inline int zones_size() const;
  inline void clear_zones();
  static const int kZonesFieldNumber = 2;
  inline const ::PB::gp_zone_sn& zones(int index) const;
  inline ::PB::gp_zone_sn* mutable_zones(int index);
  inline ::PB::gp_zone_sn* add_zones();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_zone_sn >&
      zones() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::gp_zone_sn >*
      mutable_zones();

  // @@protoc_insertion_point(class_scope:PB.gp_zonelist)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::gp_zone_sn > zones_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gp_zonelist* default_instance_;
};
// ===================================================================


// ===================================================================

// a3d_pos

// required float x = 1;
inline bool a3d_pos::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void a3d_pos::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void a3d_pos::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void a3d_pos::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float a3d_pos::x() const {
  return x_;
}
inline void a3d_pos::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float z = 2;
inline bool a3d_pos::has_z() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void a3d_pos::set_has_z() {
  _has_bits_[0] |= 0x00000002u;
}
inline void a3d_pos::clear_has_z() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void a3d_pos::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float a3d_pos::z() const {
  return z_;
}
inline void a3d_pos::set_z(float value) {
  set_has_z();
  z_ = value;
}

// optional float y = 3;
inline bool a3d_pos::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void a3d_pos::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void a3d_pos::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void a3d_pos::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float a3d_pos::y() const {
  return y_;
}
inline void a3d_pos::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// player_id_name

// optional int64 id = 1;
inline bool player_id_name::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_id_name::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_id_name::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_id_name::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 player_id_name::id() const {
  return id_;
}
inline void player_id_name::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool player_id_name::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_id_name::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_id_name::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_id_name::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& player_id_name::name() const {
  return *name_;
}
inline void player_id_name::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void player_id_name::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void player_id_name::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* player_id_name::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* player_id_name::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void player_id_name::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// general_list_item_data

// optional int32 tid = 1;
inline bool general_list_item_data::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void general_list_item_data::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void general_list_item_data::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void general_list_item_data::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 general_list_item_data::tid() const {
  return tid_;
}
inline void general_list_item_data::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 star = 2;
inline bool general_list_item_data::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void general_list_item_data::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void general_list_item_data::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void general_list_item_data::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 general_list_item_data::star() const {
  return star_;
}
inline void general_list_item_data::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional bool locked = 3;
inline bool general_list_item_data::has_locked() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void general_list_item_data::set_has_locked() {
  _has_bits_[0] |= 0x00000004u;
}
inline void general_list_item_data::clear_has_locked() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void general_list_item_data::clear_locked() {
  locked_ = false;
  clear_has_locked();
}
inline bool general_list_item_data::locked() const {
  return locked_;
}
inline void general_list_item_data::set_locked(bool value) {
  set_has_locked();
  locked_ = value;
}

// -------------------------------------------------------------------

// general_list

// repeated .PB.general_list.item_data item_list = 1;
inline int general_list::item_list_size() const {
  return item_list_.size();
}
inline void general_list::clear_item_list() {
  item_list_.Clear();
}
inline const ::PB::general_list_item_data& general_list::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::PB::general_list_item_data* general_list::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::PB::general_list_item_data* general_list::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::general_list_item_data >&
general_list::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::general_list_item_data >*
general_list::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// simple_list

// required int64 key = 1;
inline bool simple_list::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void simple_list::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void simple_list::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void simple_list::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::int64 simple_list::key() const {
  return key_;
}
inline void simple_list::set_key(::google::protobuf::int64 value) {
  set_has_key();
  key_ = value;
}

// optional int64 value = 2;
inline bool simple_list::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void simple_list::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void simple_list::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void simple_list::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 simple_list::value() const {
  return value_;
}
inline void simple_list::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// optional bytes name = 3;
inline bool simple_list::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void simple_list::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void simple_list::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void simple_list::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& simple_list::name() const {
  return *name_;
}
inline void simple_list::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void simple_list::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void simple_list::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* simple_list::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* simple_list::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void simple_list::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// test_data

// optional .PB.GPS_TYPE type = 1 [default = GUT_TEST_DATA];
inline bool test_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void test_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void test_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void test_data::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PB::GPS_TYPE test_data::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void test_data::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated int64 params = 2;
inline int test_data::params_size() const {
  return params_.size();
}
inline void test_data::clear_params() {
  params_.Clear();
}
inline ::google::protobuf::int64 test_data::params(int index) const {
  return params_.Get(index);
}
inline void test_data::set_params(int index, ::google::protobuf::int64 value) {
  params_.Set(index, value);
}
inline void test_data::add_params(::google::protobuf::int64 value) {
  params_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
test_data::params() const {
  return params_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
test_data::mutable_params() {
  return &params_;
}

// optional int32 param2 = 3;
inline bool test_data::has_param2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void test_data::set_has_param2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void test_data::clear_has_param2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void test_data::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline ::google::protobuf::int32 test_data::param2() const {
  return param2_;
}
inline void test_data::set_param2(::google::protobuf::int32 value) {
  set_has_param2();
  param2_ = value;
}

// optional bytes info = 4;
inline bool test_data::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void test_data::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void test_data::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void test_data::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& test_data::info() const {
  return *info_;
}
inline void test_data::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void test_data::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void test_data::set_info(const void* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* test_data::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* test_data::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void test_data::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// other_player_profile_from_gs

// optional uint32 achievement_grade = 1;
inline bool other_player_profile_from_gs::has_achievement_grade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void other_player_profile_from_gs::set_has_achievement_grade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void other_player_profile_from_gs::clear_has_achievement_grade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void other_player_profile_from_gs::clear_achievement_grade() {
  achievement_grade_ = 0u;
  clear_has_achievement_grade();
}
inline ::google::protobuf::uint32 other_player_profile_from_gs::achievement_grade() const {
  return achievement_grade_;
}
inline void other_player_profile_from_gs::set_achievement_grade(::google::protobuf::uint32 value) {
  set_has_achievement_grade();
  achievement_grade_ = value;
}

// optional uint32 achievement_count = 2;
inline bool other_player_profile_from_gs::has_achievement_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void other_player_profile_from_gs::set_has_achievement_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void other_player_profile_from_gs::clear_has_achievement_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void other_player_profile_from_gs::clear_achievement_count() {
  achievement_count_ = 0u;
  clear_has_achievement_count();
}
inline ::google::protobuf::uint32 other_player_profile_from_gs::achievement_count() const {
  return achievement_count_;
}
inline void other_player_profile_from_gs::set_achievement_count(::google::protobuf::uint32 value) {
  set_has_achievement_count();
  achievement_count_ = value;
}

// -------------------------------------------------------------------

// corp_chariot_chariot_info

// optional int64 exp = 1;
inline bool corp_chariot_chariot_info::has_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corp_chariot_chariot_info::set_has_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corp_chariot_chariot_info::clear_has_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corp_chariot_chariot_info::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 corp_chariot_chariot_info::exp() const {
  return exp_;
}
inline void corp_chariot_chariot_info::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional .PB.player_id_name driver = 2;
inline bool corp_chariot_chariot_info::has_driver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corp_chariot_chariot_info::set_has_driver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corp_chariot_chariot_info::clear_has_driver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corp_chariot_chariot_info::clear_driver() {
  if (driver_ != NULL) driver_->::PB::player_id_name::Clear();
  clear_has_driver();
}
inline const ::PB::player_id_name& corp_chariot_chariot_info::driver() const {
  return driver_ != NULL ? *driver_ : *default_instance_->driver_;
}
inline ::PB::player_id_name* corp_chariot_chariot_info::mutable_driver() {
  set_has_driver();
  if (driver_ == NULL) driver_ = new ::PB::player_id_name;
  return driver_;
}
inline ::PB::player_id_name* corp_chariot_chariot_info::release_driver() {
  clear_has_driver();
  ::PB::player_id_name* temp = driver_;
  driver_ = NULL;
  return temp;
}
inline void corp_chariot_chariot_info::set_allocated_driver(::PB::player_id_name* driver) {
  delete driver_;
  driver_ = driver;
  if (driver) {
    set_has_driver();
  } else {
    clear_has_driver();
  }
}

// optional int32 rent_timestamp = 3;
inline bool corp_chariot_chariot_info::has_rent_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void corp_chariot_chariot_info::set_has_rent_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void corp_chariot_chariot_info::clear_has_rent_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void corp_chariot_chariot_info::clear_rent_timestamp() {
  rent_timestamp_ = 0;
  clear_has_rent_timestamp();
}
inline ::google::protobuf::int32 corp_chariot_chariot_info::rent_timestamp() const {
  return rent_timestamp_;
}
inline void corp_chariot_chariot_info::set_rent_timestamp(::google::protobuf::int32 value) {
  set_has_rent_timestamp();
  rent_timestamp_ = value;
}

// optional int32 level = 4;
inline bool corp_chariot_chariot_info::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void corp_chariot_chariot_info::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void corp_chariot_chariot_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void corp_chariot_chariot_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 corp_chariot_chariot_info::level() const {
  return level_;
}
inline void corp_chariot_chariot_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 tid = 5;
inline bool corp_chariot_chariot_info::has_tid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void corp_chariot_chariot_info::set_has_tid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void corp_chariot_chariot_info::clear_has_tid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void corp_chariot_chariot_info::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 corp_chariot_chariot_info::tid() const {
  return tid_;
}
inline void corp_chariot_chariot_info::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional bool is_upgrade = 7;
inline bool corp_chariot_chariot_info::has_is_upgrade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void corp_chariot_chariot_info::set_has_is_upgrade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void corp_chariot_chariot_info::clear_has_is_upgrade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void corp_chariot_chariot_info::clear_is_upgrade() {
  is_upgrade_ = false;
  clear_has_is_upgrade();
}
inline bool corp_chariot_chariot_info::is_upgrade() const {
  return is_upgrade_;
}
inline void corp_chariot_chariot_info::set_is_upgrade(bool value) {
  set_has_is_upgrade();
  is_upgrade_ = value;
}

// -------------------------------------------------------------------

// corp_chariot

// optional int32 level = 1;
inline bool corp_chariot::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corp_chariot::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corp_chariot::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corp_chariot::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 corp_chariot::level() const {
  return level_;
}
inline void corp_chariot::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated .PB.corp_chariot.chariot_info chariots = 2;
inline int corp_chariot::chariots_size() const {
  return chariots_.size();
}
inline void corp_chariot::clear_chariots() {
  chariots_.Clear();
}
inline const ::PB::corp_chariot_chariot_info& corp_chariot::chariots(int index) const {
  return chariots_.Get(index);
}
inline ::PB::corp_chariot_chariot_info* corp_chariot::mutable_chariots(int index) {
  return chariots_.Mutable(index);
}
inline ::PB::corp_chariot_chariot_info* corp_chariot::add_chariots() {
  return chariots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_chariot_chariot_info >&
corp_chariot::chariots() const {
  return chariots_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::corp_chariot_chariot_info >*
corp_chariot::mutable_chariots() {
  return &chariots_;
}

// -------------------------------------------------------------------

// corp_repu

// required int64 key = 1;
inline bool corp_repu::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corp_repu::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corp_repu::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corp_repu::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::int64 corp_repu::key() const {
  return key_;
}
inline void corp_repu::set_key(::google::protobuf::int64 value) {
  set_has_key();
  key_ = value;
}

// optional int64 value = 2;
inline bool corp_repu::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corp_repu::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corp_repu::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corp_repu::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 corp_repu::value() const {
  return value_;
}
inline void corp_repu::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// optional int64 time = 3;
inline bool corp_repu::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void corp_repu::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void corp_repu::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void corp_repu::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 corp_repu::time() const {
  return time_;
}
inline void corp_repu::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// ipt_mirror_info

// required uint32 mirrorid = 1;
inline bool ipt_mirror_info::has_mirrorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ipt_mirror_info::set_has_mirrorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ipt_mirror_info::clear_has_mirrorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ipt_mirror_info::clear_mirrorid() {
  mirrorid_ = 0u;
  clear_has_mirrorid();
}
inline ::google::protobuf::uint32 ipt_mirror_info::mirrorid() const {
  return mirrorid_;
}
inline void ipt_mirror_info::set_mirrorid(::google::protobuf::uint32 value) {
  set_has_mirrorid();
  mirrorid_ = value;
}

// required .PB.MIRROR_STATE state = 2;
inline bool ipt_mirror_info::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ipt_mirror_info::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ipt_mirror_info::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ipt_mirror_info::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::PB::MIRROR_STATE ipt_mirror_info::state() const {
  return static_cast< ::PB::MIRROR_STATE >(state_);
}
inline void ipt_mirror_info::set_state(::PB::MIRROR_STATE value) {
  assert(::PB::MIRROR_STATE_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional uint32 create_time = 3;
inline bool ipt_mirror_info::has_create_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ipt_mirror_info::set_has_create_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ipt_mirror_info::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ipt_mirror_info::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 ipt_mirror_info::create_time() const {
  return create_time_;
}
inline void ipt_mirror_info::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// -------------------------------------------------------------------

// zhaojiling_info

// required uint64 src = 1;
inline bool zhaojiling_info::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void zhaojiling_info::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void zhaojiling_info::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void zhaojiling_info::clear_src() {
  src_ = GOOGLE_ULONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::uint64 zhaojiling_info::src() const {
  return src_;
}
inline void zhaojiling_info::set_src(::google::protobuf::uint64 value) {
  set_has_src();
  src_ = value;
}

// optional bytes src_name = 2;
inline bool zhaojiling_info::has_src_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void zhaojiling_info::set_has_src_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void zhaojiling_info::clear_has_src_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void zhaojiling_info::clear_src_name() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    src_name_->clear();
  }
  clear_has_src_name();
}
inline const ::std::string& zhaojiling_info::src_name() const {
  return *src_name_;
}
inline void zhaojiling_info::set_src_name(const ::std::string& value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void zhaojiling_info::set_src_name(const char* value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void zhaojiling_info::set_src_name(const void* value, size_t size) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* zhaojiling_info::mutable_src_name() {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  return src_name_;
}
inline ::std::string* zhaojiling_info::release_src_name() {
  clear_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_name_;
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void zhaojiling_info::set_allocated_src_name(::std::string* src_name) {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (src_name) {
    set_has_src_name();
    src_name_ = src_name;
  } else {
    clear_has_src_name();
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes reason = 3;
inline bool zhaojiling_info::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void zhaojiling_info::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void zhaojiling_info::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void zhaojiling_info::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& zhaojiling_info::reason() const {
  return *reason_;
}
inline void zhaojiling_info::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void zhaojiling_info::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void zhaojiling_info::set_reason(const void* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* zhaojiling_info::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* zhaojiling_info::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void zhaojiling_info::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 delay_time = 4;
inline bool zhaojiling_info::has_delay_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void zhaojiling_info::set_has_delay_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void zhaojiling_info::clear_has_delay_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void zhaojiling_info::clear_delay_time() {
  delay_time_ = 0;
  clear_has_delay_time();
}
inline ::google::protobuf::int32 zhaojiling_info::delay_time() const {
  return delay_time_;
}
inline void zhaojiling_info::set_delay_time(::google::protobuf::int32 value) {
  set_has_delay_time();
  delay_time_ = value;
}

// required int32 scene_tag = 5;
inline bool zhaojiling_info::has_scene_tag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void zhaojiling_info::set_has_scene_tag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void zhaojiling_info::clear_has_scene_tag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void zhaojiling_info::clear_scene_tag() {
  scene_tag_ = 0;
  clear_has_scene_tag();
}
inline ::google::protobuf::int32 zhaojiling_info::scene_tag() const {
  return scene_tag_;
}
inline void zhaojiling_info::set_scene_tag(::google::protobuf::int32 value) {
  set_has_scene_tag();
  scene_tag_ = value;
}

// required .PB.a3d_pos pos = 6;
inline bool zhaojiling_info::has_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void zhaojiling_info::set_has_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void zhaojiling_info::clear_has_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void zhaojiling_info::clear_pos() {
  if (pos_ != NULL) pos_->::PB::a3d_pos::Clear();
  clear_has_pos();
}
inline const ::PB::a3d_pos& zhaojiling_info::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::PB::a3d_pos* zhaojiling_info::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PB::a3d_pos;
  return pos_;
}
inline ::PB::a3d_pos* zhaojiling_info::release_pos() {
  clear_has_pos();
  ::PB::a3d_pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void zhaojiling_info::set_allocated_pos(::PB::a3d_pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional int32 random_radius = 7;
inline bool zhaojiling_info::has_random_radius() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void zhaojiling_info::set_has_random_radius() {
  _has_bits_[0] |= 0x00000040u;
}
inline void zhaojiling_info::clear_has_random_radius() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void zhaojiling_info::clear_random_radius() {
  random_radius_ = 0;
  clear_has_random_radius();
}
inline ::google::protobuf::int32 zhaojiling_info::random_radius() const {
  return random_radius_;
}
inline void zhaojiling_info::set_random_radius(::google::protobuf::int32 value) {
  set_has_random_radius();
  random_radius_ = value;
}

// optional int32 zhaojiling_id = 8;
inline bool zhaojiling_info::has_zhaojiling_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void zhaojiling_info::set_has_zhaojiling_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void zhaojiling_info::clear_has_zhaojiling_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void zhaojiling_info::clear_zhaojiling_id() {
  zhaojiling_id_ = 0;
  clear_has_zhaojiling_id();
}
inline ::google::protobuf::int32 zhaojiling_info::zhaojiling_id() const {
  return zhaojiling_id_;
}
inline void zhaojiling_info::set_zhaojiling_id(::google::protobuf::int32 value) {
  set_has_zhaojiling_id();
  zhaojiling_id_ = value;
}

// optional int32 src_corp_position = 9;
inline bool zhaojiling_info::has_src_corp_position() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void zhaojiling_info::set_has_src_corp_position() {
  _has_bits_[0] |= 0x00000100u;
}
inline void zhaojiling_info::clear_has_src_corp_position() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void zhaojiling_info::clear_src_corp_position() {
  src_corp_position_ = 0;
  clear_has_src_corp_position();
}
inline ::google::protobuf::int32 zhaojiling_info::src_corp_position() const {
  return src_corp_position_;
}
inline void zhaojiling_info::set_src_corp_position(::google::protobuf::int32 value) {
  set_has_src_corp_position();
  src_corp_position_ = value;
}

// optional int32 src_nation_position = 10;
inline bool zhaojiling_info::has_src_nation_position() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void zhaojiling_info::set_has_src_nation_position() {
  _has_bits_[0] |= 0x00000200u;
}
inline void zhaojiling_info::clear_has_src_nation_position() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void zhaojiling_info::clear_src_nation_position() {
  src_nation_position_ = 0;
  clear_has_src_nation_position();
}
inline ::google::protobuf::int32 zhaojiling_info::src_nation_position() const {
  return src_nation_position_;
}
inline void zhaojiling_info::set_src_nation_position(::google::protobuf::int32 value) {
  set_has_src_nation_position();
  src_nation_position_ = value;
}

// optional int32 mirror_id = 11;
inline bool zhaojiling_info::has_mirror_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void zhaojiling_info::set_has_mirror_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void zhaojiling_info::clear_has_mirror_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void zhaojiling_info::clear_mirror_id() {
  mirror_id_ = 0;
  clear_has_mirror_id();
}
inline ::google::protobuf::int32 zhaojiling_info::mirror_id() const {
  return mirror_id_;
}
inline void zhaojiling_info::set_mirror_id(::google::protobuf::int32 value) {
  set_has_mirror_id();
  mirror_id_ = value;
}

// optional .PB.zhaojiling_info.ZHAOJI_TYPE type = 12;
inline bool zhaojiling_info::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void zhaojiling_info::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void zhaojiling_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void zhaojiling_info::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PB::zhaojiling_info_ZHAOJI_TYPE zhaojiling_info::type() const {
  return static_cast< ::PB::zhaojiling_info_ZHAOJI_TYPE >(type_);
}
inline void zhaojiling_info::set_type(::PB::zhaojiling_info_ZHAOJI_TYPE value) {
  assert(::PB::zhaojiling_info_ZHAOJI_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 param1 = 13;
inline bool zhaojiling_info::has_param1() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void zhaojiling_info::set_has_param1() {
  _has_bits_[0] |= 0x00001000u;
}
inline void zhaojiling_info::clear_has_param1() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void zhaojiling_info::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 zhaojiling_info::param1() const {
  return param1_;
}
inline void zhaojiling_info::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// optional int32 inst_tid = 14;
inline bool zhaojiling_info::has_inst_tid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void zhaojiling_info::set_has_inst_tid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void zhaojiling_info::clear_has_inst_tid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void zhaojiling_info::clear_inst_tid() {
  inst_tid_ = 0;
  clear_has_inst_tid();
}
inline ::google::protobuf::int32 zhaojiling_info::inst_tid() const {
  return inst_tid_;
}
inline void zhaojiling_info::set_inst_tid(::google::protobuf::int32 value) {
  set_has_inst_tid();
  inst_tid_ = value;
}

// -------------------------------------------------------------------

// corps_member

// optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_MEMBER];
inline bool corps_member::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corps_member::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corps_member::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corps_member::clear_type() {
  type_ = 3;
  clear_has_type();
}
inline ::PB::GPS_TYPE corps_member::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void corps_member::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool corps_member::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corps_member::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corps_member::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corps_member::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 corps_member::roleid() const {
  return roleid_;
}
inline void corps_member::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 pos = 3 [default = 0];
inline bool corps_member::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void corps_member::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void corps_member::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void corps_member::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 corps_member::pos() const {
  return pos_;
}
inline void corps_member::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional bytes name = 4;
inline bool corps_member::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void corps_member::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void corps_member::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void corps_member::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& corps_member::name() const {
  return *name_;
}
inline void corps_member::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void corps_member::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void corps_member::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_member::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* corps_member::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_member::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 join_time = 5;
inline bool corps_member::has_join_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void corps_member::set_has_join_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void corps_member::clear_has_join_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void corps_member::clear_join_time() {
  join_time_ = 0;
  clear_has_join_time();
}
inline ::google::protobuf::int32 corps_member::join_time() const {
  return join_time_;
}
inline void corps_member::set_join_time(::google::protobuf::int32 value) {
  set_has_join_time();
  join_time_ = value;
}

// required int32 level = 6;
inline bool corps_member::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void corps_member::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void corps_member::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void corps_member::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 corps_member::level() const {
  return level_;
}
inline void corps_member::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 idphoto = 7;
inline bool corps_member::has_idphoto() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void corps_member::set_has_idphoto() {
  _has_bits_[0] |= 0x00000040u;
}
inline void corps_member::clear_has_idphoto() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void corps_member::clear_idphoto() {
  idphoto_ = 0;
  clear_has_idphoto();
}
inline ::google::protobuf::int32 corps_member::idphoto() const {
  return idphoto_;
}
inline void corps_member::set_idphoto(::google::protobuf::int32 value) {
  set_has_idphoto();
  idphoto_ = value;
}

// optional int64 contri = 10;
inline bool corps_member::has_contri() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void corps_member::set_has_contri() {
  _has_bits_[0] |= 0x00000080u;
}
inline void corps_member::clear_has_contri() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void corps_member::clear_contri() {
  contri_ = GOOGLE_LONGLONG(0);
  clear_has_contri();
}
inline ::google::protobuf::int64 corps_member::contri() const {
  return contri_;
}
inline void corps_member::set_contri(::google::protobuf::int64 value) {
  set_has_contri();
  contri_ = value;
}

// optional int64 contri_cumulate = 11;
inline bool corps_member::has_contri_cumulate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void corps_member::set_has_contri_cumulate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void corps_member::clear_has_contri_cumulate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void corps_member::clear_contri_cumulate() {
  contri_cumulate_ = GOOGLE_LONGLONG(0);
  clear_has_contri_cumulate();
}
inline ::google::protobuf::int64 corps_member::contri_cumulate() const {
  return contri_cumulate_;
}
inline void corps_member::set_contri_cumulate(::google::protobuf::int64 value) {
  set_has_contri_cumulate();
  contri_cumulate_ = value;
}

// optional int32 leave_time = 12;
inline bool corps_member::has_leave_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void corps_member::set_has_leave_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void corps_member::clear_has_leave_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void corps_member::clear_leave_time() {
  leave_time_ = 0;
  clear_has_leave_time();
}
inline ::google::protobuf::int32 corps_member::leave_time() const {
  return leave_time_;
}
inline void corps_member::set_leave_time(::google::protobuf::int32 value) {
  set_has_leave_time();
  leave_time_ = value;
}

// required int32 prof = 13;
inline bool corps_member::has_prof() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void corps_member::set_has_prof() {
  _has_bits_[0] |= 0x00000400u;
}
inline void corps_member::clear_has_prof() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void corps_member::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 corps_member::prof() const {
  return prof_;
}
inline void corps_member::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 online_time_today = 14;
inline bool corps_member::has_online_time_today() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void corps_member::set_has_online_time_today() {
  _has_bits_[0] |= 0x00000800u;
}
inline void corps_member::clear_has_online_time_today() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void corps_member::clear_online_time_today() {
  online_time_today_ = 0;
  clear_has_online_time_today();
}
inline ::google::protobuf::int32 corps_member::online_time_today() const {
  return online_time_today_;
}
inline void corps_member::set_online_time_today(::google::protobuf::int32 value) {
  set_has_online_time_today();
  online_time_today_ = value;
}

// repeated int32 boss_feed_reward = 15;
inline int corps_member::boss_feed_reward_size() const {
  return boss_feed_reward_.size();
}
inline void corps_member::clear_boss_feed_reward() {
  boss_feed_reward_.Clear();
}
inline ::google::protobuf::int32 corps_member::boss_feed_reward(int index) const {
  return boss_feed_reward_.Get(index);
}
inline void corps_member::set_boss_feed_reward(int index, ::google::protobuf::int32 value) {
  boss_feed_reward_.Set(index, value);
}
inline void corps_member::add_boss_feed_reward(::google::protobuf::int32 value) {
  boss_feed_reward_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
corps_member::boss_feed_reward() const {
  return boss_feed_reward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
corps_member::mutable_boss_feed_reward() {
  return &boss_feed_reward_;
}

// repeated int32 elixir = 16;
inline int corps_member::elixir_size() const {
  return elixir_.size();
}
inline void corps_member::clear_elixir() {
  elixir_.Clear();
}
inline ::google::protobuf::int32 corps_member::elixir(int index) const {
  return elixir_.Get(index);
}
inline void corps_member::set_elixir(int index, ::google::protobuf::int32 value) {
  elixir_.Set(index, value);
}
inline void corps_member::add_elixir(::google::protobuf::int32 value) {
  elixir_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
corps_member::elixir() const {
  return elixir_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
corps_member::mutable_elixir() {
  return &elixir_;
}

// optional int64 fightcapacity = 17;
inline bool corps_member::has_fightcapacity() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void corps_member::set_has_fightcapacity() {
  _has_bits_[0] |= 0x00004000u;
}
inline void corps_member::clear_has_fightcapacity() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void corps_member::clear_fightcapacity() {
  fightcapacity_ = GOOGLE_LONGLONG(0);
  clear_has_fightcapacity();
}
inline ::google::protobuf::int64 corps_member::fightcapacity() const {
  return fightcapacity_;
}
inline void corps_member::set_fightcapacity(::google::protobuf::int64 value) {
  set_has_fightcapacity();
  fightcapacity_ = value;
}

// -------------------------------------------------------------------

// corps_apply_t

// required int64 roleid = 1;
inline bool corps_apply_t::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corps_apply_t::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corps_apply_t::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corps_apply_t::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 corps_apply_t::roleid() const {
  return roleid_;
}
inline void corps_apply_t::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required bytes name = 2;
inline bool corps_apply_t::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corps_apply_t::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corps_apply_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corps_apply_t::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& corps_apply_t::name() const {
  return *name_;
}
inline void corps_apply_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void corps_apply_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void corps_apply_t::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_apply_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* corps_apply_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_apply_t::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 apply_time = 3;
inline bool corps_apply_t::has_apply_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void corps_apply_t::set_has_apply_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void corps_apply_t::clear_has_apply_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void corps_apply_t::clear_apply_time() {
  apply_time_ = GOOGLE_LONGLONG(0);
  clear_has_apply_time();
}
inline ::google::protobuf::int64 corps_apply_t::apply_time() const {
  return apply_time_;
}
inline void corps_apply_t::set_apply_time(::google::protobuf::int64 value) {
  set_has_apply_time();
  apply_time_ = value;
}

// optional int32 level = 4;
inline bool corps_apply_t::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void corps_apply_t::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void corps_apply_t::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void corps_apply_t::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 corps_apply_t::level() const {
  return level_;
}
inline void corps_apply_t::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 prof = 5;
inline bool corps_apply_t::has_prof() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void corps_apply_t::set_has_prof() {
  _has_bits_[0] |= 0x00000010u;
}
inline void corps_apply_t::clear_has_prof() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void corps_apply_t::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 corps_apply_t::prof() const {
  return prof_;
}
inline void corps_apply_t::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// -------------------------------------------------------------------

// corp_attribute_corp_skill_room

// repeated uint32 addon_level = 1;
inline int corp_attribute_corp_skill_room::addon_level_size() const {
  return addon_level_.size();
}
inline void corp_attribute_corp_skill_room::clear_addon_level() {
  addon_level_.Clear();
}
inline ::google::protobuf::uint32 corp_attribute_corp_skill_room::addon_level(int index) const {
  return addon_level_.Get(index);
}
inline void corp_attribute_corp_skill_room::set_addon_level(int index, ::google::protobuf::uint32 value) {
  addon_level_.Set(index, value);
}
inline void corp_attribute_corp_skill_room::add_addon_level(::google::protobuf::uint32 value) {
  addon_level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
corp_attribute_corp_skill_room::addon_level() const {
  return addon_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
corp_attribute_corp_skill_room::mutable_addon_level() {
  return &addon_level_;
}

// -------------------------------------------------------------------

// corp_attribute

// repeated .PB.corp_attribute.corp_skill_room skill_room = 1;
inline int corp_attribute::skill_room_size() const {
  return skill_room_.size();
}
inline void corp_attribute::clear_skill_room() {
  skill_room_.Clear();
}
inline const ::PB::corp_attribute_corp_skill_room& corp_attribute::skill_room(int index) const {
  return skill_room_.Get(index);
}
inline ::PB::corp_attribute_corp_skill_room* corp_attribute::mutable_skill_room(int index) {
  return skill_room_.Mutable(index);
}
inline ::PB::corp_attribute_corp_skill_room* corp_attribute::add_skill_room() {
  return skill_room_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_attribute_corp_skill_room >&
corp_attribute::skill_room() const {
  return skill_room_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::corp_attribute_corp_skill_room >*
corp_attribute::mutable_skill_room() {
  return &skill_room_;
}

// optional uint32 shop_level = 2 [default = 0];
inline bool corp_attribute::has_shop_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corp_attribute::set_has_shop_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corp_attribute::clear_has_shop_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corp_attribute::clear_shop_level() {
  shop_level_ = 0u;
  clear_has_shop_level();
}
inline ::google::protobuf::uint32 corp_attribute::shop_level() const {
  return shop_level_;
}
inline void corp_attribute::set_shop_level(::google::protobuf::uint32 value) {
  set_has_shop_level();
  shop_level_ = value;
}

// repeated .PB.corp_repu corp_repu = 3;
inline int corp_attribute::corp_repu_size() const {
  return corp_repu_.size();
}
inline void corp_attribute::clear_corp_repu() {
  corp_repu_.Clear();
}
inline const ::PB::corp_repu& corp_attribute::corp_repu(int index) const {
  return corp_repu_.Get(index);
}
inline ::PB::corp_repu* corp_attribute::mutable_corp_repu(int index) {
  return corp_repu_.Mutable(index);
}
inline ::PB::corp_repu* corp_attribute::add_corp_repu() {
  return corp_repu_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_repu >&
corp_attribute::corp_repu() const {
  return corp_repu_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::corp_repu >*
corp_attribute::mutable_corp_repu() {
  return &corp_repu_;
}

// repeated .PB.simple_list boss_feed_toplist = 4;
inline int corp_attribute::boss_feed_toplist_size() const {
  return boss_feed_toplist_.size();
}
inline void corp_attribute::clear_boss_feed_toplist() {
  boss_feed_toplist_.Clear();
}
inline const ::PB::simple_list& corp_attribute::boss_feed_toplist(int index) const {
  return boss_feed_toplist_.Get(index);
}
inline ::PB::simple_list* corp_attribute::mutable_boss_feed_toplist(int index) {
  return boss_feed_toplist_.Mutable(index);
}
inline ::PB::simple_list* corp_attribute::add_boss_feed_toplist() {
  return boss_feed_toplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::simple_list >&
corp_attribute::boss_feed_toplist() const {
  return boss_feed_toplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::simple_list >*
corp_attribute::mutable_boss_feed_toplist() {
  return &boss_feed_toplist_;
}

// optional .PB.corp_chariot chariot = 5;
inline bool corp_attribute::has_chariot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void corp_attribute::set_has_chariot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void corp_attribute::clear_has_chariot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void corp_attribute::clear_chariot() {
  if (chariot_ != NULL) chariot_->::PB::corp_chariot::Clear();
  clear_has_chariot();
}
inline const ::PB::corp_chariot& corp_attribute::chariot() const {
  return chariot_ != NULL ? *chariot_ : *default_instance_->chariot_;
}
inline ::PB::corp_chariot* corp_attribute::mutable_chariot() {
  set_has_chariot();
  if (chariot_ == NULL) chariot_ = new ::PB::corp_chariot;
  return chariot_;
}
inline ::PB::corp_chariot* corp_attribute::release_chariot() {
  clear_has_chariot();
  ::PB::corp_chariot* temp = chariot_;
  chariot_ = NULL;
  return temp;
}
inline void corp_attribute::set_allocated_chariot(::PB::corp_chariot* chariot) {
  delete chariot_;
  chariot_ = chariot;
  if (chariot) {
    set_has_chariot();
  } else {
    clear_has_chariot();
  }
}

// -------------------------------------------------------------------

// corps_struct

// optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_STRUCT];
inline bool corps_struct::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corps_struct::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corps_struct::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corps_struct::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::PB::GPS_TYPE corps_struct::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void corps_struct::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 id = 2;
inline bool corps_struct::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corps_struct::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corps_struct::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corps_struct::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 corps_struct::id() const {
  return id_;
}
inline void corps_struct::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 4;
inline bool corps_struct::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void corps_struct::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void corps_struct::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void corps_struct::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& corps_struct::name() const {
  return *name_;
}
inline void corps_struct::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void corps_struct::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void corps_struct::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_struct::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* corps_struct::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_struct::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 create_time = 5;
inline bool corps_struct::has_create_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void corps_struct::set_has_create_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void corps_struct::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void corps_struct::clear_create_time() {
  create_time_ = 0;
  clear_has_create_time();
}
inline ::google::protobuf::int32 corps_struct::create_time() const {
  return create_time_;
}
inline void corps_struct::set_create_time(::google::protobuf::int32 value) {
  set_has_create_time();
  create_time_ = value;
}

// required int32 level = 6;
inline bool corps_struct::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void corps_struct::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void corps_struct::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void corps_struct::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 corps_struct::level() const {
  return level_;
}
inline void corps_struct::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required uint64 status = 7;
inline bool corps_struct::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void corps_struct::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void corps_struct::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void corps_struct::clear_status() {
  status_ = GOOGLE_ULONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::uint64 corps_struct::status() const {
  return status_;
}
inline void corps_struct::set_status(::google::protobuf::uint64 value) {
  set_has_status();
  status_ = value;
}

// optional bytes announce = 8;
inline bool corps_struct::has_announce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void corps_struct::set_has_announce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void corps_struct::clear_has_announce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void corps_struct::clear_announce() {
  if (announce_ != &::google::protobuf::internal::kEmptyString) {
    announce_->clear();
  }
  clear_has_announce();
}
inline const ::std::string& corps_struct::announce() const {
  return *announce_;
}
inline void corps_struct::set_announce(const ::std::string& value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
}
inline void corps_struct::set_announce(const char* value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
}
inline void corps_struct::set_announce(const void* value, size_t size) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  announce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_struct::mutable_announce() {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  return announce_;
}
inline ::std::string* corps_struct::release_announce() {
  clear_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = announce_;
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_struct::set_allocated_announce(::std::string* announce) {
  if (announce_ != &::google::protobuf::internal::kEmptyString) {
    delete announce_;
  }
  if (announce) {
    set_has_announce();
    announce_ = announce;
  } else {
    clear_has_announce();
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 announce_time = 9 [default = 0];
inline bool corps_struct::has_announce_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void corps_struct::set_has_announce_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void corps_struct::clear_has_announce_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void corps_struct::clear_announce_time() {
  announce_time_ = GOOGLE_LONGLONG(0);
  clear_has_announce_time();
}
inline ::google::protobuf::int64 corps_struct::announce_time() const {
  return announce_time_;
}
inline void corps_struct::set_announce_time(::google::protobuf::int64 value) {
  set_has_announce_time();
  announce_time_ = value;
}

// optional int64 contri = 10 [default = 0];
inline bool corps_struct::has_contri() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void corps_struct::set_has_contri() {
  _has_bits_[0] |= 0x00000100u;
}
inline void corps_struct::clear_has_contri() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void corps_struct::clear_contri() {
  contri_ = GOOGLE_LONGLONG(0);
  clear_has_contri();
}
inline ::google::protobuf::int64 corps_struct::contri() const {
  return contri_;
}
inline void corps_struct::set_contri(::google::protobuf::int64 value) {
  set_has_contri();
  contri_ = value;
}

// optional int64 contri_cumulate = 11 [default = 0];
inline bool corps_struct::has_contri_cumulate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void corps_struct::set_has_contri_cumulate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void corps_struct::clear_has_contri_cumulate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void corps_struct::clear_contri_cumulate() {
  contri_cumulate_ = GOOGLE_LONGLONG(0);
  clear_has_contri_cumulate();
}
inline ::google::protobuf::int64 corps_struct::contri_cumulate() const {
  return contri_cumulate_;
}
inline void corps_struct::set_contri_cumulate(::google::protobuf::int64 value) {
  set_has_contri_cumulate();
  contri_cumulate_ = value;
}

// optional int64 money = 12 [default = 0];
inline bool corps_struct::has_money() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void corps_struct::set_has_money() {
  _has_bits_[0] |= 0x00000400u;
}
inline void corps_struct::clear_has_money() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void corps_struct::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 corps_struct::money() const {
  return money_;
}
inline void corps_struct::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// repeated .PB.corps_apply_t apply = 13;
inline int corps_struct::apply_size() const {
  return apply_.size();
}
inline void corps_struct::clear_apply() {
  apply_.Clear();
}
inline const ::PB::corps_apply_t& corps_struct::apply(int index) const {
  return apply_.Get(index);
}
inline ::PB::corps_apply_t* corps_struct::mutable_apply(int index) {
  return apply_.Mutable(index);
}
inline ::PB::corps_apply_t* corps_struct::add_apply() {
  return apply_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::corps_apply_t >&
corps_struct::apply() const {
  return apply_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::corps_apply_t >*
corps_struct::mutable_apply() {
  return &apply_;
}

// required int32 nation = 14;
inline bool corps_struct::has_nation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void corps_struct::set_has_nation() {
  _has_bits_[0] |= 0x00001000u;
}
inline void corps_struct::clear_has_nation() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void corps_struct::clear_nation() {
  nation_ = 0;
  clear_has_nation();
}
inline ::google::protobuf::int32 corps_struct::nation() const {
  return nation_;
}
inline void corps_struct::set_nation(::google::protobuf::int32 value) {
  set_has_nation();
  nation_ = value;
}

// optional int64 last_resume_time = 15;
inline bool corps_struct::has_last_resume_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void corps_struct::set_has_last_resume_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void corps_struct::clear_has_last_resume_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void corps_struct::clear_last_resume_time() {
  last_resume_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_resume_time();
}
inline ::google::protobuf::int64 corps_struct::last_resume_time() const {
  return last_resume_time_;
}
inline void corps_struct::set_last_resume_time(::google::protobuf::int64 value) {
  set_has_last_resume_time();
  last_resume_time_ = value;
}

// optional .PB.corp_attribute attr = 16;
inline bool corps_struct::has_attr() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void corps_struct::set_has_attr() {
  _has_bits_[0] |= 0x00004000u;
}
inline void corps_struct::clear_has_attr() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void corps_struct::clear_attr() {
  if (attr_ != NULL) attr_->::PB::corp_attribute::Clear();
  clear_has_attr();
}
inline const ::PB::corp_attribute& corps_struct::attr() const {
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::PB::corp_attribute* corps_struct::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::PB::corp_attribute;
  return attr_;
}
inline ::PB::corp_attribute* corps_struct::release_attr() {
  clear_has_attr();
  ::PB::corp_attribute* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void corps_struct::set_allocated_attr(::PB::corp_attribute* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    set_has_attr();
  } else {
    clear_has_attr();
  }
}

// optional float corp_power = 17;
inline bool corps_struct::has_corp_power() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void corps_struct::set_has_corp_power() {
  _has_bits_[0] |= 0x00008000u;
}
inline void corps_struct::clear_has_corp_power() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void corps_struct::clear_corp_power() {
  corp_power_ = 0;
  clear_has_corp_power();
}
inline float corps_struct::corp_power() const {
  return corp_power_;
}
inline void corps_struct::set_corp_power(float value) {
  set_has_corp_power();
  corp_power_ = value;
}

// optional bytes qqgroup_openid = 18;
inline bool corps_struct::has_qqgroup_openid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void corps_struct::set_has_qqgroup_openid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void corps_struct::clear_has_qqgroup_openid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void corps_struct::clear_qqgroup_openid() {
  if (qqgroup_openid_ != &::google::protobuf::internal::kEmptyString) {
    qqgroup_openid_->clear();
  }
  clear_has_qqgroup_openid();
}
inline const ::std::string& corps_struct::qqgroup_openid() const {
  return *qqgroup_openid_;
}
inline void corps_struct::set_qqgroup_openid(const ::std::string& value) {
  set_has_qqgroup_openid();
  if (qqgroup_openid_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_openid_ = new ::std::string;
  }
  qqgroup_openid_->assign(value);
}
inline void corps_struct::set_qqgroup_openid(const char* value) {
  set_has_qqgroup_openid();
  if (qqgroup_openid_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_openid_ = new ::std::string;
  }
  qqgroup_openid_->assign(value);
}
inline void corps_struct::set_qqgroup_openid(const void* value, size_t size) {
  set_has_qqgroup_openid();
  if (qqgroup_openid_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_openid_ = new ::std::string;
  }
  qqgroup_openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_struct::mutable_qqgroup_openid() {
  set_has_qqgroup_openid();
  if (qqgroup_openid_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_openid_ = new ::std::string;
  }
  return qqgroup_openid_;
}
inline ::std::string* corps_struct::release_qqgroup_openid() {
  clear_has_qqgroup_openid();
  if (qqgroup_openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qqgroup_openid_;
    qqgroup_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_struct::set_allocated_qqgroup_openid(::std::string* qqgroup_openid) {
  if (qqgroup_openid_ != &::google::protobuf::internal::kEmptyString) {
    delete qqgroup_openid_;
  }
  if (qqgroup_openid) {
    set_has_qqgroup_openid();
    qqgroup_openid_ = qqgroup_openid;
  } else {
    clear_has_qqgroup_openid();
    qqgroup_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes qqgroup_name = 19;
inline bool corps_struct::has_qqgroup_name() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void corps_struct::set_has_qqgroup_name() {
  _has_bits_[0] |= 0x00020000u;
}
inline void corps_struct::clear_has_qqgroup_name() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void corps_struct::clear_qqgroup_name() {
  if (qqgroup_name_ != &::google::protobuf::internal::kEmptyString) {
    qqgroup_name_->clear();
  }
  clear_has_qqgroup_name();
}
inline const ::std::string& corps_struct::qqgroup_name() const {
  return *qqgroup_name_;
}
inline void corps_struct::set_qqgroup_name(const ::std::string& value) {
  set_has_qqgroup_name();
  if (qqgroup_name_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_name_ = new ::std::string;
  }
  qqgroup_name_->assign(value);
}
inline void corps_struct::set_qqgroup_name(const char* value) {
  set_has_qqgroup_name();
  if (qqgroup_name_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_name_ = new ::std::string;
  }
  qqgroup_name_->assign(value);
}
inline void corps_struct::set_qqgroup_name(const void* value, size_t size) {
  set_has_qqgroup_name();
  if (qqgroup_name_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_name_ = new ::std::string;
  }
  qqgroup_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_struct::mutable_qqgroup_name() {
  set_has_qqgroup_name();
  if (qqgroup_name_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_name_ = new ::std::string;
  }
  return qqgroup_name_;
}
inline ::std::string* corps_struct::release_qqgroup_name() {
  clear_has_qqgroup_name();
  if (qqgroup_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qqgroup_name_;
    qqgroup_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_struct::set_allocated_qqgroup_name(::std::string* qqgroup_name) {
  if (qqgroup_name_ != &::google::protobuf::internal::kEmptyString) {
    delete qqgroup_name_;
  }
  if (qqgroup_name) {
    set_has_qqgroup_name();
    qqgroup_name_ = qqgroup_name;
  } else {
    clear_has_qqgroup_name();
    qqgroup_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes qqgroup_joinkey = 20;
inline bool corps_struct::has_qqgroup_joinkey() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void corps_struct::set_has_qqgroup_joinkey() {
  _has_bits_[0] |= 0x00040000u;
}
inline void corps_struct::clear_has_qqgroup_joinkey() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void corps_struct::clear_qqgroup_joinkey() {
  if (qqgroup_joinkey_ != &::google::protobuf::internal::kEmptyString) {
    qqgroup_joinkey_->clear();
  }
  clear_has_qqgroup_joinkey();
}
inline const ::std::string& corps_struct::qqgroup_joinkey() const {
  return *qqgroup_joinkey_;
}
inline void corps_struct::set_qqgroup_joinkey(const ::std::string& value) {
  set_has_qqgroup_joinkey();
  if (qqgroup_joinkey_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_joinkey_ = new ::std::string;
  }
  qqgroup_joinkey_->assign(value);
}
inline void corps_struct::set_qqgroup_joinkey(const char* value) {
  set_has_qqgroup_joinkey();
  if (qqgroup_joinkey_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_joinkey_ = new ::std::string;
  }
  qqgroup_joinkey_->assign(value);
}
inline void corps_struct::set_qqgroup_joinkey(const void* value, size_t size) {
  set_has_qqgroup_joinkey();
  if (qqgroup_joinkey_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_joinkey_ = new ::std::string;
  }
  qqgroup_joinkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_struct::mutable_qqgroup_joinkey() {
  set_has_qqgroup_joinkey();
  if (qqgroup_joinkey_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_joinkey_ = new ::std::string;
  }
  return qqgroup_joinkey_;
}
inline ::std::string* corps_struct::release_qqgroup_joinkey() {
  clear_has_qqgroup_joinkey();
  if (qqgroup_joinkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qqgroup_joinkey_;
    qqgroup_joinkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_struct::set_allocated_qqgroup_joinkey(::std::string* qqgroup_joinkey) {
  if (qqgroup_joinkey_ != &::google::protobuf::internal::kEmptyString) {
    delete qqgroup_joinkey_;
  }
  if (qqgroup_joinkey) {
    set_has_qqgroup_joinkey();
    qqgroup_joinkey_ = qqgroup_joinkey;
  } else {
    clear_has_qqgroup_joinkey();
    qqgroup_joinkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 login_time = 21;
inline bool corps_struct::has_login_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void corps_struct::set_has_login_time() {
  _has_bits_[0] |= 0x00080000u;
}
inline void corps_struct::clear_has_login_time() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void corps_struct::clear_login_time() {
  login_time_ = 0;
  clear_has_login_time();
}
inline ::google::protobuf::int32 corps_struct::login_time() const {
  return login_time_;
}
inline void corps_struct::set_login_time(::google::protobuf::int32 value) {
  set_has_login_time();
  login_time_ = value;
}

// -------------------------------------------------------------------

// facebook_str

// required int64 id = 1 [default = 0];
inline bool facebook_str::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void facebook_str::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void facebook_str::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void facebook_str::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 facebook_str::id() const {
  return id_;
}
inline void facebook_str::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 pos = 2;
inline bool facebook_str::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void facebook_str::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void facebook_str::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void facebook_str::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 facebook_str::pos() const {
  return pos_;
}
inline void facebook_str::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int64 param = 3;
inline bool facebook_str::has_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void facebook_str::set_has_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void facebook_str::clear_has_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void facebook_str::clear_param() {
  param_ = GOOGLE_LONGLONG(0);
  clear_has_param();
}
inline ::google::protobuf::int64 facebook_str::param() const {
  return param_;
}
inline void facebook_str::set_param(::google::protobuf::int64 value) {
  set_has_param();
  param_ = value;
}

// optional bytes name = 4;
inline bool facebook_str::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void facebook_str::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void facebook_str::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void facebook_str::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& facebook_str::name() const {
  return *name_;
}
inline void facebook_str::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void facebook_str::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void facebook_str::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* facebook_str::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* facebook_str::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void facebook_str::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes name2 = 5;
inline bool facebook_str::has_name2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void facebook_str::set_has_name2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void facebook_str::clear_has_name2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void facebook_str::clear_name2() {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    name2_->clear();
  }
  clear_has_name2();
}
inline const ::std::string& facebook_str::name2() const {
  return *name2_;
}
inline void facebook_str::set_name2(const ::std::string& value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void facebook_str::set_name2(const char* value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void facebook_str::set_name2(const void* value, size_t size) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* facebook_str::mutable_name2() {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  return name2_;
}
inline ::std::string* facebook_str::release_name2() {
  clear_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name2_;
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void facebook_str::set_allocated_name2(::std::string* name2) {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (name2) {
    set_has_name2();
    name2_ = name2;
  } else {
    clear_has_name2();
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 leave_corps_time = 6;
inline bool facebook_str::has_leave_corps_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void facebook_str::set_has_leave_corps_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void facebook_str::clear_has_leave_corps_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void facebook_str::clear_leave_corps_time() {
  leave_corps_time_ = 0;
  clear_has_leave_corps_time();
}
inline ::google::protobuf::int32 facebook_str::leave_corps_time() const {
  return leave_corps_time_;
}
inline void facebook_str::set_leave_corps_time(::google::protobuf::int32 value) {
  set_has_leave_corps_time();
  leave_corps_time_ = value;
}

// optional int32 level = 7;
inline bool facebook_str::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void facebook_str::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void facebook_str::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void facebook_str::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 facebook_str::level() const {
  return level_;
}
inline void facebook_str::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// face_book

// optional .PB.GPS_TYPE type = 1 [default = GUT_FACEBOOK];
inline bool face_book::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void face_book::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void face_book::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void face_book::clear_type() {
  type_ = 4;
  clear_has_type();
}
inline ::PB::GPS_TYPE face_book::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void face_book::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.facebook_str corps = 2;
inline bool face_book::has_corps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void face_book::set_has_corps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void face_book::clear_has_corps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void face_book::clear_corps() {
  if (corps_ != NULL) corps_->::PB::facebook_str::Clear();
  clear_has_corps();
}
inline const ::PB::facebook_str& face_book::corps() const {
  return corps_ != NULL ? *corps_ : *default_instance_->corps_;
}
inline ::PB::facebook_str* face_book::mutable_corps() {
  set_has_corps();
  if (corps_ == NULL) corps_ = new ::PB::facebook_str;
  return corps_;
}
inline ::PB::facebook_str* face_book::release_corps() {
  clear_has_corps();
  ::PB::facebook_str* temp = corps_;
  corps_ = NULL;
  return temp;
}
inline void face_book::set_allocated_corps(::PB::facebook_str* corps) {
  delete corps_;
  corps_ = corps;
  if (corps) {
    set_has_corps();
  } else {
    clear_has_corps();
  }
}

// -------------------------------------------------------------------

// idip_role_info

// optional int64 money = 1;
inline bool idip_role_info::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void idip_role_info::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void idip_role_info::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void idip_role_info::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 idip_role_info::money() const {
  return money_;
}
inline void idip_role_info::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// optional int64 vip_exp = 2;
inline bool idip_role_info::has_vip_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void idip_role_info::set_has_vip_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void idip_role_info::clear_has_vip_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void idip_role_info::clear_vip_exp() {
  vip_exp_ = GOOGLE_LONGLONG(0);
  clear_has_vip_exp();
}
inline ::google::protobuf::int64 idip_role_info::vip_exp() const {
  return vip_exp_;
}
inline void idip_role_info::set_vip_exp(::google::protobuf::int64 value) {
  set_has_vip_exp();
  vip_exp_ = value;
}

// optional int32 vip_level = 3;
inline bool idip_role_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void idip_role_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void idip_role_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void idip_role_info::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 idip_role_info::vip_level() const {
  return vip_level_;
}
inline void idip_role_info::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional int64 role_exp = 4;
inline bool idip_role_info::has_role_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void idip_role_info::set_has_role_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void idip_role_info::clear_has_role_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void idip_role_info::clear_role_exp() {
  role_exp_ = GOOGLE_LONGLONG(0);
  clear_has_role_exp();
}
inline ::google::protobuf::int64 idip_role_info::role_exp() const {
  return role_exp_;
}
inline void idip_role_info::set_role_exp(::google::protobuf::int64 value) {
  set_has_role_exp();
  role_exp_ = value;
}

// optional int64 ride_exp = 5;
inline bool idip_role_info::has_ride_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void idip_role_info::set_has_ride_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void idip_role_info::clear_has_ride_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void idip_role_info::clear_ride_exp() {
  ride_exp_ = GOOGLE_LONGLONG(0);
  clear_has_ride_exp();
}
inline ::google::protobuf::int64 idip_role_info::ride_exp() const {
  return ride_exp_;
}
inline void idip_role_info::set_ride_exp(::google::protobuf::int64 value) {
  set_has_ride_exp();
  ride_exp_ = value;
}

// optional int32 ride_level = 6;
inline bool idip_role_info::has_ride_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void idip_role_info::set_has_ride_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void idip_role_info::clear_has_ride_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void idip_role_info::clear_ride_level() {
  ride_level_ = 0;
  clear_has_ride_level();
}
inline ::google::protobuf::int32 idip_role_info::ride_level() const {
  return ride_level_;
}
inline void idip_role_info::set_ride_level(::google::protobuf::int32 value) {
  set_has_ride_level();
  ride_level_ = value;
}

// optional int32 pk_value = 7;
inline bool idip_role_info::has_pk_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void idip_role_info::set_has_pk_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void idip_role_info::clear_has_pk_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void idip_role_info::clear_pk_value() {
  pk_value_ = 0;
  clear_has_pk_value();
}
inline ::google::protobuf::int32 idip_role_info::pk_value() const {
  return pk_value_;
}
inline void idip_role_info::set_pk_value(::google::protobuf::int32 value) {
  set_has_pk_value();
  pk_value_ = value;
}

// optional int32 online_time = 8;
inline bool idip_role_info::has_online_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void idip_role_info::set_has_online_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void idip_role_info::clear_has_online_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void idip_role_info::clear_online_time() {
  online_time_ = 0;
  clear_has_online_time();
}
inline ::google::protobuf::int32 idip_role_info::online_time() const {
  return online_time_;
}
inline void idip_role_info::set_online_time(::google::protobuf::int32 value) {
  set_has_online_time();
  online_time_ = value;
}

// optional int32 friends_count = 9;
inline bool idip_role_info::has_friends_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void idip_role_info::set_has_friends_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void idip_role_info::clear_has_friends_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void idip_role_info::clear_friends_count() {
  friends_count_ = 0;
  clear_has_friends_count();
}
inline ::google::protobuf::int32 idip_role_info::friends_count() const {
  return friends_count_;
}
inline void idip_role_info::set_friends_count(::google::protobuf::int32 value) {
  set_has_friends_count();
  friends_count_ = value;
}

// -------------------------------------------------------------------

// role_list_custom

// optional bool fashion = 1;
inline bool role_list_custom::has_fashion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_list_custom::set_has_fashion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_list_custom::clear_has_fashion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_list_custom::clear_fashion() {
  fashion_ = false;
  clear_has_fashion();
}
inline bool role_list_custom::fashion() const {
  return fashion_;
}
inline void role_list_custom::set_fashion(bool value) {
  set_has_fashion();
  fashion_ = value;
}

// optional uint32 magic_weapon_tid = 2;
inline bool role_list_custom::has_magic_weapon_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_list_custom::set_has_magic_weapon_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_list_custom::clear_has_magic_weapon_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_list_custom::clear_magic_weapon_tid() {
  magic_weapon_tid_ = 0u;
  clear_has_magic_weapon_tid();
}
inline ::google::protobuf::uint32 role_list_custom::magic_weapon_tid() const {
  return magic_weapon_tid_;
}
inline void role_list_custom::set_magic_weapon_tid(::google::protobuf::uint32 value) {
  set_has_magic_weapon_tid();
  magic_weapon_tid_ = value;
}

// -------------------------------------------------------------------

// gs_role_mutable_data

// optional .PB.GPS_TYPE type = 1 [default = GUT_ROLE_PBINFO];
inline bool gs_role_mutable_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_role_mutable_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_role_mutable_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_role_mutable_data::clear_type() {
  type_ = 9;
  clear_has_type();
}
inline ::PB::GPS_TYPE gs_role_mutable_data::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void gs_role_mutable_data::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 vip_level = 2;
inline bool gs_role_mutable_data::has_vip_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_role_mutable_data::set_has_vip_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_role_mutable_data::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_role_mutable_data::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 gs_role_mutable_data::vip_level() const {
  return vip_level_;
}
inline void gs_role_mutable_data::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional uint32 fightcapacity = 3;
inline bool gs_role_mutable_data::has_fightcapacity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_role_mutable_data::set_has_fightcapacity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_role_mutable_data::clear_has_fightcapacity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_role_mutable_data::clear_fightcapacity() {
  fightcapacity_ = 0u;
  clear_has_fightcapacity();
}
inline ::google::protobuf::uint32 gs_role_mutable_data::fightcapacity() const {
  return fightcapacity_;
}
inline void gs_role_mutable_data::set_fightcapacity(::google::protobuf::uint32 value) {
  set_has_fightcapacity();
  fightcapacity_ = value;
}

// optional bytes show_property = 4;
inline bool gs_role_mutable_data::has_show_property() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_role_mutable_data::set_has_show_property() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_role_mutable_data::clear_has_show_property() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_role_mutable_data::clear_show_property() {
  if (show_property_ != &::google::protobuf::internal::kEmptyString) {
    show_property_->clear();
  }
  clear_has_show_property();
}
inline const ::std::string& gs_role_mutable_data::show_property() const {
  return *show_property_;
}
inline void gs_role_mutable_data::set_show_property(const ::std::string& value) {
  set_has_show_property();
  if (show_property_ == &::google::protobuf::internal::kEmptyString) {
    show_property_ = new ::std::string;
  }
  show_property_->assign(value);
}
inline void gs_role_mutable_data::set_show_property(const char* value) {
  set_has_show_property();
  if (show_property_ == &::google::protobuf::internal::kEmptyString) {
    show_property_ = new ::std::string;
  }
  show_property_->assign(value);
}
inline void gs_role_mutable_data::set_show_property(const void* value, size_t size) {
  set_has_show_property();
  if (show_property_ == &::google::protobuf::internal::kEmptyString) {
    show_property_ = new ::std::string;
  }
  show_property_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_role_mutable_data::mutable_show_property() {
  set_has_show_property();
  if (show_property_ == &::google::protobuf::internal::kEmptyString) {
    show_property_ = new ::std::string;
  }
  return show_property_;
}
inline ::std::string* gs_role_mutable_data::release_show_property() {
  clear_has_show_property();
  if (show_property_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = show_property_;
    show_property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_role_mutable_data::set_allocated_show_property(::std::string* show_property) {
  if (show_property_ != &::google::protobuf::internal::kEmptyString) {
    delete show_property_;
  }
  if (show_property) {
    set_has_show_property();
    show_property_ = show_property;
  } else {
    clear_has_show_property();
    show_property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PB.other_player_profile_from_gs pro = 8;
inline bool gs_role_mutable_data::has_pro() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_role_mutable_data::set_has_pro() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_role_mutable_data::clear_has_pro() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_role_mutable_data::clear_pro() {
  if (pro_ != NULL) pro_->::PB::other_player_profile_from_gs::Clear();
  clear_has_pro();
}
inline const ::PB::other_player_profile_from_gs& gs_role_mutable_data::pro() const {
  return pro_ != NULL ? *pro_ : *default_instance_->pro_;
}
inline ::PB::other_player_profile_from_gs* gs_role_mutable_data::mutable_pro() {
  set_has_pro();
  if (pro_ == NULL) pro_ = new ::PB::other_player_profile_from_gs;
  return pro_;
}
inline ::PB::other_player_profile_from_gs* gs_role_mutable_data::release_pro() {
  clear_has_pro();
  ::PB::other_player_profile_from_gs* temp = pro_;
  pro_ = NULL;
  return temp;
}
inline void gs_role_mutable_data::set_allocated_pro(::PB::other_player_profile_from_gs* pro) {
  delete pro_;
  pro_ = pro;
  if (pro) {
    set_has_pro();
  } else {
    clear_has_pro();
  }
}

// optional .PB.idip_role_info idip_info = 9;
inline bool gs_role_mutable_data::has_idip_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gs_role_mutable_data::set_has_idip_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gs_role_mutable_data::clear_has_idip_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gs_role_mutable_data::clear_idip_info() {
  if (idip_info_ != NULL) idip_info_->::PB::idip_role_info::Clear();
  clear_has_idip_info();
}
inline const ::PB::idip_role_info& gs_role_mutable_data::idip_info() const {
  return idip_info_ != NULL ? *idip_info_ : *default_instance_->idip_info_;
}
inline ::PB::idip_role_info* gs_role_mutable_data::mutable_idip_info() {
  set_has_idip_info();
  if (idip_info_ == NULL) idip_info_ = new ::PB::idip_role_info;
  return idip_info_;
}
inline ::PB::idip_role_info* gs_role_mutable_data::release_idip_info() {
  clear_has_idip_info();
  ::PB::idip_role_info* temp = idip_info_;
  idip_info_ = NULL;
  return temp;
}
inline void gs_role_mutable_data::set_allocated_idip_info(::PB::idip_role_info* idip_info) {
  delete idip_info_;
  idip_info_ = idip_info;
  if (idip_info) {
    set_has_idip_info();
  } else {
    clear_has_idip_info();
  }
}

// optional .PB.role_list_custom custom = 10;
inline bool gs_role_mutable_data::has_custom() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gs_role_mutable_data::set_has_custom() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gs_role_mutable_data::clear_has_custom() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gs_role_mutable_data::clear_custom() {
  if (custom_ != NULL) custom_->::PB::role_list_custom::Clear();
  clear_has_custom();
}
inline const ::PB::role_list_custom& gs_role_mutable_data::custom() const {
  return custom_ != NULL ? *custom_ : *default_instance_->custom_;
}
inline ::PB::role_list_custom* gs_role_mutable_data::mutable_custom() {
  set_has_custom();
  if (custom_ == NULL) custom_ = new ::PB::role_list_custom;
  return custom_;
}
inline ::PB::role_list_custom* gs_role_mutable_data::release_custom() {
  clear_has_custom();
  ::PB::role_list_custom* temp = custom_;
  custom_ = NULL;
  return temp;
}
inline void gs_role_mutable_data::set_allocated_custom(::PB::role_list_custom* custom) {
  delete custom_;
  custom_ = custom;
  if (custom) {
    set_has_custom();
  } else {
    clear_has_custom();
  }
}

// -------------------------------------------------------------------

// nation_war_history

// required int32 finish_time = 1;
inline bool nation_war_history::has_finish_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nation_war_history::set_has_finish_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nation_war_history::clear_has_finish_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nation_war_history::clear_finish_time() {
  finish_time_ = 0;
  clear_has_finish_time();
}
inline ::google::protobuf::int32 nation_war_history::finish_time() const {
  return finish_time_;
}
inline void nation_war_history::set_finish_time(::google::protobuf::int32 value) {
  set_has_finish_time();
  finish_time_ = value;
}

// required int32 nation_attack = 2;
inline bool nation_war_history::has_nation_attack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nation_war_history::set_has_nation_attack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nation_war_history::clear_has_nation_attack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nation_war_history::clear_nation_attack() {
  nation_attack_ = 0;
  clear_has_nation_attack();
}
inline ::google::protobuf::int32 nation_war_history::nation_attack() const {
  return nation_attack_;
}
inline void nation_war_history::set_nation_attack(::google::protobuf::int32 value) {
  set_has_nation_attack();
  nation_attack_ = value;
}

// required int32 nation_defend = 3;
inline bool nation_war_history::has_nation_defend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nation_war_history::set_has_nation_defend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nation_war_history::clear_has_nation_defend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nation_war_history::clear_nation_defend() {
  nation_defend_ = 0;
  clear_has_nation_defend();
}
inline ::google::protobuf::int32 nation_war_history::nation_defend() const {
  return nation_defend_;
}
inline void nation_war_history::set_nation_defend(::google::protobuf::int32 value) {
  set_has_nation_defend();
  nation_defend_ = value;
}

// required int32 result = 4;
inline bool nation_war_history::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nation_war_history::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void nation_war_history::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void nation_war_history::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 nation_war_history::result() const {
  return result_;
}
inline void nation_war_history::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// blessing_info

// optional bytes padding = 1;
inline bool blessing_info::has_padding() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blessing_info::set_has_padding() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blessing_info::clear_has_padding() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blessing_info::clear_padding() {
  if (padding_ != &::google::protobuf::internal::kEmptyString) {
    padding_->clear();
  }
  clear_has_padding();
}
inline const ::std::string& blessing_info::padding() const {
  return *padding_;
}
inline void blessing_info::set_padding(const ::std::string& value) {
  set_has_padding();
  if (padding_ == &::google::protobuf::internal::kEmptyString) {
    padding_ = new ::std::string;
  }
  padding_->assign(value);
}
inline void blessing_info::set_padding(const char* value) {
  set_has_padding();
  if (padding_ == &::google::protobuf::internal::kEmptyString) {
    padding_ = new ::std::string;
  }
  padding_->assign(value);
}
inline void blessing_info::set_padding(const void* value, size_t size) {
  set_has_padding();
  if (padding_ == &::google::protobuf::internal::kEmptyString) {
    padding_ = new ::std::string;
  }
  padding_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* blessing_info::mutable_padding() {
  set_has_padding();
  if (padding_ == &::google::protobuf::internal::kEmptyString) {
    padding_ = new ::std::string;
  }
  return padding_;
}
inline ::std::string* blessing_info::release_padding() {
  clear_has_padding();
  if (padding_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = padding_;
    padding_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void blessing_info::set_allocated_padding(::std::string* padding) {
  if (padding_ != &::google::protobuf::internal::kEmptyString) {
    delete padding_;
  }
  if (padding) {
    set_has_padding();
    padding_ = padding;
  } else {
    clear_has_padding();
    padding_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 src = 2;
inline bool blessing_info::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blessing_info::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blessing_info::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blessing_info::clear_src() {
  src_ = GOOGLE_ULONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::uint64 blessing_info::src() const {
  return src_;
}
inline void blessing_info::set_src(::google::protobuf::uint64 value) {
  set_has_src();
  src_ = value;
}

// optional bytes src_name = 3;
inline bool blessing_info::has_src_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blessing_info::set_has_src_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blessing_info::clear_has_src_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blessing_info::clear_src_name() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    src_name_->clear();
  }
  clear_has_src_name();
}
inline const ::std::string& blessing_info::src_name() const {
  return *src_name_;
}
inline void blessing_info::set_src_name(const ::std::string& value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void blessing_info::set_src_name(const char* value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void blessing_info::set_src_name(const void* value, size_t size) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* blessing_info::mutable_src_name() {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  return src_name_;
}
inline ::std::string* blessing_info::release_src_name() {
  clear_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_name_;
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void blessing_info::set_allocated_src_name(::std::string* src_name) {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (src_name) {
    set_has_src_name();
    src_name_ = src_name;
  } else {
    clear_has_src_name();
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 dst = 4;
inline bool blessing_info::has_dst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void blessing_info::set_has_dst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void blessing_info::clear_has_dst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void blessing_info::clear_dst() {
  dst_ = GOOGLE_ULONGLONG(0);
  clear_has_dst();
}
inline ::google::protobuf::uint64 blessing_info::dst() const {
  return dst_;
}
inline void blessing_info::set_dst(::google::protobuf::uint64 value) {
  set_has_dst();
  dst_ = value;
}

// optional bytes dst_name = 5;
inline bool blessing_info::has_dst_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void blessing_info::set_has_dst_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void blessing_info::clear_has_dst_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void blessing_info::clear_dst_name() {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    dst_name_->clear();
  }
  clear_has_dst_name();
}
inline const ::std::string& blessing_info::dst_name() const {
  return *dst_name_;
}
inline void blessing_info::set_dst_name(const ::std::string& value) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(value);
}
inline void blessing_info::set_dst_name(const char* value) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(value);
}
inline void blessing_info::set_dst_name(const void* value, size_t size) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* blessing_info::mutable_dst_name() {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  return dst_name_;
}
inline ::std::string* blessing_info::release_dst_name() {
  clear_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_name_;
    dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void blessing_info::set_allocated_dst_name(::std::string* dst_name) {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (dst_name) {
    set_has_dst_name();
    dst_name_ = dst_name;
  } else {
    clear_has_dst_name();
    dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 repu_id = 6;
inline bool blessing_info::has_repu_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void blessing_info::set_has_repu_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void blessing_info::clear_has_repu_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void blessing_info::clear_repu_id() {
  repu_id_ = 0u;
  clear_has_repu_id();
}
inline ::google::protobuf::uint32 blessing_info::repu_id() const {
  return repu_id_;
}
inline void blessing_info::set_repu_id(::google::protobuf::uint32 value) {
  set_has_repu_id();
  repu_id_ = value;
}

// optional uint32 repu_count = 7;
inline bool blessing_info::has_repu_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void blessing_info::set_has_repu_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void blessing_info::clear_has_repu_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void blessing_info::clear_repu_count() {
  repu_count_ = 0u;
  clear_has_repu_count();
}
inline ::google::protobuf::uint32 blessing_info::repu_count() const {
  return repu_count_;
}
inline void blessing_info::set_repu_count(::google::protobuf::uint32 value) {
  set_has_repu_count();
  repu_count_ = value;
}

// optional uint32 item_tid = 8;
inline bool blessing_info::has_item_tid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void blessing_info::set_has_item_tid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void blessing_info::clear_has_item_tid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void blessing_info::clear_item_tid() {
  item_tid_ = 0u;
  clear_has_item_tid();
}
inline ::google::protobuf::uint32 blessing_info::item_tid() const {
  return item_tid_;
}
inline void blessing_info::set_item_tid(::google::protobuf::uint32 value) {
  set_has_item_tid();
  item_tid_ = value;
}

// optional uint32 item_count = 9;
inline bool blessing_info::has_item_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void blessing_info::set_has_item_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void blessing_info::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void blessing_info::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 blessing_info::item_count() const {
  return item_count_;
}
inline void blessing_info::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// optional uint32 txnid = 10;
inline bool blessing_info::has_txnid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void blessing_info::set_has_txnid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void blessing_info::clear_has_txnid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void blessing_info::clear_txnid() {
  txnid_ = 0u;
  clear_has_txnid();
}
inline ::google::protobuf::uint32 blessing_info::txnid() const {
  return txnid_;
}
inline void blessing_info::set_txnid(::google::protobuf::uint32 value) {
  set_has_txnid();
  txnid_ = value;
}

// optional int32 result = 11;
inline bool blessing_info::has_result() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void blessing_info::set_has_result() {
  _has_bits_[0] |= 0x00000400u;
}
inline void blessing_info::clear_has_result() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void blessing_info::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 blessing_info::result() const {
  return result_;
}
inline void blessing_info::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// card_info

// required int32 card_id = 1;
inline bool card_info::has_card_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void card_info::set_has_card_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void card_info::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void card_info::clear_card_id() {
  card_id_ = 0;
  clear_has_card_id();
}
inline ::google::protobuf::int32 card_info::card_id() const {
  return card_id_;
}
inline void card_info::set_card_id(::google::protobuf::int32 value) {
  set_has_card_id();
  card_id_ = value;
}

// required int32 card_count = 2;
inline bool card_info::has_card_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void card_info::set_has_card_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void card_info::clear_has_card_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void card_info::clear_card_count() {
  card_count_ = 0;
  clear_has_card_count();
}
inline ::google::protobuf::int32 card_info::card_count() const {
  return card_count_;
}
inline void card_info::set_card_count(::google::protobuf::int32 value) {
  set_has_card_count();
  card_count_ = value;
}

// -------------------------------------------------------------------

// greeting_info

// optional .PB.greeting_info.GREETING_TYPE type = 1;
inline bool greeting_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void greeting_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void greeting_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void greeting_info::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PB::greeting_info_GREETING_TYPE greeting_info::type() const {
  return static_cast< ::PB::greeting_info_GREETING_TYPE >(type_);
}
inline void greeting_info::set_type(::PB::greeting_info_GREETING_TYPE value) {
  assert(::PB::greeting_info_GREETING_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 info_seq = 2 [default = 0];
inline bool greeting_info::has_info_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void greeting_info::set_has_info_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void greeting_info::clear_has_info_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void greeting_info::clear_info_seq() {
  info_seq_ = 0;
  clear_has_info_seq();
}
inline ::google::protobuf::int32 greeting_info::info_seq() const {
  return info_seq_;
}
inline void greeting_info::set_info_seq(::google::protobuf::int32 value) {
  set_has_info_seq();
  info_seq_ = value;
}

// optional int64 roleid = 3;
inline bool greeting_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void greeting_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void greeting_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void greeting_info::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 greeting_info::roleid() const {
  return roleid_;
}
inline void greeting_info::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional bytes name = 4;
inline bool greeting_info::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void greeting_info::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void greeting_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void greeting_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& greeting_info::name() const {
  return *name_;
}
inline void greeting_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void greeting_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void greeting_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* greeting_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* greeting_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void greeting_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 param_1 = 5;
inline bool greeting_info::has_param_1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void greeting_info::set_has_param_1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void greeting_info::clear_has_param_1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void greeting_info::clear_param_1() {
  param_1_ = 0;
  clear_has_param_1();
}
inline ::google::protobuf::int32 greeting_info::param_1() const {
  return param_1_;
}
inline void greeting_info::set_param_1(::google::protobuf::int32 value) {
  set_has_param_1();
  param_1_ = value;
}

// optional int32 param_2 = 6;
inline bool greeting_info::has_param_2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void greeting_info::set_has_param_2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void greeting_info::clear_has_param_2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void greeting_info::clear_param_2() {
  param_2_ = 0;
  clear_has_param_2();
}
inline ::google::protobuf::int32 greeting_info::param_2() const {
  return param_2_;
}
inline void greeting_info::set_param_2(::google::protobuf::int32 value) {
  set_has_param_2();
  param_2_ = value;
}

// optional int32 param_3 = 7;
inline bool greeting_info::has_param_3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void greeting_info::set_has_param_3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void greeting_info::clear_has_param_3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void greeting_info::clear_param_3() {
  param_3_ = 0;
  clear_has_param_3();
}
inline ::google::protobuf::int32 greeting_info::param_3() const {
  return param_3_;
}
inline void greeting_info::set_param_3(::google::protobuf::int32 value) {
  set_has_param_3();
  param_3_ = value;
}

// optional int32 greet_tid = 8;
inline bool greeting_info::has_greet_tid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void greeting_info::set_has_greet_tid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void greeting_info::clear_has_greet_tid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void greeting_info::clear_greet_tid() {
  greet_tid_ = 0;
  clear_has_greet_tid();
}
inline ::google::protobuf::int32 greeting_info::greet_tid() const {
  return greet_tid_;
}
inline void greeting_info::set_greet_tid(::google::protobuf::int32 value) {
  set_has_greet_tid();
  greet_tid_ = value;
}

// -------------------------------------------------------------------

// ask_help_info

// required uint64 src = 1;
inline bool ask_help_info::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ask_help_info::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ask_help_info::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ask_help_info::clear_src() {
  src_ = GOOGLE_ULONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::uint64 ask_help_info::src() const {
  return src_;
}
inline void ask_help_info::set_src(::google::protobuf::uint64 value) {
  set_has_src();
  src_ = value;
}

// optional bytes src_name = 2;
inline bool ask_help_info::has_src_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ask_help_info::set_has_src_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ask_help_info::clear_has_src_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ask_help_info::clear_src_name() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    src_name_->clear();
  }
  clear_has_src_name();
}
inline const ::std::string& ask_help_info::src_name() const {
  return *src_name_;
}
inline void ask_help_info::set_src_name(const ::std::string& value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void ask_help_info::set_src_name(const char* value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void ask_help_info::set_src_name(const void* value, size_t size) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ask_help_info::mutable_src_name() {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  return src_name_;
}
inline ::std::string* ask_help_info::release_src_name() {
  clear_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_name_;
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ask_help_info::set_allocated_src_name(::std::string* src_name) {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (src_name) {
    set_has_src_name();
    src_name_ = src_name;
  } else {
    clear_has_src_name();
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 scene_tag = 3;
inline bool ask_help_info::has_scene_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ask_help_info::set_has_scene_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ask_help_info::clear_has_scene_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ask_help_info::clear_scene_tag() {
  scene_tag_ = 0;
  clear_has_scene_tag();
}
inline ::google::protobuf::int32 ask_help_info::scene_tag() const {
  return scene_tag_;
}
inline void ask_help_info::set_scene_tag(::google::protobuf::int32 value) {
  set_has_scene_tag();
  scene_tag_ = value;
}

// optional int32 mirror_id = 4;
inline bool ask_help_info::has_mirror_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ask_help_info::set_has_mirror_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ask_help_info::clear_has_mirror_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ask_help_info::clear_mirror_id() {
  mirror_id_ = 0;
  clear_has_mirror_id();
}
inline ::google::protobuf::int32 ask_help_info::mirror_id() const {
  return mirror_id_;
}
inline void ask_help_info::set_mirror_id(::google::protobuf::int32 value) {
  set_has_mirror_id();
  mirror_id_ = value;
}

// required .PB.a3d_pos pos = 5;
inline bool ask_help_info::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ask_help_info::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ask_help_info::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ask_help_info::clear_pos() {
  if (pos_ != NULL) pos_->::PB::a3d_pos::Clear();
  clear_has_pos();
}
inline const ::PB::a3d_pos& ask_help_info::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::PB::a3d_pos* ask_help_info::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PB::a3d_pos;
  return pos_;
}
inline ::PB::a3d_pos* ask_help_info::release_pos() {
  clear_has_pos();
  ::PB::a3d_pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void ask_help_info::set_allocated_pos(::PB::a3d_pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional int32 end_timestamp = 6;
inline bool ask_help_info::has_end_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ask_help_info::set_has_end_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ask_help_info::clear_has_end_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ask_help_info::clear_end_timestamp() {
  end_timestamp_ = 0;
  clear_has_end_timestamp();
}
inline ::google::protobuf::int32 ask_help_info::end_timestamp() const {
  return end_timestamp_;
}
inline void ask_help_info::set_end_timestamp(::google::protobuf::int32 value) {
  set_has_end_timestamp();
  end_timestamp_ = value;
}

// optional .PB.ask_help_info_type info_type = 7;
inline bool ask_help_info::has_info_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ask_help_info::set_has_info_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ask_help_info::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ask_help_info::clear_info_type() {
  info_type_ = 0;
  clear_has_info_type();
}
inline ::PB::ask_help_info_type ask_help_info::info_type() const {
  return static_cast< ::PB::ask_help_info_type >(info_type_);
}
inline void ask_help_info::set_info_type(::PB::ask_help_info_type value) {
  assert(::PB::ask_help_info_type_IsValid(value));
  set_has_info_type();
  info_type_ = value;
}

// optional .PB.ask_help_info.relation_type relation = 8;
inline bool ask_help_info::has_relation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ask_help_info::set_has_relation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ask_help_info::clear_has_relation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ask_help_info::clear_relation() {
  relation_ = 0;
  clear_has_relation();
}
inline ::PB::ask_help_info_relation_type ask_help_info::relation() const {
  return static_cast< ::PB::ask_help_info_relation_type >(relation_);
}
inline void ask_help_info::set_relation(::PB::ask_help_info_relation_type value) {
  assert(::PB::ask_help_info_relation_type_IsValid(value));
  set_has_relation();
  relation_ = value;
}

// optional sint32 certificate = 9;
inline bool ask_help_info::has_certificate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ask_help_info::set_has_certificate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ask_help_info::clear_has_certificate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ask_help_info::clear_certificate() {
  certificate_ = 0;
  clear_has_certificate();
}
inline ::google::protobuf::int32 ask_help_info::certificate() const {
  return certificate_;
}
inline void ask_help_info::set_certificate(::google::protobuf::int32 value) {
  set_has_certificate();
  certificate_ = value;
}

// optional int32 src_nation = 10;
inline bool ask_help_info::has_src_nation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ask_help_info::set_has_src_nation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ask_help_info::clear_has_src_nation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ask_help_info::clear_src_nation() {
  src_nation_ = 0;
  clear_has_src_nation();
}
inline ::google::protobuf::int32 ask_help_info::src_nation() const {
  return src_nation_;
}
inline void ask_help_info::set_src_nation(::google::protobuf::int32 value) {
  set_has_src_nation();
  src_nation_ = value;
}

// optional int32 corp_id = 11;
inline bool ask_help_info::has_corp_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ask_help_info::set_has_corp_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ask_help_info::clear_has_corp_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ask_help_info::clear_corp_id() {
  corp_id_ = 0;
  clear_has_corp_id();
}
inline ::google::protobuf::int32 ask_help_info::corp_id() const {
  return corp_id_;
}
inline void ask_help_info::set_corp_id(::google::protobuf::int32 value) {
  set_has_corp_id();
  corp_id_ = value;
}

// -------------------------------------------------------------------

// roam_match_info

// optional int32 zoneid = 1;
inline bool roam_match_info::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void roam_match_info::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void roam_match_info::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void roam_match_info::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 roam_match_info::zoneid() const {
  return zoneid_;
}
inline void roam_match_info::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// optional int32 nationid = 2;
inline bool roam_match_info::has_nationid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void roam_match_info::set_has_nationid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void roam_match_info::clear_has_nationid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void roam_match_info::clear_nationid() {
  nationid_ = 0;
  clear_has_nationid();
}
inline ::google::protobuf::int32 roam_match_info::nationid() const {
  return nationid_;
}
inline void roam_match_info::set_nationid(::google::protobuf::int32 value) {
  set_has_nationid();
  nationid_ = value;
}

// optional int32 league_id = 3;
inline bool roam_match_info::has_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void roam_match_info::set_has_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void roam_match_info::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void roam_match_info::clear_league_id() {
  league_id_ = 0;
  clear_has_league_id();
}
inline ::google::protobuf::int32 roam_match_info::league_id() const {
  return league_id_;
}
inline void roam_match_info::set_league_id(::google::protobuf::int32 value) {
  set_has_league_id();
  league_id_ = value;
}

// optional int32 war_id = 4;
inline bool roam_match_info::has_war_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void roam_match_info::set_has_war_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void roam_match_info::clear_has_war_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void roam_match_info::clear_war_id() {
  war_id_ = 0;
  clear_has_war_id();
}
inline ::google::protobuf::int32 roam_match_info::war_id() const {
  return war_id_;
}
inline void roam_match_info::set_war_id(::google::protobuf::int32 value) {
  set_has_war_id();
  war_id_ = value;
}

// optional int32 camp_id = 5;
inline bool roam_match_info::has_camp_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void roam_match_info::set_has_camp_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void roam_match_info::clear_has_camp_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void roam_match_info::clear_camp_id() {
  camp_id_ = 0;
  clear_has_camp_id();
}
inline ::google::protobuf::int32 roam_match_info::camp_id() const {
  return camp_id_;
}
inline void roam_match_info::set_camp_id(::google::protobuf::int32 value) {
  set_has_camp_id();
  camp_id_ = value;
}

// -------------------------------------------------------------------

// db_roam_record_info

// optional int32 zoneid = 1;
inline bool db_roam_record_info::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_roam_record_info::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_roam_record_info::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_roam_record_info::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 db_roam_record_info::zoneid() const {
  return zoneid_;
}
inline void db_roam_record_info::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// optional int32 nation = 2;
inline bool db_roam_record_info::has_nation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_roam_record_info::set_has_nation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_roam_record_info::clear_has_nation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_roam_record_info::clear_nation() {
  nation_ = 0;
  clear_has_nation();
}
inline ::google::protobuf::int32 db_roam_record_info::nation() const {
  return nation_;
}
inline void db_roam_record_info::set_nation(::google::protobuf::int32 value) {
  set_has_nation();
  nation_ = value;
}

// optional int32 leagueid = 3;
inline bool db_roam_record_info::has_leagueid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_roam_record_info::set_has_leagueid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_roam_record_info::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_roam_record_info::clear_leagueid() {
  leagueid_ = 0;
  clear_has_leagueid();
}
inline ::google::protobuf::int32 db_roam_record_info::leagueid() const {
  return leagueid_;
}
inline void db_roam_record_info::set_leagueid(::google::protobuf::int32 value) {
  set_has_leagueid();
  leagueid_ = value;
}

// optional int32 campid = 4;
inline bool db_roam_record_info::has_campid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_roam_record_info::set_has_campid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_roam_record_info::clear_has_campid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_roam_record_info::clear_campid() {
  campid_ = 0;
  clear_has_campid();
}
inline ::google::protobuf::int32 db_roam_record_info::campid() const {
  return campid_;
}
inline void db_roam_record_info::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
}

// -------------------------------------------------------------------

// db_roam_record_data

// optional int32 instid = 1;
inline bool db_roam_record_data::has_instid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_roam_record_data::set_has_instid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_roam_record_data::clear_has_instid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_roam_record_data::clear_instid() {
  instid_ = 0;
  clear_has_instid();
}
inline ::google::protobuf::int32 db_roam_record_data::instid() const {
  return instid_;
}
inline void db_roam_record_data::set_instid(::google::protobuf::int32 value) {
  set_has_instid();
  instid_ = value;
}

// optional int32 win_campid = 2;
inline bool db_roam_record_data::has_win_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_roam_record_data::set_has_win_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_roam_record_data::clear_has_win_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_roam_record_data::clear_win_campid() {
  win_campid_ = 0;
  clear_has_win_campid();
}
inline ::google::protobuf::int32 db_roam_record_data::win_campid() const {
  return win_campid_;
}
inline void db_roam_record_data::set_win_campid(::google::protobuf::int32 value) {
  set_has_win_campid();
  win_campid_ = value;
}

// optional int32 timestamp = 3;
inline bool db_roam_record_data::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_roam_record_data::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_roam_record_data::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_roam_record_data::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 db_roam_record_data::timestamp() const {
  return timestamp_;
}
inline void db_roam_record_data::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// repeated .PB.db_roam_record_info info = 4;
inline int db_roam_record_data::info_size() const {
  return info_.size();
}
inline void db_roam_record_data::clear_info() {
  info_.Clear();
}
inline const ::PB::db_roam_record_info& db_roam_record_data::info(int index) const {
  return info_.Get(index);
}
inline ::PB::db_roam_record_info* db_roam_record_data::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PB::db_roam_record_info* db_roam_record_data::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_info >&
db_roam_record_data::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_info >*
db_roam_record_data::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// instance_extend_info

// optional int32 param1 = 1;
inline bool instance_extend_info::has_param1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void instance_extend_info::set_has_param1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void instance_extend_info::clear_has_param1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void instance_extend_info::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 instance_extend_info::param1() const {
  return param1_;
}
inline void instance_extend_info::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// repeated int64 param2 = 2;
inline int instance_extend_info::param2_size() const {
  return param2_.size();
}
inline void instance_extend_info::clear_param2() {
  param2_.Clear();
}
inline ::google::protobuf::int64 instance_extend_info::param2(int index) const {
  return param2_.Get(index);
}
inline void instance_extend_info::set_param2(int index, ::google::protobuf::int64 value) {
  param2_.Set(index, value);
}
inline void instance_extend_info::add_param2(::google::protobuf::int64 value) {
  param2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
instance_extend_info::param2() const {
  return param2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
instance_extend_info::mutable_param2() {
  return &param2_;
}

// -------------------------------------------------------------------

// corp_farmland

// optional int32 cur_planting_tid = 3;
inline bool corp_farmland::has_cur_planting_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corp_farmland::set_has_cur_planting_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corp_farmland::clear_has_cur_planting_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corp_farmland::clear_cur_planting_tid() {
  cur_planting_tid_ = 0;
  clear_has_cur_planting_tid();
}
inline ::google::protobuf::int32 corp_farmland::cur_planting_tid() const {
  return cur_planting_tid_;
}
inline void corp_farmland::set_cur_planting_tid(::google::protobuf::int32 value) {
  set_has_cur_planting_tid();
  cur_planting_tid_ = value;
}

// optional int32 start_time = 4;
inline bool corp_farmland::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corp_farmland::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corp_farmland::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corp_farmland::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
inline ::google::protobuf::int32 corp_farmland::start_time() const {
  return start_time_;
}
inline void corp_farmland::set_start_time(::google::protobuf::int32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional int32 harvest_time = 5;
inline bool corp_farmland::has_harvest_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void corp_farmland::set_has_harvest_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void corp_farmland::clear_has_harvest_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void corp_farmland::clear_harvest_time() {
  harvest_time_ = 0;
  clear_has_harvest_time();
}
inline ::google::protobuf::int32 corp_farmland::harvest_time() const {
  return harvest_time_;
}
inline void corp_farmland::set_harvest_time(::google::protobuf::int32 value) {
  set_has_harvest_time();
  harvest_time_ = value;
}

// optional bool can_speed = 6;
inline bool corp_farmland::has_can_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void corp_farmland::set_has_can_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void corp_farmland::clear_has_can_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void corp_farmland::clear_can_speed() {
  can_speed_ = false;
  clear_has_can_speed();
}
inline bool corp_farmland::can_speed() const {
  return can_speed_;
}
inline void corp_farmland::set_can_speed(bool value) {
  set_has_can_speed();
  can_speed_ = value;
}

// -------------------------------------------------------------------

// enter_instance_config_client_config

// optional int32 mafia_id = 1;
inline bool enter_instance_config_client_config::has_mafia_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_instance_config_client_config::set_has_mafia_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_instance_config_client_config::clear_has_mafia_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_instance_config_client_config::clear_mafia_id() {
  mafia_id_ = 0;
  clear_has_mafia_id();
}
inline ::google::protobuf::int32 enter_instance_config_client_config::mafia_id() const {
  return mafia_id_;
}
inline void enter_instance_config_client_config::set_mafia_id(::google::protobuf::int32 value) {
  set_has_mafia_id();
  mafia_id_ = value;
}

// optional bytes name = 2;
inline bool enter_instance_config_client_config::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_instance_config_client_config::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_instance_config_client_config::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_instance_config_client_config::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& enter_instance_config_client_config::name() const {
  return *name_;
}
inline void enter_instance_config_client_config::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void enter_instance_config_client_config::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void enter_instance_config_client_config::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* enter_instance_config_client_config::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* enter_instance_config_client_config::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void enter_instance_config_client_config::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes password = 3;
inline bool enter_instance_config_client_config::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enter_instance_config_client_config::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enter_instance_config_client_config::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enter_instance_config_client_config::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& enter_instance_config_client_config::password() const {
  return *password_;
}
inline void enter_instance_config_client_config::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void enter_instance_config_client_config::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void enter_instance_config_client_config::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* enter_instance_config_client_config::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* enter_instance_config_client_config::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void enter_instance_config_client_config::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PB.instance_extend_info info = 4;
inline bool enter_instance_config_client_config::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void enter_instance_config_client_config::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void enter_instance_config_client_config::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void enter_instance_config_client_config::clear_info() {
  if (info_ != NULL) info_->::PB::instance_extend_info::Clear();
  clear_has_info();
}
inline const ::PB::instance_extend_info& enter_instance_config_client_config::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PB::instance_extend_info* enter_instance_config_client_config::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PB::instance_extend_info;
  return info_;
}
inline ::PB::instance_extend_info* enter_instance_config_client_config::release_info() {
  clear_has_info();
  ::PB::instance_extend_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void enter_instance_config_client_config::set_allocated_info(::PB::instance_extend_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// enter_instance_config_server_config

// optional int32 param1 = 1;
inline bool enter_instance_config_server_config::has_param1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_instance_config_server_config::set_has_param1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_instance_config_server_config::clear_has_param1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_instance_config_server_config::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 enter_instance_config_server_config::param1() const {
  return param1_;
}
inline void enter_instance_config_server_config::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// optional int32 param2 = 2;
inline bool enter_instance_config_server_config::has_param2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_instance_config_server_config::set_has_param2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_instance_config_server_config::clear_has_param2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_instance_config_server_config::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline ::google::protobuf::int32 enter_instance_config_server_config::param2() const {
  return param2_;
}
inline void enter_instance_config_server_config::set_param2(::google::protobuf::int32 value) {
  set_has_param2();
  param2_ = value;
}

// optional .PB.a3d_pos pos = 3;
inline bool enter_instance_config_server_config::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enter_instance_config_server_config::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enter_instance_config_server_config::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enter_instance_config_server_config::clear_pos() {
  if (pos_ != NULL) pos_->::PB::a3d_pos::Clear();
  clear_has_pos();
}
inline const ::PB::a3d_pos& enter_instance_config_server_config::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::PB::a3d_pos* enter_instance_config_server_config::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PB::a3d_pos;
  return pos_;
}
inline ::PB::a3d_pos* enter_instance_config_server_config::release_pos() {
  clear_has_pos();
  ::PB::a3d_pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void enter_instance_config_server_config::set_allocated_pos(::PB::a3d_pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// -------------------------------------------------------------------

// enter_instance_config

// optional .PB.enter_instance_config.client_config client = 1;
inline bool enter_instance_config::has_client() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_instance_config::set_has_client() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_instance_config::clear_has_client() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_instance_config::clear_client() {
  if (client_ != NULL) client_->::PB::enter_instance_config_client_config::Clear();
  clear_has_client();
}
inline const ::PB::enter_instance_config_client_config& enter_instance_config::client() const {
  return client_ != NULL ? *client_ : *default_instance_->client_;
}
inline ::PB::enter_instance_config_client_config* enter_instance_config::mutable_client() {
  set_has_client();
  if (client_ == NULL) client_ = new ::PB::enter_instance_config_client_config;
  return client_;
}
inline ::PB::enter_instance_config_client_config* enter_instance_config::release_client() {
  clear_has_client();
  ::PB::enter_instance_config_client_config* temp = client_;
  client_ = NULL;
  return temp;
}
inline void enter_instance_config::set_allocated_client(::PB::enter_instance_config_client_config* client) {
  delete client_;
  client_ = client;
  if (client) {
    set_has_client();
  } else {
    clear_has_client();
  }
}

// optional .PB.enter_instance_config.server_config server = 2;
inline bool enter_instance_config::has_server() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_instance_config::set_has_server() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_instance_config::clear_has_server() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_instance_config::clear_server() {
  if (server_ != NULL) server_->::PB::enter_instance_config_server_config::Clear();
  clear_has_server();
}
inline const ::PB::enter_instance_config_server_config& enter_instance_config::server() const {
  return server_ != NULL ? *server_ : *default_instance_->server_;
}
inline ::PB::enter_instance_config_server_config* enter_instance_config::mutable_server() {
  set_has_server();
  if (server_ == NULL) server_ = new ::PB::enter_instance_config_server_config;
  return server_;
}
inline ::PB::enter_instance_config_server_config* enter_instance_config::release_server() {
  clear_has_server();
  ::PB::enter_instance_config_server_config* temp = server_;
  server_ = NULL;
  return temp;
}
inline void enter_instance_config::set_allocated_server(::PB::enter_instance_config_server_config* server) {
  delete server_;
  server_ = server;
  if (server) {
    set_has_server();
  } else {
    clear_has_server();
  }
}

// -------------------------------------------------------------------

// player_corps_attr_config_rent_chariot_info

// optional int32 chariot_hp = 3;
inline bool player_corps_attr_config_rent_chariot_info::has_chariot_hp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_corps_attr_config_rent_chariot_info::set_has_chariot_hp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_has_chariot_hp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_chariot_hp() {
  chariot_hp_ = 0;
  clear_has_chariot_hp();
}
inline ::google::protobuf::int32 player_corps_attr_config_rent_chariot_info::chariot_hp() const {
  return chariot_hp_;
}
inline void player_corps_attr_config_rent_chariot_info::set_chariot_hp(::google::protobuf::int32 value) {
  set_has_chariot_hp();
  chariot_hp_ = value;
}

// optional int32 chariot_tid = 4;
inline bool player_corps_attr_config_rent_chariot_info::has_chariot_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_corps_attr_config_rent_chariot_info::set_has_chariot_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_has_chariot_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_chariot_tid() {
  chariot_tid_ = 0;
  clear_has_chariot_tid();
}
inline ::google::protobuf::int32 player_corps_attr_config_rent_chariot_info::chariot_tid() const {
  return chariot_tid_;
}
inline void player_corps_attr_config_rent_chariot_info::set_chariot_tid(::google::protobuf::int32 value) {
  set_has_chariot_tid();
  chariot_tid_ = value;
}

// optional int32 chariot_level = 5;
inline bool player_corps_attr_config_rent_chariot_info::has_chariot_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_corps_attr_config_rent_chariot_info::set_has_chariot_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_has_chariot_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_chariot_level() {
  chariot_level_ = 0;
  clear_has_chariot_level();
}
inline ::google::protobuf::int32 player_corps_attr_config_rent_chariot_info::chariot_level() const {
  return chariot_level_;
}
inline void player_corps_attr_config_rent_chariot_info::set_chariot_level(::google::protobuf::int32 value) {
  set_has_chariot_level();
  chariot_level_ = value;
}

// optional int32 chariot_rent_timestamp = 6;
inline bool player_corps_attr_config_rent_chariot_info::has_chariot_rent_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void player_corps_attr_config_rent_chariot_info::set_has_chariot_rent_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_has_chariot_rent_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_chariot_rent_timestamp() {
  chariot_rent_timestamp_ = 0;
  clear_has_chariot_rent_timestamp();
}
inline ::google::protobuf::int32 player_corps_attr_config_rent_chariot_info::chariot_rent_timestamp() const {
  return chariot_rent_timestamp_;
}
inline void player_corps_attr_config_rent_chariot_info::set_chariot_rent_timestamp(::google::protobuf::int32 value) {
  set_has_chariot_rent_timestamp();
  chariot_rent_timestamp_ = value;
}

// -------------------------------------------------------------------

// player_corps_attr_config

// optional int32 active_level = 1 [default = -1];
inline bool player_corps_attr_config::has_active_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_corps_attr_config::set_has_active_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_corps_attr_config::clear_has_active_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_corps_attr_config::clear_active_level() {
  active_level_ = -1;
  clear_has_active_level();
}
inline ::google::protobuf::int32 player_corps_attr_config::active_level() const {
  return active_level_;
}
inline void player_corps_attr_config::set_active_level(::google::protobuf::int32 value) {
  set_has_active_level();
  active_level_ = value;
}

// optional int32 active_index = 2 [default = -1];
inline bool player_corps_attr_config::has_active_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_corps_attr_config::set_has_active_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_corps_attr_config::clear_has_active_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_corps_attr_config::clear_active_index() {
  active_index_ = -1;
  clear_has_active_index();
}
inline ::google::protobuf::int32 player_corps_attr_config::active_index() const {
  return active_index_;
}
inline void player_corps_attr_config::set_active_index(::google::protobuf::int32 value) {
  set_has_active_index();
  active_index_ = value;
}

// optional .PB.player_corps_attr_config.rent_chariot_info chariot_info = 4;
inline bool player_corps_attr_config::has_chariot_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_corps_attr_config::set_has_chariot_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_corps_attr_config::clear_has_chariot_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_corps_attr_config::clear_chariot_info() {
  if (chariot_info_ != NULL) chariot_info_->::PB::player_corps_attr_config_rent_chariot_info::Clear();
  clear_has_chariot_info();
}
inline const ::PB::player_corps_attr_config_rent_chariot_info& player_corps_attr_config::chariot_info() const {
  return chariot_info_ != NULL ? *chariot_info_ : *default_instance_->chariot_info_;
}
inline ::PB::player_corps_attr_config_rent_chariot_info* player_corps_attr_config::mutable_chariot_info() {
  set_has_chariot_info();
  if (chariot_info_ == NULL) chariot_info_ = new ::PB::player_corps_attr_config_rent_chariot_info;
  return chariot_info_;
}
inline ::PB::player_corps_attr_config_rent_chariot_info* player_corps_attr_config::release_chariot_info() {
  clear_has_chariot_info();
  ::PB::player_corps_attr_config_rent_chariot_info* temp = chariot_info_;
  chariot_info_ = NULL;
  return temp;
}
inline void player_corps_attr_config::set_allocated_chariot_info(::PB::player_corps_attr_config_rent_chariot_info* chariot_info) {
  delete chariot_info_;
  chariot_info_ = chariot_info;
  if (chariot_info) {
    set_has_chariot_info();
  } else {
    clear_has_chariot_info();
  }
}

// -------------------------------------------------------------------

// player_stune_config_player_rune_prop_config

// required int32 master_skill_id = 1;
inline bool player_stune_config_player_rune_prop_config::has_master_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_stune_config_player_rune_prop_config::set_has_master_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_stune_config_player_rune_prop_config::clear_has_master_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_stune_config_player_rune_prop_config::clear_master_skill_id() {
  master_skill_id_ = 0;
  clear_has_master_skill_id();
}
inline ::google::protobuf::int32 player_stune_config_player_rune_prop_config::master_skill_id() const {
  return master_skill_id_;
}
inline void player_stune_config_player_rune_prop_config::set_master_skill_id(::google::protobuf::int32 value) {
  set_has_master_skill_id();
  master_skill_id_ = value;
}

// repeated int32 rune_skill_level = 2;
inline int player_stune_config_player_rune_prop_config::rune_skill_level_size() const {
  return rune_skill_level_.size();
}
inline void player_stune_config_player_rune_prop_config::clear_rune_skill_level() {
  rune_skill_level_.Clear();
}
inline ::google::protobuf::int32 player_stune_config_player_rune_prop_config::rune_skill_level(int index) const {
  return rune_skill_level_.Get(index);
}
inline void player_stune_config_player_rune_prop_config::set_rune_skill_level(int index, ::google::protobuf::int32 value) {
  rune_skill_level_.Set(index, value);
}
inline void player_stune_config_player_rune_prop_config::add_rune_skill_level(::google::protobuf::int32 value) {
  rune_skill_level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
player_stune_config_player_rune_prop_config::rune_skill_level() const {
  return rune_skill_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
player_stune_config_player_rune_prop_config::mutable_rune_skill_level() {
  return &rune_skill_level_;
}

// -------------------------------------------------------------------

// player_stune_config_player_rune_config

// required int32 master_skill_id = 1;
inline bool player_stune_config_player_rune_config::has_master_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_stune_config_player_rune_config::set_has_master_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_stune_config_player_rune_config::clear_has_master_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_stune_config_player_rune_config::clear_master_skill_id() {
  master_skill_id_ = 0;
  clear_has_master_skill_id();
}
inline ::google::protobuf::int32 player_stune_config_player_rune_config::master_skill_id() const {
  return master_skill_id_;
}
inline void player_stune_config_player_rune_config::set_master_skill_id(::google::protobuf::int32 value) {
  set_has_master_skill_id();
  master_skill_id_ = value;
}

// required int32 active_index = 2;
inline bool player_stune_config_player_rune_config::has_active_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_stune_config_player_rune_config::set_has_active_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_stune_config_player_rune_config::clear_has_active_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_stune_config_player_rune_config::clear_active_index() {
  active_index_ = 0;
  clear_has_active_index();
}
inline ::google::protobuf::int32 player_stune_config_player_rune_config::active_index() const {
  return active_index_;
}
inline void player_stune_config_player_rune_config::set_active_index(::google::protobuf::int32 value) {
  set_has_active_index();
  active_index_ = value;
}

// -------------------------------------------------------------------

// player_stune_config_config_set

// required int32 set_index = 1;
inline bool player_stune_config_config_set::has_set_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_stune_config_config_set::set_has_set_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_stune_config_config_set::clear_has_set_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_stune_config_config_set::clear_set_index() {
  set_index_ = 0;
  clear_has_set_index();
}
inline ::google::protobuf::int32 player_stune_config_config_set::set_index() const {
  return set_index_;
}
inline void player_stune_config_config_set::set_set_index(::google::protobuf::int32 value) {
  set_has_set_index();
  set_index_ = value;
}

// repeated .PB.player_stune_config.player_rune_config configs = 2;
inline int player_stune_config_config_set::configs_size() const {
  return configs_.size();
}
inline void player_stune_config_config_set::clear_configs() {
  configs_.Clear();
}
inline const ::PB::player_stune_config_player_rune_config& player_stune_config_config_set::configs(int index) const {
  return configs_.Get(index);
}
inline ::PB::player_stune_config_player_rune_config* player_stune_config_config_set::mutable_configs(int index) {
  return configs_.Mutable(index);
}
inline ::PB::player_stune_config_player_rune_config* player_stune_config_config_set::add_configs() {
  return configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_config >&
player_stune_config_config_set::configs() const {
  return configs_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_config >*
player_stune_config_config_set::mutable_configs() {
  return &configs_;
}

// -------------------------------------------------------------------

// player_stune_config

// optional int32 rune_level = 1;
inline bool player_stune_config::has_rune_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_stune_config::set_has_rune_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_stune_config::clear_has_rune_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_stune_config::clear_rune_level() {
  rune_level_ = 0;
  clear_has_rune_level();
}
inline ::google::protobuf::int32 player_stune_config::rune_level() const {
  return rune_level_;
}
inline void player_stune_config::set_rune_level(::google::protobuf::int32 value) {
  set_has_rune_level();
  rune_level_ = value;
}

// optional int32 rune_point = 2;
inline bool player_stune_config::has_rune_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_stune_config::set_has_rune_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_stune_config::clear_has_rune_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_stune_config::clear_rune_point() {
  rune_point_ = 0;
  clear_has_rune_point();
}
inline ::google::protobuf::int32 player_stune_config::rune_point() const {
  return rune_point_;
}
inline void player_stune_config::set_rune_point(::google::protobuf::int32 value) {
  set_has_rune_point();
  rune_point_ = value;
}

// repeated .PB.player_stune_config.player_rune_prop_config rune_config = 3;
inline int player_stune_config::rune_config_size() const {
  return rune_config_.size();
}
inline void player_stune_config::clear_rune_config() {
  rune_config_.Clear();
}
inline const ::PB::player_stune_config_player_rune_prop_config& player_stune_config::rune_config(int index) const {
  return rune_config_.Get(index);
}
inline ::PB::player_stune_config_player_rune_prop_config* player_stune_config::mutable_rune_config(int index) {
  return rune_config_.Mutable(index);
}
inline ::PB::player_stune_config_player_rune_prop_config* player_stune_config::add_rune_config() {
  return rune_config_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_prop_config >&
player_stune_config::rune_config() const {
  return rune_config_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_prop_config >*
player_stune_config::mutable_rune_config() {
  return &rune_config_;
}

// repeated .PB.player_stune_config.config_set all_config_set = 4;
inline int player_stune_config::all_config_set_size() const {
  return all_config_set_.size();
}
inline void player_stune_config::clear_all_config_set() {
  all_config_set_.Clear();
}
inline const ::PB::player_stune_config_config_set& player_stune_config::all_config_set(int index) const {
  return all_config_set_.Get(index);
}
inline ::PB::player_stune_config_config_set* player_stune_config::mutable_all_config_set(int index) {
  return all_config_set_.Mutable(index);
}
inline ::PB::player_stune_config_config_set* player_stune_config::add_all_config_set() {
  return all_config_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_config_set >&
player_stune_config::all_config_set() const {
  return all_config_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_config_set >*
player_stune_config::mutable_all_config_set() {
  return &all_config_set_;
}

// optional int32 cur_active_set = 5;
inline bool player_stune_config::has_cur_active_set() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void player_stune_config::set_has_cur_active_set() {
  _has_bits_[0] |= 0x00000010u;
}
inline void player_stune_config::clear_has_cur_active_set() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void player_stune_config::clear_cur_active_set() {
  cur_active_set_ = 0;
  clear_has_cur_active_set();
}
inline ::google::protobuf::int32 player_stune_config::cur_active_set() const {
  return cur_active_set_;
}
inline void player_stune_config::set_cur_active_set(::google::protobuf::int32 value) {
  set_has_cur_active_set();
  cur_active_set_ = value;
}

// optional int32 total_rune_point = 6;
inline bool player_stune_config::has_total_rune_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void player_stune_config::set_has_total_rune_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void player_stune_config::clear_has_total_rune_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void player_stune_config::clear_total_rune_point() {
  total_rune_point_ = 0;
  clear_has_total_rune_point();
}
inline ::google::protobuf::int32 player_stune_config::total_rune_point() const {
  return total_rune_point_;
}
inline void player_stune_config::set_total_rune_point(::google::protobuf::int32 value) {
  set_has_total_rune_point();
  total_rune_point_ = value;
}

// -------------------------------------------------------------------

// black_shop_info_black_shop_goods_info

// required int32 store_id = 1;
inline bool black_shop_info_black_shop_goods_info::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void black_shop_info_black_shop_goods_info::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void black_shop_info_black_shop_goods_info::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void black_shop_info_black_shop_goods_info::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 black_shop_info_black_shop_goods_info::store_id() const {
  return store_id_;
}
inline void black_shop_info_black_shop_goods_info::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
}

// required int32 goods_id = 2;
inline bool black_shop_info_black_shop_goods_info::has_goods_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void black_shop_info_black_shop_goods_info::set_has_goods_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void black_shop_info_black_shop_goods_info::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void black_shop_info_black_shop_goods_info::clear_goods_id() {
  goods_id_ = 0;
  clear_has_goods_id();
}
inline ::google::protobuf::int32 black_shop_info_black_shop_goods_info::goods_id() const {
  return goods_id_;
}
inline void black_shop_info_black_shop_goods_info::set_goods_id(::google::protobuf::int32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// required int32 is_selled = 3;
inline bool black_shop_info_black_shop_goods_info::has_is_selled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void black_shop_info_black_shop_goods_info::set_has_is_selled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void black_shop_info_black_shop_goods_info::clear_has_is_selled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void black_shop_info_black_shop_goods_info::clear_is_selled() {
  is_selled_ = 0;
  clear_has_is_selled();
}
inline ::google::protobuf::int32 black_shop_info_black_shop_goods_info::is_selled() const {
  return is_selled_;
}
inline void black_shop_info_black_shop_goods_info::set_is_selled(::google::protobuf::int32 value) {
  set_has_is_selled();
  is_selled_ = value;
}

// required int32 goods_pos = 4;
inline bool black_shop_info_black_shop_goods_info::has_goods_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void black_shop_info_black_shop_goods_info::set_has_goods_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void black_shop_info_black_shop_goods_info::clear_has_goods_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void black_shop_info_black_shop_goods_info::clear_goods_pos() {
  goods_pos_ = 0;
  clear_has_goods_pos();
}
inline ::google::protobuf::int32 black_shop_info_black_shop_goods_info::goods_pos() const {
  return goods_pos_;
}
inline void black_shop_info_black_shop_goods_info::set_goods_pos(::google::protobuf::int32 value) {
  set_has_goods_pos();
  goods_pos_ = value;
}

// -------------------------------------------------------------------

// black_shop_info

// required int32 shop_id = 1;
inline bool black_shop_info::has_shop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void black_shop_info::set_has_shop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void black_shop_info::clear_has_shop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void black_shop_info::clear_shop_id() {
  shop_id_ = 0;
  clear_has_shop_id();
}
inline ::google::protobuf::int32 black_shop_info::shop_id() const {
  return shop_id_;
}
inline void black_shop_info::set_shop_id(::google::protobuf::int32 value) {
  set_has_shop_id();
  shop_id_ = value;
}

// required int32 next_refresh_time = 2;
inline bool black_shop_info::has_next_refresh_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void black_shop_info::set_has_next_refresh_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void black_shop_info::clear_has_next_refresh_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void black_shop_info::clear_next_refresh_time() {
  next_refresh_time_ = 0;
  clear_has_next_refresh_time();
}
inline ::google::protobuf::int32 black_shop_info::next_refresh_time() const {
  return next_refresh_time_;
}
inline void black_shop_info::set_next_refresh_time(::google::protobuf::int32 value) {
  set_has_next_refresh_time();
  next_refresh_time_ = value;
}

// repeated .PB.black_shop_info.black_shop_goods_info goods = 3;
inline int black_shop_info::goods_size() const {
  return goods_.size();
}
inline void black_shop_info::clear_goods() {
  goods_.Clear();
}
inline const ::PB::black_shop_info_black_shop_goods_info& black_shop_info::goods(int index) const {
  return goods_.Get(index);
}
inline ::PB::black_shop_info_black_shop_goods_info* black_shop_info::mutable_goods(int index) {
  return goods_.Mutable(index);
}
inline ::PB::black_shop_info_black_shop_goods_info* black_shop_info::add_goods() {
  return goods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info_black_shop_goods_info >&
black_shop_info::goods() const {
  return goods_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info_black_shop_goods_info >*
black_shop_info::mutable_goods() {
  return &goods_;
}

// -------------------------------------------------------------------

// climbtower_magic_shop_info_magic_shop_goods_info

// required int32 store_id = 1;
inline bool climbtower_magic_shop_info_magic_shop_goods_info::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 climbtower_magic_shop_info_magic_shop_goods_info::store_id() const {
  return store_id_;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
}

// required int32 goods_id = 2;
inline bool climbtower_magic_shop_info_magic_shop_goods_info::has_goods_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_has_goods_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_goods_id() {
  goods_id_ = 0;
  clear_has_goods_id();
}
inline ::google::protobuf::int32 climbtower_magic_shop_info_magic_shop_goods_info::goods_id() const {
  return goods_id_;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_goods_id(::google::protobuf::int32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// required int32 is_selled = 3;
inline bool climbtower_magic_shop_info_magic_shop_goods_info::has_is_selled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_has_is_selled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_has_is_selled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_is_selled() {
  is_selled_ = 0;
  clear_has_is_selled();
}
inline ::google::protobuf::int32 climbtower_magic_shop_info_magic_shop_goods_info::is_selled() const {
  return is_selled_;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_is_selled(::google::protobuf::int32 value) {
  set_has_is_selled();
  is_selled_ = value;
}

// required int32 goods_pos = 4;
inline bool climbtower_magic_shop_info_magic_shop_goods_info::has_goods_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_has_goods_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_has_goods_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_goods_pos() {
  goods_pos_ = 0;
  clear_has_goods_pos();
}
inline ::google::protobuf::int32 climbtower_magic_shop_info_magic_shop_goods_info::goods_pos() const {
  return goods_pos_;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_goods_pos(::google::protobuf::int32 value) {
  set_has_goods_pos();
  goods_pos_ = value;
}

// -------------------------------------------------------------------

// climbtower_magic_shop_info

// required int32 shop_id = 1;
inline bool climbtower_magic_shop_info::has_shop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void climbtower_magic_shop_info::set_has_shop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void climbtower_magic_shop_info::clear_has_shop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void climbtower_magic_shop_info::clear_shop_id() {
  shop_id_ = 0;
  clear_has_shop_id();
}
inline ::google::protobuf::int32 climbtower_magic_shop_info::shop_id() const {
  return shop_id_;
}
inline void climbtower_magic_shop_info::set_shop_id(::google::protobuf::int32 value) {
  set_has_shop_id();
  shop_id_ = value;
}

// required int32 level = 2;
inline bool climbtower_magic_shop_info::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void climbtower_magic_shop_info::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void climbtower_magic_shop_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void climbtower_magic_shop_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 climbtower_magic_shop_info::level() const {
  return level_;
}
inline void climbtower_magic_shop_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated .PB.climbtower_magic_shop_info.magic_shop_goods_info goods = 3;
inline int climbtower_magic_shop_info::goods_size() const {
  return goods_.size();
}
inline void climbtower_magic_shop_info::clear_goods() {
  goods_.Clear();
}
inline const ::PB::climbtower_magic_shop_info_magic_shop_goods_info& climbtower_magic_shop_info::goods(int index) const {
  return goods_.Get(index);
}
inline ::PB::climbtower_magic_shop_info_magic_shop_goods_info* climbtower_magic_shop_info::mutable_goods(int index) {
  return goods_.Mutable(index);
}
inline ::PB::climbtower_magic_shop_info_magic_shop_goods_info* climbtower_magic_shop_info::add_goods() {
  return goods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info_magic_shop_goods_info >&
climbtower_magic_shop_info::goods() const {
  return goods_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info_magic_shop_goods_info >*
climbtower_magic_shop_info::mutable_goods() {
  return &goods_;
}

// -------------------------------------------------------------------

// db_hero_trial_config

// optional int32 free_refresh_times = 1;
inline bool db_hero_trial_config::has_free_refresh_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_hero_trial_config::set_has_free_refresh_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_hero_trial_config::clear_has_free_refresh_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_hero_trial_config::clear_free_refresh_times() {
  free_refresh_times_ = 0;
  clear_has_free_refresh_times();
}
inline ::google::protobuf::int32 db_hero_trial_config::free_refresh_times() const {
  return free_refresh_times_;
}
inline void db_hero_trial_config::set_free_refresh_times(::google::protobuf::int32 value) {
  set_has_free_refresh_times();
  free_refresh_times_ = value;
}

// optional int32 pay_refresh_times = 2;
inline bool db_hero_trial_config::has_pay_refresh_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_hero_trial_config::set_has_pay_refresh_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_hero_trial_config::clear_has_pay_refresh_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_hero_trial_config::clear_pay_refresh_times() {
  pay_refresh_times_ = 0;
  clear_has_pay_refresh_times();
}
inline ::google::protobuf::int32 db_hero_trial_config::pay_refresh_times() const {
  return pay_refresh_times_;
}
inline void db_hero_trial_config::set_pay_refresh_times(::google::protobuf::int32 value) {
  set_has_pay_refresh_times();
  pay_refresh_times_ = value;
}

// optional int32 cur_hero_tid = 3;
inline bool db_hero_trial_config::has_cur_hero_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_hero_trial_config::set_has_cur_hero_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_hero_trial_config::clear_has_cur_hero_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_hero_trial_config::clear_cur_hero_tid() {
  cur_hero_tid_ = 0;
  clear_has_cur_hero_tid();
}
inline ::google::protobuf::int32 db_hero_trial_config::cur_hero_tid() const {
  return cur_hero_tid_;
}
inline void db_hero_trial_config::set_cur_hero_tid(::google::protobuf::int32 value) {
  set_has_cur_hero_tid();
  cur_hero_tid_ = value;
}

// -------------------------------------------------------------------

// level_shopid

// required int32 level = 1;
inline bool level_shopid::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void level_shopid::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void level_shopid::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void level_shopid::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 level_shopid::level() const {
  return level_;
}
inline void level_shopid::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 shop_id = 2;
inline bool level_shopid::has_shop_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void level_shopid::set_has_shop_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void level_shopid::clear_has_shop_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void level_shopid::clear_shop_id() {
  shop_id_ = 0;
  clear_has_shop_id();
}
inline ::google::protobuf::int32 level_shopid::shop_id() const {
  return shop_id_;
}
inline void level_shopid::set_shop_id(::google::protobuf::int32 value) {
  set_has_shop_id();
  shop_id_ = value;
}

// -------------------------------------------------------------------

// db_strategy_info

// optional int32 strategy_tid = 1;
inline bool db_strategy_info::has_strategy_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_strategy_info::set_has_strategy_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_strategy_info::clear_has_strategy_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_strategy_info::clear_strategy_tid() {
  strategy_tid_ = 0;
  clear_has_strategy_tid();
}
inline ::google::protobuf::int32 db_strategy_info::strategy_tid() const {
  return strategy_tid_;
}
inline void db_strategy_info::set_strategy_tid(::google::protobuf::int32 value) {
  set_has_strategy_tid();
  strategy_tid_ = value;
}

// optional int32 level = 2;
inline bool db_strategy_info::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_strategy_info::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_strategy_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_strategy_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 db_strategy_info::level() const {
  return level_;
}
inline void db_strategy_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 chip_count = 3;
inline bool db_strategy_info::has_chip_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_strategy_info::set_has_chip_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_strategy_info::clear_has_chip_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_strategy_info::clear_chip_count() {
  chip_count_ = 0;
  clear_has_chip_count();
}
inline ::google::protobuf::int32 db_strategy_info::chip_count() const {
  return chip_count_;
}
inline void db_strategy_info::set_chip_count(::google::protobuf::int32 value) {
  set_has_chip_count();
  chip_count_ = value;
}

// optional int32 star_level = 4;
inline bool db_strategy_info::has_star_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_strategy_info::set_has_star_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_strategy_info::clear_has_star_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_strategy_info::clear_star_level() {
  star_level_ = 0;
  clear_has_star_level();
}
inline ::google::protobuf::int32 db_strategy_info::star_level() const {
  return star_level_;
}
inline void db_strategy_info::set_star_level(::google::protobuf::int32 value) {
  set_has_star_level();
  star_level_ = value;
}

// optional int32 blessing_num = 5;
inline bool db_strategy_info::has_blessing_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_strategy_info::set_has_blessing_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_strategy_info::clear_has_blessing_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_strategy_info::clear_blessing_num() {
  blessing_num_ = 0;
  clear_has_blessing_num();
}
inline ::google::protobuf::int32 db_strategy_info::blessing_num() const {
  return blessing_num_;
}
inline void db_strategy_info::set_blessing_num(::google::protobuf::int32 value) {
  set_has_blessing_num();
  blessing_num_ = value;
}

// -------------------------------------------------------------------

// db_strategy_vectors

// optional .PB.GPS_TYPE type = 1 [default = GUT_STRATEGIES];
inline bool db_strategy_vectors::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_strategy_vectors::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_strategy_vectors::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_strategy_vectors::clear_type() {
  type_ = 25;
  clear_has_type();
}
inline ::PB::GPS_TYPE db_strategy_vectors::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void db_strategy_vectors::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.db_strategy_info strategies = 2;
inline int db_strategy_vectors::strategies_size() const {
  return strategies_.size();
}
inline void db_strategy_vectors::clear_strategies() {
  strategies_.Clear();
}
inline const ::PB::db_strategy_info& db_strategy_vectors::strategies(int index) const {
  return strategies_.Get(index);
}
inline ::PB::db_strategy_info* db_strategy_vectors::mutable_strategies(int index) {
  return strategies_.Mutable(index);
}
inline ::PB::db_strategy_info* db_strategy_vectors::add_strategies() {
  return strategies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_strategy_info >&
db_strategy_vectors::strategies() const {
  return strategies_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_strategy_info >*
db_strategy_vectors::mutable_strategies() {
  return &strategies_;
}

// -------------------------------------------------------------------

// db_surface_soul

// optional int32 soul_tid = 1;
inline bool db_surface_soul::has_soul_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_surface_soul::set_has_soul_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_surface_soul::clear_has_soul_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_surface_soul::clear_soul_tid() {
  soul_tid_ = 0;
  clear_has_soul_tid();
}
inline ::google::protobuf::int32 db_surface_soul::soul_tid() const {
  return soul_tid_;
}
inline void db_surface_soul::set_soul_tid(::google::protobuf::int32 value) {
  set_has_soul_tid();
  soul_tid_ = value;
}

// optional int32 train_value = 2;
inline bool db_surface_soul::has_train_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_surface_soul::set_has_train_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_surface_soul::clear_has_train_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_surface_soul::clear_train_value() {
  train_value_ = 0;
  clear_has_train_value();
}
inline ::google::protobuf::int32 db_surface_soul::train_value() const {
  return train_value_;
}
inline void db_surface_soul::set_train_value(::google::protobuf::int32 value) {
  set_has_train_value();
  train_value_ = value;
}

// -------------------------------------------------------------------

// db_wing_refine_soul

// optional int32 surface_tid = 1;
inline bool db_wing_refine_soul::has_surface_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_wing_refine_soul::set_has_surface_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_wing_refine_soul::clear_has_surface_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_wing_refine_soul::clear_surface_tid() {
  surface_tid_ = 0;
  clear_has_surface_tid();
}
inline ::google::protobuf::int32 db_wing_refine_soul::surface_tid() const {
  return surface_tid_;
}
inline void db_wing_refine_soul::set_surface_tid(::google::protobuf::int32 value) {
  set_has_surface_tid();
  surface_tid_ = value;
}

// optional int32 train_level = 2;
inline bool db_wing_refine_soul::has_train_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_wing_refine_soul::set_has_train_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_wing_refine_soul::clear_has_train_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_wing_refine_soul::clear_train_level() {
  train_level_ = 0;
  clear_has_train_level();
}
inline ::google::protobuf::int32 db_wing_refine_soul::train_level() const {
  return train_level_;
}
inline void db_wing_refine_soul::set_train_level(::google::protobuf::int32 value) {
  set_has_train_level();
  train_level_ = value;
}

// repeated .PB.db_surface_soul souls = 3;
inline int db_wing_refine_soul::souls_size() const {
  return souls_.size();
}
inline void db_wing_refine_soul::clear_souls() {
  souls_.Clear();
}
inline const ::PB::db_surface_soul& db_wing_refine_soul::souls(int index) const {
  return souls_.Get(index);
}
inline ::PB::db_surface_soul* db_wing_refine_soul::mutable_souls(int index) {
  return souls_.Mutable(index);
}
inline ::PB::db_surface_soul* db_wing_refine_soul::add_souls() {
  return souls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul >&
db_wing_refine_soul::souls() const {
  return souls_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul >*
db_wing_refine_soul::mutable_souls() {
  return &souls_;
}

// -------------------------------------------------------------------

// db_refine_surfaces

// optional .PB.GPS_TYPE type = 1 [default = GUT_WING_REFINE_SOUL];
inline bool db_refine_surfaces::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_refine_surfaces::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_refine_surfaces::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_refine_surfaces::clear_type() {
  type_ = 26;
  clear_has_type();
}
inline ::PB::GPS_TYPE db_refine_surfaces::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void db_refine_surfaces::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.db_wing_refine_soul surfaces = 2;
inline int db_refine_surfaces::surfaces_size() const {
  return surfaces_.size();
}
inline void db_refine_surfaces::clear_surfaces() {
  surfaces_.Clear();
}
inline const ::PB::db_wing_refine_soul& db_refine_surfaces::surfaces(int index) const {
  return surfaces_.Get(index);
}
inline ::PB::db_wing_refine_soul* db_refine_surfaces::mutable_surfaces(int index) {
  return surfaces_.Mutable(index);
}
inline ::PB::db_wing_refine_soul* db_refine_surfaces::add_surfaces() {
  return surfaces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_wing_refine_soul >&
db_refine_surfaces::surfaces() const {
  return surfaces_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_wing_refine_soul >*
db_refine_surfaces::mutable_surfaces() {
  return &surfaces_;
}

// -------------------------------------------------------------------

// db_equip_soul

// optional int32 property_tid = 1;
inline bool db_equip_soul::has_property_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_equip_soul::set_has_property_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_equip_soul::clear_has_property_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_equip_soul::clear_property_tid() {
  property_tid_ = 0;
  clear_has_property_tid();
}
inline ::google::protobuf::int32 db_equip_soul::property_tid() const {
  return property_tid_;
}
inline void db_equip_soul::set_property_tid(::google::protobuf::int32 value) {
  set_has_property_tid();
  property_tid_ = value;
}

// optional int32 exp = 2;
inline bool db_equip_soul::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_equip_soul::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_equip_soul::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_equip_soul::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 db_equip_soul::exp() const {
  return exp_;
}
inline void db_equip_soul::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 level = 3;
inline bool db_equip_soul::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_equip_soul::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_equip_soul::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_equip_soul::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 db_equip_soul::level() const {
  return level_;
}
inline void db_equip_soul::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// db_equip_fixed_data

// optional int32 rank = 1;
inline bool db_equip_fixed_data::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_equip_fixed_data::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_equip_fixed_data::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_equip_fixed_data::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 db_equip_fixed_data::rank() const {
  return rank_;
}
inline void db_equip_fixed_data::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// repeated int32 mingwens = 2;
inline int db_equip_fixed_data::mingwens_size() const {
  return mingwens_.size();
}
inline void db_equip_fixed_data::clear_mingwens() {
  mingwens_.Clear();
}
inline ::google::protobuf::int32 db_equip_fixed_data::mingwens(int index) const {
  return mingwens_.Get(index);
}
inline void db_equip_fixed_data::set_mingwens(int index, ::google::protobuf::int32 value) {
  mingwens_.Set(index, value);
}
inline void db_equip_fixed_data::add_mingwens(::google::protobuf::int32 value) {
  mingwens_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
db_equip_fixed_data::mingwens() const {
  return mingwens_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
db_equip_fixed_data::mutable_mingwens() {
  return &mingwens_;
}

// repeated .PB.db_equip_soul souls = 3;
inline int db_equip_fixed_data::souls_size() const {
  return souls_.size();
}
inline void db_equip_fixed_data::clear_souls() {
  souls_.Clear();
}
inline const ::PB::db_equip_soul& db_equip_fixed_data::souls(int index) const {
  return souls_.Get(index);
}
inline ::PB::db_equip_soul* db_equip_fixed_data::mutable_souls(int index) {
  return souls_.Mutable(index);
}
inline ::PB::db_equip_soul* db_equip_fixed_data::add_souls() {
  return souls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_equip_soul >&
db_equip_fixed_data::souls() const {
  return souls_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_equip_soul >*
db_equip_fixed_data::mutable_souls() {
  return &souls_;
}

// -------------------------------------------------------------------

// db_magic_weapon_property

// optional int32 property_tid = 1;
inline bool db_magic_weapon_property::has_property_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_magic_weapon_property::set_has_property_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_magic_weapon_property::clear_has_property_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_magic_weapon_property::clear_property_tid() {
  property_tid_ = 0;
  clear_has_property_tid();
}
inline ::google::protobuf::int32 db_magic_weapon_property::property_tid() const {
  return property_tid_;
}
inline void db_magic_weapon_property::set_property_tid(::google::protobuf::int32 value) {
  set_has_property_tid();
  property_tid_ = value;
}

// optional int32 exp_value = 2;
inline bool db_magic_weapon_property::has_exp_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_magic_weapon_property::set_has_exp_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_magic_weapon_property::clear_has_exp_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_magic_weapon_property::clear_exp_value() {
  exp_value_ = 0;
  clear_has_exp_value();
}
inline ::google::protobuf::int32 db_magic_weapon_property::exp_value() const {
  return exp_value_;
}
inline void db_magic_weapon_property::set_exp_value(::google::protobuf::int32 value) {
  set_has_exp_value();
  exp_value_ = value;
}

// optional int32 level = 3;
inline bool db_magic_weapon_property::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_magic_weapon_property::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_magic_weapon_property::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_magic_weapon_property::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 db_magic_weapon_property::level() const {
  return level_;
}
inline void db_magic_weapon_property::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 end_time = 4;
inline bool db_magic_weapon_property::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_magic_weapon_property::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_magic_weapon_property::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_magic_weapon_property::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline ::google::protobuf::int32 db_magic_weapon_property::end_time() const {
  return end_time_;
}
inline void db_magic_weapon_property::set_end_time(::google::protobuf::int32 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional int32 multime = 5;
inline bool db_magic_weapon_property::has_multime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_magic_weapon_property::set_has_multime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_magic_weapon_property::clear_has_multime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_magic_weapon_property::clear_multime() {
  multime_ = 0;
  clear_has_multime();
}
inline ::google::protobuf::int32 db_magic_weapon_property::multime() const {
  return multime_;
}
inline void db_magic_weapon_property::set_multime(::google::protobuf::int32 value) {
  set_has_multime();
  multime_ = value;
}

// -------------------------------------------------------------------

// db_magic_weapon_refine_group_refine

// optional int32 train_level = 1;
inline bool db_magic_weapon_refine_group_refine::has_train_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_magic_weapon_refine_group_refine::set_has_train_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_magic_weapon_refine_group_refine::clear_has_train_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_magic_weapon_refine_group_refine::clear_train_level() {
  train_level_ = 0;
  clear_has_train_level();
}
inline ::google::protobuf::int32 db_magic_weapon_refine_group_refine::train_level() const {
  return train_level_;
}
inline void db_magic_weapon_refine_group_refine::set_train_level(::google::protobuf::int32 value) {
  set_has_train_level();
  train_level_ = value;
}

// optional int32 blessing_value = 2;
inline bool db_magic_weapon_refine_group_refine::has_blessing_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_magic_weapon_refine_group_refine::set_has_blessing_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_magic_weapon_refine_group_refine::clear_has_blessing_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_magic_weapon_refine_group_refine::clear_blessing_value() {
  blessing_value_ = 0;
  clear_has_blessing_value();
}
inline ::google::protobuf::int32 db_magic_weapon_refine_group_refine::blessing_value() const {
  return blessing_value_;
}
inline void db_magic_weapon_refine_group_refine::set_blessing_value(::google::protobuf::int32 value) {
  set_has_blessing_value();
  blessing_value_ = value;
}

// -------------------------------------------------------------------

// db_magic_weapon_refine_group

// repeated .PB.db_magic_weapon.refine_group.refine refines = 1;
inline int db_magic_weapon_refine_group::refines_size() const {
  return refines_.size();
}
inline void db_magic_weapon_refine_group::clear_refines() {
  refines_.Clear();
}
inline const ::PB::db_magic_weapon_refine_group_refine& db_magic_weapon_refine_group::refines(int index) const {
  return refines_.Get(index);
}
inline ::PB::db_magic_weapon_refine_group_refine* db_magic_weapon_refine_group::mutable_refines(int index) {
  return refines_.Mutable(index);
}
inline ::PB::db_magic_weapon_refine_group_refine* db_magic_weapon_refine_group::add_refines() {
  return refines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group_refine >&
db_magic_weapon_refine_group::refines() const {
  return refines_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group_refine >*
db_magic_weapon_refine_group::mutable_refines() {
  return &refines_;
}

// -------------------------------------------------------------------

// db_magic_weapon

// optional int32 magic_tid = 1;
inline bool db_magic_weapon::has_magic_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_magic_weapon::set_has_magic_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_magic_weapon::clear_has_magic_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_magic_weapon::clear_magic_tid() {
  magic_tid_ = 0;
  clear_has_magic_tid();
}
inline ::google::protobuf::int32 db_magic_weapon::magic_tid() const {
  return magic_tid_;
}
inline void db_magic_weapon::set_magic_tid(::google::protobuf::int32 value) {
  set_has_magic_tid();
  magic_tid_ = value;
}

// optional bool active = 2;
inline bool db_magic_weapon::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_magic_weapon::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_magic_weapon::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_magic_weapon::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool db_magic_weapon::active() const {
  return active_;
}
inline void db_magic_weapon::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// repeated .PB.db_magic_weapon.property properties = 3;
inline int db_magic_weapon::properties_size() const {
  return properties_.size();
}
inline void db_magic_weapon::clear_properties() {
  properties_.Clear();
}
inline const ::PB::db_magic_weapon_property& db_magic_weapon::properties(int index) const {
  return properties_.Get(index);
}
inline ::PB::db_magic_weapon_property* db_magic_weapon::mutable_properties(int index) {
  return properties_.Mutable(index);
}
inline ::PB::db_magic_weapon_property* db_magic_weapon::add_properties() {
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_property >&
db_magic_weapon::properties() const {
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_property >*
db_magic_weapon::mutable_properties() {
  return &properties_;
}

// repeated .PB.db_magic_weapon.refine_group refine_groups = 4;
inline int db_magic_weapon::refine_groups_size() const {
  return refine_groups_.size();
}
inline void db_magic_weapon::clear_refine_groups() {
  refine_groups_.Clear();
}
inline const ::PB::db_magic_weapon_refine_group& db_magic_weapon::refine_groups(int index) const {
  return refine_groups_.Get(index);
}
inline ::PB::db_magic_weapon_refine_group* db_magic_weapon::mutable_refine_groups(int index) {
  return refine_groups_.Mutable(index);
}
inline ::PB::db_magic_weapon_refine_group* db_magic_weapon::add_refine_groups() {
  return refine_groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group >&
db_magic_weapon::refine_groups() const {
  return refine_groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group >*
db_magic_weapon::mutable_refine_groups() {
  return &refine_groups_;
}

// -------------------------------------------------------------------

// db_magic_weapons

// repeated .PB.db_magic_weapon weapons = 1;
inline int db_magic_weapons::weapons_size() const {
  return weapons_.size();
}
inline void db_magic_weapons::clear_weapons() {
  weapons_.Clear();
}
inline const ::PB::db_magic_weapon& db_magic_weapons::weapons(int index) const {
  return weapons_.Get(index);
}
inline ::PB::db_magic_weapon* db_magic_weapons::mutable_weapons(int index) {
  return weapons_.Mutable(index);
}
inline ::PB::db_magic_weapon* db_magic_weapons::add_weapons() {
  return weapons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon >&
db_magic_weapons::weapons() const {
  return weapons_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon >*
db_magic_weapons::mutable_weapons() {
  return &weapons_;
}

// optional int32 summoned_weapon_tid = 2;
inline bool db_magic_weapons::has_summoned_weapon_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_magic_weapons::set_has_summoned_weapon_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_magic_weapons::clear_has_summoned_weapon_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_magic_weapons::clear_summoned_weapon_tid() {
  summoned_weapon_tid_ = 0;
  clear_has_summoned_weapon_tid();
}
inline ::google::protobuf::int32 db_magic_weapons::summoned_weapon_tid() const {
  return summoned_weapon_tid_;
}
inline void db_magic_weapons::set_summoned_weapon_tid(::google::protobuf::int32 value) {
  set_has_summoned_weapon_tid();
  summoned_weapon_tid_ = value;
}

// -------------------------------------------------------------------

// db_general_soul

// optional int32 general_tid = 1;
inline bool db_general_soul::has_general_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_general_soul::set_has_general_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_general_soul::clear_has_general_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_general_soul::clear_general_tid() {
  general_tid_ = 0;
  clear_has_general_tid();
}
inline ::google::protobuf::int32 db_general_soul::general_tid() const {
  return general_tid_;
}
inline void db_general_soul::set_general_tid(::google::protobuf::int32 value) {
  set_has_general_tid();
  general_tid_ = value;
}

// optional int32 level = 2;
inline bool db_general_soul::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_general_soul::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_general_soul::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_general_soul::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 db_general_soul::level() const {
  return level_;
}
inline void db_general_soul::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 experience = 3;
inline bool db_general_soul::has_experience() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_general_soul::set_has_experience() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_general_soul::clear_has_experience() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_general_soul::clear_experience() {
  experience_ = 0;
  clear_has_experience();
}
inline ::google::protobuf::int32 db_general_soul::experience() const {
  return experience_;
}
inline void db_general_soul::set_experience(::google::protobuf::int32 value) {
  set_has_experience();
  experience_ = value;
}

// optional .PB.general_list inventory = 4;
inline bool db_general_soul::has_inventory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_general_soul::set_has_inventory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_general_soul::clear_has_inventory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_general_soul::clear_inventory() {
  if (inventory_ != NULL) inventory_->::PB::general_list::Clear();
  clear_has_inventory();
}
inline const ::PB::general_list& db_general_soul::inventory() const {
  return inventory_ != NULL ? *inventory_ : *default_instance_->inventory_;
}
inline ::PB::general_list* db_general_soul::mutable_inventory() {
  set_has_inventory();
  if (inventory_ == NULL) inventory_ = new ::PB::general_list;
  return inventory_;
}
inline ::PB::general_list* db_general_soul::release_inventory() {
  clear_has_inventory();
  ::PB::general_list* temp = inventory_;
  inventory_ = NULL;
  return temp;
}
inline void db_general_soul::set_allocated_inventory(::PB::general_list* inventory) {
  delete inventory_;
  inventory_ = inventory;
  if (inventory) {
    set_has_inventory();
  } else {
    clear_has_inventory();
  }
}

// optional .PB.general_list soul_holes = 5;
inline bool db_general_soul::has_soul_holes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_general_soul::set_has_soul_holes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_general_soul::clear_has_soul_holes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_general_soul::clear_soul_holes() {
  if (soul_holes_ != NULL) soul_holes_->::PB::general_list::Clear();
  clear_has_soul_holes();
}
inline const ::PB::general_list& db_general_soul::soul_holes() const {
  return soul_holes_ != NULL ? *soul_holes_ : *default_instance_->soul_holes_;
}
inline ::PB::general_list* db_general_soul::mutable_soul_holes() {
  set_has_soul_holes();
  if (soul_holes_ == NULL) soul_holes_ = new ::PB::general_list;
  return soul_holes_;
}
inline ::PB::general_list* db_general_soul::release_soul_holes() {
  clear_has_soul_holes();
  ::PB::general_list* temp = soul_holes_;
  soul_holes_ = NULL;
  return temp;
}
inline void db_general_soul::set_allocated_soul_holes(::PB::general_list* soul_holes) {
  delete soul_holes_;
  soul_holes_ = soul_holes;
  if (soul_holes) {
    set_has_soul_holes();
  } else {
    clear_has_soul_holes();
  }
}

// -------------------------------------------------------------------

// db_general_souls

// repeated .PB.db_general_soul generals = 1;
inline int db_general_souls::generals_size() const {
  return generals_.size();
}
inline void db_general_souls::clear_generals() {
  generals_.Clear();
}
inline const ::PB::db_general_soul& db_general_souls::generals(int index) const {
  return generals_.Get(index);
}
inline ::PB::db_general_soul* db_general_souls::mutable_generals(int index) {
  return generals_.Mutable(index);
}
inline ::PB::db_general_soul* db_general_souls::add_generals() {
  return generals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_general_soul >&
db_general_souls::generals() const {
  return generals_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_general_soul >*
db_general_souls::mutable_generals() {
  return &generals_;
}

// -------------------------------------------------------------------

// wine_game_history

// optional int32 game_time = 1;
inline bool wine_game_history::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wine_game_history::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wine_game_history::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wine_game_history::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
inline ::google::protobuf::int32 wine_game_history::game_time() const {
  return game_time_;
}
inline void wine_game_history::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
}

// optional int32 mine_status = 2;
inline bool wine_game_history::has_mine_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wine_game_history::set_has_mine_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wine_game_history::clear_has_mine_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wine_game_history::clear_mine_status() {
  mine_status_ = 0;
  clear_has_mine_status();
}
inline ::google::protobuf::int32 wine_game_history::mine_status() const {
  return mine_status_;
}
inline void wine_game_history::set_mine_status(::google::protobuf::int32 value) {
  set_has_mine_status();
  mine_status_ = value;
}

// optional int32 peer_status = 3;
inline bool wine_game_history::has_peer_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wine_game_history::set_has_peer_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wine_game_history::clear_has_peer_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wine_game_history::clear_peer_status() {
  peer_status_ = 0;
  clear_has_peer_status();
}
inline ::google::protobuf::int32 wine_game_history::peer_status() const {
  return peer_status_;
}
inline void wine_game_history::set_peer_status(::google::protobuf::int32 value) {
  set_has_peer_status();
  peer_status_ = value;
}

// optional int32 game_result = 4;
inline bool wine_game_history::has_game_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wine_game_history::set_has_game_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wine_game_history::clear_has_game_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wine_game_history::clear_game_result() {
  game_result_ = 0;
  clear_has_game_result();
}
inline ::google::protobuf::int32 wine_game_history::game_result() const {
  return game_result_;
}
inline void wine_game_history::set_game_result(::google::protobuf::int32 value) {
  set_has_game_result();
  game_result_ = value;
}

// optional .PB.player_id_name peer_info = 5;
inline bool wine_game_history::has_peer_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wine_game_history::set_has_peer_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wine_game_history::clear_has_peer_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wine_game_history::clear_peer_info() {
  if (peer_info_ != NULL) peer_info_->::PB::player_id_name::Clear();
  clear_has_peer_info();
}
inline const ::PB::player_id_name& wine_game_history::peer_info() const {
  return peer_info_ != NULL ? *peer_info_ : *default_instance_->peer_info_;
}
inline ::PB::player_id_name* wine_game_history::mutable_peer_info() {
  set_has_peer_info();
  if (peer_info_ == NULL) peer_info_ = new ::PB::player_id_name;
  return peer_info_;
}
inline ::PB::player_id_name* wine_game_history::release_peer_info() {
  clear_has_peer_info();
  ::PB::player_id_name* temp = peer_info_;
  peer_info_ = NULL;
  return temp;
}
inline void wine_game_history::set_allocated_peer_info(::PB::player_id_name* peer_info) {
  delete peer_info_;
  peer_info_ = peer_info;
  if (peer_info) {
    set_has_peer_info();
  } else {
    clear_has_peer_info();
  }
}

// -------------------------------------------------------------------

// pixiu_service_buy_record

// optional bytes product_id = 1;
inline bool pixiu_service_buy_record::has_product_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pixiu_service_buy_record::set_has_product_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pixiu_service_buy_record::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pixiu_service_buy_record::clear_product_id() {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    product_id_->clear();
  }
  clear_has_product_id();
}
inline const ::std::string& pixiu_service_buy_record::product_id() const {
  return *product_id_;
}
inline void pixiu_service_buy_record::set_product_id(const ::std::string& value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void pixiu_service_buy_record::set_product_id(const char* value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void pixiu_service_buy_record::set_product_id(const void* value, size_t size) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pixiu_service_buy_record::mutable_product_id() {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  return product_id_;
}
inline ::std::string* pixiu_service_buy_record::release_product_id() {
  clear_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = product_id_;
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pixiu_service_buy_record::set_allocated_product_id(::std::string* product_id) {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    delete product_id_;
  }
  if (product_id) {
    set_has_product_id();
    product_id_ = product_id;
  } else {
    clear_has_product_id();
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 counts = 2;
inline bool pixiu_service_buy_record::has_counts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pixiu_service_buy_record::set_has_counts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pixiu_service_buy_record::clear_has_counts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pixiu_service_buy_record::clear_counts() {
  counts_ = 0;
  clear_has_counts();
}
inline ::google::protobuf::int32 pixiu_service_buy_record::counts() const {
  return counts_;
}
inline void pixiu_service_buy_record::set_counts(::google::protobuf::int32 value) {
  set_has_counts();
  counts_ = value;
}

// -------------------------------------------------------------------

// npt_test

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEST];
inline bool npt_test::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_test::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_test::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_test::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_test::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_test::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// npt_response

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RESPONSE];
inline bool npt_response::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_response::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_response::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_response::clear_type() {
  type_ = 3;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_response::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_response::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 retcode = 2;
inline bool npt_response::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_response::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_response::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_response::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_response::retcode() const {
  return retcode_;
}
inline void npt_response::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional int32 request_type = 3;
inline bool npt_response::has_request_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_response::set_has_request_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_response::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_response::clear_request_type() {
  request_type_ = 0;
  clear_has_request_type();
}
inline ::google::protobuf::int32 npt_response::request_type() const {
  return request_type_;
}
inline void npt_response::set_request_type(::google::protobuf::int32 value) {
  set_has_request_type();
  request_type_ = value;
}

// optional int32 param1 = 4;
inline bool npt_response::has_param1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_response::set_has_param1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_response::clear_has_param1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_response::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 npt_response::param1() const {
  return param1_;
}
inline void npt_response::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// -------------------------------------------------------------------

// npt_corps_appoint

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_APPOINT];
inline bool npt_corps_appoint::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_corps_appoint::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_corps_appoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_corps_appoint::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_corps_appoint::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_corps_appoint::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 dst = 2;
inline bool npt_corps_appoint::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_corps_appoint::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_corps_appoint::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_corps_appoint::clear_dst() {
  dst_ = GOOGLE_LONGLONG(0);
  clear_has_dst();
}
inline ::google::protobuf::int64 npt_corps_appoint::dst() const {
  return dst_;
}
inline void npt_corps_appoint::set_dst(::google::protobuf::int64 value) {
  set_has_dst();
  dst_ = value;
}

// required .PB.npt_corps_appoint.CORPS_APPOINT_OP op = 3;
inline bool npt_corps_appoint::has_op() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_corps_appoint::set_has_op() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_corps_appoint::clear_has_op() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_corps_appoint::clear_op() {
  op_ = 1;
  clear_has_op();
}
inline ::PB::npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::op() const {
  return static_cast< ::PB::npt_corps_appoint_CORPS_APPOINT_OP >(op_);
}
inline void npt_corps_appoint::set_op(::PB::npt_corps_appoint_CORPS_APPOINT_OP value) {
  assert(::PB::npt_corps_appoint_CORPS_APPOINT_OP_IsValid(value));
  set_has_op();
  op_ = value;
}

// optional int32 pos = 4;
inline bool npt_corps_appoint::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_corps_appoint::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_corps_appoint::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_corps_appoint::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 npt_corps_appoint::pos() const {
  return pos_;
}
inline void npt_corps_appoint::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional bytes announce = 5;
inline bool npt_corps_appoint::has_announce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_corps_appoint::set_has_announce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_corps_appoint::clear_has_announce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_corps_appoint::clear_announce() {
  if (announce_ != &::google::protobuf::internal::kEmptyString) {
    announce_->clear();
  }
  clear_has_announce();
}
inline const ::std::string& npt_corps_appoint::announce() const {
  return *announce_;
}
inline void npt_corps_appoint::set_announce(const ::std::string& value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
}
inline void npt_corps_appoint::set_announce(const char* value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
}
inline void npt_corps_appoint::set_announce(const void* value, size_t size) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  announce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_corps_appoint::mutable_announce() {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  return announce_;
}
inline ::std::string* npt_corps_appoint::release_announce() {
  clear_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = announce_;
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_corps_appoint::set_allocated_announce(::std::string* announce) {
  if (announce_ != &::google::protobuf::internal::kEmptyString) {
    delete announce_;
  }
  if (announce) {
    set_has_announce();
    announce_ = announce;
  } else {
    clear_has_announce();
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes srcname = 6;
inline bool npt_corps_appoint::has_srcname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_corps_appoint::set_has_srcname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_corps_appoint::clear_has_srcname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_corps_appoint::clear_srcname() {
  if (srcname_ != &::google::protobuf::internal::kEmptyString) {
    srcname_->clear();
  }
  clear_has_srcname();
}
inline const ::std::string& npt_corps_appoint::srcname() const {
  return *srcname_;
}
inline void npt_corps_appoint::set_srcname(const ::std::string& value) {
  set_has_srcname();
  if (srcname_ == &::google::protobuf::internal::kEmptyString) {
    srcname_ = new ::std::string;
  }
  srcname_->assign(value);
}
inline void npt_corps_appoint::set_srcname(const char* value) {
  set_has_srcname();
  if (srcname_ == &::google::protobuf::internal::kEmptyString) {
    srcname_ = new ::std::string;
  }
  srcname_->assign(value);
}
inline void npt_corps_appoint::set_srcname(const void* value, size_t size) {
  set_has_srcname();
  if (srcname_ == &::google::protobuf::internal::kEmptyString) {
    srcname_ = new ::std::string;
  }
  srcname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_corps_appoint::mutable_srcname() {
  set_has_srcname();
  if (srcname_ == &::google::protobuf::internal::kEmptyString) {
    srcname_ = new ::std::string;
  }
  return srcname_;
}
inline ::std::string* npt_corps_appoint::release_srcname() {
  clear_has_srcname();
  if (srcname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = srcname_;
    srcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_corps_appoint::set_allocated_srcname(::std::string* srcname) {
  if (srcname_ != &::google::protobuf::internal::kEmptyString) {
    delete srcname_;
  }
  if (srcname) {
    set_has_srcname();
    srcname_ = srcname;
  } else {
    clear_has_srcname();
    srcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes dstname = 7;
inline bool npt_corps_appoint::has_dstname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_corps_appoint::set_has_dstname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_corps_appoint::clear_has_dstname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_corps_appoint::clear_dstname() {
  if (dstname_ != &::google::protobuf::internal::kEmptyString) {
    dstname_->clear();
  }
  clear_has_dstname();
}
inline const ::std::string& npt_corps_appoint::dstname() const {
  return *dstname_;
}
inline void npt_corps_appoint::set_dstname(const ::std::string& value) {
  set_has_dstname();
  if (dstname_ == &::google::protobuf::internal::kEmptyString) {
    dstname_ = new ::std::string;
  }
  dstname_->assign(value);
}
inline void npt_corps_appoint::set_dstname(const char* value) {
  set_has_dstname();
  if (dstname_ == &::google::protobuf::internal::kEmptyString) {
    dstname_ = new ::std::string;
  }
  dstname_->assign(value);
}
inline void npt_corps_appoint::set_dstname(const void* value, size_t size) {
  set_has_dstname();
  if (dstname_ == &::google::protobuf::internal::kEmptyString) {
    dstname_ = new ::std::string;
  }
  dstname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_corps_appoint::mutable_dstname() {
  set_has_dstname();
  if (dstname_ == &::google::protobuf::internal::kEmptyString) {
    dstname_ = new ::std::string;
  }
  return dstname_;
}
inline ::std::string* npt_corps_appoint::release_dstname() {
  clear_has_dstname();
  if (dstname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dstname_;
    dstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_corps_appoint::set_allocated_dstname(::std::string* dstname) {
  if (dstname_ != &::google::protobuf::internal::kEmptyString) {
    delete dstname_;
  }
  if (dstname) {
    set_has_dstname();
    dstname_ = dstname;
  } else {
    clear_has_dstname();
    dstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 src = 8;
inline bool npt_corps_appoint::has_src() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_corps_appoint::set_has_src() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_corps_appoint::clear_has_src() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_corps_appoint::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 npt_corps_appoint::src() const {
  return src_;
}
inline void npt_corps_appoint::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
}

// optional bytes corpsname = 9;
inline bool npt_corps_appoint::has_corpsname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void npt_corps_appoint::set_has_corpsname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void npt_corps_appoint::clear_has_corpsname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void npt_corps_appoint::clear_corpsname() {
  if (corpsname_ != &::google::protobuf::internal::kEmptyString) {
    corpsname_->clear();
  }
  clear_has_corpsname();
}
inline const ::std::string& npt_corps_appoint::corpsname() const {
  return *corpsname_;
}
inline void npt_corps_appoint::set_corpsname(const ::std::string& value) {
  set_has_corpsname();
  if (corpsname_ == &::google::protobuf::internal::kEmptyString) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void npt_corps_appoint::set_corpsname(const char* value) {
  set_has_corpsname();
  if (corpsname_ == &::google::protobuf::internal::kEmptyString) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void npt_corps_appoint::set_corpsname(const void* value, size_t size) {
  set_has_corpsname();
  if (corpsname_ == &::google::protobuf::internal::kEmptyString) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_corps_appoint::mutable_corpsname() {
  set_has_corpsname();
  if (corpsname_ == &::google::protobuf::internal::kEmptyString) {
    corpsname_ = new ::std::string;
  }
  return corpsname_;
}
inline ::std::string* npt_corps_appoint::release_corpsname() {
  clear_has_corpsname();
  if (corpsname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = corpsname_;
    corpsname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_corps_appoint::set_allocated_corpsname(::std::string* corpsname) {
  if (corpsname_ != &::google::protobuf::internal::kEmptyString) {
    delete corpsname_;
  }
  if (corpsname) {
    set_has_corpsname();
    corpsname_ = corpsname;
  } else {
    clear_has_corpsname();
    corpsname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PB.corps_member member = 10;
inline bool npt_corps_appoint::has_member() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void npt_corps_appoint::set_has_member() {
  _has_bits_[0] |= 0x00000200u;
}
inline void npt_corps_appoint::clear_has_member() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void npt_corps_appoint::clear_member() {
  if (member_ != NULL) member_->::PB::corps_member::Clear();
  clear_has_member();
}
inline const ::PB::corps_member& npt_corps_appoint::member() const {
  return member_ != NULL ? *member_ : *default_instance_->member_;
}
inline ::PB::corps_member* npt_corps_appoint::mutable_member() {
  set_has_member();
  if (member_ == NULL) member_ = new ::PB::corps_member;
  return member_;
}
inline ::PB::corps_member* npt_corps_appoint::release_member() {
  clear_has_member();
  ::PB::corps_member* temp = member_;
  member_ = NULL;
  return temp;
}
inline void npt_corps_appoint::set_allocated_member(::PB::corps_member* member) {
  delete member_;
  member_ = member;
  if (member) {
    set_has_member();
  } else {
    clear_has_member();
  }
}

// optional int64 contri_money = 11;
inline bool npt_corps_appoint::has_contri_money() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void npt_corps_appoint::set_has_contri_money() {
  _has_bits_[0] |= 0x00000400u;
}
inline void npt_corps_appoint::clear_has_contri_money() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void npt_corps_appoint::clear_contri_money() {
  contri_money_ = GOOGLE_LONGLONG(0);
  clear_has_contri_money();
}
inline ::google::protobuf::int64 npt_corps_appoint::contri_money() const {
  return contri_money_;
}
inline void npt_corps_appoint::set_contri_money(::google::protobuf::int64 value) {
  set_has_contri_money();
  contri_money_ = value;
}

// optional int64 cur_money = 12;
inline bool npt_corps_appoint::has_cur_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void npt_corps_appoint::set_has_cur_money() {
  _has_bits_[0] |= 0x00000800u;
}
inline void npt_corps_appoint::clear_has_cur_money() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void npt_corps_appoint::clear_cur_money() {
  cur_money_ = GOOGLE_LONGLONG(0);
  clear_has_cur_money();
}
inline ::google::protobuf::int64 npt_corps_appoint::cur_money() const {
  return cur_money_;
}
inline void npt_corps_appoint::set_cur_money(::google::protobuf::int64 value) {
  set_has_cur_money();
  cur_money_ = value;
}

// optional uint32 skill_level = 13;
inline bool npt_corps_appoint::has_skill_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void npt_corps_appoint::set_has_skill_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void npt_corps_appoint::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void npt_corps_appoint::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
inline ::google::protobuf::uint32 npt_corps_appoint::skill_level() const {
  return skill_level_;
}
inline void npt_corps_appoint::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// optional uint32 skill_index = 14;
inline bool npt_corps_appoint::has_skill_index() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void npt_corps_appoint::set_has_skill_index() {
  _has_bits_[0] |= 0x00002000u;
}
inline void npt_corps_appoint::clear_has_skill_index() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void npt_corps_appoint::clear_skill_index() {
  skill_index_ = 0u;
  clear_has_skill_index();
}
inline ::google::protobuf::uint32 npt_corps_appoint::skill_index() const {
  return skill_index_;
}
inline void npt_corps_appoint::set_skill_index(::google::protobuf::uint32 value) {
  set_has_skill_index();
  skill_index_ = value;
}

// optional uint32 corps_id = 15;
inline bool npt_corps_appoint::has_corps_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void npt_corps_appoint::set_has_corps_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void npt_corps_appoint::clear_has_corps_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void npt_corps_appoint::clear_corps_id() {
  corps_id_ = 0u;
  clear_has_corps_id();
}
inline ::google::protobuf::uint32 npt_corps_appoint::corps_id() const {
  return corps_id_;
}
inline void npt_corps_appoint::set_corps_id(::google::protobuf::uint32 value) {
  set_has_corps_id();
  corps_id_ = value;
}

// optional .PB.corp_attribute attr = 16;
inline bool npt_corps_appoint::has_attr() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void npt_corps_appoint::set_has_attr() {
  _has_bits_[0] |= 0x00008000u;
}
inline void npt_corps_appoint::clear_has_attr() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void npt_corps_appoint::clear_attr() {
  if (attr_ != NULL) attr_->::PB::corp_attribute::Clear();
  clear_has_attr();
}
inline const ::PB::corp_attribute& npt_corps_appoint::attr() const {
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::PB::corp_attribute* npt_corps_appoint::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::PB::corp_attribute;
  return attr_;
}
inline ::PB::corp_attribute* npt_corps_appoint::release_attr() {
  clear_has_attr();
  ::PB::corp_attribute* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void npt_corps_appoint::set_allocated_attr(::PB::corp_attribute* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    set_has_attr();
  } else {
    clear_has_attr();
  }
}

// optional int32 tid = 17;
inline bool npt_corps_appoint::has_tid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void npt_corps_appoint::set_has_tid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void npt_corps_appoint::clear_has_tid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void npt_corps_appoint::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 npt_corps_appoint::tid() const {
  return tid_;
}
inline void npt_corps_appoint::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 index = 18;
inline bool npt_corps_appoint::has_index() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void npt_corps_appoint::set_has_index() {
  _has_bits_[0] |= 0x00020000u;
}
inline void npt_corps_appoint::clear_has_index() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void npt_corps_appoint::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 npt_corps_appoint::index() const {
  return index_;
}
inline void npt_corps_appoint::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int64 money = 19;
inline bool npt_corps_appoint::has_money() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void npt_corps_appoint::set_has_money() {
  _has_bits_[0] |= 0x00040000u;
}
inline void npt_corps_appoint::clear_has_money() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void npt_corps_appoint::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 npt_corps_appoint::money() const {
  return money_;
}
inline void npt_corps_appoint::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// npt_apply_corps

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_APPLY_CORPS];
inline bool npt_apply_corps::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_apply_corps::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_apply_corps::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_apply_corps::clear_type() {
  type_ = 4;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_apply_corps::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_apply_corps::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 id = 2;
inline bool npt_apply_corps::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_apply_corps::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_apply_corps::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_apply_corps::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 npt_apply_corps::id() const {
  return id_;
}
inline void npt_apply_corps::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .PB.corps_apply_t apply = 3;
inline bool npt_apply_corps::has_apply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_apply_corps::set_has_apply() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_apply_corps::clear_has_apply() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_apply_corps::clear_apply() {
  if (apply_ != NULL) apply_->::PB::corps_apply_t::Clear();
  clear_has_apply();
}
inline const ::PB::corps_apply_t& npt_apply_corps::apply() const {
  return apply_ != NULL ? *apply_ : *default_instance_->apply_;
}
inline ::PB::corps_apply_t* npt_apply_corps::mutable_apply() {
  set_has_apply();
  if (apply_ == NULL) apply_ = new ::PB::corps_apply_t;
  return apply_;
}
inline ::PB::corps_apply_t* npt_apply_corps::release_apply() {
  clear_has_apply();
  ::PB::corps_apply_t* temp = apply_;
  apply_ = NULL;
  return temp;
}
inline void npt_apply_corps::set_allocated_apply(::PB::corps_apply_t* apply) {
  delete apply_;
  apply_ = apply;
  if (apply) {
    set_has_apply();
  } else {
    clear_has_apply();
  }
}

// -------------------------------------------------------------------

// npt_corps_data

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_DATA];
inline bool npt_corps_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_corps_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_corps_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_corps_data::clear_type() {
  type_ = 5;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_corps_data::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_corps_data::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.corps_struct data = 2;
inline bool npt_corps_data::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_corps_data::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_corps_data::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_corps_data::clear_data() {
  if (data_ != NULL) data_->::PB::corps_struct::Clear();
  clear_has_data();
}
inline const ::PB::corps_struct& npt_corps_data::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::PB::corps_struct* npt_corps_data::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::PB::corps_struct;
  return data_;
}
inline ::PB::corps_struct* npt_corps_data::release_data() {
  clear_has_data();
  ::PB::corps_struct* temp = data_;
  data_ = NULL;
  return temp;
}
inline void npt_corps_data::set_allocated_data(::PB::corps_struct* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// repeated .PB.corps_member members = 3;
inline int npt_corps_data::members_size() const {
  return members_.size();
}
inline void npt_corps_data::clear_members() {
  members_.Clear();
}
inline const ::PB::corps_member& npt_corps_data::members(int index) const {
  return members_.Get(index);
}
inline ::PB::corps_member* npt_corps_data::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::PB::corps_member* npt_corps_data::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::corps_member >&
npt_corps_data::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::corps_member >*
npt_corps_data::mutable_members() {
  return &members_;
}

// optional int32 members_count = 4;
inline bool npt_corps_data::has_members_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_corps_data::set_has_members_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_corps_data::clear_has_members_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_corps_data::clear_members_count() {
  members_count_ = 0;
  clear_has_members_count();
}
inline ::google::protobuf::int32 npt_corps_data::members_count() const {
  return members_count_;
}
inline void npt_corps_data::set_members_count(::google::protobuf::int32 value) {
  set_has_members_count();
  members_count_ = value;
}

// -------------------------------------------------------------------

// name_ruid

// required uint64 id = 1;
inline bool name_ruid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void name_ruid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void name_ruid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void name_ruid::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 name_ruid::id() const {
  return id_;
}
inline void name_ruid::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool name_ruid::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void name_ruid::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void name_ruid::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void name_ruid::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& name_ruid::name() const {
  return *name_;
}
inline void name_ruid::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void name_ruid::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void name_ruid::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* name_ruid::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* name_ruid::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void name_ruid::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_common_search_search_corps_key

// required bool has_value = 1 [default = false];
inline bool npt_common_search_search_corps_key::has_has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_common_search_search_corps_key::set_has_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_common_search_search_corps_key::clear_has_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_common_search_search_corps_key::clear_has_value() {
  has_value_ = false;
  clear_has_has_value();
}
inline bool npt_common_search_search_corps_key::has_value() const {
  return has_value_;
}
inline void npt_common_search_search_corps_key::set_has_value(bool value) {
  set_has_has_value();
  has_value_ = value;
}

// optional int32 level = 2;
inline bool npt_common_search_search_corps_key::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_common_search_search_corps_key::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_common_search_search_corps_key::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_common_search_search_corps_key::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 npt_common_search_search_corps_key::level() const {
  return level_;
}
inline void npt_common_search_search_corps_key::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 nation = 3;
inline bool npt_common_search_search_corps_key::has_nation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_common_search_search_corps_key::set_has_nation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_common_search_search_corps_key::clear_has_nation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_common_search_search_corps_key::clear_nation() {
  nation_ = 0;
  clear_has_nation();
}
inline ::google::protobuf::int32 npt_common_search_search_corps_key::nation() const {
  return nation_;
}
inline void npt_common_search_search_corps_key::set_nation(::google::protobuf::int32 value) {
  set_has_nation();
  nation_ = value;
}

// optional bytes name = 4;
inline bool npt_common_search_search_corps_key::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_common_search_search_corps_key::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_common_search_search_corps_key::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_common_search_search_corps_key::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npt_common_search_search_corps_key::name() const {
  return *name_;
}
inline void npt_common_search_search_corps_key::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_common_search_search_corps_key::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_common_search_search_corps_key::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_common_search_search_corps_key::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npt_common_search_search_corps_key::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_common_search_search_corps_key::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_common_search_search_player_key

// required bytes name = 1;
inline bool npt_common_search_search_player_key::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_common_search_search_player_key::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_common_search_search_player_key::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_common_search_search_player_key::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npt_common_search_search_player_key::name() const {
  return *name_;
}
inline void npt_common_search_search_player_key::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_common_search_search_player_key::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_common_search_search_player_key::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_common_search_search_player_key::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npt_common_search_search_player_key::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_common_search_search_player_key::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 nation = 2;
inline bool npt_common_search_search_player_key::has_nation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_common_search_search_player_key::set_has_nation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_common_search_search_player_key::clear_has_nation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_common_search_search_player_key::clear_nation() {
  nation_ = 0;
  clear_has_nation();
}
inline ::google::protobuf::int32 npt_common_search_search_player_key::nation() const {
  return nation_;
}
inline void npt_common_search_search_player_key::set_nation(::google::protobuf::int32 value) {
  set_has_nation();
  nation_ = value;
}

// optional bool is_online = 3;
inline bool npt_common_search_search_player_key::has_is_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_common_search_search_player_key::set_has_is_online() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_common_search_search_player_key::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_common_search_search_player_key::clear_is_online() {
  is_online_ = false;
  clear_has_is_online();
}
inline bool npt_common_search_search_player_key::is_online() const {
  return is_online_;
}
inline void npt_common_search_search_player_key::set_is_online(bool value) {
  set_has_is_online();
  is_online_ = value;
}

// -------------------------------------------------------------------

// npt_common_search

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_COMMON_SEARCH];
inline bool npt_common_search::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_common_search::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_common_search::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_common_search::clear_type() {
  type_ = 6;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_common_search::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_common_search::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 pos = 3;
inline bool npt_common_search::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_common_search::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_common_search::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_common_search::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 npt_common_search::pos() const {
  return pos_;
}
inline void npt_common_search::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// required uint32 len = 4;
inline bool npt_common_search::has_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_common_search::set_has_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_common_search::clear_has_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_common_search::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 npt_common_search::len() const {
  return len_;
}
inline void npt_common_search::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
}

// optional .PB.npt_common_search.search_corps_key corps_key = 5;
inline bool npt_common_search::has_corps_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_common_search::set_has_corps_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_common_search::clear_has_corps_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_common_search::clear_corps_key() {
  if (corps_key_ != NULL) corps_key_->::PB::npt_common_search_search_corps_key::Clear();
  clear_has_corps_key();
}
inline const ::PB::npt_common_search_search_corps_key& npt_common_search::corps_key() const {
  return corps_key_ != NULL ? *corps_key_ : *default_instance_->corps_key_;
}
inline ::PB::npt_common_search_search_corps_key* npt_common_search::mutable_corps_key() {
  set_has_corps_key();
  if (corps_key_ == NULL) corps_key_ = new ::PB::npt_common_search_search_corps_key;
  return corps_key_;
}
inline ::PB::npt_common_search_search_corps_key* npt_common_search::release_corps_key() {
  clear_has_corps_key();
  ::PB::npt_common_search_search_corps_key* temp = corps_key_;
  corps_key_ = NULL;
  return temp;
}
inline void npt_common_search::set_allocated_corps_key(::PB::npt_common_search_search_corps_key* corps_key) {
  delete corps_key_;
  corps_key_ = corps_key;
  if (corps_key) {
    set_has_corps_key();
  } else {
    clear_has_corps_key();
  }
}

// optional int32 retcode = 6;
inline bool npt_common_search::has_retcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_common_search::set_has_retcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_common_search::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_common_search::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_common_search::retcode() const {
  return retcode_;
}
inline void npt_common_search::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional int32 total_count = 7;
inline bool npt_common_search::has_total_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_common_search::set_has_total_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_common_search::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_common_search::clear_total_count() {
  total_count_ = 0;
  clear_has_total_count();
}
inline ::google::protobuf::int32 npt_common_search::total_count() const {
  return total_count_;
}
inline void npt_common_search::set_total_count(::google::protobuf::int32 value) {
  set_has_total_count();
  total_count_ = value;
}

// repeated .PB.npt_corps_data corps = 8;
inline int npt_common_search::corps_size() const {
  return corps_.size();
}
inline void npt_common_search::clear_corps() {
  corps_.Clear();
}
inline const ::PB::npt_corps_data& npt_common_search::corps(int index) const {
  return corps_.Get(index);
}
inline ::PB::npt_corps_data* npt_common_search::mutable_corps(int index) {
  return corps_.Mutable(index);
}
inline ::PB::npt_corps_data* npt_common_search::add_corps() {
  return corps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_corps_data >&
npt_common_search::corps() const {
  return corps_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::npt_corps_data >*
npt_common_search::mutable_corps() {
  return &corps_;
}

// optional .PB.npt_common_search.search_player_key player_key = 9;
inline bool npt_common_search::has_player_key() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_common_search::set_has_player_key() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_common_search::clear_has_player_key() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_common_search::clear_player_key() {
  if (player_key_ != NULL) player_key_->::PB::npt_common_search_search_player_key::Clear();
  clear_has_player_key();
}
inline const ::PB::npt_common_search_search_player_key& npt_common_search::player_key() const {
  return player_key_ != NULL ? *player_key_ : *default_instance_->player_key_;
}
inline ::PB::npt_common_search_search_player_key* npt_common_search::mutable_player_key() {
  set_has_player_key();
  if (player_key_ == NULL) player_key_ = new ::PB::npt_common_search_search_player_key;
  return player_key_;
}
inline ::PB::npt_common_search_search_player_key* npt_common_search::release_player_key() {
  clear_has_player_key();
  ::PB::npt_common_search_search_player_key* temp = player_key_;
  player_key_ = NULL;
  return temp;
}
inline void npt_common_search::set_allocated_player_key(::PB::npt_common_search_search_player_key* player_key) {
  delete player_key_;
  player_key_ = player_key;
  if (player_key) {
    set_has_player_key();
  } else {
    clear_has_player_key();
  }
}

// repeated .PB.name_ruid players = 10;
inline int npt_common_search::players_size() const {
  return players_.size();
}
inline void npt_common_search::clear_players() {
  players_.Clear();
}
inline const ::PB::name_ruid& npt_common_search::players(int index) const {
  return players_.Get(index);
}
inline ::PB::name_ruid* npt_common_search::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::PB::name_ruid* npt_common_search::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::name_ruid >&
npt_common_search::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::name_ruid >*
npt_common_search::mutable_players() {
  return &players_;
}

// optional int32 search_time = 11;
inline bool npt_common_search::has_search_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void npt_common_search::set_has_search_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void npt_common_search::clear_has_search_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void npt_common_search::clear_search_time() {
  search_time_ = 0;
  clear_has_search_time();
}
inline ::google::protobuf::int32 npt_common_search::search_time() const {
  return search_time_;
}
inline void npt_common_search::set_search_time(::google::protobuf::int32 value) {
  set_has_search_time();
  search_time_ = value;
}

// -------------------------------------------------------------------

// npt_zhaojiling

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ZHAOJILING];
inline bool npt_zhaojiling::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_zhaojiling::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_zhaojiling::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_zhaojiling::clear_type() {
  type_ = 7;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_zhaojiling::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_zhaojiling::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.zhaojiling_info baseinfo = 2;
inline bool npt_zhaojiling::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_zhaojiling::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_zhaojiling::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_zhaojiling::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::PB::zhaojiling_info::Clear();
  clear_has_baseinfo();
}
inline const ::PB::zhaojiling_info& npt_zhaojiling::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::PB::zhaojiling_info* npt_zhaojiling::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::PB::zhaojiling_info;
  return baseinfo_;
}
inline ::PB::zhaojiling_info* npt_zhaojiling::release_baseinfo() {
  clear_has_baseinfo();
  ::PB::zhaojiling_info* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void npt_zhaojiling::set_allocated_baseinfo(::PB::zhaojiling_info* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// -------------------------------------------------------------------

// npt_sync_mirror_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_MIRROR_INFO];
inline bool npt_sync_mirror_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_sync_mirror_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_sync_mirror_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_sync_mirror_info::clear_type() {
  type_ = 8;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_sync_mirror_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_sync_mirror_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.ipt_mirror_info infos = 2;
inline int npt_sync_mirror_info::infos_size() const {
  return infos_.size();
}
inline void npt_sync_mirror_info::clear_infos() {
  infos_.Clear();
}
inline const ::PB::ipt_mirror_info& npt_sync_mirror_info::infos(int index) const {
  return infos_.Get(index);
}
inline ::PB::ipt_mirror_info* npt_sync_mirror_info::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::PB::ipt_mirror_info* npt_sync_mirror_info::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ipt_mirror_info >&
npt_sync_mirror_info::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ipt_mirror_info >*
npt_sync_mirror_info::mutable_infos() {
  return &infos_;
}

// optional uint32 state_mask = 3;
inline bool npt_sync_mirror_info::has_state_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_sync_mirror_info::set_has_state_mask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_sync_mirror_info::clear_has_state_mask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_sync_mirror_info::clear_state_mask() {
  state_mask_ = 0u;
  clear_has_state_mask();
}
inline ::google::protobuf::uint32 npt_sync_mirror_info::state_mask() const {
  return state_mask_;
}
inline void npt_sync_mirror_info::set_state_mask(::google::protobuf::uint32 value) {
  set_has_state_mask();
  state_mask_ = value;
}

// -------------------------------------------------------------------

// npt_sync_nation_war_info_nwar_npc_info

// required uint32 npc_tid = 1;
inline bool npt_sync_nation_war_info_nwar_npc_info::has_npc_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_has_npc_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_has_npc_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_npc_tid() {
  npc_tid_ = 0u;
  clear_has_npc_tid();
}
inline ::google::protobuf::uint32 npt_sync_nation_war_info_nwar_npc_info::npc_tid() const {
  return npc_tid_;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_npc_tid(::google::protobuf::uint32 value) {
  set_has_npc_tid();
  npc_tid_ = value;
}

// required uint32 npc_nation = 2;
inline bool npt_sync_nation_war_info_nwar_npc_info::has_npc_nation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_has_npc_nation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_has_npc_nation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_npc_nation() {
  npc_nation_ = 0u;
  clear_has_npc_nation();
}
inline ::google::protobuf::uint32 npt_sync_nation_war_info_nwar_npc_info::npc_nation() const {
  return npc_nation_;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_npc_nation(::google::protobuf::uint32 value) {
  set_has_npc_nation();
  npc_nation_ = value;
}

// required uint32 npc_hp = 3;
inline bool npt_sync_nation_war_info_nwar_npc_info::has_npc_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_has_npc_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_has_npc_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_npc_hp() {
  npc_hp_ = 0u;
  clear_has_npc_hp();
}
inline ::google::protobuf::uint32 npt_sync_nation_war_info_nwar_npc_info::npc_hp() const {
  return npc_hp_;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_npc_hp(::google::protobuf::uint32 value) {
  set_has_npc_hp();
  npc_hp_ = value;
}

// required uint32 npc_born = 4;
inline bool npt_sync_nation_war_info_nwar_npc_info::has_npc_born() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_has_npc_born() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_has_npc_born() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_npc_born() {
  npc_born_ = 0u;
  clear_has_npc_born();
}
inline ::google::protobuf::uint32 npt_sync_nation_war_info_nwar_npc_info::npc_born() const {
  return npc_born_;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_npc_born(::google::protobuf::uint32 value) {
  set_has_npc_born();
  npc_born_ = value;
}

// -------------------------------------------------------------------

// npt_sync_nation_war_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_NATION_WAR_INFO];
inline bool npt_sync_nation_war_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_sync_nation_war_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_sync_nation_war_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_sync_nation_war_info::clear_type() {
  type_ = 9;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_sync_nation_war_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_sync_nation_war_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 war_end_time = 2;
inline bool npt_sync_nation_war_info::has_war_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_sync_nation_war_info::set_has_war_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_sync_nation_war_info::clear_has_war_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_sync_nation_war_info::clear_war_end_time() {
  war_end_time_ = 0u;
  clear_has_war_end_time();
}
inline ::google::protobuf::uint32 npt_sync_nation_war_info::war_end_time() const {
  return war_end_time_;
}
inline void npt_sync_nation_war_info::set_war_end_time(::google::protobuf::uint32 value) {
  set_has_war_end_time();
  war_end_time_ = value;
}

// repeated .PB.npt_sync_nation_war_info.nwar_npc_info npc_info = 3;
inline int npt_sync_nation_war_info::npc_info_size() const {
  return npc_info_.size();
}
inline void npt_sync_nation_war_info::clear_npc_info() {
  npc_info_.Clear();
}
inline const ::PB::npt_sync_nation_war_info_nwar_npc_info& npt_sync_nation_war_info::npc_info(int index) const {
  return npc_info_.Get(index);
}
inline ::PB::npt_sync_nation_war_info_nwar_npc_info* npt_sync_nation_war_info::mutable_npc_info(int index) {
  return npc_info_.Mutable(index);
}
inline ::PB::npt_sync_nation_war_info_nwar_npc_info* npt_sync_nation_war_info::add_npc_info() {
  return npc_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_sync_nation_war_info_nwar_npc_info >&
npt_sync_nation_war_info::npc_info() const {
  return npc_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::npt_sync_nation_war_info_nwar_npc_info >*
npt_sync_nation_war_info::mutable_npc_info() {
  return &npc_info_;
}

// optional uint32 wangcheng_revive_faction = 4;
inline bool npt_sync_nation_war_info::has_wangcheng_revive_faction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_sync_nation_war_info::set_has_wangcheng_revive_faction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_sync_nation_war_info::clear_has_wangcheng_revive_faction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_sync_nation_war_info::clear_wangcheng_revive_faction() {
  wangcheng_revive_faction_ = 0u;
  clear_has_wangcheng_revive_faction();
}
inline ::google::protobuf::uint32 npt_sync_nation_war_info::wangcheng_revive_faction() const {
  return wangcheng_revive_faction_;
}
inline void npt_sync_nation_war_info::set_wangcheng_revive_faction(::google::protobuf::uint32 value) {
  set_has_wangcheng_revive_faction();
  wangcheng_revive_faction_ = value;
}

// -------------------------------------------------------------------

// npt_get_corp_name

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_CORP_NAME];
inline bool npt_get_corp_name::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_get_corp_name::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_get_corp_name::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_get_corp_name::clear_type() {
  type_ = 11;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_get_corp_name::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_get_corp_name::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 corp_id = 2;
inline bool npt_get_corp_name::has_corp_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_get_corp_name::set_has_corp_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_get_corp_name::clear_has_corp_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_get_corp_name::clear_corp_id() {
  corp_id_ = 0u;
  clear_has_corp_id();
}
inline ::google::protobuf::uint32 npt_get_corp_name::corp_id() const {
  return corp_id_;
}
inline void npt_get_corp_name::set_corp_id(::google::protobuf::uint32 value) {
  set_has_corp_id();
  corp_id_ = value;
}

// optional bytes name = 3;
inline bool npt_get_corp_name::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_get_corp_name::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_get_corp_name::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_get_corp_name::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npt_get_corp_name::name() const {
  return *name_;
}
inline void npt_get_corp_name::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_get_corp_name::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_get_corp_name::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_get_corp_name::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npt_get_corp_name::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_get_corp_name::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_nation_war_operate

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE];
inline bool npt_nation_war_operate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_war_operate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_war_operate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_war_operate::clear_type() {
  type_ = 10;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_war_operate::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_war_operate::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 oper_type = 2;
inline bool npt_nation_war_operate::has_oper_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_war_operate::set_has_oper_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_war_operate::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_war_operate::clear_oper_type() {
  oper_type_ = 0u;
  clear_has_oper_type();
}
inline ::google::protobuf::uint32 npt_nation_war_operate::oper_type() const {
  return oper_type_;
}
inline void npt_nation_war_operate::set_oper_type(::google::protobuf::uint32 value) {
  set_has_oper_type();
  oper_type_ = value;
}

// required uint32 oper_param1 = 3;
inline bool npt_nation_war_operate::has_oper_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_nation_war_operate::set_has_oper_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_nation_war_operate::clear_has_oper_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_nation_war_operate::clear_oper_param1() {
  oper_param1_ = 0u;
  clear_has_oper_param1();
}
inline ::google::protobuf::uint32 npt_nation_war_operate::oper_param1() const {
  return oper_param1_;
}
inline void npt_nation_war_operate::set_oper_param1(::google::protobuf::uint32 value) {
  set_has_oper_param1();
  oper_param1_ = value;
}

// -------------------------------------------------------------------

// npt_nation_war_operate_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO];
inline bool npt_nation_war_operate_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_war_operate_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_war_operate_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_war_operate_info::clear_type() {
  type_ = 12;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_war_operate_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_war_operate_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 war_id = 2;
inline bool npt_nation_war_operate_info::has_war_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_war_operate_info::set_has_war_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_war_operate_info::clear_has_war_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_war_operate_info::clear_war_id() {
  war_id_ = 0u;
  clear_has_war_id();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info::war_id() const {
  return war_id_;
}
inline void npt_nation_war_operate_info::set_war_id(::google::protobuf::uint32 value) {
  set_has_war_id();
  war_id_ = value;
}

// -------------------------------------------------------------------

// npt_nation_war_operate_info_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO_RE];
inline bool npt_nation_war_operate_info_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_war_operate_info_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_war_operate_info_re::clear_type() {
  type_ = 13;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_war_operate_info_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_war_operate_info_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 attack_zhaoji = 2;
inline bool npt_nation_war_operate_info_re::has_attack_zhaoji() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_attack_zhaoji() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_war_operate_info_re::clear_has_attack_zhaoji() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_war_operate_info_re::clear_attack_zhaoji() {
  attack_zhaoji_ = 0u;
  clear_has_attack_zhaoji();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::attack_zhaoji() const {
  return attack_zhaoji_;
}
inline void npt_nation_war_operate_info_re::set_attack_zhaoji(::google::protobuf::uint32 value) {
  set_has_attack_zhaoji();
  attack_zhaoji_ = value;
}

// required uint32 defend_zhaoji = 3;
inline bool npt_nation_war_operate_info_re::has_defend_zhaoji() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_defend_zhaoji() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_nation_war_operate_info_re::clear_has_defend_zhaoji() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_nation_war_operate_info_re::clear_defend_zhaoji() {
  defend_zhaoji_ = 0u;
  clear_has_defend_zhaoji();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::defend_zhaoji() const {
  return defend_zhaoji_;
}
inline void npt_nation_war_operate_info_re::set_defend_zhaoji(::google::protobuf::uint32 value) {
  set_has_defend_zhaoji();
  defend_zhaoji_ = value;
}

// required uint32 attack_yanshi = 4;
inline bool npt_nation_war_operate_info_re::has_attack_yanshi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_attack_yanshi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_nation_war_operate_info_re::clear_has_attack_yanshi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_nation_war_operate_info_re::clear_attack_yanshi() {
  attack_yanshi_ = 0u;
  clear_has_attack_yanshi();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::attack_yanshi() const {
  return attack_yanshi_;
}
inline void npt_nation_war_operate_info_re::set_attack_yanshi(::google::protobuf::uint32 value) {
  set_has_attack_yanshi();
  attack_yanshi_ = value;
}

// required uint32 defend_jiaxue = 5;
inline bool npt_nation_war_operate_info_re::has_defend_jiaxue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_defend_jiaxue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_nation_war_operate_info_re::clear_has_defend_jiaxue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_nation_war_operate_info_re::clear_defend_jiaxue() {
  defend_jiaxue_ = 0u;
  clear_has_defend_jiaxue();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::defend_jiaxue() const {
  return defend_jiaxue_;
}
inline void npt_nation_war_operate_info_re::set_defend_jiaxue(::google::protobuf::uint32 value) {
  set_has_defend_jiaxue();
  defend_jiaxue_ = value;
}

// required uint32 attack_jihuo = 6;
inline bool npt_nation_war_operate_info_re::has_attack_jihuo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_attack_jihuo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_nation_war_operate_info_re::clear_has_attack_jihuo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_nation_war_operate_info_re::clear_attack_jihuo() {
  attack_jihuo_ = 0u;
  clear_has_attack_jihuo();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::attack_jihuo() const {
  return attack_jihuo_;
}
inline void npt_nation_war_operate_info_re::set_attack_jihuo(::google::protobuf::uint32 value) {
  set_has_attack_jihuo();
  attack_jihuo_ = value;
}

// required uint32 defend_jihuo = 7;
inline bool npt_nation_war_operate_info_re::has_defend_jihuo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_defend_jihuo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_nation_war_operate_info_re::clear_has_defend_jihuo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_nation_war_operate_info_re::clear_defend_jihuo() {
  defend_jihuo_ = 0u;
  clear_has_defend_jihuo();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::defend_jihuo() const {
  return defend_jihuo_;
}
inline void npt_nation_war_operate_info_re::set_defend_jihuo(::google::protobuf::uint32 value) {
  set_has_defend_jihuo();
  defend_jihuo_ = value;
}

// required uint32 quick_transfer = 8;
inline bool npt_nation_war_operate_info_re::has_quick_transfer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_quick_transfer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_nation_war_operate_info_re::clear_has_quick_transfer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_nation_war_operate_info_re::clear_quick_transfer() {
  quick_transfer_ = 0u;
  clear_has_quick_transfer();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::quick_transfer() const {
  return quick_transfer_;
}
inline void npt_nation_war_operate_info_re::set_quick_transfer(::google::protobuf::uint32 value) {
  set_has_quick_transfer();
  quick_transfer_ = value;
}

// -------------------------------------------------------------------

// npt_team_invite

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INVITE];
inline bool npt_team_invite::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_team_invite::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_team_invite::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_team_invite::clear_type() {
  type_ = 14;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_team_invite::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_team_invite::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes name = 2;
inline bool npt_team_invite::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_team_invite::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_team_invite::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_team_invite::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npt_team_invite::name() const {
  return *name_;
}
inline void npt_team_invite::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_team_invite::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_team_invite::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_team_invite::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npt_team_invite::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_team_invite::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 assign_rule = 3;
inline bool npt_team_invite::has_assign_rule() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_team_invite::set_has_assign_rule() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_team_invite::clear_has_assign_rule() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_team_invite::clear_assign_rule() {
  assign_rule_ = 0;
  clear_has_assign_rule();
}
inline ::google::protobuf::int32 npt_team_invite::assign_rule() const {
  return assign_rule_;
}
inline void npt_team_invite::set_assign_rule(::google::protobuf::int32 value) {
  set_has_assign_rule();
  assign_rule_ = value;
}

// optional int32 auto_admit = 4;
inline bool npt_team_invite::has_auto_admit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_team_invite::set_has_auto_admit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_team_invite::clear_has_auto_admit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_team_invite::clear_auto_admit() {
  auto_admit_ = 0;
  clear_has_auto_admit();
}
inline ::google::protobuf::int32 npt_team_invite::auto_admit() const {
  return auto_admit_;
}
inline void npt_team_invite::set_auto_admit(::google::protobuf::int32 value) {
  set_has_auto_admit();
  auto_admit_ = value;
}

// optional int32 open_invite = 5;
inline bool npt_team_invite::has_open_invite() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_team_invite::set_has_open_invite() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_team_invite::clear_has_open_invite() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_team_invite::clear_open_invite() {
  open_invite_ = 0;
  clear_has_open_invite();
}
inline ::google::protobuf::int32 npt_team_invite::open_invite() const {
  return open_invite_;
}
inline void npt_team_invite::set_open_invite(::google::protobuf::int32 value) {
  set_has_open_invite();
  open_invite_ = value;
}

// optional int32 level = 6;
inline bool npt_team_invite::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_team_invite::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_team_invite::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_team_invite::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 npt_team_invite::level() const {
  return level_;
}
inline void npt_team_invite::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 profession = 7;
inline bool npt_team_invite::has_profession() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_team_invite::set_has_profession() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_team_invite::clear_has_profession() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_team_invite::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 npt_team_invite::profession() const {
  return profession_;
}
inline void npt_team_invite::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 lineid = 8;
inline bool npt_team_invite::has_lineid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_team_invite::set_has_lineid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_team_invite::clear_has_lineid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_team_invite::clear_lineid() {
  lineid_ = 0;
  clear_has_lineid();
}
inline ::google::protobuf::int32 npt_team_invite::lineid() const {
  return lineid_;
}
inline void npt_team_invite::set_lineid(::google::protobuf::int32 value) {
  set_has_lineid();
  lineid_ = value;
}

// -------------------------------------------------------------------

// npt_friend_invite

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_FRIEND_INVITE];
inline bool npt_friend_invite::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_friend_invite::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_friend_invite::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_friend_invite::clear_type() {
  type_ = 16;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_friend_invite::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_friend_invite::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes name = 2;
inline bool npt_friend_invite::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_friend_invite::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_friend_invite::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_friend_invite::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npt_friend_invite::name() const {
  return *name_;
}
inline void npt_friend_invite::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_friend_invite::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_friend_invite::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_friend_invite::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npt_friend_invite::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_friend_invite::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool npt_friend_invite::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_friend_invite::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_friend_invite::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_friend_invite::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 npt_friend_invite::level() const {
  return level_;
}
inline void npt_friend_invite::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 profession = 4;
inline bool npt_friend_invite::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_friend_invite::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_friend_invite::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_friend_invite::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 npt_friend_invite::profession() const {
  return profession_;
}
inline void npt_friend_invite::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 group = 5;
inline bool npt_friend_invite::has_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_friend_invite::set_has_group() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_friend_invite::clear_has_group() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_friend_invite::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 npt_friend_invite::group() const {
  return group_;
}
inline void npt_friend_invite::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// -------------------------------------------------------------------

// npt_team_info_team_info

// required int32 teamid = 1;
inline bool npt_team_info_team_info::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_team_info_team_info::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_team_info_team_info::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_team_info_team_info::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 npt_team_info_team_info::teamid() const {
  return teamid_;
}
inline void npt_team_info_team_info::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// required int64 leader = 2;
inline bool npt_team_info_team_info::has_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_team_info_team_info::set_has_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_team_info_team_info::clear_has_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_team_info_team_info::clear_leader() {
  leader_ = GOOGLE_LONGLONG(0);
  clear_has_leader();
}
inline ::google::protobuf::int64 npt_team_info_team_info::leader() const {
  return leader_;
}
inline void npt_team_info_team_info::set_leader(::google::protobuf::int64 value) {
  set_has_leader();
  leader_ = value;
}

// optional bytes name = 3;
inline bool npt_team_info_team_info::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_team_info_team_info::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_team_info_team_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_team_info_team_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npt_team_info_team_info::name() const {
  return *name_;
}
inline void npt_team_info_team_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_team_info_team_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_team_info_team_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_team_info_team_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npt_team_info_team_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_team_info_team_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 4;
inline bool npt_team_info_team_info::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_team_info_team_info::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_team_info_team_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_team_info_team_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 npt_team_info_team_info::level() const {
  return level_;
}
inline void npt_team_info_team_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 capacity = 5;
inline bool npt_team_info_team_info::has_capacity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_team_info_team_info::set_has_capacity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_team_info_team_info::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_team_info_team_info::clear_capacity() {
  capacity_ = 0;
  clear_has_capacity();
}
inline ::google::protobuf::int32 npt_team_info_team_info::capacity() const {
  return capacity_;
}
inline void npt_team_info_team_info::set_capacity(::google::protobuf::int32 value) {
  set_has_capacity();
  capacity_ = value;
}

// optional int32 prof = 6;
inline bool npt_team_info_team_info::has_prof() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_team_info_team_info::set_has_prof() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_team_info_team_info::clear_has_prof() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_team_info_team_info::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 npt_team_info_team_info::prof() const {
  return prof_;
}
inline void npt_team_info_team_info::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// required int32 members = 7;
inline bool npt_team_info_team_info::has_members() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_team_info_team_info::set_has_members() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_team_info_team_info::clear_has_members() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_team_info_team_info::clear_members() {
  members_ = 0;
  clear_has_members();
}
inline ::google::protobuf::int32 npt_team_info_team_info::members() const {
  return members_;
}
inline void npt_team_info_team_info::set_members(::google::protobuf::int32 value) {
  set_has_members();
  members_ = value;
}

// -------------------------------------------------------------------

// npt_team_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INFO];
inline bool npt_team_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_team_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_team_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_team_info::clear_type() {
  type_ = 15;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_team_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_team_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated int32 teamids = 2;
inline int npt_team_info::teamids_size() const {
  return teamids_.size();
}
inline void npt_team_info::clear_teamids() {
  teamids_.Clear();
}
inline ::google::protobuf::int32 npt_team_info::teamids(int index) const {
  return teamids_.Get(index);
}
inline void npt_team_info::set_teamids(int index, ::google::protobuf::int32 value) {
  teamids_.Set(index, value);
}
inline void npt_team_info::add_teamids(::google::protobuf::int32 value) {
  teamids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
npt_team_info::teamids() const {
  return teamids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
npt_team_info::mutable_teamids() {
  return &teamids_;
}

// repeated .PB.npt_team_info.team_info teams = 3;
inline int npt_team_info::teams_size() const {
  return teams_.size();
}
inline void npt_team_info::clear_teams() {
  teams_.Clear();
}
inline const ::PB::npt_team_info_team_info& npt_team_info::teams(int index) const {
  return teams_.Get(index);
}
inline ::PB::npt_team_info_team_info* npt_team_info::mutable_teams(int index) {
  return teams_.Mutable(index);
}
inline ::PB::npt_team_info_team_info* npt_team_info::add_teams() {
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_team_info_team_info >&
npt_team_info::teams() const {
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::npt_team_info_team_info >*
npt_team_info::mutable_teams() {
  return &teams_;
}

// -------------------------------------------------------------------

// other_player_profile

// optional .PB.face_book pb_facebook = 1;
inline bool other_player_profile::has_pb_facebook() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void other_player_profile::set_has_pb_facebook() {
  _has_bits_[0] |= 0x00000001u;
}
inline void other_player_profile::clear_has_pb_facebook() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void other_player_profile::clear_pb_facebook() {
  if (pb_facebook_ != NULL) pb_facebook_->::PB::face_book::Clear();
  clear_has_pb_facebook();
}
inline const ::PB::face_book& other_player_profile::pb_facebook() const {
  return pb_facebook_ != NULL ? *pb_facebook_ : *default_instance_->pb_facebook_;
}
inline ::PB::face_book* other_player_profile::mutable_pb_facebook() {
  set_has_pb_facebook();
  if (pb_facebook_ == NULL) pb_facebook_ = new ::PB::face_book;
  return pb_facebook_;
}
inline ::PB::face_book* other_player_profile::release_pb_facebook() {
  clear_has_pb_facebook();
  ::PB::face_book* temp = pb_facebook_;
  pb_facebook_ = NULL;
  return temp;
}
inline void other_player_profile::set_allocated_pb_facebook(::PB::face_book* pb_facebook) {
  delete pb_facebook_;
  pb_facebook_ = pb_facebook;
  if (pb_facebook) {
    set_has_pb_facebook();
  } else {
    clear_has_pb_facebook();
  }
}

// optional uint32 nation = 2;
inline bool other_player_profile::has_nation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void other_player_profile::set_has_nation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void other_player_profile::clear_has_nation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void other_player_profile::clear_nation() {
  nation_ = 0u;
  clear_has_nation();
}
inline ::google::protobuf::uint32 other_player_profile::nation() const {
  return nation_;
}
inline void other_player_profile::set_nation(::google::protobuf::uint32 value) {
  set_has_nation();
  nation_ = value;
}

// optional uint32 nation_pos = 3;
inline bool other_player_profile::has_nation_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void other_player_profile::set_has_nation_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void other_player_profile::clear_has_nation_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void other_player_profile::clear_nation_pos() {
  nation_pos_ = 0u;
  clear_has_nation_pos();
}
inline ::google::protobuf::uint32 other_player_profile::nation_pos() const {
  return nation_pos_;
}
inline void other_player_profile::set_nation_pos(::google::protobuf::uint32 value) {
  set_has_nation_pos();
  nation_pos_ = value;
}

// optional uint32 duke_level = 4;
inline bool other_player_profile::has_duke_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void other_player_profile::set_has_duke_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void other_player_profile::clear_has_duke_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void other_player_profile::clear_duke_level() {
  duke_level_ = 0u;
  clear_has_duke_level();
}
inline ::google::protobuf::uint32 other_player_profile::duke_level() const {
  return duke_level_;
}
inline void other_player_profile::set_duke_level(::google::protobuf::uint32 value) {
  set_has_duke_level();
  duke_level_ = value;
}

// optional bool fashion = 5;
inline bool other_player_profile::has_fashion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void other_player_profile::set_has_fashion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void other_player_profile::clear_has_fashion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void other_player_profile::clear_fashion() {
  fashion_ = false;
  clear_has_fashion();
}
inline bool other_player_profile::fashion() const {
  return fashion_;
}
inline void other_player_profile::set_fashion(bool value) {
  set_has_fashion();
  fashion_ = value;
}

// optional uint32 magic_weapon_tid = 6;
inline bool other_player_profile::has_magic_weapon_tid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void other_player_profile::set_has_magic_weapon_tid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void other_player_profile::clear_has_magic_weapon_tid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void other_player_profile::clear_magic_weapon_tid() {
  magic_weapon_tid_ = 0u;
  clear_has_magic_weapon_tid();
}
inline ::google::protobuf::uint32 other_player_profile::magic_weapon_tid() const {
  return magic_weapon_tid_;
}
inline void other_player_profile::set_magic_weapon_tid(::google::protobuf::uint32 value) {
  set_has_magic_weapon_tid();
  magic_weapon_tid_ = value;
}

// -------------------------------------------------------------------

// npt_get_player_profile

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_PLAYER_PROFILE];
inline bool npt_get_player_profile::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_get_player_profile::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_get_player_profile::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_get_player_profile::clear_type() {
  type_ = 18;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_get_player_profile::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_get_player_profile::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool npt_get_player_profile::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_get_player_profile::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_get_player_profile::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_get_player_profile::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_get_player_profile::roleid() const {
  return roleid_;
}
inline void npt_get_player_profile::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional uint32 get_profile_mask = 3 [default = 0];
inline bool npt_get_player_profile::has_get_profile_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_get_player_profile::set_has_get_profile_mask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_get_player_profile::clear_has_get_profile_mask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_get_player_profile::clear_get_profile_mask() {
  get_profile_mask_ = 0u;
  clear_has_get_profile_mask();
}
inline ::google::protobuf::uint32 npt_get_player_profile::get_profile_mask() const {
  return get_profile_mask_;
}
inline void npt_get_player_profile::set_get_profile_mask(::google::protobuf::uint32 value) {
  set_has_get_profile_mask();
  get_profile_mask_ = value;
}

// optional bytes snsinfo = 4;
inline bool npt_get_player_profile::has_snsinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_get_player_profile::set_has_snsinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_get_player_profile::clear_has_snsinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_get_player_profile::clear_snsinfo() {
  if (snsinfo_ != &::google::protobuf::internal::kEmptyString) {
    snsinfo_->clear();
  }
  clear_has_snsinfo();
}
inline const ::std::string& npt_get_player_profile::snsinfo() const {
  return *snsinfo_;
}
inline void npt_get_player_profile::set_snsinfo(const ::std::string& value) {
  set_has_snsinfo();
  if (snsinfo_ == &::google::protobuf::internal::kEmptyString) {
    snsinfo_ = new ::std::string;
  }
  snsinfo_->assign(value);
}
inline void npt_get_player_profile::set_snsinfo(const char* value) {
  set_has_snsinfo();
  if (snsinfo_ == &::google::protobuf::internal::kEmptyString) {
    snsinfo_ = new ::std::string;
  }
  snsinfo_->assign(value);
}
inline void npt_get_player_profile::set_snsinfo(const void* value, size_t size) {
  set_has_snsinfo();
  if (snsinfo_ == &::google::protobuf::internal::kEmptyString) {
    snsinfo_ = new ::std::string;
  }
  snsinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_get_player_profile::mutable_snsinfo() {
  set_has_snsinfo();
  if (snsinfo_ == &::google::protobuf::internal::kEmptyString) {
    snsinfo_ = new ::std::string;
  }
  return snsinfo_;
}
inline ::std::string* npt_get_player_profile::release_snsinfo() {
  clear_has_snsinfo();
  if (snsinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snsinfo_;
    snsinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_get_player_profile::set_allocated_snsinfo(::std::string* snsinfo) {
  if (snsinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete snsinfo_;
  }
  if (snsinfo) {
    set_has_snsinfo();
    snsinfo_ = snsinfo;
  } else {
    clear_has_snsinfo();
    snsinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PB.gs_role_mutable_data property = 5;
inline bool npt_get_player_profile::has_property() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_get_player_profile::set_has_property() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_get_player_profile::clear_has_property() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_get_player_profile::clear_property() {
  if (property_ != NULL) property_->::PB::gs_role_mutable_data::Clear();
  clear_has_property();
}
inline const ::PB::gs_role_mutable_data& npt_get_player_profile::property() const {
  return property_ != NULL ? *property_ : *default_instance_->property_;
}
inline ::PB::gs_role_mutable_data* npt_get_player_profile::mutable_property() {
  set_has_property();
  if (property_ == NULL) property_ = new ::PB::gs_role_mutable_data;
  return property_;
}
inline ::PB::gs_role_mutable_data* npt_get_player_profile::release_property() {
  clear_has_property();
  ::PB::gs_role_mutable_data* temp = property_;
  property_ = NULL;
  return temp;
}
inline void npt_get_player_profile::set_allocated_property(::PB::gs_role_mutable_data* property) {
  delete property_;
  property_ = property;
  if (property) {
    set_has_property();
  } else {
    clear_has_property();
  }
}

// optional bytes equipments = 6;
inline bool npt_get_player_profile::has_equipments() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_get_player_profile::set_has_equipments() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_get_player_profile::clear_has_equipments() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_get_player_profile::clear_equipments() {
  if (equipments_ != &::google::protobuf::internal::kEmptyString) {
    equipments_->clear();
  }
  clear_has_equipments();
}
inline const ::std::string& npt_get_player_profile::equipments() const {
  return *equipments_;
}
inline void npt_get_player_profile::set_equipments(const ::std::string& value) {
  set_has_equipments();
  if (equipments_ == &::google::protobuf::internal::kEmptyString) {
    equipments_ = new ::std::string;
  }
  equipments_->assign(value);
}
inline void npt_get_player_profile::set_equipments(const char* value) {
  set_has_equipments();
  if (equipments_ == &::google::protobuf::internal::kEmptyString) {
    equipments_ = new ::std::string;
  }
  equipments_->assign(value);
}
inline void npt_get_player_profile::set_equipments(const void* value, size_t size) {
  set_has_equipments();
  if (equipments_ == &::google::protobuf::internal::kEmptyString) {
    equipments_ = new ::std::string;
  }
  equipments_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_get_player_profile::mutable_equipments() {
  set_has_equipments();
  if (equipments_ == &::google::protobuf::internal::kEmptyString) {
    equipments_ = new ::std::string;
  }
  return equipments_;
}
inline ::std::string* npt_get_player_profile::release_equipments() {
  clear_has_equipments();
  if (equipments_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equipments_;
    equipments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_get_player_profile::set_allocated_equipments(::std::string* equipments) {
  if (equipments_ != &::google::protobuf::internal::kEmptyString) {
    delete equipments_;
  }
  if (equipments) {
    set_has_equipments();
    equipments_ = equipments;
  } else {
    clear_has_equipments();
    equipments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PB.other_player_profile others = 7;
inline bool npt_get_player_profile::has_others() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_get_player_profile::set_has_others() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_get_player_profile::clear_has_others() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_get_player_profile::clear_others() {
  if (others_ != NULL) others_->::PB::other_player_profile::Clear();
  clear_has_others();
}
inline const ::PB::other_player_profile& npt_get_player_profile::others() const {
  return others_ != NULL ? *others_ : *default_instance_->others_;
}
inline ::PB::other_player_profile* npt_get_player_profile::mutable_others() {
  set_has_others();
  if (others_ == NULL) others_ = new ::PB::other_player_profile;
  return others_;
}
inline ::PB::other_player_profile* npt_get_player_profile::release_others() {
  clear_has_others();
  ::PB::other_player_profile* temp = others_;
  others_ = NULL;
  return temp;
}
inline void npt_get_player_profile::set_allocated_others(::PB::other_player_profile* others) {
  delete others_;
  others_ = others;
  if (others) {
    set_has_others();
  } else {
    clear_has_others();
  }
}

// -------------------------------------------------------------------

// npt_blessing_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BLESSING_INFO];
inline bool npt_blessing_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_blessing_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_blessing_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_blessing_info::clear_type() {
  type_ = 21;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_blessing_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_blessing_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.blessing_info info = 2;
inline bool npt_blessing_info::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_blessing_info::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_blessing_info::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_blessing_info::clear_info() {
  if (info_ != NULL) info_->::PB::blessing_info::Clear();
  clear_has_info();
}
inline const ::PB::blessing_info& npt_blessing_info::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PB::blessing_info* npt_blessing_info::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PB::blessing_info;
  return info_;
}
inline ::PB::blessing_info* npt_blessing_info::release_info() {
  clear_has_info();
  ::PB::blessing_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void npt_blessing_info::set_allocated_info(::PB::blessing_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional bool tanksgiver = 3;
inline bool npt_blessing_info::has_tanksgiver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_blessing_info::set_has_tanksgiver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_blessing_info::clear_has_tanksgiver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_blessing_info::clear_tanksgiver() {
  tanksgiver_ = false;
  clear_has_tanksgiver();
}
inline bool npt_blessing_info::tanksgiver() const {
  return tanksgiver_;
}
inline void npt_blessing_info::set_tanksgiver(bool value) {
  set_has_tanksgiver();
  tanksgiver_ = value;
}

// -------------------------------------------------------------------

// npt_nationwar_event

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATIONWAR_EVENT];
inline bool npt_nationwar_event::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nationwar_event::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nationwar_event::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nationwar_event::clear_type() {
  type_ = 22;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nationwar_event::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nationwar_event::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.npt_nationwar_event.NNE_TYPE event_type = 2;
inline bool npt_nationwar_event::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nationwar_event::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nationwar_event::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nationwar_event::clear_event_type() {
  event_type_ = 1;
  clear_has_event_type();
}
inline ::PB::npt_nationwar_event_NNE_TYPE npt_nationwar_event::event_type() const {
  return static_cast< ::PB::npt_nationwar_event_NNE_TYPE >(event_type_);
}
inline void npt_nationwar_event::set_event_type(::PB::npt_nationwar_event_NNE_TYPE value) {
  assert(::PB::npt_nationwar_event_NNE_TYPE_IsValid(value));
  set_has_event_type();
  event_type_ = value;
}

// optional int32 event_param = 3;
inline bool npt_nationwar_event::has_event_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_nationwar_event::set_has_event_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_nationwar_event::clear_has_event_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_nationwar_event::clear_event_param() {
  event_param_ = 0;
  clear_has_event_param();
}
inline ::google::protobuf::int32 npt_nationwar_event::event_param() const {
  return event_param_;
}
inline void npt_nationwar_event::set_event_param(::google::protobuf::int32 value) {
  set_has_event_param();
  event_param_ = value;
}

// -------------------------------------------------------------------

// npt_nation_shutup

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP];
inline bool npt_nation_shutup::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_shutup::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_shutup::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_shutup::clear_type() {
  type_ = 23;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_shutup::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_shutup::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 dst_roleid = 2;
inline bool npt_nation_shutup::has_dst_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_shutup::set_has_dst_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_shutup::clear_has_dst_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_shutup::clear_dst_roleid() {
  dst_roleid_ = GOOGLE_LONGLONG(0);
  clear_has_dst_roleid();
}
inline ::google::protobuf::int64 npt_nation_shutup::dst_roleid() const {
  return dst_roleid_;
}
inline void npt_nation_shutup::set_dst_roleid(::google::protobuf::int64 value) {
  set_has_dst_roleid();
  dst_roleid_ = value;
}

// -------------------------------------------------------------------

// npt_nation_shutup_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_INFO];
inline bool npt_nation_shutup_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_shutup_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_shutup_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_shutup_info::clear_type() {
  type_ = 24;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_shutup_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_shutup_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 use_times = 2;
inline bool npt_nation_shutup_info::has_use_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_shutup_info::set_has_use_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_shutup_info::clear_has_use_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_shutup_info::clear_use_times() {
  use_times_ = 0;
  clear_has_use_times();
}
inline ::google::protobuf::int32 npt_nation_shutup_info::use_times() const {
  return use_times_;
}
inline void npt_nation_shutup_info::set_use_times(::google::protobuf::int32 value) {
  set_has_use_times();
  use_times_ = value;
}

// required int32 remain_times = 3;
inline bool npt_nation_shutup_info::has_remain_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_nation_shutup_info::set_has_remain_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_nation_shutup_info::clear_has_remain_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_nation_shutup_info::clear_remain_times() {
  remain_times_ = 0;
  clear_has_remain_times();
}
inline ::google::protobuf::int32 npt_nation_shutup_info::remain_times() const {
  return remain_times_;
}
inline void npt_nation_shutup_info::set_remain_times(::google::protobuf::int32 value) {
  set_has_remain_times();
  remain_times_ = value;
}

// -------------------------------------------------------------------

// npt_nation_commander_appoint

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_APPOINT];
inline bool npt_nation_commander_appoint::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_commander_appoint::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_commander_appoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_commander_appoint::clear_type() {
  type_ = 26;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_commander_appoint::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_commander_appoint::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 dst_roleid = 2;
inline bool npt_nation_commander_appoint::has_dst_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_commander_appoint::set_has_dst_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_commander_appoint::clear_has_dst_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_commander_appoint::clear_dst_roleid() {
  dst_roleid_ = GOOGLE_LONGLONG(0);
  clear_has_dst_roleid();
}
inline ::google::protobuf::int64 npt_nation_commander_appoint::dst_roleid() const {
  return dst_roleid_;
}
inline void npt_nation_commander_appoint::set_dst_roleid(::google::protobuf::int64 value) {
  set_has_dst_roleid();
  dst_roleid_ = value;
}

// -------------------------------------------------------------------

// npt_nation_commander_notify

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_NOTIFY];
inline bool npt_nation_commander_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_commander_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_commander_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_commander_notify::clear_type() {
  type_ = 27;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_commander_notify::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_commander_notify::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes dst_name = 2;
inline bool npt_nation_commander_notify::has_dst_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_commander_notify::set_has_dst_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_commander_notify::clear_has_dst_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_commander_notify::clear_dst_name() {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    dst_name_->clear();
  }
  clear_has_dst_name();
}
inline const ::std::string& npt_nation_commander_notify::dst_name() const {
  return *dst_name_;
}
inline void npt_nation_commander_notify::set_dst_name(const ::std::string& value) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(value);
}
inline void npt_nation_commander_notify::set_dst_name(const char* value) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(value);
}
inline void npt_nation_commander_notify::set_dst_name(const void* value, size_t size) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_nation_commander_notify::mutable_dst_name() {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  return dst_name_;
}
inline ::std::string* npt_nation_commander_notify::release_dst_name() {
  clear_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_name_;
    dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_nation_commander_notify::set_allocated_dst_name(::std::string* dst_name) {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (dst_name) {
    set_has_dst_name();
    dst_name_ = dst_name;
  } else {
    clear_has_dst_name();
    dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_nation_war_history

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_HISTORY];
inline bool npt_nation_war_history::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_war_history::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_war_history::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_war_history::clear_type() {
  type_ = 28;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_war_history::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_war_history::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.nation_war_history historys = 2;
inline int npt_nation_war_history::historys_size() const {
  return historys_.size();
}
inline void npt_nation_war_history::clear_historys() {
  historys_.Clear();
}
inline const ::PB::nation_war_history& npt_nation_war_history::historys(int index) const {
  return historys_.Get(index);
}
inline ::PB::nation_war_history* npt_nation_war_history::mutable_historys(int index) {
  return historys_.Mutable(index);
}
inline ::PB::nation_war_history* npt_nation_war_history::add_historys() {
  return historys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::nation_war_history >&
npt_nation_war_history::historys() const {
  return historys_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::nation_war_history >*
npt_nation_war_history::mutable_historys() {
  return &historys_;
}

// -------------------------------------------------------------------

// npt_request_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REQUEST_INFO];
inline bool npt_request_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_request_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_request_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_request_info::clear_type() {
  type_ = 29;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_request_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_request_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.npt_request_info.INFO_TYPE request_type = 2;
inline bool npt_request_info::has_request_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_request_info::set_has_request_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_request_info::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_request_info::clear_request_type() {
  request_type_ = 1;
  clear_has_request_type();
}
inline ::PB::npt_request_info_INFO_TYPE npt_request_info::request_type() const {
  return static_cast< ::PB::npt_request_info_INFO_TYPE >(request_type_);
}
inline void npt_request_info::set_request_type(::PB::npt_request_info_INFO_TYPE value) {
  assert(::PB::npt_request_info_INFO_TYPE_IsValid(value));
  set_has_request_type();
  request_type_ = value;
}

// -------------------------------------------------------------------

// npt_nation_shutup_reply

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_REPLY];
inline bool npt_nation_shutup_reply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_shutup_reply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_shutup_reply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_shutup_reply::clear_type() {
  type_ = 25;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_shutup_reply::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_shutup_reply::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.npt_nation_shutup_reply.RESULT_TYPE result = 2;
inline bool npt_nation_shutup_reply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_shutup_reply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_shutup_reply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_shutup_reply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::PB::npt_nation_shutup_reply_RESULT_TYPE npt_nation_shutup_reply::result() const {
  return static_cast< ::PB::npt_nation_shutup_reply_RESULT_TYPE >(result_);
}
inline void npt_nation_shutup_reply::set_result(::PB::npt_nation_shutup_reply_RESULT_TYPE value) {
  assert(::PB::npt_nation_shutup_reply_RESULT_TYPE_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional bytes dst_name = 3;
inline bool npt_nation_shutup_reply::has_dst_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_nation_shutup_reply::set_has_dst_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_nation_shutup_reply::clear_has_dst_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_nation_shutup_reply::clear_dst_name() {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    dst_name_->clear();
  }
  clear_has_dst_name();
}
inline const ::std::string& npt_nation_shutup_reply::dst_name() const {
  return *dst_name_;
}
inline void npt_nation_shutup_reply::set_dst_name(const ::std::string& value) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(value);
}
inline void npt_nation_shutup_reply::set_dst_name(const char* value) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(value);
}
inline void npt_nation_shutup_reply::set_dst_name(const void* value, size_t size) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_nation_shutup_reply::mutable_dst_name() {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  return dst_name_;
}
inline ::std::string* npt_nation_shutup_reply::release_dst_name() {
  clear_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_name_;
    dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_nation_shutup_reply::set_allocated_dst_name(::std::string* dst_name) {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (dst_name) {
    set_has_dst_name();
    dst_name_ = dst_name;
  } else {
    clear_has_dst_name();
    dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_greeting_info_sync

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_INFO_SYNC];
inline bool npt_greeting_info_sync::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_greeting_info_sync::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_greeting_info_sync::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_greeting_info_sync::clear_type() {
  type_ = 19;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_greeting_info_sync::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_greeting_info_sync::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.npt_greeting_info_sync.SYNC_TYPE sync_type = 2;
inline bool npt_greeting_info_sync::has_sync_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_greeting_info_sync::set_has_sync_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_greeting_info_sync::clear_has_sync_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_greeting_info_sync::clear_sync_type() {
  sync_type_ = 1;
  clear_has_sync_type();
}
inline ::PB::npt_greeting_info_sync_SYNC_TYPE npt_greeting_info_sync::sync_type() const {
  return static_cast< ::PB::npt_greeting_info_sync_SYNC_TYPE >(sync_type_);
}
inline void npt_greeting_info_sync::set_sync_type(::PB::npt_greeting_info_sync_SYNC_TYPE value) {
  assert(::PB::npt_greeting_info_sync_SYNC_TYPE_IsValid(value));
  set_has_sync_type();
  sync_type_ = value;
}

// repeated .PB.greeting_info greeting_list = 3;
inline int npt_greeting_info_sync::greeting_list_size() const {
  return greeting_list_.size();
}
inline void npt_greeting_info_sync::clear_greeting_list() {
  greeting_list_.Clear();
}
inline const ::PB::greeting_info& npt_greeting_info_sync::greeting_list(int index) const {
  return greeting_list_.Get(index);
}
inline ::PB::greeting_info* npt_greeting_info_sync::mutable_greeting_list(int index) {
  return greeting_list_.Mutable(index);
}
inline ::PB::greeting_info* npt_greeting_info_sync::add_greeting_list() {
  return greeting_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::greeting_info >&
npt_greeting_info_sync::greeting_list() const {
  return greeting_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::greeting_info >*
npt_greeting_info_sync::mutable_greeting_list() {
  return &greeting_list_;
}

// -------------------------------------------------------------------

// npt_greeting_reply

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_REPLY];
inline bool npt_greeting_reply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_greeting_reply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_greeting_reply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_greeting_reply::clear_type() {
  type_ = 20;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_greeting_reply::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_greeting_reply::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 info_seq = 2;
inline bool npt_greeting_reply::has_info_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_greeting_reply::set_has_info_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_greeting_reply::clear_has_info_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_greeting_reply::clear_info_seq() {
  info_seq_ = 0;
  clear_has_info_seq();
}
inline ::google::protobuf::int32 npt_greeting_reply::info_seq() const {
  return info_seq_;
}
inline void npt_greeting_reply::set_info_seq(::google::protobuf::int32 value) {
  set_has_info_seq();
  info_seq_ = value;
}

// required int64 dst_roleid = 3;
inline bool npt_greeting_reply::has_dst_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_greeting_reply::set_has_dst_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_greeting_reply::clear_has_dst_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_greeting_reply::clear_dst_roleid() {
  dst_roleid_ = GOOGLE_LONGLONG(0);
  clear_has_dst_roleid();
}
inline ::google::protobuf::int64 npt_greeting_reply::dst_roleid() const {
  return dst_roleid_;
}
inline void npt_greeting_reply::set_dst_roleid(::google::protobuf::int64 value) {
  set_has_dst_roleid();
  dst_roleid_ = value;
}

// required int32 reply_type = 4;
inline bool npt_greeting_reply::has_reply_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_greeting_reply::set_has_reply_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_greeting_reply::clear_has_reply_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_greeting_reply::clear_reply_type() {
  reply_type_ = 0;
  clear_has_reply_type();
}
inline ::google::protobuf::int32 npt_greeting_reply::reply_type() const {
  return reply_type_;
}
inline void npt_greeting_reply::set_reply_type(::google::protobuf::int32 value) {
  set_has_reply_type();
  reply_type_ = value;
}

// required int32 reply_param = 5;
inline bool npt_greeting_reply::has_reply_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_greeting_reply::set_has_reply_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_greeting_reply::clear_has_reply_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_greeting_reply::clear_reply_param() {
  reply_param_ = 0;
  clear_has_reply_param();
}
inline ::google::protobuf::int32 npt_greeting_reply::reply_param() const {
  return reply_param_;
}
inline void npt_greeting_reply::set_reply_param(::google::protobuf::int32 value) {
  set_has_reply_param();
  reply_param_ = value;
}

// -------------------------------------------------------------------

// npt_ask_help

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ASK_HELP];
inline bool npt_ask_help::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_ask_help::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_ask_help::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_ask_help::clear_type() {
  type_ = 30;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_ask_help::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_ask_help::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.ask_help_info info = 2;
inline bool npt_ask_help::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_ask_help::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_ask_help::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_ask_help::clear_info() {
  if (info_ != NULL) info_->::PB::ask_help_info::Clear();
  clear_has_info();
}
inline const ::PB::ask_help_info& npt_ask_help::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PB::ask_help_info* npt_ask_help::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PB::ask_help_info;
  return info_;
}
inline ::PB::ask_help_info* npt_ask_help::release_info() {
  clear_has_info();
  ::PB::ask_help_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void npt_ask_help::set_allocated_info(::PB::ask_help_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional int32 response_retcode = 3;
inline bool npt_ask_help::has_response_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_ask_help::set_has_response_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_ask_help::clear_has_response_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_ask_help::clear_response_retcode() {
  response_retcode_ = 0;
  clear_has_response_retcode();
}
inline ::google::protobuf::int32 npt_ask_help::response_retcode() const {
  return response_retcode_;
}
inline void npt_ask_help::set_response_retcode(::google::protobuf::int32 value) {
  set_has_response_retcode();
  response_retcode_ = value;
}

// -------------------------------------------------------------------

// npt_send_server_midas_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_SERVER_MIDAS_INFO];
inline bool npt_send_server_midas_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_send_server_midas_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_send_server_midas_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_send_server_midas_info::clear_type() {
  type_ = 31;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_send_server_midas_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_send_server_midas_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool npt_send_server_midas_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_send_server_midas_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_send_server_midas_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_send_server_midas_info::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_send_server_midas_info::roleid() const {
  return roleid_;
}
inline void npt_send_server_midas_info::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional bytes midas_openkey = 3;
inline bool npt_send_server_midas_info::has_midas_openkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_send_server_midas_info::set_has_midas_openkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_send_server_midas_info::clear_has_midas_openkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_send_server_midas_info::clear_midas_openkey() {
  if (midas_openkey_ != &::google::protobuf::internal::kEmptyString) {
    midas_openkey_->clear();
  }
  clear_has_midas_openkey();
}
inline const ::std::string& npt_send_server_midas_info::midas_openkey() const {
  return *midas_openkey_;
}
inline void npt_send_server_midas_info::set_midas_openkey(const ::std::string& value) {
  set_has_midas_openkey();
  if (midas_openkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_openkey_ = new ::std::string;
  }
  midas_openkey_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_openkey(const char* value) {
  set_has_midas_openkey();
  if (midas_openkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_openkey_ = new ::std::string;
  }
  midas_openkey_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_openkey(const void* value, size_t size) {
  set_has_midas_openkey();
  if (midas_openkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_openkey_ = new ::std::string;
  }
  midas_openkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_send_server_midas_info::mutable_midas_openkey() {
  set_has_midas_openkey();
  if (midas_openkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_openkey_ = new ::std::string;
  }
  return midas_openkey_;
}
inline ::std::string* npt_send_server_midas_info::release_midas_openkey() {
  clear_has_midas_openkey();
  if (midas_openkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = midas_openkey_;
    midas_openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_send_server_midas_info::set_allocated_midas_openkey(::std::string* midas_openkey) {
  if (midas_openkey_ != &::google::protobuf::internal::kEmptyString) {
    delete midas_openkey_;
  }
  if (midas_openkey) {
    set_has_midas_openkey();
    midas_openkey_ = midas_openkey;
  } else {
    clear_has_midas_openkey();
    midas_openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes midas_paytoken = 4;
inline bool npt_send_server_midas_info::has_midas_paytoken() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_send_server_midas_info::set_has_midas_paytoken() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_send_server_midas_info::clear_has_midas_paytoken() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_send_server_midas_info::clear_midas_paytoken() {
  if (midas_paytoken_ != &::google::protobuf::internal::kEmptyString) {
    midas_paytoken_->clear();
  }
  clear_has_midas_paytoken();
}
inline const ::std::string& npt_send_server_midas_info::midas_paytoken() const {
  return *midas_paytoken_;
}
inline void npt_send_server_midas_info::set_midas_paytoken(const ::std::string& value) {
  set_has_midas_paytoken();
  if (midas_paytoken_ == &::google::protobuf::internal::kEmptyString) {
    midas_paytoken_ = new ::std::string;
  }
  midas_paytoken_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_paytoken(const char* value) {
  set_has_midas_paytoken();
  if (midas_paytoken_ == &::google::protobuf::internal::kEmptyString) {
    midas_paytoken_ = new ::std::string;
  }
  midas_paytoken_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_paytoken(const void* value, size_t size) {
  set_has_midas_paytoken();
  if (midas_paytoken_ == &::google::protobuf::internal::kEmptyString) {
    midas_paytoken_ = new ::std::string;
  }
  midas_paytoken_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_send_server_midas_info::mutable_midas_paytoken() {
  set_has_midas_paytoken();
  if (midas_paytoken_ == &::google::protobuf::internal::kEmptyString) {
    midas_paytoken_ = new ::std::string;
  }
  return midas_paytoken_;
}
inline ::std::string* npt_send_server_midas_info::release_midas_paytoken() {
  clear_has_midas_paytoken();
  if (midas_paytoken_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = midas_paytoken_;
    midas_paytoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_send_server_midas_info::set_allocated_midas_paytoken(::std::string* midas_paytoken) {
  if (midas_paytoken_ != &::google::protobuf::internal::kEmptyString) {
    delete midas_paytoken_;
  }
  if (midas_paytoken) {
    set_has_midas_paytoken();
    midas_paytoken_ = midas_paytoken;
  } else {
    clear_has_midas_paytoken();
    midas_paytoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes midas_pf = 5;
inline bool npt_send_server_midas_info::has_midas_pf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_send_server_midas_info::set_has_midas_pf() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_send_server_midas_info::clear_has_midas_pf() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_send_server_midas_info::clear_midas_pf() {
  if (midas_pf_ != &::google::protobuf::internal::kEmptyString) {
    midas_pf_->clear();
  }
  clear_has_midas_pf();
}
inline const ::std::string& npt_send_server_midas_info::midas_pf() const {
  return *midas_pf_;
}
inline void npt_send_server_midas_info::set_midas_pf(const ::std::string& value) {
  set_has_midas_pf();
  if (midas_pf_ == &::google::protobuf::internal::kEmptyString) {
    midas_pf_ = new ::std::string;
  }
  midas_pf_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_pf(const char* value) {
  set_has_midas_pf();
  if (midas_pf_ == &::google::protobuf::internal::kEmptyString) {
    midas_pf_ = new ::std::string;
  }
  midas_pf_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_pf(const void* value, size_t size) {
  set_has_midas_pf();
  if (midas_pf_ == &::google::protobuf::internal::kEmptyString) {
    midas_pf_ = new ::std::string;
  }
  midas_pf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_send_server_midas_info::mutable_midas_pf() {
  set_has_midas_pf();
  if (midas_pf_ == &::google::protobuf::internal::kEmptyString) {
    midas_pf_ = new ::std::string;
  }
  return midas_pf_;
}
inline ::std::string* npt_send_server_midas_info::release_midas_pf() {
  clear_has_midas_pf();
  if (midas_pf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = midas_pf_;
    midas_pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_send_server_midas_info::set_allocated_midas_pf(::std::string* midas_pf) {
  if (midas_pf_ != &::google::protobuf::internal::kEmptyString) {
    delete midas_pf_;
  }
  if (midas_pf) {
    set_has_midas_pf();
    midas_pf_ = midas_pf;
  } else {
    clear_has_midas_pf();
    midas_pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes midas_pfkey = 6;
inline bool npt_send_server_midas_info::has_midas_pfkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_send_server_midas_info::set_has_midas_pfkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_send_server_midas_info::clear_has_midas_pfkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_send_server_midas_info::clear_midas_pfkey() {
  if (midas_pfkey_ != &::google::protobuf::internal::kEmptyString) {
    midas_pfkey_->clear();
  }
  clear_has_midas_pfkey();
}
inline const ::std::string& npt_send_server_midas_info::midas_pfkey() const {
  return *midas_pfkey_;
}
inline void npt_send_server_midas_info::set_midas_pfkey(const ::std::string& value) {
  set_has_midas_pfkey();
  if (midas_pfkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_pfkey_ = new ::std::string;
  }
  midas_pfkey_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_pfkey(const char* value) {
  set_has_midas_pfkey();
  if (midas_pfkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_pfkey_ = new ::std::string;
  }
  midas_pfkey_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_pfkey(const void* value, size_t size) {
  set_has_midas_pfkey();
  if (midas_pfkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_pfkey_ = new ::std::string;
  }
  midas_pfkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_send_server_midas_info::mutable_midas_pfkey() {
  set_has_midas_pfkey();
  if (midas_pfkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_pfkey_ = new ::std::string;
  }
  return midas_pfkey_;
}
inline ::std::string* npt_send_server_midas_info::release_midas_pfkey() {
  clear_has_midas_pfkey();
  if (midas_pfkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = midas_pfkey_;
    midas_pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_send_server_midas_info::set_allocated_midas_pfkey(::std::string* midas_pfkey) {
  if (midas_pfkey_ != &::google::protobuf::internal::kEmptyString) {
    delete midas_pfkey_;
  }
  if (midas_pfkey) {
    set_has_midas_pfkey();
    midas_pfkey_ = midas_pfkey;
  } else {
    clear_has_midas_pfkey();
    midas_pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_send_tencent_secure_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_TENCENT_SECURE_INFO];
inline bool npt_send_tencent_secure_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_send_tencent_secure_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_send_tencent_secure_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_send_tencent_secure_info::clear_type() {
  type_ = 33;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_send_tencent_secure_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_send_tencent_secure_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes secure_data = 2;
inline bool npt_send_tencent_secure_info::has_secure_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_send_tencent_secure_info::set_has_secure_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_send_tencent_secure_info::clear_has_secure_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_send_tencent_secure_info::clear_secure_data() {
  if (secure_data_ != &::google::protobuf::internal::kEmptyString) {
    secure_data_->clear();
  }
  clear_has_secure_data();
}
inline const ::std::string& npt_send_tencent_secure_info::secure_data() const {
  return *secure_data_;
}
inline void npt_send_tencent_secure_info::set_secure_data(const ::std::string& value) {
  set_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::kEmptyString) {
    secure_data_ = new ::std::string;
  }
  secure_data_->assign(value);
}
inline void npt_send_tencent_secure_info::set_secure_data(const char* value) {
  set_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::kEmptyString) {
    secure_data_ = new ::std::string;
  }
  secure_data_->assign(value);
}
inline void npt_send_tencent_secure_info::set_secure_data(const void* value, size_t size) {
  set_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::kEmptyString) {
    secure_data_ = new ::std::string;
  }
  secure_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_send_tencent_secure_info::mutable_secure_data() {
  set_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::kEmptyString) {
    secure_data_ = new ::std::string;
  }
  return secure_data_;
}
inline ::std::string* npt_send_tencent_secure_info::release_secure_data() {
  clear_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secure_data_;
    secure_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_send_tencent_secure_info::set_allocated_secure_data(::std::string* secure_data) {
  if (secure_data_ != &::google::protobuf::internal::kEmptyString) {
    delete secure_data_;
  }
  if (secure_data) {
    set_has_secure_data();
    secure_data_ = secure_data;
  } else {
    clear_has_secure_data();
    secure_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_send_client_midas_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_CLIENT_MIDAS_INFO];
inline bool npt_send_client_midas_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_send_client_midas_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_send_client_midas_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_send_client_midas_info::clear_type() {
  type_ = 32;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_send_client_midas_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_send_client_midas_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 midas_total_amount = 2;
inline bool npt_send_client_midas_info::has_midas_total_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_send_client_midas_info::set_has_midas_total_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_send_client_midas_info::clear_has_midas_total_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_send_client_midas_info::clear_midas_total_amount() {
  midas_total_amount_ = GOOGLE_LONGLONG(0);
  clear_has_midas_total_amount();
}
inline ::google::protobuf::int64 npt_send_client_midas_info::midas_total_amount() const {
  return midas_total_amount_;
}
inline void npt_send_client_midas_info::set_midas_total_amount(::google::protobuf::int64 value) {
  set_has_midas_total_amount();
  midas_total_amount_ = value;
}

// required int64 midas_bind_amount = 3;
inline bool npt_send_client_midas_info::has_midas_bind_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_send_client_midas_info::set_has_midas_bind_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_send_client_midas_info::clear_has_midas_bind_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_send_client_midas_info::clear_midas_bind_amount() {
  midas_bind_amount_ = GOOGLE_LONGLONG(0);
  clear_has_midas_bind_amount();
}
inline ::google::protobuf::int64 npt_send_client_midas_info::midas_bind_amount() const {
  return midas_bind_amount_;
}
inline void npt_send_client_midas_info::set_midas_bind_amount(::google::protobuf::int64 value) {
  set_has_midas_bind_amount();
  midas_bind_amount_ = value;
}

// required int64 midas_save_amt = 4;
inline bool npt_send_client_midas_info::has_midas_save_amt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_send_client_midas_info::set_has_midas_save_amt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_send_client_midas_info::clear_has_midas_save_amt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_send_client_midas_info::clear_midas_save_amt() {
  midas_save_amt_ = GOOGLE_LONGLONG(0);
  clear_has_midas_save_amt();
}
inline ::google::protobuf::int64 npt_send_client_midas_info::midas_save_amt() const {
  return midas_save_amt_;
}
inline void npt_send_client_midas_info::set_midas_save_amt(::google::protobuf::int64 value) {
  set_has_midas_save_amt();
  midas_save_amt_ = value;
}

// -------------------------------------------------------------------

// npt_send_midas_bad_token

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_MIDAS_BAD_TOKEN];
inline bool npt_send_midas_bad_token::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_send_midas_bad_token::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_send_midas_bad_token::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_send_midas_bad_token::clear_type() {
  type_ = 36;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_send_midas_bad_token::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_send_midas_bad_token::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 midas_op = 2;
inline bool npt_send_midas_bad_token::has_midas_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_send_midas_bad_token::set_has_midas_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_send_midas_bad_token::clear_has_midas_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_send_midas_bad_token::clear_midas_op() {
  midas_op_ = 0;
  clear_has_midas_op();
}
inline ::google::protobuf::int32 npt_send_midas_bad_token::midas_op() const {
  return midas_op_;
}
inline void npt_send_midas_bad_token::set_midas_op(::google::protobuf::int32 value) {
  set_has_midas_op();
  midas_op_ = value;
}

// required int32 midas_retcode = 3;
inline bool npt_send_midas_bad_token::has_midas_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_send_midas_bad_token::set_has_midas_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_send_midas_bad_token::clear_has_midas_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_send_midas_bad_token::clear_midas_retcode() {
  midas_retcode_ = 0;
  clear_has_midas_retcode();
}
inline ::google::protobuf::int32 npt_send_midas_bad_token::midas_retcode() const {
  return midas_retcode_;
}
inline void npt_send_midas_bad_token::set_midas_retcode(::google::protobuf::int32 value) {
  set_has_midas_retcode();
  midas_retcode_ = value;
}

// -------------------------------------------------------------------

// npt_officer_gift_get

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_GET];
inline bool npt_officer_gift_get::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_officer_gift_get::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_officer_gift_get::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_officer_gift_get::clear_type() {
  type_ = 34;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_officer_gift_get::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_officer_gift_get::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 gift_id = 2;
inline bool npt_officer_gift_get::has_gift_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_officer_gift_get::set_has_gift_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_officer_gift_get::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_officer_gift_get::clear_gift_id() {
  gift_id_ = 0;
  clear_has_gift_id();
}
inline ::google::protobuf::int32 npt_officer_gift_get::gift_id() const {
  return gift_id_;
}
inline void npt_officer_gift_get::set_gift_id(::google::protobuf::int32 value) {
  set_has_gift_id();
  gift_id_ = value;
}

// -------------------------------------------------------------------

// npt_officer_gift_notify

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_NOTIFY];
inline bool npt_officer_gift_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_officer_gift_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_officer_gift_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_officer_gift_notify::clear_type() {
  type_ = 35;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_officer_gift_notify::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_officer_gift_notify::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 gift_id = 2;
inline bool npt_officer_gift_notify::has_gift_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_officer_gift_notify::set_has_gift_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_officer_gift_notify::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_officer_gift_notify::clear_gift_id() {
  gift_id_ = 0;
  clear_has_gift_id();
}
inline ::google::protobuf::int32 npt_officer_gift_notify::gift_id() const {
  return gift_id_;
}
inline void npt_officer_gift_notify::set_gift_id(::google::protobuf::int32 value) {
  set_has_gift_id();
  gift_id_ = value;
}

// -------------------------------------------------------------------

// npt_weak_nation_gift_get

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_GET];
inline bool npt_weak_nation_gift_get::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_weak_nation_gift_get::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_weak_nation_gift_get::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_weak_nation_gift_get::clear_type() {
  type_ = 50;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_weak_nation_gift_get::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_weak_nation_gift_get::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 gift_id = 2;
inline bool npt_weak_nation_gift_get::has_gift_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_weak_nation_gift_get::set_has_gift_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_weak_nation_gift_get::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_weak_nation_gift_get::clear_gift_id() {
  gift_id_ = 0;
  clear_has_gift_id();
}
inline ::google::protobuf::int32 npt_weak_nation_gift_get::gift_id() const {
  return gift_id_;
}
inline void npt_weak_nation_gift_get::set_gift_id(::google::protobuf::int32 value) {
  set_has_gift_id();
  gift_id_ = value;
}

// -------------------------------------------------------------------

// npt_weak_nation_gift_notify

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_NOTIFY];
inline bool npt_weak_nation_gift_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_weak_nation_gift_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_weak_nation_gift_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_weak_nation_gift_notify::clear_type() {
  type_ = 49;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_weak_nation_gift_notify::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_weak_nation_gift_notify::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 gift_id = 2;
inline bool npt_weak_nation_gift_notify::has_gift_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_weak_nation_gift_notify::set_has_gift_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_weak_nation_gift_notify::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_weak_nation_gift_notify::clear_gift_id() {
  gift_id_ = 0;
  clear_has_gift_id();
}
inline ::google::protobuf::int32 npt_weak_nation_gift_notify::gift_id() const {
  return gift_id_;
}
inline void npt_weak_nation_gift_notify::set_gift_id(::google::protobuf::int32 value) {
  set_has_gift_id();
  gift_id_ = value;
}

// -------------------------------------------------------------------

// npt_server_info_notify

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SERVER_INFO_NOTIFY];
inline bool npt_server_info_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_server_info_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_server_info_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_server_info_notify::clear_type() {
  type_ = 51;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_server_info_notify::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_server_info_notify::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 free_war_left = 2;
inline bool npt_server_info_notify::has_free_war_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_server_info_notify::set_has_free_war_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_server_info_notify::clear_has_free_war_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_server_info_notify::clear_free_war_left() {
  free_war_left_ = 0;
  clear_has_free_war_left();
}
inline ::google::protobuf::int32 npt_server_info_notify::free_war_left() const {
  return free_war_left_;
}
inline void npt_server_info_notify::set_free_war_left(::google::protobuf::int32 value) {
  set_has_free_war_left();
  free_war_left_ = value;
}

// -------------------------------------------------------------------

// npt_team_recruit_operate

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE];
inline bool npt_team_recruit_operate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_team_recruit_operate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_team_recruit_operate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_team_recruit_operate::clear_type() {
  type_ = 37;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_team_recruit_operate::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_team_recruit_operate::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 operate_type = 2;
inline bool npt_team_recruit_operate::has_operate_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_team_recruit_operate::set_has_operate_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_team_recruit_operate::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_team_recruit_operate::clear_operate_type() {
  operate_type_ = 0;
  clear_has_operate_type();
}
inline ::google::protobuf::int32 npt_team_recruit_operate::operate_type() const {
  return operate_type_;
}
inline void npt_team_recruit_operate::set_operate_type(::google::protobuf::int32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// optional int64 param1 = 3;
inline bool npt_team_recruit_operate::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_team_recruit_operate::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_team_recruit_operate::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_team_recruit_operate::clear_param1() {
  param1_ = GOOGLE_LONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::int64 npt_team_recruit_operate::param1() const {
  return param1_;
}
inline void npt_team_recruit_operate::set_param1(::google::protobuf::int64 value) {
  set_has_param1();
  param1_ = value;
}

// optional int64 param2 = 4;
inline bool npt_team_recruit_operate::has_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_team_recruit_operate::set_has_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_team_recruit_operate::clear_has_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_team_recruit_operate::clear_param2() {
  param2_ = GOOGLE_LONGLONG(0);
  clear_has_param2();
}
inline ::google::protobuf::int64 npt_team_recruit_operate::param2() const {
  return param2_;
}
inline void npt_team_recruit_operate::set_param2(::google::protobuf::int64 value) {
  set_has_param2();
  param2_ = value;
}

// optional int64 param3 = 5;
inline bool npt_team_recruit_operate::has_param3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_team_recruit_operate::set_has_param3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_team_recruit_operate::clear_has_param3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_team_recruit_operate::clear_param3() {
  param3_ = GOOGLE_LONGLONG(0);
  clear_has_param3();
}
inline ::google::protobuf::int64 npt_team_recruit_operate::param3() const {
  return param3_;
}
inline void npt_team_recruit_operate::set_param3(::google::protobuf::int64 value) {
  set_has_param3();
  param3_ = value;
}

// -------------------------------------------------------------------

// recruit_info

// optional int32 min_level = 1;
inline bool recruit_info::has_min_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void recruit_info::set_has_min_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void recruit_info::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void recruit_info::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
inline ::google::protobuf::int32 recruit_info::min_level() const {
  return min_level_;
}
inline void recruit_info::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
}

// optional int32 inst_tid = 2;
inline bool recruit_info::has_inst_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void recruit_info::set_has_inst_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void recruit_info::clear_has_inst_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void recruit_info::clear_inst_tid() {
  inst_tid_ = 0;
  clear_has_inst_tid();
}
inline ::google::protobuf::int32 recruit_info::inst_tid() const {
  return inst_tid_;
}
inline void recruit_info::set_inst_tid(::google::protobuf::int32 value) {
  set_has_inst_tid();
  inst_tid_ = value;
}

// optional int32 team_number = 3;
inline bool recruit_info::has_team_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void recruit_info::set_has_team_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void recruit_info::clear_has_team_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void recruit_info::clear_team_number() {
  team_number_ = 0;
  clear_has_team_number();
}
inline ::google::protobuf::int32 recruit_info::team_number() const {
  return team_number_;
}
inline void recruit_info::set_team_number(::google::protobuf::int32 value) {
  set_has_team_number();
  team_number_ = value;
}

// optional bytes leader_name = 4;
inline bool recruit_info::has_leader_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void recruit_info::set_has_leader_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void recruit_info::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void recruit_info::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& recruit_info::leader_name() const {
  return *leader_name_;
}
inline void recruit_info::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void recruit_info::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void recruit_info::set_leader_name(const void* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* recruit_info::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  return leader_name_;
}
inline ::std::string* recruit_info::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void recruit_info::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (leader_name) {
    set_has_leader_name();
    leader_name_ = leader_name;
  } else {
    clear_has_leader_name();
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 leader_id = 5;
inline bool recruit_info::has_leader_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void recruit_info::set_has_leader_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void recruit_info::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void recruit_info::clear_leader_id() {
  leader_id_ = GOOGLE_LONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::int64 recruit_info::leader_id() const {
  return leader_id_;
}
inline void recruit_info::set_leader_id(::google::protobuf::int64 value) {
  set_has_leader_id();
  leader_id_ = value;
}

// -------------------------------------------------------------------

// npt_team_recruit_operate_reply

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE_REPLY];
inline bool npt_team_recruit_operate_reply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_team_recruit_operate_reply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_team_recruit_operate_reply::clear_type() {
  type_ = 38;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_team_recruit_operate_reply::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_team_recruit_operate_reply::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 operate_type = 2;
inline bool npt_team_recruit_operate_reply::has_operate_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_operate_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_team_recruit_operate_reply::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_team_recruit_operate_reply::clear_operate_type() {
  operate_type_ = 0;
  clear_has_operate_type();
}
inline ::google::protobuf::int32 npt_team_recruit_operate_reply::operate_type() const {
  return operate_type_;
}
inline void npt_team_recruit_operate_reply::set_operate_type(::google::protobuf::int32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// optional int32 operate_result = 3;
inline bool npt_team_recruit_operate_reply::has_operate_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_operate_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_team_recruit_operate_reply::clear_has_operate_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_team_recruit_operate_reply::clear_operate_result() {
  operate_result_ = 0;
  clear_has_operate_result();
}
inline ::google::protobuf::int32 npt_team_recruit_operate_reply::operate_result() const {
  return operate_result_;
}
inline void npt_team_recruit_operate_reply::set_operate_result(::google::protobuf::int32 value) {
  set_has_operate_result();
  operate_result_ = value;
}

// optional int64 param1 = 4;
inline bool npt_team_recruit_operate_reply::has_param1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_param1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_team_recruit_operate_reply::clear_has_param1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_team_recruit_operate_reply::clear_param1() {
  param1_ = GOOGLE_LONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::int64 npt_team_recruit_operate_reply::param1() const {
  return param1_;
}
inline void npt_team_recruit_operate_reply::set_param1(::google::protobuf::int64 value) {
  set_has_param1();
  param1_ = value;
}

// optional int64 param2 = 5;
inline bool npt_team_recruit_operate_reply::has_param2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_param2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_team_recruit_operate_reply::clear_has_param2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_team_recruit_operate_reply::clear_param2() {
  param2_ = GOOGLE_LONGLONG(0);
  clear_has_param2();
}
inline ::google::protobuf::int64 npt_team_recruit_operate_reply::param2() const {
  return param2_;
}
inline void npt_team_recruit_operate_reply::set_param2(::google::protobuf::int64 value) {
  set_has_param2();
  param2_ = value;
}

// optional int64 param3 = 6;
inline bool npt_team_recruit_operate_reply::has_param3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_param3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_team_recruit_operate_reply::clear_has_param3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_team_recruit_operate_reply::clear_param3() {
  param3_ = GOOGLE_LONGLONG(0);
  clear_has_param3();
}
inline ::google::protobuf::int64 npt_team_recruit_operate_reply::param3() const {
  return param3_;
}
inline void npt_team_recruit_operate_reply::set_param3(::google::protobuf::int64 value) {
  set_has_param3();
  param3_ = value;
}

// repeated .PB.recruit_info recruit_list = 7;
inline int npt_team_recruit_operate_reply::recruit_list_size() const {
  return recruit_list_.size();
}
inline void npt_team_recruit_operate_reply::clear_recruit_list() {
  recruit_list_.Clear();
}
inline const ::PB::recruit_info& npt_team_recruit_operate_reply::recruit_list(int index) const {
  return recruit_list_.Get(index);
}
inline ::PB::recruit_info* npt_team_recruit_operate_reply::mutable_recruit_list(int index) {
  return recruit_list_.Mutable(index);
}
inline ::PB::recruit_info* npt_team_recruit_operate_reply::add_recruit_list() {
  return recruit_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::recruit_info >&
npt_team_recruit_operate_reply::recruit_list() const {
  return recruit_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::recruit_info >*
npt_team_recruit_operate_reply::mutable_recruit_list() {
  return &recruit_list_;
}

// optional bytes param4 = 8;
inline bool npt_team_recruit_operate_reply::has_param4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_param4() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_team_recruit_operate_reply::clear_has_param4() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_team_recruit_operate_reply::clear_param4() {
  if (param4_ != &::google::protobuf::internal::kEmptyString) {
    param4_->clear();
  }
  clear_has_param4();
}
inline const ::std::string& npt_team_recruit_operate_reply::param4() const {
  return *param4_;
}
inline void npt_team_recruit_operate_reply::set_param4(const ::std::string& value) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  param4_->assign(value);
}
inline void npt_team_recruit_operate_reply::set_param4(const char* value) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  param4_->assign(value);
}
inline void npt_team_recruit_operate_reply::set_param4(const void* value, size_t size) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  param4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_team_recruit_operate_reply::mutable_param4() {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  return param4_;
}
inline ::std::string* npt_team_recruit_operate_reply::release_param4() {
  clear_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param4_;
    param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_team_recruit_operate_reply::set_allocated_param4(::std::string* param4) {
  if (param4_ != &::google::protobuf::internal::kEmptyString) {
    delete param4_;
  }
  if (param4) {
    set_has_param4();
    param4_ = param4;
  } else {
    clear_has_param4();
    param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PB.a3d_pos param_pos = 9;
inline bool npt_team_recruit_operate_reply::has_param_pos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_param_pos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void npt_team_recruit_operate_reply::clear_has_param_pos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void npt_team_recruit_operate_reply::clear_param_pos() {
  if (param_pos_ != NULL) param_pos_->::PB::a3d_pos::Clear();
  clear_has_param_pos();
}
inline const ::PB::a3d_pos& npt_team_recruit_operate_reply::param_pos() const {
  return param_pos_ != NULL ? *param_pos_ : *default_instance_->param_pos_;
}
inline ::PB::a3d_pos* npt_team_recruit_operate_reply::mutable_param_pos() {
  set_has_param_pos();
  if (param_pos_ == NULL) param_pos_ = new ::PB::a3d_pos;
  return param_pos_;
}
inline ::PB::a3d_pos* npt_team_recruit_operate_reply::release_param_pos() {
  clear_has_param_pos();
  ::PB::a3d_pos* temp = param_pos_;
  param_pos_ = NULL;
  return temp;
}
inline void npt_team_recruit_operate_reply::set_allocated_param_pos(::PB::a3d_pos* param_pos) {
  delete param_pos_;
  param_pos_ = param_pos;
  if (param_pos) {
    set_has_param_pos();
  } else {
    clear_has_param_pos();
  }
}

// -------------------------------------------------------------------

// npt_update_grc_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_UPDATE_GRC_INFO];
inline bool npt_update_grc_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_update_grc_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_update_grc_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_update_grc_info::clear_type() {
  type_ = 39;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_update_grc_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_update_grc_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// npt_grc_get_friend_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GET_FRIEND_INFO];
inline bool npt_grc_get_friend_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_get_friend_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_get_friend_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_get_friend_info::clear_type() {
  type_ = 40;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_get_friend_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_get_friend_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 start = 2;
inline bool npt_grc_get_friend_info::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_get_friend_info::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_get_friend_info::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_get_friend_info::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 npt_grc_get_friend_info::start() const {
  return start_;
}
inline void npt_grc_get_friend_info::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
}

// required int32 offset = 3;
inline bool npt_grc_get_friend_info::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_get_friend_info::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_get_friend_info::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_get_friend_info::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 npt_grc_get_friend_info::offset() const {
  return offset_;
}
inline void npt_grc_get_friend_info::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// npt_grc_send_gift

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT];
inline bool npt_grc_send_gift::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_send_gift::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_send_gift::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_send_gift::clear_type() {
  type_ = 41;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_send_gift::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_send_gift::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 giftType = 2;
inline bool npt_grc_send_gift::has_gifttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_send_gift::set_has_gifttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_send_gift::clear_has_gifttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_send_gift::clear_gifttype() {
  gifttype_ = 0;
  clear_has_gifttype();
}
inline ::google::protobuf::int32 npt_grc_send_gift::gifttype() const {
  return gifttype_;
}
inline void npt_grc_send_gift::set_gifttype(::google::protobuf::int32 value) {
  set_has_gifttype();
  gifttype_ = value;
}

// required int64 giftCount = 3;
inline bool npt_grc_send_gift::has_giftcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_send_gift::set_has_giftcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_send_gift::clear_has_giftcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_send_gift::clear_giftcount() {
  giftcount_ = GOOGLE_LONGLONG(0);
  clear_has_giftcount();
}
inline ::google::protobuf::int64 npt_grc_send_gift::giftcount() const {
  return giftcount_;
}
inline void npt_grc_send_gift::set_giftcount(::google::protobuf::int64 value) {
  set_has_giftcount();
  giftcount_ = value;
}

// required bytes to = 4;
inline bool npt_grc_send_gift::has_to() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_grc_send_gift::set_has_to() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_grc_send_gift::clear_has_to() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_grc_send_gift::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& npt_grc_send_gift::to() const {
  return *to_;
}
inline void npt_grc_send_gift::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void npt_grc_send_gift::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void npt_grc_send_gift::set_to(const void* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_grc_send_gift::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* npt_grc_send_gift::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_grc_send_gift::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_grc_rcv_gift

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT];
inline bool npt_grc_rcv_gift::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_rcv_gift::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_rcv_gift::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_rcv_gift::clear_type() {
  type_ = 42;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_rcv_gift::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_rcv_gift::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 giftType = 2;
inline bool npt_grc_rcv_gift::has_gifttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_rcv_gift::set_has_gifttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_rcv_gift::clear_has_gifttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_rcv_gift::clear_gifttype() {
  gifttype_ = 0;
  clear_has_gifttype();
}
inline ::google::protobuf::int32 npt_grc_rcv_gift::gifttype() const {
  return gifttype_;
}
inline void npt_grc_rcv_gift::set_gifttype(::google::protobuf::int32 value) {
  set_has_gifttype();
  gifttype_ = value;
}

// required int64 giftCount = 3;
inline bool npt_grc_rcv_gift::has_giftcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_rcv_gift::set_has_giftcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_rcv_gift::clear_has_giftcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_rcv_gift::clear_giftcount() {
  giftcount_ = GOOGLE_LONGLONG(0);
  clear_has_giftcount();
}
inline ::google::protobuf::int64 npt_grc_rcv_gift::giftcount() const {
  return giftcount_;
}
inline void npt_grc_rcv_gift::set_giftcount(::google::protobuf::int64 value) {
  set_has_giftcount();
  giftcount_ = value;
}

// required int64 timestamp = 4;
inline bool npt_grc_rcv_gift::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_grc_rcv_gift::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_grc_rcv_gift::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_grc_rcv_gift::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 npt_grc_rcv_gift::timestamp() const {
  return timestamp_;
}
inline void npt_grc_rcv_gift::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required bytes from = 5;
inline bool npt_grc_rcv_gift::has_from() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_grc_rcv_gift::set_has_from() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_grc_rcv_gift::clear_has_from() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_grc_rcv_gift::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& npt_grc_rcv_gift::from() const {
  return *from_;
}
inline void npt_grc_rcv_gift::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void npt_grc_rcv_gift::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void npt_grc_rcv_gift::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_grc_rcv_gift::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* npt_grc_rcv_gift::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_grc_rcv_gift::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// grc_friend_info

// required bytes openid = 1;
inline bool grc_friend_info::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void grc_friend_info::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void grc_friend_info::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void grc_friend_info::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& grc_friend_info::openid() const {
  return *openid_;
}
inline void grc_friend_info::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void grc_friend_info::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void grc_friend_info::set_openid(const void* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_friend_info::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* grc_friend_info::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_friend_info::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes nickname = 2;
inline bool grc_friend_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void grc_friend_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void grc_friend_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void grc_friend_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& grc_friend_info::nickname() const {
  return *nickname_;
}
inline void grc_friend_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void grc_friend_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void grc_friend_info::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_friend_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* grc_friend_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_friend_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes figure_url = 3;
inline bool grc_friend_info::has_figure_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void grc_friend_info::set_has_figure_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void grc_friend_info::clear_has_figure_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void grc_friend_info::clear_figure_url() {
  if (figure_url_ != &::google::protobuf::internal::kEmptyString) {
    figure_url_->clear();
  }
  clear_has_figure_url();
}
inline const ::std::string& grc_friend_info::figure_url() const {
  return *figure_url_;
}
inline void grc_friend_info::set_figure_url(const ::std::string& value) {
  set_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    figure_url_ = new ::std::string;
  }
  figure_url_->assign(value);
}
inline void grc_friend_info::set_figure_url(const char* value) {
  set_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    figure_url_ = new ::std::string;
  }
  figure_url_->assign(value);
}
inline void grc_friend_info::set_figure_url(const void* value, size_t size) {
  set_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    figure_url_ = new ::std::string;
  }
  figure_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_friend_info::mutable_figure_url() {
  set_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    figure_url_ = new ::std::string;
  }
  return figure_url_;
}
inline ::std::string* grc_friend_info::release_figure_url() {
  clear_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = figure_url_;
    figure_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_friend_info::set_allocated_figure_url(::std::string* figure_url) {
  if (figure_url_ != &::google::protobuf::internal::kEmptyString) {
    delete figure_url_;
  }
  if (figure_url) {
    set_has_figure_url();
    figure_url_ = figure_url;
  } else {
    clear_has_figure_url();
    figure_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 roleid = 4;
inline bool grc_friend_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void grc_friend_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void grc_friend_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void grc_friend_info::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 grc_friend_info::roleid() const {
  return roleid_;
}
inline void grc_friend_info::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required bytes rolename = 5;
inline bool grc_friend_info::has_rolename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void grc_friend_info::set_has_rolename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void grc_friend_info::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void grc_friend_info::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& grc_friend_info::rolename() const {
  return *rolename_;
}
inline void grc_friend_info::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void grc_friend_info::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void grc_friend_info::set_rolename(const void* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_friend_info::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* grc_friend_info::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_friend_info::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 6;
inline bool grc_friend_info::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void grc_friend_info::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void grc_friend_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void grc_friend_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 grc_friend_info::level() const {
  return level_;
}
inline void grc_friend_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 gender = 7;
inline bool grc_friend_info::has_gender() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void grc_friend_info::set_has_gender() {
  _has_bits_[0] |= 0x00000040u;
}
inline void grc_friend_info::clear_has_gender() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void grc_friend_info::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::google::protobuf::int32 grc_friend_info::gender() const {
  return gender_;
}
inline void grc_friend_info::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
}

// required int32 profession = 8;
inline bool grc_friend_info::has_profession() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void grc_friend_info::set_has_profession() {
  _has_bits_[0] |= 0x00000080u;
}
inline void grc_friend_info::clear_has_profession() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void grc_friend_info::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 grc_friend_info::profession() const {
  return profession_;
}
inline void grc_friend_info::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// required int32 nation = 9;
inline bool grc_friend_info::has_nation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void grc_friend_info::set_has_nation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void grc_friend_info::clear_has_nation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void grc_friend_info::clear_nation() {
  nation_ = 0;
  clear_has_nation();
}
inline ::google::protobuf::int32 grc_friend_info::nation() const {
  return nation_;
}
inline void grc_friend_info::set_nation(::google::protobuf::int32 value) {
  set_has_nation();
  nation_ = value;
}

// required int64 fightingcapacity = 10;
inline bool grc_friend_info::has_fightingcapacity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void grc_friend_info::set_has_fightingcapacity() {
  _has_bits_[0] |= 0x00000200u;
}
inline void grc_friend_info::clear_has_fightingcapacity() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void grc_friend_info::clear_fightingcapacity() {
  fightingcapacity_ = GOOGLE_LONGLONG(0);
  clear_has_fightingcapacity();
}
inline ::google::protobuf::int64 grc_friend_info::fightingcapacity() const {
  return fightingcapacity_;
}
inline void grc_friend_info::set_fightingcapacity(::google::protobuf::int64 value) {
  set_has_fightingcapacity();
  fightingcapacity_ = value;
}

// required bool sameserver = 11;
inline bool grc_friend_info::has_sameserver() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void grc_friend_info::set_has_sameserver() {
  _has_bits_[0] |= 0x00000400u;
}
inline void grc_friend_info::clear_has_sameserver() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void grc_friend_info::clear_sameserver() {
  sameserver_ = false;
  clear_has_sameserver();
}
inline bool grc_friend_info::sameserver() const {
  return sameserver_;
}
inline void grc_friend_info::set_sameserver(bool value) {
  set_has_sameserver();
  sameserver_ = value;
}

// required int32 vipinfo = 12;
inline bool grc_friend_info::has_vipinfo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void grc_friend_info::set_has_vipinfo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void grc_friend_info::clear_has_vipinfo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void grc_friend_info::clear_vipinfo() {
  vipinfo_ = 0;
  clear_has_vipinfo();
}
inline ::google::protobuf::int32 grc_friend_info::vipinfo() const {
  return vipinfo_;
}
inline void grc_friend_info::set_vipinfo(::google::protobuf::int32 value) {
  set_has_vipinfo();
  vipinfo_ = value;
}

// -------------------------------------------------------------------

// npt_grc_friend_list

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_FRIEND_LIST];
inline bool npt_grc_friend_list::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_friend_list::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_friend_list::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_friend_list::clear_type() {
  type_ = 43;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_friend_list::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_friend_list::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 retcode = 2;
inline bool npt_grc_friend_list::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_friend_list::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_friend_list::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_friend_list::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_grc_friend_list::retcode() const {
  return retcode_;
}
inline void npt_grc_friend_list::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int32 total_friend_count = 3;
inline bool npt_grc_friend_list::has_total_friend_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_friend_list::set_has_total_friend_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_friend_list::clear_has_total_friend_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_friend_list::clear_total_friend_count() {
  total_friend_count_ = 0;
  clear_has_total_friend_count();
}
inline ::google::protobuf::int32 npt_grc_friend_list::total_friend_count() const {
  return total_friend_count_;
}
inline void npt_grc_friend_list::set_total_friend_count(::google::protobuf::int32 value) {
  set_has_total_friend_count();
  total_friend_count_ = value;
}

// repeated .PB.grc_friend_info friend = 4;
inline int npt_grc_friend_list::friend__size() const {
  return friend__.size();
}
inline void npt_grc_friend_list::clear_friend_() {
  friend__.Clear();
}
inline const ::PB::grc_friend_info& npt_grc_friend_list::friend_(int index) const {
  return friend__.Get(index);
}
inline ::PB::grc_friend_info* npt_grc_friend_list::mutable_friend_(int index) {
  return friend__.Mutable(index);
}
inline ::PB::grc_friend_info* npt_grc_friend_list::add_friend_() {
  return friend__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_friend_info >&
npt_grc_friend_list::friend_() const {
  return friend__;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::grc_friend_info >*
npt_grc_friend_list::mutable_friend_() {
  return &friend__;
}

// -------------------------------------------------------------------

// grc_gift_info

// required int32 gift_type = 1;
inline bool grc_gift_info::has_gift_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void grc_gift_info::set_has_gift_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void grc_gift_info::clear_has_gift_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void grc_gift_info::clear_gift_type() {
  gift_type_ = 0;
  clear_has_gift_type();
}
inline ::google::protobuf::int32 grc_gift_info::gift_type() const {
  return gift_type_;
}
inline void grc_gift_info::set_gift_type(::google::protobuf::int32 value) {
  set_has_gift_type();
  gift_type_ = value;
}

// required bytes from = 2;
inline bool grc_gift_info::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void grc_gift_info::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void grc_gift_info::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void grc_gift_info::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& grc_gift_info::from() const {
  return *from_;
}
inline void grc_gift_info::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void grc_gift_info::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void grc_gift_info::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_gift_info::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* grc_gift_info::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_gift_info::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes to = 3;
inline bool grc_gift_info::has_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void grc_gift_info::set_has_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void grc_gift_info::clear_has_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void grc_gift_info::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& grc_gift_info::to() const {
  return *to_;
}
inline void grc_gift_info::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void grc_gift_info::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void grc_gift_info::set_to(const void* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_gift_info::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* grc_gift_info::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_gift_info::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 count = 4;
inline bool grc_gift_info::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void grc_gift_info::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void grc_gift_info::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void grc_gift_info::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::int64 grc_gift_info::count() const {
  return count_;
}
inline void grc_gift_info::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
}

// required int32 flag = 5;
inline bool grc_gift_info::has_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void grc_gift_info::set_has_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void grc_gift_info::clear_has_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void grc_gift_info::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 grc_gift_info::flag() const {
  return flag_;
}
inline void grc_gift_info::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// required int64 timestamp = 6;
inline bool grc_gift_info::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void grc_gift_info::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void grc_gift_info::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void grc_gift_info::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 grc_gift_info::timestamp() const {
  return timestamp_;
}
inline void grc_gift_info::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required int32 serialid = 7;
inline bool grc_gift_info::has_serialid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void grc_gift_info::set_has_serialid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void grc_gift_info::clear_has_serialid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void grc_gift_info::clear_serialid() {
  serialid_ = 0;
  clear_has_serialid();
}
inline ::google::protobuf::int32 grc_gift_info::serialid() const {
  return serialid_;
}
inline void grc_gift_info::set_serialid(::google::protobuf::int32 value) {
  set_has_serialid();
  serialid_ = value;
}

// optional bytes nickname = 8;
inline bool grc_gift_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void grc_gift_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void grc_gift_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void grc_gift_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& grc_gift_info::nickname() const {
  return *nickname_;
}
inline void grc_gift_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void grc_gift_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void grc_gift_info::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_gift_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* grc_gift_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_gift_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// grc_user_gift_info

// required int32 gift_type = 1;
inline bool grc_user_gift_info::has_gift_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void grc_user_gift_info::set_has_gift_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void grc_user_gift_info::clear_has_gift_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void grc_user_gift_info::clear_gift_type() {
  gift_type_ = 0;
  clear_has_gift_type();
}
inline ::google::protobuf::int32 grc_user_gift_info::gift_type() const {
  return gift_type_;
}
inline void grc_user_gift_info::set_gift_type(::google::protobuf::int32 value) {
  set_has_gift_type();
  gift_type_ = value;
}

// repeated .PB.grc_gift_info giftsend = 2;
inline int grc_user_gift_info::giftsend_size() const {
  return giftsend_.size();
}
inline void grc_user_gift_info::clear_giftsend() {
  giftsend_.Clear();
}
inline const ::PB::grc_gift_info& grc_user_gift_info::giftsend(int index) const {
  return giftsend_.Get(index);
}
inline ::PB::grc_gift_info* grc_user_gift_info::mutable_giftsend(int index) {
  return giftsend_.Mutable(index);
}
inline ::PB::grc_gift_info* grc_user_gift_info::add_giftsend() {
  return giftsend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >&
grc_user_gift_info::giftsend() const {
  return giftsend_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >*
grc_user_gift_info::mutable_giftsend() {
  return &giftsend_;
}

// required int64 giftreceive_times = 3;
inline bool grc_user_gift_info::has_giftreceive_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void grc_user_gift_info::set_has_giftreceive_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void grc_user_gift_info::clear_has_giftreceive_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void grc_user_gift_info::clear_giftreceive_times() {
  giftreceive_times_ = GOOGLE_LONGLONG(0);
  clear_has_giftreceive_times();
}
inline ::google::protobuf::int64 grc_user_gift_info::giftreceive_times() const {
  return giftreceive_times_;
}
inline void grc_user_gift_info::set_giftreceive_times(::google::protobuf::int64 value) {
  set_has_giftreceive_times();
  giftreceive_times_ = value;
}

// repeated .PB.grc_gift_info giftreceive = 4;
inline int grc_user_gift_info::giftreceive_size() const {
  return giftreceive_.size();
}
inline void grc_user_gift_info::clear_giftreceive() {
  giftreceive_.Clear();
}
inline const ::PB::grc_gift_info& grc_user_gift_info::giftreceive(int index) const {
  return giftreceive_.Get(index);
}
inline ::PB::grc_gift_info* grc_user_gift_info::mutable_giftreceive(int index) {
  return giftreceive_.Mutable(index);
}
inline ::PB::grc_gift_info* grc_user_gift_info::add_giftreceive() {
  return giftreceive_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >&
grc_user_gift_info::giftreceive() const {
  return giftreceive_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >*
grc_user_gift_info::mutable_giftreceive() {
  return &giftreceive_;
}

// -------------------------------------------------------------------

// npt_grc_gift_list

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GIFT_LIST];
inline bool npt_grc_gift_list::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_gift_list::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_gift_list::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_gift_list::clear_type() {
  type_ = 44;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_gift_list::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_gift_list::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.grc_user_gift_info gift = 2;
inline int npt_grc_gift_list::gift_size() const {
  return gift_.size();
}
inline void npt_grc_gift_list::clear_gift() {
  gift_.Clear();
}
inline const ::PB::grc_user_gift_info& npt_grc_gift_list::gift(int index) const {
  return gift_.Get(index);
}
inline ::PB::grc_user_gift_info* npt_grc_gift_list::mutable_gift(int index) {
  return gift_.Mutable(index);
}
inline ::PB::grc_user_gift_info* npt_grc_gift_list::add_gift() {
  return gift_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_user_gift_info >&
npt_grc_gift_list::gift() const {
  return gift_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::grc_user_gift_info >*
npt_grc_gift_list::mutable_gift() {
  return &gift_;
}

// -------------------------------------------------------------------

// npt_grc_send_gift_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT_RE];
inline bool npt_grc_send_gift_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_send_gift_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_send_gift_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_send_gift_re::clear_type() {
  type_ = 45;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_send_gift_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_send_gift_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required bytes to = 2;
inline bool npt_grc_send_gift_re::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_send_gift_re::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_send_gift_re::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_send_gift_re::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& npt_grc_send_gift_re::to() const {
  return *to_;
}
inline void npt_grc_send_gift_re::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void npt_grc_send_gift_re::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void npt_grc_send_gift_re::set_to(const void* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_grc_send_gift_re::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* npt_grc_send_gift_re::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_grc_send_gift_re::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 retcode = 3;
inline bool npt_grc_send_gift_re::has_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_send_gift_re::set_has_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_send_gift_re::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_send_gift_re::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_grc_send_gift_re::retcode() const {
  return retcode_;
}
inline void npt_grc_send_gift_re::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// -------------------------------------------------------------------

// npt_grc_rcv_gift_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT_RE];
inline bool npt_grc_rcv_gift_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_rcv_gift_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_rcv_gift_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_rcv_gift_re::clear_type() {
  type_ = 46;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_rcv_gift_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_rcv_gift_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required bytes from = 2;
inline bool npt_grc_rcv_gift_re::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_rcv_gift_re::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_rcv_gift_re::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_rcv_gift_re::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& npt_grc_rcv_gift_re::from() const {
  return *from_;
}
inline void npt_grc_rcv_gift_re::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void npt_grc_rcv_gift_re::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void npt_grc_rcv_gift_re::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_grc_rcv_gift_re::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* npt_grc_rcv_gift_re::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_grc_rcv_gift_re::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 retcode = 3;
inline bool npt_grc_rcv_gift_re::has_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_rcv_gift_re::set_has_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_rcv_gift_re::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_rcv_gift_re::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_grc_rcv_gift_re::retcode() const {
  return retcode_;
}
inline void npt_grc_rcv_gift_re::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// -------------------------------------------------------------------

// npt_grc_turn_on_off

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_TURN_ON_OFF];
inline bool npt_grc_turn_on_off::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_turn_on_off::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_turn_on_off::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_turn_on_off::clear_type() {
  type_ = 54;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_turn_on_off::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_turn_on_off::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 giftKind = 2;
inline bool npt_grc_turn_on_off::has_giftkind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_turn_on_off::set_has_giftkind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_turn_on_off::clear_has_giftkind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_turn_on_off::clear_giftkind() {
  giftkind_ = 0;
  clear_has_giftkind();
}
inline ::google::protobuf::int32 npt_grc_turn_on_off::giftkind() const {
  return giftkind_;
}
inline void npt_grc_turn_on_off::set_giftkind(::google::protobuf::int32 value) {
  set_has_giftkind();
  giftkind_ = value;
}

// required bool onoff = 3;
inline bool npt_grc_turn_on_off::has_onoff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_turn_on_off::set_has_onoff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_turn_on_off::clear_has_onoff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_turn_on_off::clear_onoff() {
  onoff_ = false;
  clear_has_onoff();
}
inline bool npt_grc_turn_on_off::onoff() const {
  return onoff_;
}
inline void npt_grc_turn_on_off::set_onoff(bool value) {
  set_has_onoff();
  onoff_ = value;
}

// -------------------------------------------------------------------

// npt_grc_turn_on_off_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_TURN_ON_OFF_RE];
inline bool npt_grc_turn_on_off_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_turn_on_off_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_turn_on_off_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_turn_on_off_re::clear_type() {
  type_ = 55;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_turn_on_off_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_turn_on_off_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 retcode = 2;
inline bool npt_grc_turn_on_off_re::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_turn_on_off_re::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_turn_on_off_re::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_turn_on_off_re::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_grc_turn_on_off_re::retcode() const {
  return retcode_;
}
inline void npt_grc_turn_on_off_re::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required bool onoff = 3;
inline bool npt_grc_turn_on_off_re::has_onoff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_turn_on_off_re::set_has_onoff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_turn_on_off_re::clear_has_onoff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_turn_on_off_re::clear_onoff() {
  onoff_ = false;
  clear_has_onoff();
}
inline bool npt_grc_turn_on_off_re::onoff() const {
  return onoff_;
}
inline void npt_grc_turn_on_off_re::set_onoff(bool value) {
  set_has_onoff();
  onoff_ = value;
}

// -------------------------------------------------------------------

// npt_midas_activity_get

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_MIDAS_ACTIVITY_GET];
inline bool npt_midas_activity_get::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_midas_activity_get::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_midas_activity_get::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_midas_activity_get::clear_type() {
  type_ = 47;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_midas_activity_get::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_midas_activity_get::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 param = 2;
inline bool npt_midas_activity_get::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_midas_activity_get::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_midas_activity_get::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_midas_activity_get::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 npt_midas_activity_get::param() const {
  return param_;
}
inline void npt_midas_activity_get::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// npt_battle_auto_match

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BATTLE_AUTO_MATCH];
inline bool npt_battle_auto_match::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_battle_auto_match::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_battle_auto_match::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_battle_auto_match::clear_type() {
  type_ = 96;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_battle_auto_match::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_battle_auto_match::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.npt_battle_auto_match.OP_TYPE op_type = 2;
inline bool npt_battle_auto_match::has_op_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_battle_auto_match::set_has_op_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_battle_auto_match::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_battle_auto_match::clear_op_type() {
  op_type_ = 1;
  clear_has_op_type();
}
inline ::PB::npt_battle_auto_match_OP_TYPE npt_battle_auto_match::op_type() const {
  return static_cast< ::PB::npt_battle_auto_match_OP_TYPE >(op_type_);
}
inline void npt_battle_auto_match::set_op_type(::PB::npt_battle_auto_match_OP_TYPE value) {
  assert(::PB::npt_battle_auto_match_OP_TYPE_IsValid(value));
  set_has_op_type();
  op_type_ = value;
}

// required int32 tid = 3;
inline bool npt_battle_auto_match::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_battle_auto_match::set_has_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_battle_auto_match::clear_has_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_battle_auto_match::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 npt_battle_auto_match::tid() const {
  return tid_;
}
inline void npt_battle_auto_match::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// -------------------------------------------------------------------

// npt_battle_match_result

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BATTLE_MATCH_RESULT];
inline bool npt_battle_match_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_battle_match_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_battle_match_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_battle_match_result::clear_type() {
  type_ = 100;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_battle_match_result::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_battle_match_result::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated int32 prof_list = 2;
inline int npt_battle_match_result::prof_list_size() const {
  return prof_list_.size();
}
inline void npt_battle_match_result::clear_prof_list() {
  prof_list_.Clear();
}
inline ::google::protobuf::int32 npt_battle_match_result::prof_list(int index) const {
  return prof_list_.Get(index);
}
inline void npt_battle_match_result::set_prof_list(int index, ::google::protobuf::int32 value) {
  prof_list_.Set(index, value);
}
inline void npt_battle_match_result::add_prof_list(::google::protobuf::int32 value) {
  prof_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
npt_battle_match_result::prof_list() const {
  return prof_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
npt_battle_match_result::mutable_prof_list() {
  return &prof_list_;
}

// repeated int64 role_list = 3;
inline int npt_battle_match_result::role_list_size() const {
  return role_list_.size();
}
inline void npt_battle_match_result::clear_role_list() {
  role_list_.Clear();
}
inline ::google::protobuf::int64 npt_battle_match_result::role_list(int index) const {
  return role_list_.Get(index);
}
inline void npt_battle_match_result::set_role_list(int index, ::google::protobuf::int64 value) {
  role_list_.Set(index, value);
}
inline void npt_battle_match_result::add_role_list(::google::protobuf::int64 value) {
  role_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
npt_battle_match_result::role_list() const {
  return role_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
npt_battle_match_result::mutable_role_list() {
  return &role_list_;
}

// repeated int32 gender_list = 4;
inline int npt_battle_match_result::gender_list_size() const {
  return gender_list_.size();
}
inline void npt_battle_match_result::clear_gender_list() {
  gender_list_.Clear();
}
inline ::google::protobuf::int32 npt_battle_match_result::gender_list(int index) const {
  return gender_list_.Get(index);
}
inline void npt_battle_match_result::set_gender_list(int index, ::google::protobuf::int32 value) {
  gender_list_.Set(index, value);
}
inline void npt_battle_match_result::add_gender_list(::google::protobuf::int32 value) {
  gender_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
npt_battle_match_result::gender_list() const {
  return gender_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
npt_battle_match_result::mutable_gender_list() {
  return &gender_list_;
}

// -------------------------------------------------------------------

// npt_battle_match_prepare

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BATTLE_MATCH_PREPARE];
inline bool npt_battle_match_prepare::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_battle_match_prepare::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_battle_match_prepare::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_battle_match_prepare::clear_type() {
  type_ = 101;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_battle_match_prepare::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_battle_match_prepare::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool npt_battle_match_prepare::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_battle_match_prepare::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_battle_match_prepare::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_battle_match_prepare::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_battle_match_prepare::roleid() const {
  return roleid_;
}
inline void npt_battle_match_prepare::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 prepare = 3;
inline bool npt_battle_match_prepare::has_prepare() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_battle_match_prepare::set_has_prepare() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_battle_match_prepare::clear_has_prepare() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_battle_match_prepare::clear_prepare() {
  prepare_ = 0;
  clear_has_prepare();
}
inline ::google::protobuf::int32 npt_battle_match_prepare::prepare() const {
  return prepare_;
}
inline void npt_battle_match_prepare::set_prepare(::google::protobuf::int32 value) {
  set_has_prepare();
  prepare_ = value;
}

// required int32 tid = 4;
inline bool npt_battle_match_prepare::has_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_battle_match_prepare::set_has_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_battle_match_prepare::clear_has_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_battle_match_prepare::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 npt_battle_match_prepare::tid() const {
  return tid_;
}
inline void npt_battle_match_prepare::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// repeated int64 role_list = 5;
inline int npt_battle_match_prepare::role_list_size() const {
  return role_list_.size();
}
inline void npt_battle_match_prepare::clear_role_list() {
  role_list_.Clear();
}
inline ::google::protobuf::int64 npt_battle_match_prepare::role_list(int index) const {
  return role_list_.Get(index);
}
inline void npt_battle_match_prepare::set_role_list(int index, ::google::protobuf::int64 value) {
  role_list_.Set(index, value);
}
inline void npt_battle_match_prepare::add_role_list(::google::protobuf::int64 value) {
  role_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
npt_battle_match_prepare::role_list() const {
  return role_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
npt_battle_match_prepare::mutable_role_list() {
  return &role_list_;
}

// -------------------------------------------------------------------

// npt_get_battle_match_rank

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_BATTLE_MATCH_RANK];
inline bool npt_get_battle_match_rank::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_get_battle_match_rank::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_get_battle_match_rank::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_get_battle_match_rank::clear_type() {
  type_ = 102;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_get_battle_match_rank::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_get_battle_match_rank::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool npt_get_battle_match_rank::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_get_battle_match_rank::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_get_battle_match_rank::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_get_battle_match_rank::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_get_battle_match_rank::roleid() const {
  return roleid_;
}
inline void npt_get_battle_match_rank::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 topid = 3;
inline bool npt_get_battle_match_rank::has_topid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_get_battle_match_rank::set_has_topid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_get_battle_match_rank::clear_has_topid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_get_battle_match_rank::clear_topid() {
  topid_ = 0;
  clear_has_topid();
}
inline ::google::protobuf::int32 npt_get_battle_match_rank::topid() const {
  return topid_;
}
inline void npt_get_battle_match_rank::set_topid(::google::protobuf::int32 value) {
  set_has_topid();
  topid_ = value;
}

// required int32 ret = 4;
inline bool npt_get_battle_match_rank::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_get_battle_match_rank::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_get_battle_match_rank::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_get_battle_match_rank::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 npt_get_battle_match_rank::ret() const {
  return ret_;
}
inline void npt_get_battle_match_rank::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// npt_midas_activity_get_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_MIDAS_ACTIVITY_GET_RE];
inline bool npt_midas_activity_get_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_midas_activity_get_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_midas_activity_get_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_midas_activity_get_re::clear_type() {
  type_ = 48;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_midas_activity_get_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_midas_activity_get_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 param = 2;
inline bool npt_midas_activity_get_re::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_midas_activity_get_re::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_midas_activity_get_re::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_midas_activity_get_re::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 npt_midas_activity_get_re::param() const {
  return param_;
}
inline void npt_midas_activity_get_re::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}

// optional bytes activity_info = 3;
inline bool npt_midas_activity_get_re::has_activity_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_midas_activity_get_re::set_has_activity_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_midas_activity_get_re::clear_has_activity_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_midas_activity_get_re::clear_activity_info() {
  if (activity_info_ != &::google::protobuf::internal::kEmptyString) {
    activity_info_->clear();
  }
  clear_has_activity_info();
}
inline const ::std::string& npt_midas_activity_get_re::activity_info() const {
  return *activity_info_;
}
inline void npt_midas_activity_get_re::set_activity_info(const ::std::string& value) {
  set_has_activity_info();
  if (activity_info_ == &::google::protobuf::internal::kEmptyString) {
    activity_info_ = new ::std::string;
  }
  activity_info_->assign(value);
}
inline void npt_midas_activity_get_re::set_activity_info(const char* value) {
  set_has_activity_info();
  if (activity_info_ == &::google::protobuf::internal::kEmptyString) {
    activity_info_ = new ::std::string;
  }
  activity_info_->assign(value);
}
inline void npt_midas_activity_get_re::set_activity_info(const void* value, size_t size) {
  set_has_activity_info();
  if (activity_info_ == &::google::protobuf::internal::kEmptyString) {
    activity_info_ = new ::std::string;
  }
  activity_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_midas_activity_get_re::mutable_activity_info() {
  set_has_activity_info();
  if (activity_info_ == &::google::protobuf::internal::kEmptyString) {
    activity_info_ = new ::std::string;
  }
  return activity_info_;
}
inline ::std::string* npt_midas_activity_get_re::release_activity_info() {
  clear_has_activity_info();
  if (activity_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activity_info_;
    activity_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_midas_activity_get_re::set_allocated_activity_info(::std::string* activity_info) {
  if (activity_info_ != &::google::protobuf::internal::kEmptyString) {
    delete activity_info_;
  }
  if (activity_info) {
    set_has_activity_info();
    activity_info_ = activity_info;
  } else {
    clear_has_activity_info();
    activity_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_die_elite_tid

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_DIE_ELITE_TID];
inline bool npt_die_elite_tid::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_die_elite_tid::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_die_elite_tid::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_die_elite_tid::clear_type() {
  type_ = 56;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_die_elite_tid::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_die_elite_tid::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated int32 tid_list = 2;
inline int npt_die_elite_tid::tid_list_size() const {
  return tid_list_.size();
}
inline void npt_die_elite_tid::clear_tid_list() {
  tid_list_.Clear();
}
inline ::google::protobuf::int32 npt_die_elite_tid::tid_list(int index) const {
  return tid_list_.Get(index);
}
inline void npt_die_elite_tid::set_tid_list(int index, ::google::protobuf::int32 value) {
  tid_list_.Set(index, value);
}
inline void npt_die_elite_tid::add_tid_list(::google::protobuf::int32 value) {
  tid_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
npt_die_elite_tid::tid_list() const {
  return tid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
npt_die_elite_tid::mutable_tid_list() {
  return &tid_list_;
}

// -------------------------------------------------------------------

// npt_query_die_elite_tid

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_DIE_ELITE_TID];
inline bool npt_query_die_elite_tid::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_query_die_elite_tid::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_query_die_elite_tid::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_query_die_elite_tid::clear_type() {
  type_ = 57;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_query_die_elite_tid::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_query_die_elite_tid::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// grc_passed_friend_info

// required bytes nickname = 1;
inline bool grc_passed_friend_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void grc_passed_friend_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void grc_passed_friend_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void grc_passed_friend_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& grc_passed_friend_info::nickname() const {
  return *nickname_;
}
inline void grc_passed_friend_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void grc_passed_friend_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void grc_passed_friend_info::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_passed_friend_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* grc_passed_friend_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_passed_friend_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes figure_url = 2;
inline bool grc_passed_friend_info::has_figure_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void grc_passed_friend_info::set_has_figure_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void grc_passed_friend_info::clear_has_figure_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void grc_passed_friend_info::clear_figure_url() {
  if (figure_url_ != &::google::protobuf::internal::kEmptyString) {
    figure_url_->clear();
  }
  clear_has_figure_url();
}
inline const ::std::string& grc_passed_friend_info::figure_url() const {
  return *figure_url_;
}
inline void grc_passed_friend_info::set_figure_url(const ::std::string& value) {
  set_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    figure_url_ = new ::std::string;
  }
  figure_url_->assign(value);
}
inline void grc_passed_friend_info::set_figure_url(const char* value) {
  set_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    figure_url_ = new ::std::string;
  }
  figure_url_->assign(value);
}
inline void grc_passed_friend_info::set_figure_url(const void* value, size_t size) {
  set_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    figure_url_ = new ::std::string;
  }
  figure_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_passed_friend_info::mutable_figure_url() {
  set_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    figure_url_ = new ::std::string;
  }
  return figure_url_;
}
inline ::std::string* grc_passed_friend_info::release_figure_url() {
  clear_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = figure_url_;
    figure_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_passed_friend_info::set_allocated_figure_url(::std::string* figure_url) {
  if (figure_url_ != &::google::protobuf::internal::kEmptyString) {
    delete figure_url_;
  }
  if (figure_url) {
    set_has_figure_url();
    figure_url_ = figure_url;
  } else {
    clear_has_figure_url();
    figure_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_grc_exceed_friend_list

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_EXCEED_FRIEND_LIST];
inline bool npt_grc_exceed_friend_list::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_exceed_friend_list::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_exceed_friend_list::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_exceed_friend_list::clear_type() {
  type_ = 58;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_exceed_friend_list::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_exceed_friend_list::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 res = 2;
inline bool npt_grc_exceed_friend_list::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_exceed_friend_list::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_exceed_friend_list::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_exceed_friend_list::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 npt_grc_exceed_friend_list::res() const {
  return res_;
}
inline void npt_grc_exceed_friend_list::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// optional int32 level_type = 3;
inline bool npt_grc_exceed_friend_list::has_level_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_exceed_friend_list::set_has_level_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_exceed_friend_list::clear_has_level_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_exceed_friend_list::clear_level_type() {
  level_type_ = 0;
  clear_has_level_type();
}
inline ::google::protobuf::int32 npt_grc_exceed_friend_list::level_type() const {
  return level_type_;
}
inline void npt_grc_exceed_friend_list::set_level_type(::google::protobuf::int32 value) {
  set_has_level_type();
  level_type_ = value;
}

// repeated .PB.grc_passed_friend_info friends = 4;
inline int npt_grc_exceed_friend_list::friends_size() const {
  return friends_.size();
}
inline void npt_grc_exceed_friend_list::clear_friends() {
  friends_.Clear();
}
inline const ::PB::grc_passed_friend_info& npt_grc_exceed_friend_list::friends(int index) const {
  return friends_.Get(index);
}
inline ::PB::grc_passed_friend_info* npt_grc_exceed_friend_list::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::PB::grc_passed_friend_info* npt_grc_exceed_friend_list::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_passed_friend_info >&
npt_grc_exceed_friend_list::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::grc_passed_friend_info >*
npt_grc_exceed_friend_list::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// npt_top_reward_player

// optional int64 roleid = 1;
inline bool npt_top_reward_player::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_top_reward_player::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_top_reward_player::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_top_reward_player::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_top_reward_player::roleid() const {
  return roleid_;
}
inline void npt_top_reward_player::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional bytes name = 2;
inline bool npt_top_reward_player::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_top_reward_player::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_top_reward_player::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_top_reward_player::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npt_top_reward_player::name() const {
  return *name_;
}
inline void npt_top_reward_player::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_top_reward_player::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_top_reward_player::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_top_reward_player::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npt_top_reward_player::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_top_reward_player::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_top_reward

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TOP_REWARD];
inline bool npt_top_reward::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_top_reward::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_top_reward::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_top_reward::clear_type() {
  type_ = 68;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_top_reward::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_top_reward::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.npt_top_reward.player players = 2;
inline int npt_top_reward::players_size() const {
  return players_.size();
}
inline void npt_top_reward::clear_players() {
  players_.Clear();
}
inline const ::PB::npt_top_reward_player& npt_top_reward::players(int index) const {
  return players_.Get(index);
}
inline ::PB::npt_top_reward_player* npt_top_reward::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::PB::npt_top_reward_player* npt_top_reward::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_top_reward_player >&
npt_top_reward::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::npt_top_reward_player >*
npt_top_reward::mutable_players() {
  return &players_;
}

// optional int32 self_rank = 3;
inline bool npt_top_reward::has_self_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_top_reward::set_has_self_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_top_reward::clear_has_self_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_top_reward::clear_self_rank() {
  self_rank_ = 0;
  clear_has_self_rank();
}
inline ::google::protobuf::int32 npt_top_reward::self_rank() const {
  return self_rank_;
}
inline void npt_top_reward::set_self_rank(::google::protobuf::int32 value) {
  set_has_self_rank();
  self_rank_ = value;
}

// optional bool has_reward = 4;
inline bool npt_top_reward::has_has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_top_reward::set_has_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_top_reward::clear_has_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_top_reward::clear_has_reward() {
  has_reward_ = false;
  clear_has_has_reward();
}
inline bool npt_top_reward::has_reward() const {
  return has_reward_;
}
inline void npt_top_reward::set_has_reward(bool value) {
  set_has_has_reward();
  has_reward_ = value;
}

// optional int32 activity_end_time = 5;
inline bool npt_top_reward::has_activity_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_top_reward::set_has_activity_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_top_reward::clear_has_activity_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_top_reward::clear_activity_end_time() {
  activity_end_time_ = 0;
  clear_has_activity_end_time();
}
inline ::google::protobuf::int32 npt_top_reward::activity_end_time() const {
  return activity_end_time_;
}
inline void npt_top_reward::set_activity_end_time(::google::protobuf::int32 value) {
  set_has_activity_end_time();
  activity_end_time_ = value;
}

// optional bool get_reward = 6;
inline bool npt_top_reward::has_get_reward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_top_reward::set_has_get_reward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_top_reward::clear_has_get_reward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_top_reward::clear_get_reward() {
  get_reward_ = false;
  clear_has_get_reward();
}
inline bool npt_top_reward::get_reward() const {
  return get_reward_;
}
inline void npt_top_reward::set_get_reward(bool value) {
  set_has_get_reward();
  get_reward_ = value;
}

// optional int32 tid = 7;
inline bool npt_top_reward::has_tid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_top_reward::set_has_tid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_top_reward::clear_has_tid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_top_reward::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 npt_top_reward::tid() const {
  return tid_;
}
inline void npt_top_reward::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// repeated int32 actived_tid = 8;
inline int npt_top_reward::actived_tid_size() const {
  return actived_tid_.size();
}
inline void npt_top_reward::clear_actived_tid() {
  actived_tid_.Clear();
}
inline ::google::protobuf::int32 npt_top_reward::actived_tid(int index) const {
  return actived_tid_.Get(index);
}
inline void npt_top_reward::set_actived_tid(int index, ::google::protobuf::int32 value) {
  actived_tid_.Set(index, value);
}
inline void npt_top_reward::add_actived_tid(::google::protobuf::int32 value) {
  actived_tid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
npt_top_reward::actived_tid() const {
  return actived_tid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
npt_top_reward::mutable_actived_tid() {
  return &actived_tid_;
}

// optional int32 activity_start_time = 9;
inline bool npt_top_reward::has_activity_start_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void npt_top_reward::set_has_activity_start_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void npt_top_reward::clear_has_activity_start_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void npt_top_reward::clear_activity_start_time() {
  activity_start_time_ = 0;
  clear_has_activity_start_time();
}
inline ::google::protobuf::int32 npt_top_reward::activity_start_time() const {
  return activity_start_time_;
}
inline void npt_top_reward::set_activity_start_time(::google::protobuf::int32 value) {
  set_has_activity_start_time();
  activity_start_time_ = value;
}

// -------------------------------------------------------------------

// npt_nest_common_operation

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NEST_COMMON_OPERATION];
inline bool npt_nest_common_operation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nest_common_operation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nest_common_operation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nest_common_operation::clear_type() {
  type_ = 87;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nest_common_operation::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nest_common_operation::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.npt_nest_common_operation.NEST_OP op = 2;
inline bool npt_nest_common_operation::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nest_common_operation::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nest_common_operation::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nest_common_operation::clear_op() {
  op_ = 1;
  clear_has_op();
}
inline ::PB::npt_nest_common_operation_NEST_OP npt_nest_common_operation::op() const {
  return static_cast< ::PB::npt_nest_common_operation_NEST_OP >(op_);
}
inline void npt_nest_common_operation::set_op(::PB::npt_nest_common_operation_NEST_OP value) {
  assert(::PB::npt_nest_common_operation_NEST_OP_IsValid(value));
  set_has_op();
  op_ = value;
}

// -------------------------------------------------------------------

// npt_nation_reputation

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_REPUTATION];
inline bool npt_nation_reputation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_reputation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_reputation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_reputation::clear_type() {
  type_ = 88;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_reputation::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_reputation::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 oper_param = 2;
inline bool npt_nation_reputation::has_oper_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_reputation::set_has_oper_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_reputation::clear_has_oper_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_reputation::clear_oper_param() {
  oper_param_ = 0;
  clear_has_oper_param();
}
inline ::google::protobuf::int32 npt_nation_reputation::oper_param() const {
  return oper_param_;
}
inline void npt_nation_reputation::set_oper_param(::google::protobuf::int32 value) {
  set_has_oper_param();
  oper_param_ = value;
}

// -------------------------------------------------------------------

// nation_reputation_info

// optional int32 nation_repu_type = 1;
inline bool nation_reputation_info::has_nation_repu_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nation_reputation_info::set_has_nation_repu_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nation_reputation_info::clear_has_nation_repu_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nation_reputation_info::clear_nation_repu_type() {
  nation_repu_type_ = 0;
  clear_has_nation_repu_type();
}
inline ::google::protobuf::int32 nation_reputation_info::nation_repu_type() const {
  return nation_repu_type_;
}
inline void nation_reputation_info::set_nation_repu_type(::google::protobuf::int32 value) {
  set_has_nation_repu_type();
  nation_repu_type_ = value;
}

// optional int64 nation_repu_count = 2;
inline bool nation_reputation_info::has_nation_repu_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nation_reputation_info::set_has_nation_repu_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nation_reputation_info::clear_has_nation_repu_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nation_reputation_info::clear_nation_repu_count() {
  nation_repu_count_ = GOOGLE_LONGLONG(0);
  clear_has_nation_repu_count();
}
inline ::google::protobuf::int64 nation_reputation_info::nation_repu_count() const {
  return nation_repu_count_;
}
inline void nation_reputation_info::set_nation_repu_count(::google::protobuf::int64 value) {
  set_has_nation_repu_count();
  nation_repu_count_ = value;
}

// -------------------------------------------------------------------

// npt_nation_reputation_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_REPUTATION_RE];
inline bool npt_nation_reputation_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_reputation_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_reputation_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_reputation_re::clear_type() {
  type_ = 89;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_reputation_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_reputation_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.nation_reputation_info reputation_info = 2;
inline int npt_nation_reputation_re::reputation_info_size() const {
  return reputation_info_.size();
}
inline void npt_nation_reputation_re::clear_reputation_info() {
  reputation_info_.Clear();
}
inline const ::PB::nation_reputation_info& npt_nation_reputation_re::reputation_info(int index) const {
  return reputation_info_.Get(index);
}
inline ::PB::nation_reputation_info* npt_nation_reputation_re::mutable_reputation_info(int index) {
  return reputation_info_.Mutable(index);
}
inline ::PB::nation_reputation_info* npt_nation_reputation_re::add_reputation_info() {
  return reputation_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::nation_reputation_info >&
npt_nation_reputation_re::reputation_info() const {
  return reputation_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::nation_reputation_info >*
npt_nation_reputation_re::mutable_reputation_info() {
  return &reputation_info_;
}

// -------------------------------------------------------------------

// npt_nation_reputation_change

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_REPUTATION_CHANGE];
inline bool npt_nation_reputation_change::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_reputation_change::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_reputation_change::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_reputation_change::clear_type() {
  type_ = 92;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_reputation_change::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_reputation_change::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.nation_reputation_info reputation_info = 2;
inline bool npt_nation_reputation_change::has_reputation_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_reputation_change::set_has_reputation_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_reputation_change::clear_has_reputation_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_reputation_change::clear_reputation_info() {
  if (reputation_info_ != NULL) reputation_info_->::PB::nation_reputation_info::Clear();
  clear_has_reputation_info();
}
inline const ::PB::nation_reputation_info& npt_nation_reputation_change::reputation_info() const {
  return reputation_info_ != NULL ? *reputation_info_ : *default_instance_->reputation_info_;
}
inline ::PB::nation_reputation_info* npt_nation_reputation_change::mutable_reputation_info() {
  set_has_reputation_info();
  if (reputation_info_ == NULL) reputation_info_ = new ::PB::nation_reputation_info;
  return reputation_info_;
}
inline ::PB::nation_reputation_info* npt_nation_reputation_change::release_reputation_info() {
  clear_has_reputation_info();
  ::PB::nation_reputation_info* temp = reputation_info_;
  reputation_info_ = NULL;
  return temp;
}
inline void npt_nation_reputation_change::set_allocated_reputation_info(::PB::nation_reputation_info* reputation_info) {
  delete reputation_info_;
  reputation_info_ = reputation_info;
  if (reputation_info) {
    set_has_reputation_info();
  } else {
    clear_has_reputation_info();
  }
}

// -------------------------------------------------------------------

// nation_lantern_info

// optional int32 nation_id = 1;
inline bool nation_lantern_info::has_nation_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nation_lantern_info::set_has_nation_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nation_lantern_info::clear_has_nation_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nation_lantern_info::clear_nation_id() {
  nation_id_ = 0;
  clear_has_nation_id();
}
inline ::google::protobuf::int32 nation_lantern_info::nation_id() const {
  return nation_id_;
}
inline void nation_lantern_info::set_nation_id(::google::protobuf::int32 value) {
  set_has_nation_id();
  nation_id_ = value;
}

// optional int64 nation_lantern = 2;
inline bool nation_lantern_info::has_nation_lantern() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nation_lantern_info::set_has_nation_lantern() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nation_lantern_info::clear_has_nation_lantern() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nation_lantern_info::clear_nation_lantern() {
  nation_lantern_ = GOOGLE_LONGLONG(0);
  clear_has_nation_lantern();
}
inline ::google::protobuf::int64 nation_lantern_info::nation_lantern() const {
  return nation_lantern_;
}
inline void nation_lantern_info::set_nation_lantern(::google::protobuf::int64 value) {
  set_has_nation_lantern();
  nation_lantern_ = value;
}

// -------------------------------------------------------------------

// npt_nation_lantern_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_LANTERN_INFO];
inline bool npt_nation_lantern_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_lantern_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_lantern_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_lantern_info::clear_type() {
  type_ = 90;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_lantern_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_lantern_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// npt_nation_lantern_info_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_LANTERN_INFO_RE];
inline bool npt_nation_lantern_info_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_lantern_info_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_lantern_info_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_lantern_info_re::clear_type() {
  type_ = 91;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_lantern_info_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_lantern_info_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.nation_lantern_info lantern_info = 2;
inline int npt_nation_lantern_info_re::lantern_info_size() const {
  return lantern_info_.size();
}
inline void npt_nation_lantern_info_re::clear_lantern_info() {
  lantern_info_.Clear();
}
inline const ::PB::nation_lantern_info& npt_nation_lantern_info_re::lantern_info(int index) const {
  return lantern_info_.Get(index);
}
inline ::PB::nation_lantern_info* npt_nation_lantern_info_re::mutable_lantern_info(int index) {
  return lantern_info_.Mutable(index);
}
inline ::PB::nation_lantern_info* npt_nation_lantern_info_re::add_lantern_info() {
  return lantern_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::nation_lantern_info >&
npt_nation_lantern_info_re::lantern_info() const {
  return lantern_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::nation_lantern_info >*
npt_nation_lantern_info_re::mutable_lantern_info() {
  return &lantern_info_;
}

// repeated int32 receive_gift = 3;
inline int npt_nation_lantern_info_re::receive_gift_size() const {
  return receive_gift_.size();
}
inline void npt_nation_lantern_info_re::clear_receive_gift() {
  receive_gift_.Clear();
}
inline ::google::protobuf::int32 npt_nation_lantern_info_re::receive_gift(int index) const {
  return receive_gift_.Get(index);
}
inline void npt_nation_lantern_info_re::set_receive_gift(int index, ::google::protobuf::int32 value) {
  receive_gift_.Set(index, value);
}
inline void npt_nation_lantern_info_re::add_receive_gift(::google::protobuf::int32 value) {
  receive_gift_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
npt_nation_lantern_info_re::receive_gift() const {
  return receive_gift_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
npt_nation_lantern_info_re::mutable_receive_gift() {
  return &receive_gift_;
}

// -------------------------------------------------------------------

// npt_receive_lantern_gift

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECEIVE_NATION_GIFT];
inline bool npt_receive_lantern_gift::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_receive_lantern_gift::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_receive_lantern_gift::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_receive_lantern_gift::clear_type() {
  type_ = 93;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_receive_lantern_gift::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_receive_lantern_gift::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 flyhigh = 2;
inline bool npt_receive_lantern_gift::has_flyhigh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_receive_lantern_gift::set_has_flyhigh() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_receive_lantern_gift::clear_has_flyhigh() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_receive_lantern_gift::clear_flyhigh() {
  flyhigh_ = 0;
  clear_has_flyhigh();
}
inline ::google::protobuf::int32 npt_receive_lantern_gift::flyhigh() const {
  return flyhigh_;
}
inline void npt_receive_lantern_gift::set_flyhigh(::google::protobuf::int32 value) {
  set_has_flyhigh();
  flyhigh_ = value;
}

// -------------------------------------------------------------------

// zoneid_info

// optional int32 merge_zoneid = 1;
inline bool zoneid_info::has_merge_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void zoneid_info::set_has_merge_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void zoneid_info::clear_has_merge_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void zoneid_info::clear_merge_zoneid() {
  merge_zoneid_ = 0;
  clear_has_merge_zoneid();
}
inline ::google::protobuf::int32 zoneid_info::merge_zoneid() const {
  return merge_zoneid_;
}
inline void zoneid_info::set_merge_zoneid(::google::protobuf::int32 value) {
  set_has_merge_zoneid();
  merge_zoneid_ = value;
}

// optional int32 cur_zoneid = 2;
inline bool zoneid_info::has_cur_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void zoneid_info::set_has_cur_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void zoneid_info::clear_has_cur_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void zoneid_info::clear_cur_zoneid() {
  cur_zoneid_ = 0;
  clear_has_cur_zoneid();
}
inline ::google::protobuf::int32 zoneid_info::cur_zoneid() const {
  return cur_zoneid_;
}
inline void zoneid_info::set_cur_zoneid(::google::protobuf::int32 value) {
  set_has_cur_zoneid();
  cur_zoneid_ = value;
}

// -------------------------------------------------------------------

// npt_notify_zoneid_list

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NOTIFY_ZONE_LIST];
inline bool npt_notify_zoneid_list::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_notify_zoneid_list::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_notify_zoneid_list::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_notify_zoneid_list::clear_type() {
  type_ = 94;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_notify_zoneid_list::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_notify_zoneid_list::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.zoneid_info zoneid_list = 2;
inline int npt_notify_zoneid_list::zoneid_list_size() const {
  return zoneid_list_.size();
}
inline void npt_notify_zoneid_list::clear_zoneid_list() {
  zoneid_list_.Clear();
}
inline const ::PB::zoneid_info& npt_notify_zoneid_list::zoneid_list(int index) const {
  return zoneid_list_.Get(index);
}
inline ::PB::zoneid_info* npt_notify_zoneid_list::mutable_zoneid_list(int index) {
  return zoneid_list_.Mutable(index);
}
inline ::PB::zoneid_info* npt_notify_zoneid_list::add_zoneid_list() {
  return zoneid_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::zoneid_info >&
npt_notify_zoneid_list::zoneid_list() const {
  return zoneid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::zoneid_info >*
npt_notify_zoneid_list::mutable_zoneid_list() {
  return &zoneid_list_;
}

// -------------------------------------------------------------------

// npt_broadcast_match_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NOTIFY_ROAM_MATCH_INFO];
inline bool npt_broadcast_match_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_broadcast_match_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_broadcast_match_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_broadcast_match_info::clear_type() {
  type_ = 95;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_broadcast_match_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_broadcast_match_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.roam_match_info info_list = 2;
inline int npt_broadcast_match_info::info_list_size() const {
  return info_list_.size();
}
inline void npt_broadcast_match_info::clear_info_list() {
  info_list_.Clear();
}
inline const ::PB::roam_match_info& npt_broadcast_match_info::info_list(int index) const {
  return info_list_.Get(index);
}
inline ::PB::roam_match_info* npt_broadcast_match_info::mutable_info_list(int index) {
  return info_list_.Mutable(index);
}
inline ::PB::roam_match_info* npt_broadcast_match_info::add_info_list() {
  return info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::roam_match_info >&
npt_broadcast_match_info::info_list() const {
  return info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::roam_match_info >*
npt_broadcast_match_info::mutable_info_list() {
  return &info_list_;
}

// -------------------------------------------------------------------

// npt_exchange_activity

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_EXCHANGE_ACTIVITY];
inline bool npt_exchange_activity::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_exchange_activity::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_exchange_activity::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_exchange_activity::clear_type() {
  type_ = 97;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_exchange_activity::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_exchange_activity::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 activity_index = 2;
inline bool npt_exchange_activity::has_activity_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_exchange_activity::set_has_activity_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_exchange_activity::clear_has_activity_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_exchange_activity::clear_activity_index() {
  activity_index_ = 0;
  clear_has_activity_index();
}
inline ::google::protobuf::int32 npt_exchange_activity::activity_index() const {
  return activity_index_;
}
inline void npt_exchange_activity::set_activity_index(::google::protobuf::int32 value) {
  set_has_activity_index();
  activity_index_ = value;
}

// -------------------------------------------------------------------

// npt_exchange_activity_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_EXCHANGE_ACTIVITY_RE];
inline bool npt_exchange_activity_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_exchange_activity_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_exchange_activity_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_exchange_activity_re::clear_type() {
  type_ = 98;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_exchange_activity_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_exchange_activity_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.nation_lantern_info lantern_info = 2;
inline int npt_exchange_activity_re::lantern_info_size() const {
  return lantern_info_.size();
}
inline void npt_exchange_activity_re::clear_lantern_info() {
  lantern_info_.Clear();
}
inline const ::PB::nation_lantern_info& npt_exchange_activity_re::lantern_info(int index) const {
  return lantern_info_.Get(index);
}
inline ::PB::nation_lantern_info* npt_exchange_activity_re::mutable_lantern_info(int index) {
  return lantern_info_.Mutable(index);
}
inline ::PB::nation_lantern_info* npt_exchange_activity_re::add_lantern_info() {
  return lantern_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::nation_lantern_info >&
npt_exchange_activity_re::lantern_info() const {
  return lantern_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::nation_lantern_info >*
npt_exchange_activity_re::mutable_lantern_info() {
  return &lantern_info_;
}

// repeated int32 receive_gift = 3;
inline int npt_exchange_activity_re::receive_gift_size() const {
  return receive_gift_.size();
}
inline void npt_exchange_activity_re::clear_receive_gift() {
  receive_gift_.Clear();
}
inline ::google::protobuf::int32 npt_exchange_activity_re::receive_gift(int index) const {
  return receive_gift_.Get(index);
}
inline void npt_exchange_activity_re::set_receive_gift(int index, ::google::protobuf::int32 value) {
  receive_gift_.Set(index, value);
}
inline void npt_exchange_activity_re::add_receive_gift(::google::protobuf::int32 value) {
  receive_gift_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
npt_exchange_activity_re::receive_gift() const {
  return receive_gift_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
npt_exchange_activity_re::mutable_receive_gift() {
  return &receive_gift_;
}

// optional int32 activity_index = 4;
inline bool npt_exchange_activity_re::has_activity_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_exchange_activity_re::set_has_activity_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_exchange_activity_re::clear_has_activity_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_exchange_activity_re::clear_activity_index() {
  activity_index_ = 0;
  clear_has_activity_index();
}
inline ::google::protobuf::int32 npt_exchange_activity_re::activity_index() const {
  return activity_index_;
}
inline void npt_exchange_activity_re::set_activity_index(::google::protobuf::int32 value) {
  set_has_activity_index();
  activity_index_ = value;
}

// -------------------------------------------------------------------

// npt_award_activity

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_EXCHANGE_AWARD];
inline bool npt_award_activity::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_award_activity::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_award_activity::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_award_activity::clear_type() {
  type_ = 99;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_award_activity::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_award_activity::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 activity_index = 2;
inline bool npt_award_activity::has_activity_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_award_activity::set_has_activity_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_award_activity::clear_has_activity_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_award_activity::clear_activity_index() {
  activity_index_ = 0;
  clear_has_activity_index();
}
inline ::google::protobuf::int32 npt_award_activity::activity_index() const {
  return activity_index_;
}
inline void npt_award_activity::set_activity_index(::google::protobuf::int32 value) {
  set_has_activity_index();
  activity_index_ = value;
}

// optional int32 reputation_count = 3;
inline bool npt_award_activity::has_reputation_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_award_activity::set_has_reputation_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_award_activity::clear_has_reputation_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_award_activity::clear_reputation_count() {
  reputation_count_ = 0;
  clear_has_reputation_count();
}
inline ::google::protobuf::int32 npt_award_activity::reputation_count() const {
  return reputation_count_;
}
inline void npt_award_activity::set_reputation_count(::google::protobuf::int32 value) {
  set_has_reputation_count();
  reputation_count_ = value;
}

// optional int32 exchange_type = 4;
inline bool npt_award_activity::has_exchange_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_award_activity::set_has_exchange_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_award_activity::clear_has_exchange_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_award_activity::clear_exchange_type() {
  exchange_type_ = 0;
  clear_has_exchange_type();
}
inline ::google::protobuf::int32 npt_award_activity::exchange_type() const {
  return exchange_type_;
}
inline void npt_award_activity::set_exchange_type(::google::protobuf::int32 value) {
  set_has_exchange_type();
  exchange_type_ = value;
}

// -------------------------------------------------------------------

// npt_change_zone_response

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CHANGE_ZONE_RESPONSE];
inline bool npt_change_zone_response::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_change_zone_response::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_change_zone_response::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_change_zone_response::clear_type() {
  type_ = 103;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_change_zone_response::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_change_zone_response::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 dst_zone = 2;
inline bool npt_change_zone_response::has_dst_zone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_change_zone_response::set_has_dst_zone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_change_zone_response::clear_has_dst_zone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_change_zone_response::clear_dst_zone() {
  dst_zone_ = 0;
  clear_has_dst_zone();
}
inline ::google::protobuf::int32 npt_change_zone_response::dst_zone() const {
  return dst_zone_;
}
inline void npt_change_zone_response::set_dst_zone(::google::protobuf::int32 value) {
  set_has_dst_zone();
  dst_zone_ = value;
}

// optional int32 retcode = 3;
inline bool npt_change_zone_response::has_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_change_zone_response::set_has_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_change_zone_response::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_change_zone_response::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_change_zone_response::retcode() const {
  return retcode_;
}
inline void npt_change_zone_response::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// -------------------------------------------------------------------

// npt_roam_zhaoji

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ROAM_ZHAOJI];
inline bool npt_roam_zhaoji::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_roam_zhaoji::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_roam_zhaoji::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_roam_zhaoji::clear_type() {
  type_ = 104;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_roam_zhaoji::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_roam_zhaoji::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 use_count = 2;
inline bool npt_roam_zhaoji::has_use_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_roam_zhaoji::set_has_use_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_roam_zhaoji::clear_has_use_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_roam_zhaoji::clear_use_count() {
  use_count_ = 0;
  clear_has_use_count();
}
inline ::google::protobuf::int32 npt_roam_zhaoji::use_count() const {
  return use_count_;
}
inline void npt_roam_zhaoji::set_use_count(::google::protobuf::int32 value) {
  set_has_use_count();
  use_count_ = value;
}

// -------------------------------------------------------------------

// npt_roam_zhaoji_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ROAM_ZHAOJI_INFO];
inline bool npt_roam_zhaoji_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_roam_zhaoji_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_roam_zhaoji_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_roam_zhaoji_info::clear_type() {
  type_ = 105;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_roam_zhaoji_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_roam_zhaoji_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 king_roleid = 2;
inline bool npt_roam_zhaoji_info::has_king_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_roam_zhaoji_info::set_has_king_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_roam_zhaoji_info::clear_has_king_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_roam_zhaoji_info::clear_king_roleid() {
  king_roleid_ = GOOGLE_LONGLONG(0);
  clear_has_king_roleid();
}
inline ::google::protobuf::int64 npt_roam_zhaoji_info::king_roleid() const {
  return king_roleid_;
}
inline void npt_roam_zhaoji_info::set_king_roleid(::google::protobuf::int64 value) {
  set_has_king_roleid();
  king_roleid_ = value;
}

// optional int64 jiangjun_roleid = 3;
inline bool npt_roam_zhaoji_info::has_jiangjun_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_roam_zhaoji_info::set_has_jiangjun_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_roam_zhaoji_info::clear_has_jiangjun_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_roam_zhaoji_info::clear_jiangjun_roleid() {
  jiangjun_roleid_ = GOOGLE_LONGLONG(0);
  clear_has_jiangjun_roleid();
}
inline ::google::protobuf::int64 npt_roam_zhaoji_info::jiangjun_roleid() const {
  return jiangjun_roleid_;
}
inline void npt_roam_zhaoji_info::set_jiangjun_roleid(::google::protobuf::int64 value) {
  set_has_jiangjun_roleid();
  jiangjun_roleid_ = value;
}

// optional int32 use_count = 4;
inline bool npt_roam_zhaoji_info::has_use_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_roam_zhaoji_info::set_has_use_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_roam_zhaoji_info::clear_has_use_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_roam_zhaoji_info::clear_use_count() {
  use_count_ = 0;
  clear_has_use_count();
}
inline ::google::protobuf::int32 npt_roam_zhaoji_info::use_count() const {
  return use_count_;
}
inline void npt_roam_zhaoji_info::set_use_count(::google::protobuf::int32 value) {
  set_has_use_count();
  use_count_ = value;
}

// optional bytes king_name = 5;
inline bool npt_roam_zhaoji_info::has_king_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_roam_zhaoji_info::set_has_king_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_roam_zhaoji_info::clear_has_king_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_roam_zhaoji_info::clear_king_name() {
  if (king_name_ != &::google::protobuf::internal::kEmptyString) {
    king_name_->clear();
  }
  clear_has_king_name();
}
inline const ::std::string& npt_roam_zhaoji_info::king_name() const {
  return *king_name_;
}
inline void npt_roam_zhaoji_info::set_king_name(const ::std::string& value) {
  set_has_king_name();
  if (king_name_ == &::google::protobuf::internal::kEmptyString) {
    king_name_ = new ::std::string;
  }
  king_name_->assign(value);
}
inline void npt_roam_zhaoji_info::set_king_name(const char* value) {
  set_has_king_name();
  if (king_name_ == &::google::protobuf::internal::kEmptyString) {
    king_name_ = new ::std::string;
  }
  king_name_->assign(value);
}
inline void npt_roam_zhaoji_info::set_king_name(const void* value, size_t size) {
  set_has_king_name();
  if (king_name_ == &::google::protobuf::internal::kEmptyString) {
    king_name_ = new ::std::string;
  }
  king_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_roam_zhaoji_info::mutable_king_name() {
  set_has_king_name();
  if (king_name_ == &::google::protobuf::internal::kEmptyString) {
    king_name_ = new ::std::string;
  }
  return king_name_;
}
inline ::std::string* npt_roam_zhaoji_info::release_king_name() {
  clear_has_king_name();
  if (king_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = king_name_;
    king_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_roam_zhaoji_info::set_allocated_king_name(::std::string* king_name) {
  if (king_name_ != &::google::protobuf::internal::kEmptyString) {
    delete king_name_;
  }
  if (king_name) {
    set_has_king_name();
    king_name_ = king_name;
  } else {
    clear_has_king_name();
    king_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes jiangjun_name = 6;
inline bool npt_roam_zhaoji_info::has_jiangjun_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_roam_zhaoji_info::set_has_jiangjun_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_roam_zhaoji_info::clear_has_jiangjun_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_roam_zhaoji_info::clear_jiangjun_name() {
  if (jiangjun_name_ != &::google::protobuf::internal::kEmptyString) {
    jiangjun_name_->clear();
  }
  clear_has_jiangjun_name();
}
inline const ::std::string& npt_roam_zhaoji_info::jiangjun_name() const {
  return *jiangjun_name_;
}
inline void npt_roam_zhaoji_info::set_jiangjun_name(const ::std::string& value) {
  set_has_jiangjun_name();
  if (jiangjun_name_ == &::google::protobuf::internal::kEmptyString) {
    jiangjun_name_ = new ::std::string;
  }
  jiangjun_name_->assign(value);
}
inline void npt_roam_zhaoji_info::set_jiangjun_name(const char* value) {
  set_has_jiangjun_name();
  if (jiangjun_name_ == &::google::protobuf::internal::kEmptyString) {
    jiangjun_name_ = new ::std::string;
  }
  jiangjun_name_->assign(value);
}
inline void npt_roam_zhaoji_info::set_jiangjun_name(const void* value, size_t size) {
  set_has_jiangjun_name();
  if (jiangjun_name_ == &::google::protobuf::internal::kEmptyString) {
    jiangjun_name_ = new ::std::string;
  }
  jiangjun_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_roam_zhaoji_info::mutable_jiangjun_name() {
  set_has_jiangjun_name();
  if (jiangjun_name_ == &::google::protobuf::internal::kEmptyString) {
    jiangjun_name_ = new ::std::string;
  }
  return jiangjun_name_;
}
inline ::std::string* npt_roam_zhaoji_info::release_jiangjun_name() {
  clear_has_jiangjun_name();
  if (jiangjun_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jiangjun_name_;
    jiangjun_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_roam_zhaoji_info::set_allocated_jiangjun_name(::std::string* jiangjun_name) {
  if (jiangjun_name_ != &::google::protobuf::internal::kEmptyString) {
    delete jiangjun_name_;
  }
  if (jiangjun_name) {
    set_has_jiangjun_name();
    jiangjun_name_ = jiangjun_name;
  } else {
    clear_has_jiangjun_name();
    jiangjun_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_roam_inst_result

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ROAM_INST_RESULT];
inline bool npt_roam_inst_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_roam_inst_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_roam_inst_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_roam_inst_result::clear_type() {
  type_ = 106;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_roam_inst_result::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_roam_inst_result::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.db_roam_record_data info = 2;
inline int npt_roam_inst_result::info_size() const {
  return info_.size();
}
inline void npt_roam_inst_result::clear_info() {
  info_.Clear();
}
inline const ::PB::db_roam_record_data& npt_roam_inst_result::info(int index) const {
  return info_.Get(index);
}
inline ::PB::db_roam_record_data* npt_roam_inst_result::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PB::db_roam_record_data* npt_roam_inst_result::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_data >&
npt_roam_inst_result::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_data >*
npt_roam_inst_result::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// npt_req_backflow_data

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REQ_BACKFLOW_DATA];
inline bool npt_req_backflow_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_req_backflow_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_req_backflow_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_req_backflow_data::clear_type() {
  type_ = 107;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_req_backflow_data::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_req_backflow_data::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// npt_req_backflow_data_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REQ_BACKFLOW_DATA_RE];
inline bool npt_req_backflow_data_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_req_backflow_data_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_req_backflow_data_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_req_backflow_data_re::clear_type() {
  type_ = 108;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_req_backflow_data_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_req_backflow_data_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool involvement = 2;
inline bool npt_req_backflow_data_re::has_involvement() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_req_backflow_data_re::set_has_involvement() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_req_backflow_data_re::clear_has_involvement() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_req_backflow_data_re::clear_involvement() {
  involvement_ = false;
  clear_has_involvement();
}
inline bool npt_req_backflow_data_re::involvement() const {
  return involvement_;
}
inline void npt_req_backflow_data_re::set_involvement(bool value) {
  set_has_involvement();
  involvement_ = value;
}

// optional bool invite1 = 3;
inline bool npt_req_backflow_data_re::has_invite1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_req_backflow_data_re::set_has_invite1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_req_backflow_data_re::clear_has_invite1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_req_backflow_data_re::clear_invite1() {
  invite1_ = false;
  clear_has_invite1();
}
inline bool npt_req_backflow_data_re::invite1() const {
  return invite1_;
}
inline void npt_req_backflow_data_re::set_invite1(bool value) {
  set_has_invite1();
  invite1_ = value;
}

// optional bool invite2 = 4;
inline bool npt_req_backflow_data_re::has_invite2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_req_backflow_data_re::set_has_invite2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_req_backflow_data_re::clear_has_invite2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_req_backflow_data_re::clear_invite2() {
  invite2_ = false;
  clear_has_invite2();
}
inline bool npt_req_backflow_data_re::invite2() const {
  return invite2_;
}
inline void npt_req_backflow_data_re::set_invite2(bool value) {
  set_has_invite2();
  invite2_ = value;
}

// optional bool invite3 = 5;
inline bool npt_req_backflow_data_re::has_invite3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_req_backflow_data_re::set_has_invite3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_req_backflow_data_re::clear_has_invite3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_req_backflow_data_re::clear_invite3() {
  invite3_ = false;
  clear_has_invite3();
}
inline bool npt_req_backflow_data_re::invite3() const {
  return invite3_;
}
inline void npt_req_backflow_data_re::set_invite3(bool value) {
  set_has_invite3();
  invite3_ = value;
}

// optional bool convene = 6;
inline bool npt_req_backflow_data_re::has_convene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_req_backflow_data_re::set_has_convene() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_req_backflow_data_re::clear_has_convene() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_req_backflow_data_re::clear_convene() {
  convene_ = false;
  clear_has_convene();
}
inline bool npt_req_backflow_data_re::convene() const {
  return convene_;
}
inline void npt_req_backflow_data_re::set_convene(bool value) {
  set_has_convene();
  convene_ = value;
}

// optional bool backflow = 7;
inline bool npt_req_backflow_data_re::has_backflow() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_req_backflow_data_re::set_has_backflow() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_req_backflow_data_re::clear_has_backflow() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_req_backflow_data_re::clear_backflow() {
  backflow_ = false;
  clear_has_backflow();
}
inline bool npt_req_backflow_data_re::backflow() const {
  return backflow_;
}
inline void npt_req_backflow_data_re::set_backflow(bool value) {
  set_has_backflow();
  backflow_ = value;
}

// optional int32 count = 8;
inline bool npt_req_backflow_data_re::has_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_req_backflow_data_re::set_has_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_req_backflow_data_re::clear_has_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_req_backflow_data_re::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 npt_req_backflow_data_re::count() const {
  return count_;
}
inline void npt_req_backflow_data_re::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 exp = 9;
inline bool npt_req_backflow_data_re::has_exp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void npt_req_backflow_data_re::set_has_exp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void npt_req_backflow_data_re::clear_has_exp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void npt_req_backflow_data_re::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 npt_req_backflow_data_re::exp() const {
  return exp_;
}
inline void npt_req_backflow_data_re::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// npt_share_backflow_code

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SHARE_BACKFLOW_CODE];
inline bool npt_share_backflow_code::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_share_backflow_code::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_share_backflow_code::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_share_backflow_code::clear_type() {
  type_ = 109;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_share_backflow_code::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_share_backflow_code::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// npt_share_backflow_code_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SHARE_BACKFLOW_CODE_RE];
inline bool npt_share_backflow_code_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_share_backflow_code_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_share_backflow_code_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_share_backflow_code_re::clear_type() {
  type_ = 117;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_share_backflow_code_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_share_backflow_code_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 errorcode = 2;
inline bool npt_share_backflow_code_re::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_share_backflow_code_re::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_share_backflow_code_re::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_share_backflow_code_re::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 npt_share_backflow_code_re::errorcode() const {
  return errorcode_;
}
inline void npt_share_backflow_code_re::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// -------------------------------------------------------------------

// npt_rece_invite_award

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECE_INVITE_AWARD];
inline bool npt_rece_invite_award::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_rece_invite_award::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_rece_invite_award::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_rece_invite_award::clear_type() {
  type_ = 110;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_rece_invite_award::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_rece_invite_award::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 index = 2;
inline bool npt_rece_invite_award::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_rece_invite_award::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_rece_invite_award::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_rece_invite_award::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 npt_rece_invite_award::index() const {
  return index_;
}
inline void npt_rece_invite_award::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// npt_rece_invite_award_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECE_INVITE_AWARD_RE];
inline bool npt_rece_invite_award_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_rece_invite_award_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_rece_invite_award_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_rece_invite_award_re::clear_type() {
  type_ = 111;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_rece_invite_award_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_rece_invite_award_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 errorcode = 2;
inline bool npt_rece_invite_award_re::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_rece_invite_award_re::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_rece_invite_award_re::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_rece_invite_award_re::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 npt_rece_invite_award_re::errorcode() const {
  return errorcode_;
}
inline void npt_rece_invite_award_re::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional int32 index = 3;
inline bool npt_rece_invite_award_re::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_rece_invite_award_re::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_rece_invite_award_re::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_rece_invite_award_re::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 npt_rece_invite_award_re::index() const {
  return index_;
}
inline void npt_rece_invite_award_re::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// npt_rece_convene_award

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECE_CONVENE_AWARD];
inline bool npt_rece_convene_award::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_rece_convene_award::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_rece_convene_award::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_rece_convene_award::clear_type() {
  type_ = 112;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_rece_convene_award::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_rece_convene_award::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 sharecode = 2;
inline bool npt_rece_convene_award::has_sharecode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_rece_convene_award::set_has_sharecode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_rece_convene_award::clear_has_sharecode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_rece_convene_award::clear_sharecode() {
  sharecode_ = GOOGLE_LONGLONG(0);
  clear_has_sharecode();
}
inline ::google::protobuf::int64 npt_rece_convene_award::sharecode() const {
  return sharecode_;
}
inline void npt_rece_convene_award::set_sharecode(::google::protobuf::int64 value) {
  set_has_sharecode();
  sharecode_ = value;
}

// -------------------------------------------------------------------

// npt_rece_convene_award_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECE_CONVENE_AWARD_RE];
inline bool npt_rece_convene_award_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_rece_convene_award_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_rece_convene_award_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_rece_convene_award_re::clear_type() {
  type_ = 113;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_rece_convene_award_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_rece_convene_award_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 errorcode = 2;
inline bool npt_rece_convene_award_re::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_rece_convene_award_re::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_rece_convene_award_re::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_rece_convene_award_re::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 npt_rece_convene_award_re::errorcode() const {
  return errorcode_;
}
inline void npt_rece_convene_award_re::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// -------------------------------------------------------------------

// npt_rece_backflow_award

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECE_BACKFLOW_AWARD];
inline bool npt_rece_backflow_award::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_rece_backflow_award::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_rece_backflow_award::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_rece_backflow_award::clear_type() {
  type_ = 114;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_rece_backflow_award::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_rece_backflow_award::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// npt_rece_backflow_award_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECE_BACKFLOW_AWARD_RE];
inline bool npt_rece_backflow_award_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_rece_backflow_award_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_rece_backflow_award_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_rece_backflow_award_re::clear_type() {
  type_ = 115;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_rece_backflow_award_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_rece_backflow_award_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 errorcode = 2;
inline bool npt_rece_backflow_award_re::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_rece_backflow_award_re::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_rece_backflow_award_re::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_rece_backflow_award_re::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 npt_rece_backflow_award_re::errorcode() const {
  return errorcode_;
}
inline void npt_rece_backflow_award_re::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// -------------------------------------------------------------------

// GP_Begin

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_BEGIN_T];
inline bool GP_Begin::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GP_Begin::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GP_Begin::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GP_Begin::clear_type() {
  type_ = 130;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE GP_Begin::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void GP_Begin::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 value = 2 [default = 0];
inline bool GP_Begin::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GP_Begin::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GP_Begin::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GP_Begin::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 GP_Begin::value() const {
  return value_;
}
inline void GP_Begin::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 value2 = 3;
inline bool GP_Begin::has_value2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GP_Begin::set_has_value2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GP_Begin::clear_has_value2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GP_Begin::clear_value2() {
  value2_ = 0;
  clear_has_value2();
}
inline ::google::protobuf::int32 GP_Begin::value2() const {
  return value2_;
}
inline void GP_Begin::set_value2(::google::protobuf::int32 value) {
  set_has_value2();
  value2_ = value;
}

// -------------------------------------------------------------------

// equip_location

// required int32 location = 1;
inline bool equip_location::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equip_location::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equip_location::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equip_location::clear_location() {
  location_ = 0;
  clear_has_location();
}
inline ::google::protobuf::int32 equip_location::location() const {
  return location_;
}
inline void equip_location::set_location(::google::protobuf::int32 value) {
  set_has_location();
  location_ = value;
}

// required int32 index = 2;
inline bool equip_location::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equip_location::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equip_location::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equip_location::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 equip_location::index() const {
  return index_;
}
inline void equip_location::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required int32 tid = 3;
inline bool equip_location::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equip_location::set_has_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equip_location::clear_has_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equip_location::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 equip_location::tid() const {
  return tid_;
}
inline void equip_location::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// -------------------------------------------------------------------

// gp_equip_grade_and_quality_up

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_GRADE_AND_QUALITY_UP];
inline bool gp_equip_grade_and_quality_up::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_grade_and_quality_up::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_grade_and_quality_up::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_grade_and_quality_up::clear_type() {
  type_ = 131;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_grade_and_quality_up::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_grade_and_quality_up::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.use_money_type money_type = 2 [default = USE_M_BIND];
inline bool gp_equip_grade_and_quality_up::has_money_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_grade_and_quality_up::set_has_money_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_grade_and_quality_up::clear_has_money_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_grade_and_quality_up::clear_money_type() {
  money_type_ = 1;
  clear_has_money_type();
}
inline ::PB::use_money_type gp_equip_grade_and_quality_up::money_type() const {
  return static_cast< ::PB::use_money_type >(money_type_);
}
inline void gp_equip_grade_and_quality_up::set_money_type(::PB::use_money_type value) {
  assert(::PB::use_money_type_IsValid(value));
  set_has_money_type();
  money_type_ = value;
}

// required .PB.equip_location equip = 3;
inline bool gp_equip_grade_and_quality_up::has_equip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_grade_and_quality_up::set_has_equip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_grade_and_quality_up::clear_has_equip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_grade_and_quality_up::clear_equip() {
  if (equip_ != NULL) equip_->::PB::equip_location::Clear();
  clear_has_equip();
}
inline const ::PB::equip_location& gp_equip_grade_and_quality_up::equip() const {
  return equip_ != NULL ? *equip_ : *default_instance_->equip_;
}
inline ::PB::equip_location* gp_equip_grade_and_quality_up::mutable_equip() {
  set_has_equip();
  if (equip_ == NULL) equip_ = new ::PB::equip_location;
  return equip_;
}
inline ::PB::equip_location* gp_equip_grade_and_quality_up::release_equip() {
  clear_has_equip();
  ::PB::equip_location* temp = equip_;
  equip_ = NULL;
  return temp;
}
inline void gp_equip_grade_and_quality_up::set_allocated_equip(::PB::equip_location* equip) {
  delete equip_;
  equip_ = equip;
  if (equip) {
    set_has_equip();
  } else {
    clear_has_equip();
  }
}

// required bool one_button_up = 4;
inline bool gp_equip_grade_and_quality_up::has_one_button_up() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_grade_and_quality_up::set_has_one_button_up() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_grade_and_quality_up::clear_has_one_button_up() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_grade_and_quality_up::clear_one_button_up() {
  one_button_up_ = false;
  clear_has_one_button_up();
}
inline bool gp_equip_grade_and_quality_up::one_button_up() const {
  return one_button_up_;
}
inline void gp_equip_grade_and_quality_up::set_one_button_up(bool value) {
  set_has_one_button_up();
  one_button_up_ = value;
}

// -------------------------------------------------------------------

// gp_create_corps

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CREATE_CORPS];
inline bool gp_create_corps::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_create_corps::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_create_corps::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_create_corps::clear_type() {
  type_ = 132;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_create_corps::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_create_corps::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required bytes corps_name = 2;
inline bool gp_create_corps::has_corps_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_create_corps::set_has_corps_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_create_corps::clear_has_corps_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_create_corps::clear_corps_name() {
  if (corps_name_ != &::google::protobuf::internal::kEmptyString) {
    corps_name_->clear();
  }
  clear_has_corps_name();
}
inline const ::std::string& gp_create_corps::corps_name() const {
  return *corps_name_;
}
inline void gp_create_corps::set_corps_name(const ::std::string& value) {
  set_has_corps_name();
  if (corps_name_ == &::google::protobuf::internal::kEmptyString) {
    corps_name_ = new ::std::string;
  }
  corps_name_->assign(value);
}
inline void gp_create_corps::set_corps_name(const char* value) {
  set_has_corps_name();
  if (corps_name_ == &::google::protobuf::internal::kEmptyString) {
    corps_name_ = new ::std::string;
  }
  corps_name_->assign(value);
}
inline void gp_create_corps::set_corps_name(const void* value, size_t size) {
  set_has_corps_name();
  if (corps_name_ == &::google::protobuf::internal::kEmptyString) {
    corps_name_ = new ::std::string;
  }
  corps_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_create_corps::mutable_corps_name() {
  set_has_corps_name();
  if (corps_name_ == &::google::protobuf::internal::kEmptyString) {
    corps_name_ = new ::std::string;
  }
  return corps_name_;
}
inline ::std::string* gp_create_corps::release_corps_name() {
  clear_has_corps_name();
  if (corps_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = corps_name_;
    corps_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gp_create_corps::set_allocated_corps_name(::std::string* corps_name) {
  if (corps_name_ != &::google::protobuf::internal::kEmptyString) {
    delete corps_name_;
  }
  if (corps_name) {
    set_has_corps_name();
    corps_name_ = corps_name;
  } else {
    clear_has_corps_name();
    corps_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gp_equip_attach_gem

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_ATTACH_GEM];
inline bool gp_equip_attach_gem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_attach_gem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_attach_gem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_attach_gem::clear_type() {
  type_ = 133;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_attach_gem::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_attach_gem::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 equip_index = 2;
inline bool gp_equip_attach_gem::has_equip_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_attach_gem::set_has_equip_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_attach_gem::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_attach_gem::clear_equip_index() {
  equip_index_ = 0u;
  clear_has_equip_index();
}
inline ::google::protobuf::uint32 gp_equip_attach_gem::equip_index() const {
  return equip_index_;
}
inline void gp_equip_attach_gem::set_equip_index(::google::protobuf::uint32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// required int32 equip_tid = 3;
inline bool gp_equip_attach_gem::has_equip_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_attach_gem::set_has_equip_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_attach_gem::clear_has_equip_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_attach_gem::clear_equip_tid() {
  equip_tid_ = 0;
  clear_has_equip_tid();
}
inline ::google::protobuf::int32 gp_equip_attach_gem::equip_tid() const {
  return equip_tid_;
}
inline void gp_equip_attach_gem::set_equip_tid(::google::protobuf::int32 value) {
  set_has_equip_tid();
  equip_tid_ = value;
}

// required uint32 hole_index = 4;
inline bool gp_equip_attach_gem::has_hole_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_attach_gem::set_has_hole_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_attach_gem::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_attach_gem::clear_hole_index() {
  hole_index_ = 0u;
  clear_has_hole_index();
}
inline ::google::protobuf::uint32 gp_equip_attach_gem::hole_index() const {
  return hole_index_;
}
inline void gp_equip_attach_gem::set_hole_index(::google::protobuf::uint32 value) {
  set_has_hole_index();
  hole_index_ = value;
}

// required uint32 gem_index = 5;
inline bool gp_equip_attach_gem::has_gem_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_equip_attach_gem::set_has_gem_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_equip_attach_gem::clear_has_gem_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_equip_attach_gem::clear_gem_index() {
  gem_index_ = 0u;
  clear_has_gem_index();
}
inline ::google::protobuf::uint32 gp_equip_attach_gem::gem_index() const {
  return gem_index_;
}
inline void gp_equip_attach_gem::set_gem_index(::google::protobuf::uint32 value) {
  set_has_gem_index();
  gem_index_ = value;
}

// required int32 gem_tid = 6;
inline bool gp_equip_attach_gem::has_gem_tid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_equip_attach_gem::set_has_gem_tid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_equip_attach_gem::clear_has_gem_tid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_equip_attach_gem::clear_gem_tid() {
  gem_tid_ = 0;
  clear_has_gem_tid();
}
inline ::google::protobuf::int32 gp_equip_attach_gem::gem_tid() const {
  return gem_tid_;
}
inline void gp_equip_attach_gem::set_gem_tid(::google::protobuf::int32 value) {
  set_has_gem_tid();
  gem_tid_ = value;
}

// -------------------------------------------------------------------

// gp_equip_detach_gem

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_DETACH_GEM];
inline bool gp_equip_detach_gem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_detach_gem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_detach_gem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_detach_gem::clear_type() {
  type_ = 134;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_detach_gem::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_detach_gem::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 equip_index = 2;
inline bool gp_equip_detach_gem::has_equip_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_detach_gem::set_has_equip_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_detach_gem::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_detach_gem::clear_equip_index() {
  equip_index_ = 0u;
  clear_has_equip_index();
}
inline ::google::protobuf::uint32 gp_equip_detach_gem::equip_index() const {
  return equip_index_;
}
inline void gp_equip_detach_gem::set_equip_index(::google::protobuf::uint32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// required int32 equip_tid = 3;
inline bool gp_equip_detach_gem::has_equip_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_detach_gem::set_has_equip_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_detach_gem::clear_has_equip_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_detach_gem::clear_equip_tid() {
  equip_tid_ = 0;
  clear_has_equip_tid();
}
inline ::google::protobuf::int32 gp_equip_detach_gem::equip_tid() const {
  return equip_tid_;
}
inline void gp_equip_detach_gem::set_equip_tid(::google::protobuf::int32 value) {
  set_has_equip_tid();
  equip_tid_ = value;
}

// required uint32 hole_index = 4;
inline bool gp_equip_detach_gem::has_hole_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_detach_gem::set_has_hole_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_detach_gem::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_detach_gem::clear_hole_index() {
  hole_index_ = 0u;
  clear_has_hole_index();
}
inline ::google::protobuf::uint32 gp_equip_detach_gem::hole_index() const {
  return hole_index_;
}
inline void gp_equip_detach_gem::set_hole_index(::google::protobuf::uint32 value) {
  set_has_hole_index();
  hole_index_ = value;
}

// required int32 gem_tid = 5;
inline bool gp_equip_detach_gem::has_gem_tid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_equip_detach_gem::set_has_gem_tid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_equip_detach_gem::clear_has_gem_tid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_equip_detach_gem::clear_gem_tid() {
  gem_tid_ = 0;
  clear_has_gem_tid();
}
inline ::google::protobuf::int32 gp_equip_detach_gem::gem_tid() const {
  return gem_tid_;
}
inline void gp_equip_detach_gem::set_gem_tid(::google::protobuf::int32 value) {
  set_has_gem_tid();
  gem_tid_ = value;
}

// -------------------------------------------------------------------

// gp_equip_attach_gem_upgrade

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_ATTACH_GEM_UPGRADE];
inline bool gp_equip_attach_gem_upgrade::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_attach_gem_upgrade::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_attach_gem_upgrade::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_attach_gem_upgrade::clear_type() {
  type_ = 177;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_attach_gem_upgrade::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_attach_gem_upgrade::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 equip_index = 2;
inline bool gp_equip_attach_gem_upgrade::has_equip_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_attach_gem_upgrade::set_has_equip_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_attach_gem_upgrade::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_attach_gem_upgrade::clear_equip_index() {
  equip_index_ = 0u;
  clear_has_equip_index();
}
inline ::google::protobuf::uint32 gp_equip_attach_gem_upgrade::equip_index() const {
  return equip_index_;
}
inline void gp_equip_attach_gem_upgrade::set_equip_index(::google::protobuf::uint32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// required int32 equip_tid = 3;
inline bool gp_equip_attach_gem_upgrade::has_equip_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_attach_gem_upgrade::set_has_equip_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_attach_gem_upgrade::clear_has_equip_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_attach_gem_upgrade::clear_equip_tid() {
  equip_tid_ = 0;
  clear_has_equip_tid();
}
inline ::google::protobuf::int32 gp_equip_attach_gem_upgrade::equip_tid() const {
  return equip_tid_;
}
inline void gp_equip_attach_gem_upgrade::set_equip_tid(::google::protobuf::int32 value) {
  set_has_equip_tid();
  equip_tid_ = value;
}

// required uint32 hole_index = 4;
inline bool gp_equip_attach_gem_upgrade::has_hole_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_attach_gem_upgrade::set_has_hole_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_attach_gem_upgrade::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_attach_gem_upgrade::clear_hole_index() {
  hole_index_ = 0u;
  clear_has_hole_index();
}
inline ::google::protobuf::uint32 gp_equip_attach_gem_upgrade::hole_index() const {
  return hole_index_;
}
inline void gp_equip_attach_gem_upgrade::set_hole_index(::google::protobuf::uint32 value) {
  set_has_hole_index();
  hole_index_ = value;
}

// required int32 gem_tid = 5;
inline bool gp_equip_attach_gem_upgrade::has_gem_tid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_equip_attach_gem_upgrade::set_has_gem_tid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_equip_attach_gem_upgrade::clear_has_gem_tid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_equip_attach_gem_upgrade::clear_gem_tid() {
  gem_tid_ = 0;
  clear_has_gem_tid();
}
inline ::google::protobuf::int32 gp_equip_attach_gem_upgrade::gem_tid() const {
  return gem_tid_;
}
inline void gp_equip_attach_gem_upgrade::set_gem_tid(::google::protobuf::int32 value) {
  set_has_gem_tid();
  gem_tid_ = value;
}

// -------------------------------------------------------------------

// gp_equip_xilian

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_XILIAN];
inline bool gp_equip_xilian::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_xilian::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_xilian::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_xilian::clear_type() {
  type_ = 135;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_xilian::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_xilian::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 location = 2;
inline bool gp_equip_xilian::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_xilian::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_xilian::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_xilian::clear_location() {
  location_ = 0u;
  clear_has_location();
}
inline ::google::protobuf::uint32 gp_equip_xilian::location() const {
  return location_;
}
inline void gp_equip_xilian::set_location(::google::protobuf::uint32 value) {
  set_has_location();
  location_ = value;
}

// required uint32 equip_index = 3;
inline bool gp_equip_xilian::has_equip_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_xilian::set_has_equip_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_xilian::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_xilian::clear_equip_index() {
  equip_index_ = 0u;
  clear_has_equip_index();
}
inline ::google::protobuf::uint32 gp_equip_xilian::equip_index() const {
  return equip_index_;
}
inline void gp_equip_xilian::set_equip_index(::google::protobuf::uint32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// required int32 equip_tid = 4;
inline bool gp_equip_xilian::has_equip_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_xilian::set_has_equip_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_xilian::clear_has_equip_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_xilian::clear_equip_tid() {
  equip_tid_ = 0;
  clear_has_equip_tid();
}
inline ::google::protobuf::int32 gp_equip_xilian::equip_tid() const {
  return equip_tid_;
}
inline void gp_equip_xilian::set_equip_tid(::google::protobuf::int32 value) {
  set_has_equip_tid();
  equip_tid_ = value;
}

// required bool save = 5;
inline bool gp_equip_xilian::has_save() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_equip_xilian::set_has_save() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_equip_xilian::clear_has_save() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_equip_xilian::clear_save() {
  save_ = false;
  clear_has_save();
}
inline bool gp_equip_xilian::save() const {
  return save_;
}
inline void gp_equip_xilian::set_save(bool value) {
  set_has_save();
  save_ = value;
}

// required int32 lock_tid = 6;
inline bool gp_equip_xilian::has_lock_tid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_equip_xilian::set_has_lock_tid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_equip_xilian::clear_has_lock_tid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_equip_xilian::clear_lock_tid() {
  lock_tid_ = 0;
  clear_has_lock_tid();
}
inline ::google::protobuf::int32 gp_equip_xilian::lock_tid() const {
  return lock_tid_;
}
inline void gp_equip_xilian::set_lock_tid(::google::protobuf::int32 value) {
  set_has_lock_tid();
  lock_tid_ = value;
}

// required int32 tool_tid = 7;
inline bool gp_equip_xilian::has_tool_tid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_equip_xilian::set_has_tool_tid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_equip_xilian::clear_has_tool_tid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_equip_xilian::clear_tool_tid() {
  tool_tid_ = 0;
  clear_has_tool_tid();
}
inline ::google::protobuf::int32 gp_equip_xilian::tool_tid() const {
  return tool_tid_;
}
inline void gp_equip_xilian::set_tool_tid(::google::protobuf::int32 value) {
  set_has_tool_tid();
  tool_tid_ = value;
}

// required uint32 count = 8;
inline bool gp_equip_xilian::has_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gp_equip_xilian::set_has_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gp_equip_xilian::clear_has_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gp_equip_xilian::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 gp_equip_xilian::count() const {
  return count_;
}
inline void gp_equip_xilian::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// repeated int32 addons = 9;
inline int gp_equip_xilian::addons_size() const {
  return addons_.size();
}
inline void gp_equip_xilian::clear_addons() {
  addons_.Clear();
}
inline ::google::protobuf::int32 gp_equip_xilian::addons(int index) const {
  return addons_.Get(index);
}
inline void gp_equip_xilian::set_addons(int index, ::google::protobuf::int32 value) {
  addons_.Set(index, value);
}
inline void gp_equip_xilian::add_addons(::google::protobuf::int32 value) {
  addons_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gp_equip_xilian::addons() const {
  return addons_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gp_equip_xilian::mutable_addons() {
  return &addons_;
}

// required bool reply = 10;
inline bool gp_equip_xilian::has_reply() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void gp_equip_xilian::set_has_reply() {
  _has_bits_[0] |= 0x00000200u;
}
inline void gp_equip_xilian::clear_has_reply() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void gp_equip_xilian::clear_reply() {
  reply_ = false;
  clear_has_reply();
}
inline bool gp_equip_xilian::reply() const {
  return reply_;
}
inline void gp_equip_xilian::set_reply(bool value) {
  set_has_reply();
  reply_ = value;
}

// -------------------------------------------------------------------

// gp_equip_open_addon

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_OPEN_ADDON];
inline bool gp_equip_open_addon::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_open_addon::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_open_addon::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_open_addon::clear_type() {
  type_ = 165;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_open_addon::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_open_addon::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 location = 2;
inline bool gp_equip_open_addon::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_open_addon::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_open_addon::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_open_addon::clear_location() {
  location_ = 0u;
  clear_has_location();
}
inline ::google::protobuf::uint32 gp_equip_open_addon::location() const {
  return location_;
}
inline void gp_equip_open_addon::set_location(::google::protobuf::uint32 value) {
  set_has_location();
  location_ = value;
}

// required uint32 equip_index = 3;
inline bool gp_equip_open_addon::has_equip_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_open_addon::set_has_equip_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_open_addon::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_open_addon::clear_equip_index() {
  equip_index_ = 0u;
  clear_has_equip_index();
}
inline ::google::protobuf::uint32 gp_equip_open_addon::equip_index() const {
  return equip_index_;
}
inline void gp_equip_open_addon::set_equip_index(::google::protobuf::uint32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// required int32 equip_tid = 4;
inline bool gp_equip_open_addon::has_equip_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_open_addon::set_has_equip_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_open_addon::clear_has_equip_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_open_addon::clear_equip_tid() {
  equip_tid_ = 0;
  clear_has_equip_tid();
}
inline ::google::protobuf::int32 gp_equip_open_addon::equip_tid() const {
  return equip_tid_;
}
inline void gp_equip_open_addon::set_equip_tid(::google::protobuf::int32 value) {
  set_has_equip_tid();
  equip_tid_ = value;
}

// required int32 addon_index = 5;
inline bool gp_equip_open_addon::has_addon_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_equip_open_addon::set_has_addon_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_equip_open_addon::clear_has_addon_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_equip_open_addon::clear_addon_index() {
  addon_index_ = 0;
  clear_has_addon_index();
}
inline ::google::protobuf::int32 gp_equip_open_addon::addon_index() const {
  return addon_index_;
}
inline void gp_equip_open_addon::set_addon_index(::google::protobuf::int32 value) {
  set_has_addon_index();
  addon_index_ = value;
}

// required bool nobind_money = 6;
inline bool gp_equip_open_addon::has_nobind_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_equip_open_addon::set_has_nobind_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_equip_open_addon::clear_has_nobind_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_equip_open_addon::clear_nobind_money() {
  nobind_money_ = false;
  clear_has_nobind_money();
}
inline bool gp_equip_open_addon::nobind_money() const {
  return nobind_money_;
}
inline void gp_equip_open_addon::set_nobind_money(bool value) {
  set_has_nobind_money();
  nobind_money_ = value;
}

// -------------------------------------------------------------------

// tool_bind_info

// required bool bind = 1;
inline bool tool_bind_info::has_bind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tool_bind_info::set_has_bind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tool_bind_info::clear_has_bind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tool_bind_info::clear_bind() {
  bind_ = false;
  clear_has_bind();
}
inline bool tool_bind_info::bind() const {
  return bind_;
}
inline void tool_bind_info::set_bind(bool value) {
  set_has_bind();
  bind_ = value;
}

// required int32 tid = 2;
inline bool tool_bind_info::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tool_bind_info::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tool_bind_info::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tool_bind_info::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 tool_bind_info::tid() const {
  return tid_;
}
inline void tool_bind_info::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// -------------------------------------------------------------------

// gp_equip_lianxing

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_LIANXING];
inline bool gp_equip_lianxing::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_lianxing::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_lianxing::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_lianxing::clear_type() {
  type_ = 136;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_lianxing::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_lianxing::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 location = 2;
inline bool gp_equip_lianxing::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_lianxing::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_lianxing::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_lianxing::clear_location() {
  location_ = 0u;
  clear_has_location();
}
inline ::google::protobuf::uint32 gp_equip_lianxing::location() const {
  return location_;
}
inline void gp_equip_lianxing::set_location(::google::protobuf::uint32 value) {
  set_has_location();
  location_ = value;
}

// required uint32 equip_index = 3;
inline bool gp_equip_lianxing::has_equip_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_lianxing::set_has_equip_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_lianxing::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_lianxing::clear_equip_index() {
  equip_index_ = 0u;
  clear_has_equip_index();
}
inline ::google::protobuf::uint32 gp_equip_lianxing::equip_index() const {
  return equip_index_;
}
inline void gp_equip_lianxing::set_equip_index(::google::protobuf::uint32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// required int32 equip_tid = 4;
inline bool gp_equip_lianxing::has_equip_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_lianxing::set_has_equip_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_lianxing::clear_has_equip_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_lianxing::clear_equip_tid() {
  equip_tid_ = 0;
  clear_has_equip_tid();
}
inline ::google::protobuf::int32 gp_equip_lianxing::equip_tid() const {
  return equip_tid_;
}
inline void gp_equip_lianxing::set_equip_tid(::google::protobuf::int32 value) {
  set_has_equip_tid();
  equip_tid_ = value;
}

// repeated .PB.tool_bind_info tools = 5;
inline int gp_equip_lianxing::tools_size() const {
  return tools_.size();
}
inline void gp_equip_lianxing::clear_tools() {
  tools_.Clear();
}
inline const ::PB::tool_bind_info& gp_equip_lianxing::tools(int index) const {
  return tools_.Get(index);
}
inline ::PB::tool_bind_info* gp_equip_lianxing::mutable_tools(int index) {
  return tools_.Mutable(index);
}
inline ::PB::tool_bind_info* gp_equip_lianxing::add_tools() {
  return tools_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::tool_bind_info >&
gp_equip_lianxing::tools() const {
  return tools_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::tool_bind_info >*
gp_equip_lianxing::mutable_tools() {
  return &tools_;
}

// required bool bind_money = 6;
inline bool gp_equip_lianxing::has_bind_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_equip_lianxing::set_has_bind_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_equip_lianxing::clear_has_bind_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_equip_lianxing::clear_bind_money() {
  bind_money_ = false;
  clear_has_bind_money();
}
inline bool gp_equip_lianxing::bind_money() const {
  return bind_money_;
}
inline void gp_equip_lianxing::set_bind_money(bool value) {
  set_has_bind_money();
  bind_money_ = value;
}

// required bool use_baodi = 7;
inline bool gp_equip_lianxing::has_use_baodi() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_equip_lianxing::set_has_use_baodi() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_equip_lianxing::clear_has_use_baodi() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_equip_lianxing::clear_use_baodi() {
  use_baodi_ = false;
  clear_has_use_baodi();
}
inline bool gp_equip_lianxing::use_baodi() const {
  return use_baodi_;
}
inline void gp_equip_lianxing::set_use_baodi(bool value) {
  set_has_use_baodi();
  use_baodi_ = value;
}

// required bool nobind_baodi = 8;
inline bool gp_equip_lianxing::has_nobind_baodi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gp_equip_lianxing::set_has_nobind_baodi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gp_equip_lianxing::clear_has_nobind_baodi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gp_equip_lianxing::clear_nobind_baodi() {
  nobind_baodi_ = false;
  clear_has_nobind_baodi();
}
inline bool gp_equip_lianxing::nobind_baodi() const {
  return nobind_baodi_;
}
inline void gp_equip_lianxing::set_nobind_baodi(bool value) {
  set_has_nobind_baodi();
  nobind_baodi_ = value;
}

// -------------------------------------------------------------------

// gp_equip_train

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_TRAIN];
inline bool gp_equip_train::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_train::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_train::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_train::clear_type() {
  type_ = 167;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_train::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_train::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 prop_index = 2;
inline bool gp_equip_train::has_prop_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_train::set_has_prop_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_train::clear_has_prop_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_train::clear_prop_index() {
  prop_index_ = 0;
  clear_has_prop_index();
}
inline ::google::protobuf::int32 gp_equip_train::prop_index() const {
  return prop_index_;
}
inline void gp_equip_train::set_prop_index(::google::protobuf::int32 value) {
  set_has_prop_index();
  prop_index_ = value;
}

// required int32 cur_train_num = 3;
inline bool gp_equip_train::has_cur_train_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_train::set_has_cur_train_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_train::clear_has_cur_train_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_train::clear_cur_train_num() {
  cur_train_num_ = 0;
  clear_has_cur_train_num();
}
inline ::google::protobuf::int32 gp_equip_train::cur_train_num() const {
  return cur_train_num_;
}
inline void gp_equip_train::set_cur_train_num(::google::protobuf::int32 value) {
  set_has_cur_train_num();
  cur_train_num_ = value;
}

// required bool one_button_up = 4;
inline bool gp_equip_train::has_one_button_up() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_train::set_has_one_button_up() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_train::clear_has_one_button_up() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_train::clear_one_button_up() {
  one_button_up_ = false;
  clear_has_one_button_up();
}
inline bool gp_equip_train::one_button_up() const {
  return one_button_up_;
}
inline void gp_equip_train::set_one_button_up(bool value) {
  set_has_one_button_up();
  one_button_up_ = value;
}

// -------------------------------------------------------------------

// gp_equip_switch_surface

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_SWITCH_SURFACE];
inline bool gp_equip_switch_surface::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_switch_surface::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_switch_surface::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_switch_surface::clear_type() {
  type_ = 168;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_switch_surface::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_switch_surface::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 surface_tid = 2;
inline bool gp_equip_switch_surface::has_surface_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_switch_surface::set_has_surface_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_switch_surface::clear_has_surface_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_switch_surface::clear_surface_tid() {
  surface_tid_ = 0;
  clear_has_surface_tid();
}
inline ::google::protobuf::int32 gp_equip_switch_surface::surface_tid() const {
  return surface_tid_;
}
inline void gp_equip_switch_surface::set_surface_tid(::google::protobuf::int32 value) {
  set_has_surface_tid();
  surface_tid_ = value;
}

// required int32 index = 3;
inline bool gp_equip_switch_surface::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_switch_surface::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_switch_surface::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_switch_surface::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 gp_equip_switch_surface::index() const {
  return index_;
}
inline void gp_equip_switch_surface::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// gp_equip_transfer

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_TRANSFER];
inline bool gp_equip_transfer::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_transfer::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_transfer::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_transfer::clear_type() {
  type_ = 137;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_transfer::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_transfer::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 src_location = 2;
inline bool gp_equip_transfer::has_src_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_transfer::set_has_src_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_transfer::clear_has_src_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_transfer::clear_src_location() {
  src_location_ = 0u;
  clear_has_src_location();
}
inline ::google::protobuf::uint32 gp_equip_transfer::src_location() const {
  return src_location_;
}
inline void gp_equip_transfer::set_src_location(::google::protobuf::uint32 value) {
  set_has_src_location();
  src_location_ = value;
}

// required uint32 src_index = 3;
inline bool gp_equip_transfer::has_src_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_transfer::set_has_src_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_transfer::clear_has_src_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_transfer::clear_src_index() {
  src_index_ = 0u;
  clear_has_src_index();
}
inline ::google::protobuf::uint32 gp_equip_transfer::src_index() const {
  return src_index_;
}
inline void gp_equip_transfer::set_src_index(::google::protobuf::uint32 value) {
  set_has_src_index();
  src_index_ = value;
}

// required int32 src_tid = 4;
inline bool gp_equip_transfer::has_src_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_transfer::set_has_src_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_transfer::clear_has_src_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_transfer::clear_src_tid() {
  src_tid_ = 0;
  clear_has_src_tid();
}
inline ::google::protobuf::int32 gp_equip_transfer::src_tid() const {
  return src_tid_;
}
inline void gp_equip_transfer::set_src_tid(::google::protobuf::int32 value) {
  set_has_src_tid();
  src_tid_ = value;
}

// required uint32 dst_location = 5;
inline bool gp_equip_transfer::has_dst_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_equip_transfer::set_has_dst_location() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_equip_transfer::clear_has_dst_location() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_equip_transfer::clear_dst_location() {
  dst_location_ = 0u;
  clear_has_dst_location();
}
inline ::google::protobuf::uint32 gp_equip_transfer::dst_location() const {
  return dst_location_;
}
inline void gp_equip_transfer::set_dst_location(::google::protobuf::uint32 value) {
  set_has_dst_location();
  dst_location_ = value;
}

// required uint32 dst_index = 6;
inline bool gp_equip_transfer::has_dst_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_equip_transfer::set_has_dst_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_equip_transfer::clear_has_dst_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_equip_transfer::clear_dst_index() {
  dst_index_ = 0u;
  clear_has_dst_index();
}
inline ::google::protobuf::uint32 gp_equip_transfer::dst_index() const {
  return dst_index_;
}
inline void gp_equip_transfer::set_dst_index(::google::protobuf::uint32 value) {
  set_has_dst_index();
  dst_index_ = value;
}

// required int32 dst_tid = 7;
inline bool gp_equip_transfer::has_dst_tid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_equip_transfer::set_has_dst_tid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_equip_transfer::clear_has_dst_tid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_equip_transfer::clear_dst_tid() {
  dst_tid_ = 0;
  clear_has_dst_tid();
}
inline ::google::protobuf::int32 gp_equip_transfer::dst_tid() const {
  return dst_tid_;
}
inline void gp_equip_transfer::set_dst_tid(::google::protobuf::int32 value) {
  set_has_dst_tid();
  dst_tid_ = value;
}

// required bool transfer_star = 8;
inline bool gp_equip_transfer::has_transfer_star() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gp_equip_transfer::set_has_transfer_star() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gp_equip_transfer::clear_has_transfer_star() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gp_equip_transfer::clear_transfer_star() {
  transfer_star_ = false;
  clear_has_transfer_star();
}
inline bool gp_equip_transfer::transfer_star() const {
  return transfer_star_;
}
inline void gp_equip_transfer::set_transfer_star(bool value) {
  set_has_transfer_star();
  transfer_star_ = value;
}

// required bool transfer_addon = 9;
inline bool gp_equip_transfer::has_transfer_addon() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gp_equip_transfer::set_has_transfer_addon() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gp_equip_transfer::clear_has_transfer_addon() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gp_equip_transfer::clear_transfer_addon() {
  transfer_addon_ = false;
  clear_has_transfer_addon();
}
inline bool gp_equip_transfer::transfer_addon() const {
  return transfer_addon_;
}
inline void gp_equip_transfer::set_transfer_addon(bool value) {
  set_has_transfer_addon();
  transfer_addon_ = value;
}

// -------------------------------------------------------------------

// gp_equip_refine

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_REFINE];
inline bool gp_equip_refine::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_refine::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_refine::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_refine::clear_type() {
  type_ = 172;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_refine::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_refine::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 main_location = 2;
inline bool gp_equip_refine::has_main_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_refine::set_has_main_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_refine::clear_has_main_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_refine::clear_main_location() {
  main_location_ = 0u;
  clear_has_main_location();
}
inline ::google::protobuf::uint32 gp_equip_refine::main_location() const {
  return main_location_;
}
inline void gp_equip_refine::set_main_location(::google::protobuf::uint32 value) {
  set_has_main_location();
  main_location_ = value;
}

// required uint32 main_index = 3;
inline bool gp_equip_refine::has_main_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_refine::set_has_main_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_refine::clear_has_main_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_refine::clear_main_index() {
  main_index_ = 0u;
  clear_has_main_index();
}
inline ::google::protobuf::uint32 gp_equip_refine::main_index() const {
  return main_index_;
}
inline void gp_equip_refine::set_main_index(::google::protobuf::uint32 value) {
  set_has_main_index();
  main_index_ = value;
}

// required int32 main_tid = 4;
inline bool gp_equip_refine::has_main_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_refine::set_has_main_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_refine::clear_has_main_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_refine::clear_main_tid() {
  main_tid_ = 0;
  clear_has_main_tid();
}
inline ::google::protobuf::int32 gp_equip_refine::main_tid() const {
  return main_tid_;
}
inline void gp_equip_refine::set_main_tid(::google::protobuf::int32 value) {
  set_has_main_tid();
  main_tid_ = value;
}

// required uint32 material_location = 5;
inline bool gp_equip_refine::has_material_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_equip_refine::set_has_material_location() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_equip_refine::clear_has_material_location() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_equip_refine::clear_material_location() {
  material_location_ = 0u;
  clear_has_material_location();
}
inline ::google::protobuf::uint32 gp_equip_refine::material_location() const {
  return material_location_;
}
inline void gp_equip_refine::set_material_location(::google::protobuf::uint32 value) {
  set_has_material_location();
  material_location_ = value;
}

// required uint32 material_index = 6;
inline bool gp_equip_refine::has_material_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_equip_refine::set_has_material_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_equip_refine::clear_has_material_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_equip_refine::clear_material_index() {
  material_index_ = 0u;
  clear_has_material_index();
}
inline ::google::protobuf::uint32 gp_equip_refine::material_index() const {
  return material_index_;
}
inline void gp_equip_refine::set_material_index(::google::protobuf::uint32 value) {
  set_has_material_index();
  material_index_ = value;
}

// required int32 material_tid = 7;
inline bool gp_equip_refine::has_material_tid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_equip_refine::set_has_material_tid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_equip_refine::clear_has_material_tid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_equip_refine::clear_material_tid() {
  material_tid_ = 0;
  clear_has_material_tid();
}
inline ::google::protobuf::int32 gp_equip_refine::material_tid() const {
  return material_tid_;
}
inline void gp_equip_refine::set_material_tid(::google::protobuf::int32 value) {
  set_has_material_tid();
  material_tid_ = value;
}

// required int32 attr_index = 8;
inline bool gp_equip_refine::has_attr_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gp_equip_refine::set_has_attr_index() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gp_equip_refine::clear_has_attr_index() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gp_equip_refine::clear_attr_index() {
  attr_index_ = 0;
  clear_has_attr_index();
}
inline ::google::protobuf::int32 gp_equip_refine::attr_index() const {
  return attr_index_;
}
inline void gp_equip_refine::set_attr_index(::google::protobuf::int32 value) {
  set_has_attr_index();
  attr_index_ = value;
}

// required bool bind_money = 9;
inline bool gp_equip_refine::has_bind_money() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gp_equip_refine::set_has_bind_money() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gp_equip_refine::clear_has_bind_money() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gp_equip_refine::clear_bind_money() {
  bind_money_ = false;
  clear_has_bind_money();
}
inline bool gp_equip_refine::bind_money() const {
  return bind_money_;
}
inline void gp_equip_refine::set_bind_money(bool value) {
  set_has_bind_money();
  bind_money_ = value;
}

// -------------------------------------------------------------------

// gp_item_combine

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_ITEM_COMBINE];
inline bool gp_item_combine::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_item_combine::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_item_combine::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_item_combine::clear_type() {
  type_ = 138;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_item_combine::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_item_combine::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 item_tid = 2;
inline bool gp_item_combine::has_item_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_item_combine::set_has_item_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_item_combine::clear_has_item_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_item_combine::clear_item_tid() {
  item_tid_ = 0;
  clear_has_item_tid();
}
inline ::google::protobuf::int32 gp_item_combine::item_tid() const {
  return item_tid_;
}
inline void gp_item_combine::set_item_tid(::google::protobuf::int32 value) {
  set_has_item_tid();
  item_tid_ = value;
}

// required uint32 item_count = 3;
inline bool gp_item_combine::has_item_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_item_combine::set_has_item_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_item_combine::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_item_combine::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 gp_item_combine::item_count() const {
  return item_count_;
}
inline void gp_item_combine::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// required uint32 item_bind_count = 4;
inline bool gp_item_combine::has_item_bind_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_item_combine::set_has_item_bind_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_item_combine::clear_has_item_bind_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_item_combine::clear_item_bind_count() {
  item_bind_count_ = 0u;
  clear_has_item_bind_count();
}
inline ::google::protobuf::uint32 gp_item_combine::item_bind_count() const {
  return item_bind_count_;
}
inline void gp_item_combine::set_item_bind_count(::google::protobuf::uint32 value) {
  set_has_item_bind_count();
  item_bind_count_ = value;
}

// required bool bind_money = 5;
inline bool gp_item_combine::has_bind_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_item_combine::set_has_bind_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_item_combine::clear_has_bind_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_item_combine::clear_bind_money() {
  bind_money_ = false;
  clear_has_bind_money();
}
inline bool gp_item_combine::bind_money() const {
  return bind_money_;
}
inline void gp_item_combine::set_bind_money(bool value) {
  set_has_bind_money();
  bind_money_ = value;
}

// required uint32 stamp = 6;
inline bool gp_item_combine::has_stamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_item_combine::set_has_stamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_item_combine::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_item_combine::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 gp_item_combine::stamp() const {
  return stamp_;
}
inline void gp_item_combine::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
}

// -------------------------------------------------------------------

// gp_nation_escort_op

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_NATION_ESCORT_OP];
inline bool gp_nation_escort_op::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_nation_escort_op::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_nation_escort_op::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_nation_escort_op::clear_type() {
  type_ = 139;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_nation_escort_op::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_nation_escort_op::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 npcid = 2;
inline bool gp_nation_escort_op::has_npcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_nation_escort_op::set_has_npcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_nation_escort_op::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_nation_escort_op::clear_npcid() {
  npcid_ = GOOGLE_LONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::int64 gp_nation_escort_op::npcid() const {
  return npcid_;
}
inline void gp_nation_escort_op::set_npcid(::google::protobuf::int64 value) {
  set_has_npcid();
  npcid_ = value;
}

// required bool mount = 3;
inline bool gp_nation_escort_op::has_mount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_nation_escort_op::set_has_mount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_nation_escort_op::clear_has_mount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_nation_escort_op::clear_mount() {
  mount_ = false;
  clear_has_mount();
}
inline bool gp_nation_escort_op::mount() const {
  return mount_;
}
inline void gp_nation_escort_op::set_mount(bool value) {
  set_has_mount();
  mount_ = value;
}

// -------------------------------------------------------------------

// gp_escort_change_speed

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_ESCORT_CHANGE_SPEED];
inline bool gp_escort_change_speed::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_escort_change_speed::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_escort_change_speed::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_escort_change_speed::clear_type() {
  type_ = 154;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_escort_change_speed::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_escort_change_speed::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 old_state = 2;
inline bool gp_escort_change_speed::has_old_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_escort_change_speed::set_has_old_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_escort_change_speed::clear_has_old_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_escort_change_speed::clear_old_state() {
  old_state_ = 0u;
  clear_has_old_state();
}
inline ::google::protobuf::uint32 gp_escort_change_speed::old_state() const {
  return old_state_;
}
inline void gp_escort_change_speed::set_old_state(::google::protobuf::uint32 value) {
  set_has_old_state();
  old_state_ = value;
}

// -------------------------------------------------------------------

// gp_minigame_operate

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_MINIGAME_OPERATE];
inline bool gp_minigame_operate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_minigame_operate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_minigame_operate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_minigame_operate::clear_type() {
  type_ = 155;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_minigame_operate::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_minigame_operate::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 oper = 2;
inline bool gp_minigame_operate::has_oper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_minigame_operate::set_has_oper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_minigame_operate::clear_has_oper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_minigame_operate::clear_oper() {
  oper_ = 0u;
  clear_has_oper();
}
inline ::google::protobuf::uint32 gp_minigame_operate::oper() const {
  return oper_;
}
inline void gp_minigame_operate::set_oper(::google::protobuf::uint32 value) {
  set_has_oper();
  oper_ = value;
}

// required uint32 param1 = 3;
inline bool gp_minigame_operate::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_minigame_operate::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_minigame_operate::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_minigame_operate::clear_param1() {
  param1_ = 0u;
  clear_has_param1();
}
inline ::google::protobuf::uint32 gp_minigame_operate::param1() const {
  return param1_;
}
inline void gp_minigame_operate::set_param1(::google::protobuf::uint32 value) {
  set_has_param1();
  param1_ = value;
}

// required uint32 param2 = 4;
inline bool gp_minigame_operate::has_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_minigame_operate::set_has_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_minigame_operate::clear_has_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_minigame_operate::clear_param2() {
  param2_ = 0u;
  clear_has_param2();
}
inline ::google::protobuf::uint32 gp_minigame_operate::param2() const {
  return param2_;
}
inline void gp_minigame_operate::set_param2(::google::protobuf::uint32 value) {
  set_has_param2();
  param2_ = value;
}

// required bytes data = 5;
inline bool gp_minigame_operate::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_minigame_operate::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_minigame_operate::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_minigame_operate::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& gp_minigame_operate::data() const {
  return *data_;
}
inline void gp_minigame_operate::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void gp_minigame_operate::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void gp_minigame_operate::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_minigame_operate::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* gp_minigame_operate::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gp_minigame_operate::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gp_card_operate

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CARD_OPERATE];
inline bool gp_card_operate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_card_operate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_card_operate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_card_operate::clear_type() {
  type_ = 156;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_card_operate::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_card_operate::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_card_operate.OP_TYPE oper = 2;
inline bool gp_card_operate::has_oper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_card_operate::set_has_oper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_card_operate::clear_has_oper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_card_operate::clear_oper() {
  oper_ = 1;
  clear_has_oper();
}
inline ::PB::gp_card_operate_OP_TYPE gp_card_operate::oper() const {
  return static_cast< ::PB::gp_card_operate_OP_TYPE >(oper_);
}
inline void gp_card_operate::set_oper(::PB::gp_card_operate_OP_TYPE value) {
  assert(::PB::gp_card_operate_OP_TYPE_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// repeated .PB.card_info cards = 3;
inline int gp_card_operate::cards_size() const {
  return cards_.size();
}
inline void gp_card_operate::clear_cards() {
  cards_.Clear();
}
inline const ::PB::card_info& gp_card_operate::cards(int index) const {
  return cards_.Get(index);
}
inline ::PB::card_info* gp_card_operate::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::PB::card_info* gp_card_operate::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::card_info >&
gp_card_operate::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::card_info >*
gp_card_operate::mutable_cards() {
  return &cards_;
}

// required int32 param1 = 4;
inline bool gp_card_operate::has_param1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_card_operate::set_has_param1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_card_operate::clear_has_param1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_card_operate::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 gp_card_operate::param1() const {
  return param1_;
}
inline void gp_card_operate::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// required int32 param2 = 5;
inline bool gp_card_operate::has_param2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_card_operate::set_has_param2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_card_operate::clear_has_param2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_card_operate::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline ::google::protobuf::int32 gp_card_operate::param2() const {
  return param2_;
}
inline void gp_card_operate::set_param2(::google::protobuf::int32 value) {
  set_has_param2();
  param2_ = value;
}

// -------------------------------------------------------------------

// gp_get_broadcast_buff

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GET_BROADCAST_BUFF];
inline bool gp_get_broadcast_buff::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_get_broadcast_buff::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_get_broadcast_buff::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_get_broadcast_buff::clear_type() {
  type_ = 140;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_get_broadcast_buff::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_get_broadcast_buff::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 object_id = 2;
inline bool gp_get_broadcast_buff::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_get_broadcast_buff::set_has_object_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_get_broadcast_buff::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_get_broadcast_buff::clear_object_id() {
  object_id_ = GOOGLE_LONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::int64 gp_get_broadcast_buff::object_id() const {
  return object_id_;
}
inline void gp_get_broadcast_buff::set_object_id(::google::protobuf::int64 value) {
  set_has_object_id();
  object_id_ = value;
}

// -------------------------------------------------------------------

// gp_set_pk_setting

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_SET_PK_SETTING];
inline bool gp_set_pk_setting::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_set_pk_setting::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_set_pk_setting::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_set_pk_setting::clear_type() {
  type_ = 141;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_set_pk_setting::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_set_pk_setting::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 pk_setting = 2;
inline bool gp_set_pk_setting::has_pk_setting() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_set_pk_setting::set_has_pk_setting() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_set_pk_setting::clear_has_pk_setting() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_set_pk_setting::clear_pk_setting() {
  pk_setting_ = 0u;
  clear_has_pk_setting();
}
inline ::google::protobuf::uint32 gp_set_pk_setting::pk_setting() const {
  return pk_setting_;
}
inline void gp_set_pk_setting::set_pk_setting(::google::protobuf::uint32 value) {
  set_has_pk_setting();
  pk_setting_ = value;
}

// -------------------------------------------------------------------

// gp_nation_donate

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_NATION_DONATE];
inline bool gp_nation_donate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_nation_donate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_nation_donate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_nation_donate::clear_type() {
  type_ = 142;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_nation_donate::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_nation_donate::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 donate_index = 2;
inline bool gp_nation_donate::has_donate_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_nation_donate::set_has_donate_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_nation_donate::clear_has_donate_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_nation_donate::clear_donate_index() {
  donate_index_ = 0u;
  clear_has_donate_index();
}
inline ::google::protobuf::uint32 gp_nation_donate::donate_index() const {
  return donate_index_;
}
inline void gp_nation_donate::set_donate_index(::google::protobuf::uint32 value) {
  set_has_donate_index();
  donate_index_ = value;
}

// -------------------------------------------------------------------

// gp_auto_reward_op

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_AUTO_REWARD_OP];
inline bool gp_auto_reward_op::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_auto_reward_op::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_auto_reward_op::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_auto_reward_op::clear_type() {
  type_ = 143;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_auto_reward_op::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_auto_reward_op::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 reward_type = 2;
inline bool gp_auto_reward_op::has_reward_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_auto_reward_op::set_has_reward_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_auto_reward_op::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_auto_reward_op::clear_reward_type() {
  reward_type_ = 0;
  clear_has_reward_type();
}
inline ::google::protobuf::int32 gp_auto_reward_op::reward_type() const {
  return reward_type_;
}
inline void gp_auto_reward_op::set_reward_type(::google::protobuf::int32 value) {
  set_has_reward_type();
  reward_type_ = value;
}

// required .PB.gp_auto_reward_op.OP_TYPE operation = 3;
inline bool gp_auto_reward_op::has_operation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_auto_reward_op::set_has_operation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_auto_reward_op::clear_has_operation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_auto_reward_op::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::PB::gp_auto_reward_op_OP_TYPE gp_auto_reward_op::operation() const {
  return static_cast< ::PB::gp_auto_reward_op_OP_TYPE >(operation_);
}
inline void gp_auto_reward_op::set_operation(::PB::gp_auto_reward_op_OP_TYPE value) {
  assert(::PB::gp_auto_reward_op_OP_TYPE_IsValid(value));
  set_has_operation();
  operation_ = value;
}

// optional uint64 value = 4;
inline bool gp_auto_reward_op::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_auto_reward_op::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_auto_reward_op::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_auto_reward_op::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 gp_auto_reward_op::value() const {
  return value_;
}
inline void gp_auto_reward_op::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// gp_get_achievement_award

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GET_ACHIEVEMENT_AWARD];
inline bool gp_get_achievement_award::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_get_achievement_award::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_get_achievement_award::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_get_achievement_award::clear_type() {
  type_ = 144;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_get_achievement_award::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_get_achievement_award::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 achievement_tid = 2;
inline bool gp_get_achievement_award::has_achievement_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_get_achievement_award::set_has_achievement_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_get_achievement_award::clear_has_achievement_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_get_achievement_award::clear_achievement_tid() {
  achievement_tid_ = 0;
  clear_has_achievement_tid();
}
inline ::google::protobuf::int32 gp_get_achievement_award::achievement_tid() const {
  return achievement_tid_;
}
inline void gp_get_achievement_award::set_achievement_tid(::google::protobuf::int32 value) {
  set_has_achievement_tid();
  achievement_tid_ = value;
}

// -------------------------------------------------------------------

// gp_mount_operation

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_MOUNT_OPERATION];
inline bool gp_mount_operation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_mount_operation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_mount_operation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_mount_operation::clear_type() {
  type_ = 145;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_mount_operation::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_mount_operation::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_mount_operation.OP_TYPE op = 2;
inline bool gp_mount_operation::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_mount_operation::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_mount_operation::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_mount_operation::clear_op() {
  op_ = 1;
  clear_has_op();
}
inline ::PB::gp_mount_operation_OP_TYPE gp_mount_operation::op() const {
  return static_cast< ::PB::gp_mount_operation_OP_TYPE >(op_);
}
inline void gp_mount_operation::set_op(::PB::gp_mount_operation_OP_TYPE value) {
  assert(::PB::gp_mount_operation_OP_TYPE_IsValid(value));
  set_has_op();
  op_ = value;
}

// optional int32 summon_location = 3;
inline bool gp_mount_operation::has_summon_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_mount_operation::set_has_summon_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_mount_operation::clear_has_summon_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_mount_operation::clear_summon_location() {
  summon_location_ = 0;
  clear_has_summon_location();
}
inline ::google::protobuf::int32 gp_mount_operation::summon_location() const {
  return summon_location_;
}
inline void gp_mount_operation::set_summon_location(::google::protobuf::int32 value) {
  set_has_summon_location();
  summon_location_ = value;
}

// optional int32 value = 4;
inline bool gp_mount_operation::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_mount_operation::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_mount_operation::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_mount_operation::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 gp_mount_operation::value() const {
  return value_;
}
inline void gp_mount_operation::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// gp_guaji

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GUAJI];
inline bool gp_guaji::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_guaji::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_guaji::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_guaji::clear_type() {
  type_ = 146;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_guaji::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_guaji::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool start_guaji = 2;
inline bool gp_guaji::has_start_guaji() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_guaji::set_has_start_guaji() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_guaji::clear_has_start_guaji() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_guaji::clear_start_guaji() {
  start_guaji_ = false;
  clear_has_start_guaji();
}
inline bool gp_guaji::start_guaji() const {
  return start_guaji_;
}
inline void gp_guaji::set_start_guaji(bool value) {
  set_has_start_guaji();
  start_guaji_ = value;
}

// optional bool quit_mode = 3;
inline bool gp_guaji::has_quit_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_guaji::set_has_quit_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_guaji::clear_has_quit_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_guaji::clear_quit_mode() {
  quit_mode_ = false;
  clear_has_quit_mode();
}
inline bool gp_guaji::quit_mode() const {
  return quit_mode_;
}
inline void gp_guaji::set_quit_mode(bool value) {
  set_has_quit_mode();
  quit_mode_ = value;
}

// optional bool half_quit_mode = 4;
inline bool gp_guaji::has_half_quit_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_guaji::set_has_half_quit_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_guaji::clear_has_half_quit_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_guaji::clear_half_quit_mode() {
  half_quit_mode_ = false;
  clear_has_half_quit_mode();
}
inline bool gp_guaji::half_quit_mode() const {
  return half_quit_mode_;
}
inline void gp_guaji::set_half_quit_mode(bool value) {
  set_has_half_quit_mode();
  half_quit_mode_ = value;
}

// -------------------------------------------------------------------

// gp_vip_operation

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_VIP_OPERATION];
inline bool gp_vip_operation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_vip_operation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_vip_operation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_vip_operation::clear_type() {
  type_ = 147;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_vip_operation::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_vip_operation::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_vip_operation.OP_TYPE op = 2;
inline bool gp_vip_operation::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_vip_operation::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_vip_operation::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_vip_operation::clear_op() {
  op_ = 1;
  clear_has_op();
}
inline ::PB::gp_vip_operation_OP_TYPE gp_vip_operation::op() const {
  return static_cast< ::PB::gp_vip_operation_OP_TYPE >(op_);
}
inline void gp_vip_operation::set_op(::PB::gp_vip_operation_OP_TYPE value) {
  assert(::PB::gp_vip_operation_OP_TYPE_IsValid(value));
  set_has_op();
  op_ = value;
}

// optional int64 value = 3;
inline bool gp_vip_operation::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_vip_operation::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_vip_operation::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_vip_operation::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 gp_vip_operation::value() const {
  return value_;
}
inline void gp_vip_operation::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// optional .PB.gp_vip_operation.LOGOUT_EXP_TYPE exp_type = 4;
inline bool gp_vip_operation::has_exp_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_vip_operation::set_has_exp_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_vip_operation::clear_has_exp_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_vip_operation::clear_exp_type() {
  exp_type_ = 1;
  clear_has_exp_type();
}
inline ::PB::gp_vip_operation_LOGOUT_EXP_TYPE gp_vip_operation::exp_type() const {
  return static_cast< ::PB::gp_vip_operation_LOGOUT_EXP_TYPE >(exp_type_);
}
inline void gp_vip_operation::set_exp_type(::PB::gp_vip_operation_LOGOUT_EXP_TYPE value) {
  assert(::PB::gp_vip_operation_LOGOUT_EXP_TYPE_IsValid(value));
  set_has_exp_type();
  exp_type_ = value;
}

// -------------------------------------------------------------------

// auto_combat_config

// optional int32 radius = 1;
inline bool auto_combat_config::has_radius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void auto_combat_config::set_has_radius() {
  _has_bits_[0] |= 0x00000001u;
}
inline void auto_combat_config::clear_has_radius() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void auto_combat_config::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline ::google::protobuf::int32 auto_combat_config::radius() const {
  return radius_;
}
inline void auto_combat_config::set_radius(::google::protobuf::int32 value) {
  set_has_radius();
  radius_ = value;
}

// optional int32 aid_hp_pesent = 2;
inline bool auto_combat_config::has_aid_hp_pesent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void auto_combat_config::set_has_aid_hp_pesent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void auto_combat_config::clear_has_aid_hp_pesent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void auto_combat_config::clear_aid_hp_pesent() {
  aid_hp_pesent_ = 0;
  clear_has_aid_hp_pesent();
}
inline ::google::protobuf::int32 auto_combat_config::aid_hp_pesent() const {
  return aid_hp_pesent_;
}
inline void auto_combat_config::set_aid_hp_pesent(::google::protobuf::int32 value) {
  set_has_aid_hp_pesent();
  aid_hp_pesent_ = value;
}

// optional int32 aid_item_tid = 3;
inline bool auto_combat_config::has_aid_item_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void auto_combat_config::set_has_aid_item_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void auto_combat_config::clear_has_aid_item_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void auto_combat_config::clear_aid_item_tid() {
  aid_item_tid_ = 0;
  clear_has_aid_item_tid();
}
inline ::google::protobuf::int32 auto_combat_config::aid_item_tid() const {
  return aid_item_tid_;
}
inline void auto_combat_config::set_aid_item_tid(::google::protobuf::int32 value) {
  set_has_aid_item_tid();
  aid_item_tid_ = value;
}

// optional bool auto_buy_item = 4;
inline bool auto_combat_config::has_auto_buy_item() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void auto_combat_config::set_has_auto_buy_item() {
  _has_bits_[0] |= 0x00000008u;
}
inline void auto_combat_config::clear_has_auto_buy_item() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void auto_combat_config::clear_auto_buy_item() {
  auto_buy_item_ = false;
  clear_has_auto_buy_item();
}
inline bool auto_combat_config::auto_buy_item() const {
  return auto_buy_item_;
}
inline void auto_combat_config::set_auto_buy_item(bool value) {
  set_has_auto_buy_item();
  auto_buy_item_ = value;
}

// optional bool auto_pick_up = 5;
inline bool auto_combat_config::has_auto_pick_up() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void auto_combat_config::set_has_auto_pick_up() {
  _has_bits_[0] |= 0x00000010u;
}
inline void auto_combat_config::clear_has_auto_pick_up() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void auto_combat_config::clear_auto_pick_up() {
  auto_pick_up_ = false;
  clear_has_auto_pick_up();
}
inline bool auto_combat_config::auto_pick_up() const {
  return auto_pick_up_;
}
inline void auto_combat_config::set_auto_pick_up(bool value) {
  set_has_auto_pick_up();
  auto_pick_up_ = value;
}

// optional int32 pick_grade = 6;
inline bool auto_combat_config::has_pick_grade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void auto_combat_config::set_has_pick_grade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void auto_combat_config::clear_has_pick_grade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void auto_combat_config::clear_pick_grade() {
  pick_grade_ = 0;
  clear_has_pick_grade();
}
inline ::google::protobuf::int32 auto_combat_config::pick_grade() const {
  return pick_grade_;
}
inline void auto_combat_config::set_pick_grade(::google::protobuf::int32 value) {
  set_has_pick_grade();
  pick_grade_ = value;
}

// optional bool range_skill = 7;
inline bool auto_combat_config::has_range_skill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void auto_combat_config::set_has_range_skill() {
  _has_bits_[0] |= 0x00000040u;
}
inline void auto_combat_config::clear_has_range_skill() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void auto_combat_config::clear_range_skill() {
  range_skill_ = false;
  clear_has_range_skill();
}
inline bool auto_combat_config::range_skill() const {
  return range_skill_;
}
inline void auto_combat_config::set_range_skill(bool value) {
  set_has_range_skill();
  range_skill_ = value;
}

// optional uint32 last_bot_time = 8;
inline bool auto_combat_config::has_last_bot_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void auto_combat_config::set_has_last_bot_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void auto_combat_config::clear_has_last_bot_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void auto_combat_config::clear_last_bot_time() {
  last_bot_time_ = 0u;
  clear_has_last_bot_time();
}
inline ::google::protobuf::uint32 auto_combat_config::last_bot_time() const {
  return last_bot_time_;
}
inline void auto_combat_config::set_last_bot_time(::google::protobuf::uint32 value) {
  set_has_last_bot_time();
  last_bot_time_ = value;
}

// optional uint64 last_bot_exp = 9;
inline bool auto_combat_config::has_last_bot_exp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void auto_combat_config::set_has_last_bot_exp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void auto_combat_config::clear_has_last_bot_exp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void auto_combat_config::clear_last_bot_exp() {
  last_bot_exp_ = GOOGLE_ULONGLONG(0);
  clear_has_last_bot_exp();
}
inline ::google::protobuf::uint64 auto_combat_config::last_bot_exp() const {
  return last_bot_exp_;
}
inline void auto_combat_config::set_last_bot_exp(::google::protobuf::uint64 value) {
  set_has_last_bot_exp();
  last_bot_exp_ = value;
}

// -------------------------------------------------------------------

// gp_auto_combat_config_c2s

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_AUTO_COMBAT_CONFIG];
inline bool gp_auto_combat_config_c2s::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_auto_combat_config_c2s::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_auto_combat_config_c2s::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_auto_combat_config_c2s::clear_type() {
  type_ = 148;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_auto_combat_config_c2s::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_auto_combat_config_c2s::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.auto_combat_config config = 2;
inline bool gp_auto_combat_config_c2s::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_auto_combat_config_c2s::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_auto_combat_config_c2s::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_auto_combat_config_c2s::clear_config() {
  if (config_ != NULL) config_->::PB::auto_combat_config::Clear();
  clear_has_config();
}
inline const ::PB::auto_combat_config& gp_auto_combat_config_c2s::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::PB::auto_combat_config* gp_auto_combat_config_c2s::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::PB::auto_combat_config;
  return config_;
}
inline ::PB::auto_combat_config* gp_auto_combat_config_c2s::release_config() {
  clear_has_config();
  ::PB::auto_combat_config* temp = config_;
  config_ = NULL;
  return temp;
}
inline void gp_auto_combat_config_c2s::set_allocated_config(::PB::auto_combat_config* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// -------------------------------------------------------------------

// gp_upgrade_bingfa

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_UPGRADE_BINGFA];
inline bool gp_upgrade_bingfa::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_upgrade_bingfa::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_upgrade_bingfa::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_upgrade_bingfa::clear_type() {
  type_ = 149;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_upgrade_bingfa::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_upgrade_bingfa::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 location = 2;
inline bool gp_upgrade_bingfa::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_upgrade_bingfa::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_upgrade_bingfa::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_upgrade_bingfa::clear_location() {
  location_ = 0;
  clear_has_location();
}
inline ::google::protobuf::int32 gp_upgrade_bingfa::location() const {
  return location_;
}
inline void gp_upgrade_bingfa::set_location(::google::protobuf::int32 value) {
  set_has_location();
  location_ = value;
}

// required uint32 bingfa_id = 3;
inline bool gp_upgrade_bingfa::has_bingfa_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_upgrade_bingfa::set_has_bingfa_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_upgrade_bingfa::clear_has_bingfa_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_upgrade_bingfa::clear_bingfa_id() {
  bingfa_id_ = 0u;
  clear_has_bingfa_id();
}
inline ::google::protobuf::uint32 gp_upgrade_bingfa::bingfa_id() const {
  return bingfa_id_;
}
inline void gp_upgrade_bingfa::set_bingfa_id(::google::protobuf::uint32 value) {
  set_has_bingfa_id();
  bingfa_id_ = value;
}

// required uint32 from_level = 4;
inline bool gp_upgrade_bingfa::has_from_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_upgrade_bingfa::set_has_from_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_upgrade_bingfa::clear_has_from_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_upgrade_bingfa::clear_from_level() {
  from_level_ = 0u;
  clear_has_from_level();
}
inline ::google::protobuf::uint32 gp_upgrade_bingfa::from_level() const {
  return from_level_;
}
inline void gp_upgrade_bingfa::set_from_level(::google::protobuf::uint32 value) {
  set_has_from_level();
  from_level_ = value;
}

// required uint32 to_level = 5;
inline bool gp_upgrade_bingfa::has_to_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_upgrade_bingfa::set_has_to_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_upgrade_bingfa::clear_has_to_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_upgrade_bingfa::clear_to_level() {
  to_level_ = 0u;
  clear_has_to_level();
}
inline ::google::protobuf::uint32 gp_upgrade_bingfa::to_level() const {
  return to_level_;
}
inline void gp_upgrade_bingfa::set_to_level(::google::protobuf::uint32 value) {
  set_has_to_level();
  to_level_ = value;
}

// required bool use_money = 6;
inline bool gp_upgrade_bingfa::has_use_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_upgrade_bingfa::set_has_use_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_upgrade_bingfa::clear_has_use_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_upgrade_bingfa::clear_use_money() {
  use_money_ = false;
  clear_has_use_money();
}
inline bool gp_upgrade_bingfa::use_money() const {
  return use_money_;
}
inline void gp_upgrade_bingfa::set_use_money(bool value) {
  set_has_use_money();
  use_money_ = value;
}

// -------------------------------------------------------------------

// gp_start_attack_loop

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_START_ATTACK_LOOP];
inline bool gp_start_attack_loop::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_start_attack_loop::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_start_attack_loop::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_start_attack_loop::clear_type() {
  type_ = 150;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_start_attack_loop::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_start_attack_loop::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required bool active = 2;
inline bool gp_start_attack_loop::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_start_attack_loop::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_start_attack_loop::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_start_attack_loop::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool gp_start_attack_loop::active() const {
  return active_;
}
inline void gp_start_attack_loop::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// optional uint32 object_new_id = 3;
inline bool gp_start_attack_loop::has_object_new_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_start_attack_loop::set_has_object_new_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_start_attack_loop::clear_has_object_new_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_start_attack_loop::clear_object_new_id() {
  object_new_id_ = 0u;
  clear_has_object_new_id();
}
inline ::google::protobuf::uint32 gp_start_attack_loop::object_new_id() const {
  return object_new_id_;
}
inline void gp_start_attack_loop::set_object_new_id(::google::protobuf::uint32 value) {
  set_has_object_new_id();
  object_new_id_ = value;
}

// optional uint32 skill = 4;
inline bool gp_start_attack_loop::has_skill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_start_attack_loop::set_has_skill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_start_attack_loop::clear_has_skill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_start_attack_loop::clear_skill() {
  skill_ = 0u;
  clear_has_skill();
}
inline ::google::protobuf::uint32 gp_start_attack_loop::skill() const {
  return skill_;
}
inline void gp_start_attack_loop::set_skill(::google::protobuf::uint32 value) {
  set_has_skill();
  skill_ = value;
}

// -------------------------------------------------------------------

// gp_cg_player_op

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CG_PLAYER_OP];
inline bool gp_cg_player_op::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_cg_player_op::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_cg_player_op::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_cg_player_op::clear_type() {
  type_ = 151;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_cg_player_op::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_cg_player_op::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required bool skip = 2;
inline bool gp_cg_player_op::has_skip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_cg_player_op::set_has_skip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_cg_player_op::clear_has_skip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_cg_player_op::clear_skip() {
  skip_ = false;
  clear_has_skip();
}
inline bool gp_cg_player_op::skip() const {
  return skip_;
}
inline void gp_cg_player_op::set_skip(bool value) {
  set_has_skip();
  skip_ = value;
}

// -------------------------------------------------------------------

// gp_wine_sitdown

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_WINE_SITDOWN];
inline bool gp_wine_sitdown::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_wine_sitdown::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_wine_sitdown::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_wine_sitdown::clear_type() {
  type_ = 152;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_wine_sitdown::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_wine_sitdown::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// gp_cancel_action

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CANCEL_ACTION];
inline bool gp_cancel_action::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_cancel_action::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_cancel_action::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_cancel_action::clear_type() {
  type_ = 153;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_cancel_action::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_cancel_action::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 skill_sn = 2;
inline bool gp_cancel_action::has_skill_sn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_cancel_action::set_has_skill_sn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_cancel_action::clear_has_skill_sn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_cancel_action::clear_skill_sn() {
  skill_sn_ = 0;
  clear_has_skill_sn();
}
inline ::google::protobuf::int32 gp_cancel_action::skill_sn() const {
  return skill_sn_;
}
inline void gp_cancel_action::set_skill_sn(::google::protobuf::int32 value) {
  set_has_skill_sn();
  skill_sn_ = value;
}

// optional int32 skill_id = 3;
inline bool gp_cancel_action::has_skill_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_cancel_action::set_has_skill_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_cancel_action::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_cancel_action::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 gp_cancel_action::skill_id() const {
  return skill_id_;
}
inline void gp_cancel_action::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional int32 perform_id = 4;
inline bool gp_cancel_action::has_perform_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_cancel_action::set_has_perform_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_cancel_action::clear_has_perform_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_cancel_action::clear_perform_id() {
  perform_id_ = 0;
  clear_has_perform_id();
}
inline ::google::protobuf::int32 gp_cancel_action::perform_id() const {
  return perform_id_;
}
inline void gp_cancel_action::set_perform_id(::google::protobuf::int32 value) {
  set_has_perform_id();
  perform_id_ = value;
}

// -------------------------------------------------------------------

// gp_stunt_config

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_STUNT_CONFIG];
inline bool gp_stunt_config::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_stunt_config::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_stunt_config::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_stunt_config::clear_type() {
  type_ = 157;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_stunt_config::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_stunt_config::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.STUNT_CONFIG_TYPE op = 2;
inline bool gp_stunt_config::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_stunt_config::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_stunt_config::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_stunt_config::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::PB::STUNT_CONFIG_TYPE gp_stunt_config::op() const {
  return static_cast< ::PB::STUNT_CONFIG_TYPE >(op_);
}
inline void gp_stunt_config::set_op(::PB::STUNT_CONFIG_TYPE value) {
  assert(::PB::STUNT_CONFIG_TYPE_IsValid(value));
  set_has_op();
  op_ = value;
}

// optional int32 rune_set_index = 3;
inline bool gp_stunt_config::has_rune_set_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_stunt_config::set_has_rune_set_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_stunt_config::clear_has_rune_set_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_stunt_config::clear_rune_set_index() {
  rune_set_index_ = 0;
  clear_has_rune_set_index();
}
inline ::google::protobuf::int32 gp_stunt_config::rune_set_index() const {
  return rune_set_index_;
}
inline void gp_stunt_config::set_rune_set_index(::google::protobuf::int32 value) {
  set_has_rune_set_index();
  rune_set_index_ = value;
}

// optional int32 master_skill_id = 4;
inline bool gp_stunt_config::has_master_skill_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_stunt_config::set_has_master_skill_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_stunt_config::clear_has_master_skill_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_stunt_config::clear_master_skill_id() {
  master_skill_id_ = 0;
  clear_has_master_skill_id();
}
inline ::google::protobuf::int32 gp_stunt_config::master_skill_id() const {
  return master_skill_id_;
}
inline void gp_stunt_config::set_master_skill_id(::google::protobuf::int32 value) {
  set_has_master_skill_id();
  master_skill_id_ = value;
}

// optional int32 rune_index = 5;
inline bool gp_stunt_config::has_rune_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_stunt_config::set_has_rune_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_stunt_config::clear_has_rune_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_stunt_config::clear_rune_index() {
  rune_index_ = 0;
  clear_has_rune_index();
}
inline ::google::protobuf::int32 gp_stunt_config::rune_index() const {
  return rune_index_;
}
inline void gp_stunt_config::set_rune_index(::google::protobuf::int32 value) {
  set_has_rune_index();
  rune_index_ = value;
}

// -------------------------------------------------------------------

// gp_black_shop_command

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_BLACK_SHOP_COMMAND];
inline bool gp_black_shop_command::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_black_shop_command::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_black_shop_command::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_black_shop_command::clear_type() {
  type_ = 158;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_black_shop_command::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_black_shop_command::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_black_shop_command.BS_CMD_TYPE cmd_type = 2;
inline bool gp_black_shop_command::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_black_shop_command::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_black_shop_command::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_black_shop_command::clear_cmd_type() {
  cmd_type_ = 1;
  clear_has_cmd_type();
}
inline ::PB::gp_black_shop_command_BS_CMD_TYPE gp_black_shop_command::cmd_type() const {
  return static_cast< ::PB::gp_black_shop_command_BS_CMD_TYPE >(cmd_type_);
}
inline void gp_black_shop_command::set_cmd_type(::PB::gp_black_shop_command_BS_CMD_TYPE value) {
  assert(::PB::gp_black_shop_command_BS_CMD_TYPE_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
}

// optional int32 shop_id = 3;
inline bool gp_black_shop_command::has_shop_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_black_shop_command::set_has_shop_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_black_shop_command::clear_has_shop_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_black_shop_command::clear_shop_id() {
  shop_id_ = 0;
  clear_has_shop_id();
}
inline ::google::protobuf::int32 gp_black_shop_command::shop_id() const {
  return shop_id_;
}
inline void gp_black_shop_command::set_shop_id(::google::protobuf::int32 value) {
  set_has_shop_id();
  shop_id_ = value;
}

// optional int32 store_id = 4;
inline bool gp_black_shop_command::has_store_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_black_shop_command::set_has_store_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_black_shop_command::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_black_shop_command::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 gp_black_shop_command::store_id() const {
  return store_id_;
}
inline void gp_black_shop_command::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
}

// optional int32 goods_id = 5;
inline bool gp_black_shop_command::has_goods_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_black_shop_command::set_has_goods_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_black_shop_command::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_black_shop_command::clear_goods_id() {
  goods_id_ = 0;
  clear_has_goods_id();
}
inline ::google::protobuf::int32 gp_black_shop_command::goods_id() const {
  return goods_id_;
}
inline void gp_black_shop_command::set_goods_id(::google::protobuf::int32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// optional int32 goods_index = 6;
inline bool gp_black_shop_command::has_goods_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_black_shop_command::set_has_goods_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_black_shop_command::clear_has_goods_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_black_shop_command::clear_goods_index() {
  goods_index_ = 0;
  clear_has_goods_index();
}
inline ::google::protobuf::int32 gp_black_shop_command::goods_index() const {
  return goods_index_;
}
inline void gp_black_shop_command::set_goods_index(::google::protobuf::int32 value) {
  set_has_goods_index();
  goods_index_ = value;
}

// -------------------------------------------------------------------

// gp_climbtower_shop_command

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CLIMBTOWER_SHOP_COMMAND];
inline bool gp_climbtower_shop_command::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_climbtower_shop_command::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_climbtower_shop_command::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_climbtower_shop_command::clear_type() {
  type_ = 175;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_climbtower_shop_command::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_climbtower_shop_command::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_climbtower_shop_command.BS_CMD_TYPE cmd_type = 2;
inline bool gp_climbtower_shop_command::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_climbtower_shop_command::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_climbtower_shop_command::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_climbtower_shop_command::clear_cmd_type() {
  cmd_type_ = 1;
  clear_has_cmd_type();
}
inline ::PB::gp_climbtower_shop_command_BS_CMD_TYPE gp_climbtower_shop_command::cmd_type() const {
  return static_cast< ::PB::gp_climbtower_shop_command_BS_CMD_TYPE >(cmd_type_);
}
inline void gp_climbtower_shop_command::set_cmd_type(::PB::gp_climbtower_shop_command_BS_CMD_TYPE value) {
  assert(::PB::gp_climbtower_shop_command_BS_CMD_TYPE_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
}

// optional int32 shop_id = 3;
inline bool gp_climbtower_shop_command::has_shop_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_climbtower_shop_command::set_has_shop_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_climbtower_shop_command::clear_has_shop_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_climbtower_shop_command::clear_shop_id() {
  shop_id_ = 0;
  clear_has_shop_id();
}
inline ::google::protobuf::int32 gp_climbtower_shop_command::shop_id() const {
  return shop_id_;
}
inline void gp_climbtower_shop_command::set_shop_id(::google::protobuf::int32 value) {
  set_has_shop_id();
  shop_id_ = value;
}

// optional int32 store_id = 4;
inline bool gp_climbtower_shop_command::has_store_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_climbtower_shop_command::set_has_store_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_climbtower_shop_command::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_climbtower_shop_command::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 gp_climbtower_shop_command::store_id() const {
  return store_id_;
}
inline void gp_climbtower_shop_command::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
}

// optional int32 goods_id = 5;
inline bool gp_climbtower_shop_command::has_goods_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_climbtower_shop_command::set_has_goods_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_climbtower_shop_command::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_climbtower_shop_command::clear_goods_id() {
  goods_id_ = 0;
  clear_has_goods_id();
}
inline ::google::protobuf::int32 gp_climbtower_shop_command::goods_id() const {
  return goods_id_;
}
inline void gp_climbtower_shop_command::set_goods_id(::google::protobuf::int32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// optional int32 goods_index = 6;
inline bool gp_climbtower_shop_command::has_goods_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_climbtower_shop_command::set_has_goods_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_climbtower_shop_command::clear_has_goods_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_climbtower_shop_command::clear_goods_index() {
  goods_index_ = 0;
  clear_has_goods_index();
}
inline ::google::protobuf::int32 gp_climbtower_shop_command::goods_index() const {
  return goods_index_;
}
inline void gp_climbtower_shop_command::set_goods_index(::google::protobuf::int32 value) {
  set_has_goods_index();
  goods_index_ = value;
}

// optional int32 level = 7;
inline bool gp_climbtower_shop_command::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_climbtower_shop_command::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_climbtower_shop_command::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_climbtower_shop_command::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 gp_climbtower_shop_command::level() const {
  return level_;
}
inline void gp_climbtower_shop_command::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// gp_duke_command

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_DUKE_COMMAND];
inline bool gp_duke_command::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_duke_command::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_duke_command::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_duke_command::clear_type() {
  type_ = 159;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_duke_command::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_duke_command::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_duke_command.DUKE_CMD_TYPE cmd_type = 2;
inline bool gp_duke_command::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_duke_command::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_duke_command::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_duke_command::clear_cmd_type() {
  cmd_type_ = 1;
  clear_has_cmd_type();
}
inline ::PB::gp_duke_command_DUKE_CMD_TYPE gp_duke_command::cmd_type() const {
  return static_cast< ::PB::gp_duke_command_DUKE_CMD_TYPE >(cmd_type_);
}
inline void gp_duke_command::set_cmd_type(::PB::gp_duke_command_DUKE_CMD_TYPE value) {
  assert(::PB::gp_duke_command_DUKE_CMD_TYPE_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
}

// optional int32 param1 = 3;
inline bool gp_duke_command::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_duke_command::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_duke_command::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_duke_command::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 gp_duke_command::param1() const {
  return param1_;
}
inline void gp_duke_command::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// -------------------------------------------------------------------

// gp_hero_trial_command

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_HERO_TRIAL];
inline bool gp_hero_trial_command::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_hero_trial_command::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_hero_trial_command::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_hero_trial_command::clear_type() {
  type_ = 160;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_hero_trial_command::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_hero_trial_command::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_hero_trial_command.CMD_TYPE cmd = 2;
inline bool gp_hero_trial_command::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_hero_trial_command::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_hero_trial_command::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_hero_trial_command::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::PB::gp_hero_trial_command_CMD_TYPE gp_hero_trial_command::cmd() const {
  return static_cast< ::PB::gp_hero_trial_command_CMD_TYPE >(cmd_);
}
inline void gp_hero_trial_command::set_cmd(::PB::gp_hero_trial_command_CMD_TYPE value) {
  assert(::PB::gp_hero_trial_command_CMD_TYPE_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// -------------------------------------------------------------------

// gp_corp_config

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CORP_CONFIG];
inline bool gp_corp_config::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_corp_config::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_corp_config::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_corp_config::clear_type() {
  type_ = 161;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_corp_config::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_corp_config::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.player_corps_attr_config config = 2;
inline bool gp_corp_config::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_corp_config::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_corp_config::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_corp_config::clear_config() {
  if (config_ != NULL) config_->::PB::player_corps_attr_config::Clear();
  clear_has_config();
}
inline const ::PB::player_corps_attr_config& gp_corp_config::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::PB::player_corps_attr_config* gp_corp_config::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::PB::player_corps_attr_config;
  return config_;
}
inline ::PB::player_corps_attr_config* gp_corp_config::release_config() {
  clear_has_config();
  ::PB::player_corps_attr_config* temp = config_;
  config_ = NULL;
  return temp;
}
inline void gp_corp_config::set_allocated_config(::PB::player_corps_attr_config* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// -------------------------------------------------------------------

// gp_enter_instance

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_ENTER_INSTANCE];
inline bool gp_enter_instance::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_enter_instance::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_enter_instance::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_enter_instance::clear_type() {
  type_ = 162;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_enter_instance::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_enter_instance::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 object_id = 2;
inline bool gp_enter_instance::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_enter_instance::set_has_object_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_enter_instance::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_enter_instance::clear_object_id() {
  object_id_ = GOOGLE_LONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::int64 gp_enter_instance::object_id() const {
  return object_id_;
}
inline void gp_enter_instance::set_object_id(::google::protobuf::int64 value) {
  set_has_object_id();
  object_id_ = value;
}

// optional int32 inst_tid = 3;
inline bool gp_enter_instance::has_inst_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_enter_instance::set_has_inst_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_enter_instance::clear_has_inst_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_enter_instance::clear_inst_tid() {
  inst_tid_ = 0;
  clear_has_inst_tid();
}
inline ::google::protobuf::int32 gp_enter_instance::inst_tid() const {
  return inst_tid_;
}
inline void gp_enter_instance::set_inst_tid(::google::protobuf::int32 value) {
  set_has_inst_tid();
  inst_tid_ = value;
}

// optional int32 inst_id = 4;
inline bool gp_enter_instance::has_inst_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_enter_instance::set_has_inst_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_enter_instance::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_enter_instance::clear_inst_id() {
  inst_id_ = 0;
  clear_has_inst_id();
}
inline ::google::protobuf::int32 gp_enter_instance::inst_id() const {
  return inst_id_;
}
inline void gp_enter_instance::set_inst_id(::google::protobuf::int32 value) {
  set_has_inst_id();
  inst_id_ = value;
}

// optional int32 mode = 5;
inline bool gp_enter_instance::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_enter_instance::set_has_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_enter_instance::clear_has_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_enter_instance::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 gp_enter_instance::mode() const {
  return mode_;
}
inline void gp_enter_instance::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// optional .PB.enter_instance_config config = 6;
inline bool gp_enter_instance::has_config() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_enter_instance::set_has_config() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_enter_instance::clear_has_config() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_enter_instance::clear_config() {
  if (config_ != NULL) config_->::PB::enter_instance_config::Clear();
  clear_has_config();
}
inline const ::PB::enter_instance_config& gp_enter_instance::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::PB::enter_instance_config* gp_enter_instance::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::PB::enter_instance_config;
  return config_;
}
inline ::PB::enter_instance_config* gp_enter_instance::release_config() {
  clear_has_config();
  ::PB::enter_instance_config* temp = config_;
  config_ = NULL;
  return temp;
}
inline void gp_enter_instance::set_allocated_config(::PB::enter_instance_config* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// -------------------------------------------------------------------

// gp_buy_instance

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_BUY_INSTANCE];
inline bool gp_buy_instance::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_buy_instance::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_buy_instance::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_buy_instance::clear_type() {
  type_ = 163;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_buy_instance::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_buy_instance::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 inst_tid = 2;
inline bool gp_buy_instance::has_inst_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_buy_instance::set_has_inst_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_buy_instance::clear_has_inst_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_buy_instance::clear_inst_tid() {
  inst_tid_ = 0;
  clear_has_inst_tid();
}
inline ::google::protobuf::int32 gp_buy_instance::inst_tid() const {
  return inst_tid_;
}
inline void gp_buy_instance::set_inst_tid(::google::protobuf::int32 value) {
  set_has_inst_tid();
  inst_tid_ = value;
}

// -------------------------------------------------------------------

// gp_buy_backpack

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_BUY_BACKPACK];
inline bool gp_buy_backpack::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_buy_backpack::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_buy_backpack::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_buy_backpack::clear_type() {
  type_ = 164;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_buy_backpack::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_buy_backpack::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 inc_size = 2;
inline bool gp_buy_backpack::has_inc_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_buy_backpack::set_has_inc_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_buy_backpack::clear_has_inc_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_buy_backpack::clear_inc_size() {
  inc_size_ = 0;
  clear_has_inc_size();
}
inline ::google::protobuf::int32 gp_buy_backpack::inc_size() const {
  return inc_size_;
}
inline void gp_buy_backpack::set_inc_size(::google::protobuf::int32 value) {
  set_has_inc_size();
  inc_size_ = value;
}

// -------------------------------------------------------------------

// gp_jieyun_skill

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_JIEYUN_SKILL];
inline bool gp_jieyun_skill::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_jieyun_skill::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_jieyun_skill::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_jieyun_skill::clear_type() {
  type_ = 166;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_jieyun_skill::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_jieyun_skill::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 skill_id = 2;
inline bool gp_jieyun_skill::has_skill_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_jieyun_skill::set_has_skill_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_jieyun_skill::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_jieyun_skill::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 gp_jieyun_skill::skill_id() const {
  return skill_id_;
}
inline void gp_jieyun_skill::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional .PB.a3d_pos pos = 3;
inline bool gp_jieyun_skill::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_jieyun_skill::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_jieyun_skill::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_jieyun_skill::clear_pos() {
  if (pos_ != NULL) pos_->::PB::a3d_pos::Clear();
  clear_has_pos();
}
inline const ::PB::a3d_pos& gp_jieyun_skill::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::PB::a3d_pos* gp_jieyun_skill::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PB::a3d_pos;
  return pos_;
}
inline ::PB::a3d_pos* gp_jieyun_skill::release_pos() {
  clear_has_pos();
  ::PB::a3d_pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void gp_jieyun_skill::set_allocated_pos(::PB::a3d_pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// -------------------------------------------------------------------

// gp_corp_farm_op

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CORP_FARM_OP];
inline bool gp_corp_farm_op::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_corp_farm_op::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_corp_farm_op::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_corp_farm_op::clear_type() {
  type_ = 169;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_corp_farm_op::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_corp_farm_op::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.gp_corp_farm_op.FARM_OP op = 2;
inline bool gp_corp_farm_op::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_corp_farm_op::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_corp_farm_op::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_corp_farm_op::clear_op() {
  op_ = 1;
  clear_has_op();
}
inline ::PB::gp_corp_farm_op_FARM_OP gp_corp_farm_op::op() const {
  return static_cast< ::PB::gp_corp_farm_op_FARM_OP >(op_);
}
inline void gp_corp_farm_op::set_op(::PB::gp_corp_farm_op_FARM_OP value) {
  assert(::PB::gp_corp_farm_op_FARM_OP_IsValid(value));
  set_has_op();
  op_ = value;
}

// optional int32 farmland_index = 3;
inline bool gp_corp_farm_op::has_farmland_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_corp_farm_op::set_has_farmland_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_corp_farm_op::clear_has_farmland_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_corp_farm_op::clear_farmland_index() {
  farmland_index_ = 0;
  clear_has_farmland_index();
}
inline ::google::protobuf::int32 gp_corp_farm_op::farmland_index() const {
  return farmland_index_;
}
inline void gp_corp_farm_op::set_farmland_index(::google::protobuf::int32 value) {
  set_has_farmland_index();
  farmland_index_ = value;
}

// optional int32 crop_tid = 4;
inline bool gp_corp_farm_op::has_crop_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_corp_farm_op::set_has_crop_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_corp_farm_op::clear_has_crop_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_corp_farm_op::clear_crop_tid() {
  crop_tid_ = 0;
  clear_has_crop_tid();
}
inline ::google::protobuf::int32 gp_corp_farm_op::crop_tid() const {
  return crop_tid_;
}
inline void gp_corp_farm_op::set_crop_tid(::google::protobuf::int32 value) {
  set_has_crop_tid();
  crop_tid_ = value;
}

// -------------------------------------------------------------------

// gp_climb_tower_op

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CLIMB_TOWER_OP];
inline bool gp_climb_tower_op::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_climb_tower_op::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_climb_tower_op::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_climb_tower_op::clear_type() {
  type_ = 170;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_climb_tower_op::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_climb_tower_op::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_climb_tower_op.CLIMB_OP operate_type = 2;
inline bool gp_climb_tower_op::has_operate_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_climb_tower_op::set_has_operate_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_climb_tower_op::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_climb_tower_op::clear_operate_type() {
  operate_type_ = 1;
  clear_has_operate_type();
}
inline ::PB::gp_climb_tower_op_CLIMB_OP gp_climb_tower_op::operate_type() const {
  return static_cast< ::PB::gp_climb_tower_op_CLIMB_OP >(operate_type_);
}
inline void gp_climb_tower_op::set_operate_type(::PB::gp_climb_tower_op_CLIMB_OP value) {
  assert(::PB::gp_climb_tower_op_CLIMB_OP_IsValid(value));
  set_has_operate_type();
  operate_type_ = value;
}

// required int32 param1 = 3;
inline bool gp_climb_tower_op::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_climb_tower_op::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_climb_tower_op::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_climb_tower_op::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 gp_climb_tower_op::param1() const {
  return param1_;
}
inline void gp_climb_tower_op::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// -------------------------------------------------------------------

// gp_gs_ping

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GS_PING];
inline bool gp_gs_ping::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_gs_ping::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_gs_ping::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_gs_ping::clear_type() {
  type_ = 171;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_gs_ping::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_gs_ping::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 client_send_time = 2;
inline bool gp_gs_ping::has_client_send_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_gs_ping::set_has_client_send_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_gs_ping::clear_has_client_send_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_gs_ping::clear_client_send_time() {
  client_send_time_ = 0;
  clear_has_client_send_time();
}
inline ::google::protobuf::int32 gp_gs_ping::client_send_time() const {
  return client_send_time_;
}
inline void gp_gs_ping::set_client_send_time(::google::protobuf::int32 value) {
  set_has_client_send_time();
  client_send_time_ = value;
}

// optional int32 client_last_ttl = 3;
inline bool gp_gs_ping::has_client_last_ttl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_gs_ping::set_has_client_last_ttl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_gs_ping::clear_has_client_last_ttl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_gs_ping::clear_client_last_ttl() {
  client_last_ttl_ = 0;
  clear_has_client_last_ttl();
}
inline ::google::protobuf::int32 gp_gs_ping::client_last_ttl() const {
  return client_last_ttl_;
}
inline void gp_gs_ping::set_client_last_ttl(::google::protobuf::int32 value) {
  set_has_client_last_ttl();
  client_last_ttl_ = value;
}

// -------------------------------------------------------------------

// gp_get_list_info

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GET_LIST_INFO];
inline bool gp_get_list_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_get_list_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_get_list_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_get_list_info::clear_type() {
  type_ = 173;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_get_list_info::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_get_list_info::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated int32 player_list = 2;
inline int gp_get_list_info::player_list_size() const {
  return player_list_.size();
}
inline void gp_get_list_info::clear_player_list() {
  player_list_.Clear();
}
inline ::google::protobuf::int32 gp_get_list_info::player_list(int index) const {
  return player_list_.Get(index);
}
inline void gp_get_list_info::set_player_list(int index, ::google::protobuf::int32 value) {
  player_list_.Set(index, value);
}
inline void gp_get_list_info::add_player_list(::google::protobuf::int32 value) {
  player_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gp_get_list_info::player_list() const {
  return player_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gp_get_list_info::mutable_player_list() {
  return &player_list_;
}

// -------------------------------------------------------------------

// gp_camp_fire

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CAMP_FIRE];
inline bool gp_camp_fire::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_camp_fire::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_camp_fire::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_camp_fire::clear_type() {
  type_ = 174;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_camp_fire::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_camp_fire::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 fire_type = 2;
inline bool gp_camp_fire::has_fire_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_camp_fire::set_has_fire_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_camp_fire::clear_has_fire_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_camp_fire::clear_fire_type() {
  fire_type_ = 0;
  clear_has_fire_type();
}
inline ::google::protobuf::int32 gp_camp_fire::fire_type() const {
  return fire_type_;
}
inline void gp_camp_fire::set_fire_type(::google::protobuf::int32 value) {
  set_has_fire_type();
  fire_type_ = value;
}

// -------------------------------------------------------------------

// gp_ask_help

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_ASK_HELP];
inline bool gp_ask_help::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_ask_help::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_ask_help::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_ask_help::clear_type() {
  type_ = 176;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_ask_help::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_ask_help::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.ask_help_info_type info_type = 2;
inline bool gp_ask_help::has_info_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_ask_help::set_has_info_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_ask_help::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_ask_help::clear_info_type() {
  info_type_ = 0;
  clear_has_info_type();
}
inline ::PB::ask_help_info_type gp_ask_help::info_type() const {
  return static_cast< ::PB::ask_help_info_type >(info_type_);
}
inline void gp_ask_help::set_info_type(::PB::ask_help_info_type value) {
  assert(::PB::ask_help_info_type_IsValid(value));
  set_has_info_type();
  info_type_ = value;
}

// -------------------------------------------------------------------

// gp_find_way

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_FIND_WAY];
inline bool gp_find_way::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_find_way::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_find_way::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_find_way::clear_type() {
  type_ = 178;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_find_way::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_find_way::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 reason = 2;
inline bool gp_find_way::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_find_way::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_find_way::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_find_way::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 gp_find_way::reason() const {
  return reason_;
}
inline void gp_find_way::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// optional .PB.a3d_pos dst_pos = 3;
inline bool gp_find_way::has_dst_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_find_way::set_has_dst_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_find_way::clear_has_dst_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_find_way::clear_dst_pos() {
  if (dst_pos_ != NULL) dst_pos_->::PB::a3d_pos::Clear();
  clear_has_dst_pos();
}
inline const ::PB::a3d_pos& gp_find_way::dst_pos() const {
  return dst_pos_ != NULL ? *dst_pos_ : *default_instance_->dst_pos_;
}
inline ::PB::a3d_pos* gp_find_way::mutable_dst_pos() {
  set_has_dst_pos();
  if (dst_pos_ == NULL) dst_pos_ = new ::PB::a3d_pos;
  return dst_pos_;
}
inline ::PB::a3d_pos* gp_find_way::release_dst_pos() {
  clear_has_dst_pos();
  ::PB::a3d_pos* temp = dst_pos_;
  dst_pos_ = NULL;
  return temp;
}
inline void gp_find_way::set_allocated_dst_pos(::PB::a3d_pos* dst_pos) {
  delete dst_pos_;
  dst_pos_ = dst_pos;
  if (dst_pos) {
    set_has_dst_pos();
  } else {
    clear_has_dst_pos();
  }
}

// -------------------------------------------------------------------

// gp_change_mirror

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CHANGE_MIRROR];
inline bool gp_change_mirror::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_change_mirror::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_change_mirror::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_change_mirror::clear_type() {
  type_ = 179;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_change_mirror::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_change_mirror::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 mid = 2;
inline bool gp_change_mirror::has_mid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_change_mirror::set_has_mid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_change_mirror::clear_has_mid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_change_mirror::clear_mid() {
  mid_ = 0;
  clear_has_mid();
}
inline ::google::protobuf::int32 gp_change_mirror::mid() const {
  return mid_;
}
inline void gp_change_mirror::set_mid(::google::protobuf::int32 value) {
  set_has_mid();
  mid_ = value;
}

// -------------------------------------------------------------------

// gp_buy_force

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_BUY_FORCE];
inline bool gp_buy_force::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_buy_force::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_buy_force::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_buy_force::clear_type() {
  type_ = 180;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_buy_force::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_buy_force::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 force_num = 2;
inline bool gp_buy_force::has_force_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_buy_force::set_has_force_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_buy_force::clear_has_force_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_buy_force::clear_force_num() {
  force_num_ = 0;
  clear_has_force_num();
}
inline ::google::protobuf::int32 gp_buy_force::force_num() const {
  return force_num_;
}
inline void gp_buy_force::set_force_num(::google::protobuf::int32 value) {
  set_has_force_num();
  force_num_ = value;
}

// -------------------------------------------------------------------

// gp_plant

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_PLANT];
inline bool gp_plant::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_plant::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_plant::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_plant::clear_type() {
  type_ = 181;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_plant::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_plant::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.gp_plant.PLANT_OP op = 2;
inline bool gp_plant::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_plant::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_plant::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_plant::clear_op() {
  op_ = 1;
  clear_has_op();
}
inline ::PB::gp_plant_PLANT_OP gp_plant::op() const {
  return static_cast< ::PB::gp_plant_PLANT_OP >(op_);
}
inline void gp_plant::set_op(::PB::gp_plant_PLANT_OP value) {
  assert(::PB::gp_plant_PLANT_OP_IsValid(value));
  set_has_op();
  op_ = value;
}

// optional int32 seed_tid = 3;
inline bool gp_plant::has_seed_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_plant::set_has_seed_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_plant::clear_has_seed_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_plant::clear_seed_tid() {
  seed_tid_ = 0;
  clear_has_seed_tid();
}
inline ::google::protobuf::int32 gp_plant::seed_tid() const {
  return seed_tid_;
}
inline void gp_plant::set_seed_tid(::google::protobuf::int32 value) {
  set_has_seed_tid();
  seed_tid_ = value;
}

// optional int32 sow_time = 4;
inline bool gp_plant::has_sow_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_plant::set_has_sow_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_plant::clear_has_sow_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_plant::clear_sow_time() {
  sow_time_ = 0;
  clear_has_sow_time();
}
inline ::google::protobuf::int32 gp_plant::sow_time() const {
  return sow_time_;
}
inline void gp_plant::set_sow_time(::google::protobuf::int32 value) {
  set_has_sow_time();
  sow_time_ = value;
}

// -------------------------------------------------------------------

// gp_equip_chaijie

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_CHAIJIE];
inline bool gp_equip_chaijie::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_chaijie::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_chaijie::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_chaijie::clear_type() {
  type_ = 182;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_chaijie::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_chaijie::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 location = 2;
inline bool gp_equip_chaijie::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_chaijie::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_chaijie::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_chaijie::clear_location() {
  location_ = 0;
  clear_has_location();
}
inline ::google::protobuf::int32 gp_equip_chaijie::location() const {
  return location_;
}
inline void gp_equip_chaijie::set_location(::google::protobuf::int32 value) {
  set_has_location();
  location_ = value;
}

// required int32 index = 3;
inline bool gp_equip_chaijie::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_chaijie::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_chaijie::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_chaijie::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 gp_equip_chaijie::index() const {
  return index_;
}
inline void gp_equip_chaijie::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required uint32 tid = 4;
inline bool gp_equip_chaijie::has_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_chaijie::set_has_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_chaijie::clear_has_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_chaijie::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 gp_equip_chaijie::tid() const {
  return tid_;
}
inline void gp_equip_chaijie::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
}

// -------------------------------------------------------------------

// gp_client_print_info

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CLIENT_PRINT_INFO];
inline bool gp_client_print_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_client_print_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_client_print_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_client_print_info::clear_type() {
  type_ = 183;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_client_print_info::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_client_print_info::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes infos = 2;
inline bool gp_client_print_info::has_infos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_client_print_info::set_has_infos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_client_print_info::clear_has_infos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_client_print_info::clear_infos() {
  if (infos_ != &::google::protobuf::internal::kEmptyString) {
    infos_->clear();
  }
  clear_has_infos();
}
inline const ::std::string& gp_client_print_info::infos() const {
  return *infos_;
}
inline void gp_client_print_info::set_infos(const ::std::string& value) {
  set_has_infos();
  if (infos_ == &::google::protobuf::internal::kEmptyString) {
    infos_ = new ::std::string;
  }
  infos_->assign(value);
}
inline void gp_client_print_info::set_infos(const char* value) {
  set_has_infos();
  if (infos_ == &::google::protobuf::internal::kEmptyString) {
    infos_ = new ::std::string;
  }
  infos_->assign(value);
}
inline void gp_client_print_info::set_infos(const void* value, size_t size) {
  set_has_infos();
  if (infos_ == &::google::protobuf::internal::kEmptyString) {
    infos_ = new ::std::string;
  }
  infos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_client_print_info::mutable_infos() {
  set_has_infos();
  if (infos_ == &::google::protobuf::internal::kEmptyString) {
    infos_ = new ::std::string;
  }
  return infos_;
}
inline ::std::string* gp_client_print_info::release_infos() {
  clear_has_infos();
  if (infos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = infos_;
    infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gp_client_print_info::set_allocated_infos(::std::string* infos) {
  if (infos_ != &::google::protobuf::internal::kEmptyString) {
    delete infos_;
  }
  if (infos) {
    set_has_infos();
    infos_ = infos;
  } else {
    clear_has_infos();
    infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gp_retrieve_op

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_RETRIEVE_OP];
inline bool gp_retrieve_op::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_retrieve_op::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_retrieve_op::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_retrieve_op::clear_type() {
  type_ = 184;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_retrieve_op::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_retrieve_op::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 activity_id = 2;
inline bool gp_retrieve_op::has_activity_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_retrieve_op::set_has_activity_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_retrieve_op::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_retrieve_op::clear_activity_id() {
  activity_id_ = 0;
  clear_has_activity_id();
}
inline ::google::protobuf::int32 gp_retrieve_op::activity_id() const {
  return activity_id_;
}
inline void gp_retrieve_op::set_activity_id(::google::protobuf::int32 value) {
  set_has_activity_id();
  activity_id_ = value;
}

// optional int32 tid = 3;
inline bool gp_retrieve_op::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_retrieve_op::set_has_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_retrieve_op::clear_has_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_retrieve_op::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 gp_retrieve_op::tid() const {
  return tid_;
}
inline void gp_retrieve_op::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 retrieve_type = 4;
inline bool gp_retrieve_op::has_retrieve_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_retrieve_op::set_has_retrieve_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_retrieve_op::clear_has_retrieve_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_retrieve_op::clear_retrieve_type() {
  retrieve_type_ = 0;
  clear_has_retrieve_type();
}
inline ::google::protobuf::int32 gp_retrieve_op::retrieve_type() const {
  return retrieve_type_;
}
inline void gp_retrieve_op::set_retrieve_type(::google::protobuf::int32 value) {
  set_has_retrieve_type();
  retrieve_type_ = value;
}

// -------------------------------------------------------------------

// gp_fashion_mode

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_FASHION_MODE];
inline bool gp_fashion_mode::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_fashion_mode::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_fashion_mode::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_fashion_mode::clear_type() {
  type_ = 185;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_fashion_mode::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_fashion_mode::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 mode = 2;
inline bool gp_fashion_mode::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_fashion_mode::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_fashion_mode::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_fashion_mode::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 gp_fashion_mode::mode() const {
  return mode_;
}
inline void gp_fashion_mode::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// -------------------------------------------------------------------

// gp_sweep_instance

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_SWEEP_INSTANCE];
inline bool gp_sweep_instance::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_sweep_instance::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_sweep_instance::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_sweep_instance::clear_type() {
  type_ = 186;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_sweep_instance::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_sweep_instance::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 inst_tid = 2;
inline bool gp_sweep_instance::has_inst_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_sweep_instance::set_has_inst_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_sweep_instance::clear_has_inst_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_sweep_instance::clear_inst_tid() {
  inst_tid_ = 0;
  clear_has_inst_tid();
}
inline ::google::protobuf::int32 gp_sweep_instance::inst_tid() const {
  return inst_tid_;
}
inline void gp_sweep_instance::set_inst_tid(::google::protobuf::int32 value) {
  set_has_inst_tid();
  inst_tid_ = value;
}

// -------------------------------------------------------------------

// gp_get_red_packet

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GET_RED_PACKET];
inline bool gp_get_red_packet::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_get_red_packet::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_get_red_packet::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_get_red_packet::clear_type() {
  type_ = 187;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_get_red_packet::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_get_red_packet::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 tid = 2;
inline bool gp_get_red_packet::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_get_red_packet::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_get_red_packet::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_get_red_packet::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 gp_get_red_packet::tid() const {
  return tid_;
}
inline void gp_get_red_packet::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// -------------------------------------------------------------------

// gp_common_operation

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_COMMON_OPERATION];
inline bool gp_common_operation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_common_operation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_common_operation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_common_operation::clear_type() {
  type_ = 188;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_common_operation::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_common_operation::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_common_operation.COMMON_OP op = 2;
inline bool gp_common_operation::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_common_operation::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_common_operation::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_common_operation::clear_op() {
  op_ = 1;
  clear_has_op();
}
inline ::PB::gp_common_operation_COMMON_OP gp_common_operation::op() const {
  return static_cast< ::PB::gp_common_operation_COMMON_OP >(op_);
}
inline void gp_common_operation::set_op(::PB::gp_common_operation_COMMON_OP value) {
  assert(::PB::gp_common_operation_COMMON_OP_IsValid(value));
  set_has_op();
  op_ = value;
}

// optional int64 param = 3;
inline bool gp_common_operation::has_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_common_operation::set_has_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_common_operation::clear_has_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_common_operation::clear_param() {
  param_ = GOOGLE_LONGLONG(0);
  clear_has_param();
}
inline ::google::protobuf::int64 gp_common_operation::param() const {
  return param_;
}
inline void gp_common_operation::set_param(::google::protobuf::int64 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// gp_compensation

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_COMPENSATION];
inline bool gp_compensation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_compensation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_compensation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_compensation::clear_type() {
  type_ = 189;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_compensation::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_compensation::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 cid = 2;
inline bool gp_compensation::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_compensation::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_compensation::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_compensation::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
inline ::google::protobuf::int32 gp_compensation::cid() const {
  return cid_;
}
inline void gp_compensation::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 tid = 3;
inline bool gp_compensation::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_compensation::set_has_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_compensation::clear_has_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_compensation::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 gp_compensation::tid() const {
  return tid_;
}
inline void gp_compensation::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 level = 4;
inline bool gp_compensation::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_compensation::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_compensation::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_compensation::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 gp_compensation::level() const {
  return level_;
}
inline void gp_compensation::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 repu = 5;
inline bool gp_compensation::has_repu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_compensation::set_has_repu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_compensation::clear_has_repu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_compensation::clear_repu() {
  repu_ = 0;
  clear_has_repu();
}
inline ::google::protobuf::int32 gp_compensation::repu() const {
  return repu_;
}
inline void gp_compensation::set_repu(::google::protobuf::int32 value) {
  set_has_repu();
  repu_ = value;
}

// -------------------------------------------------------------------

// gp_upgrade_chariot

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_UPGRADE_CHARIOT];
inline bool gp_upgrade_chariot::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_upgrade_chariot::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_upgrade_chariot::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_upgrade_chariot::clear_type() {
  type_ = 190;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_upgrade_chariot::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_upgrade_chariot::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 tid = 2;
inline bool gp_upgrade_chariot::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_upgrade_chariot::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_upgrade_chariot::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_upgrade_chariot::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 gp_upgrade_chariot::tid() const {
  return tid_;
}
inline void gp_upgrade_chariot::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 index = 3;
inline bool gp_upgrade_chariot::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_upgrade_chariot::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_upgrade_chariot::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_upgrade_chariot::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 gp_upgrade_chariot::index() const {
  return index_;
}
inline void gp_upgrade_chariot::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional .PB.gp_upgrade_chariot.UPGRADE_TYPE up_type = 4;
inline bool gp_upgrade_chariot::has_up_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_upgrade_chariot::set_has_up_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_upgrade_chariot::clear_has_up_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_upgrade_chariot::clear_up_type() {
  up_type_ = 1;
  clear_has_up_type();
}
inline ::PB::gp_upgrade_chariot_UPGRADE_TYPE gp_upgrade_chariot::up_type() const {
  return static_cast< ::PB::gp_upgrade_chariot_UPGRADE_TYPE >(up_type_);
}
inline void gp_upgrade_chariot::set_up_type(::PB::gp_upgrade_chariot_UPGRADE_TYPE value) {
  assert(::PB::gp_upgrade_chariot_UPGRADE_TYPE_IsValid(value));
  set_has_up_type();
  up_type_ = value;
}

// -------------------------------------------------------------------

// gp_rent_chariot

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_RENT_CHARIOT];
inline bool gp_rent_chariot::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_rent_chariot::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_rent_chariot::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_rent_chariot::clear_type() {
  type_ = 193;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_rent_chariot::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_rent_chariot::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 tid = 2;
inline bool gp_rent_chariot::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_rent_chariot::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_rent_chariot::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_rent_chariot::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 gp_rent_chariot::tid() const {
  return tid_;
}
inline void gp_rent_chariot::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 index = 3;
inline bool gp_rent_chariot::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_rent_chariot::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_rent_chariot::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_rent_chariot::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 gp_rent_chariot::index() const {
  return index_;
}
inline void gp_rent_chariot::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// gp_transform_chariot

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_TRANSFORM_CHARIOT];
inline bool gp_transform_chariot::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_transform_chariot::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_transform_chariot::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_transform_chariot::clear_type() {
  type_ = 194;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_transform_chariot::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_transform_chariot::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 tid = 2;
inline bool gp_transform_chariot::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_transform_chariot::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_transform_chariot::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_transform_chariot::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 gp_transform_chariot::tid() const {
  return tid_;
}
inline void gp_transform_chariot::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional bool geton = 3;
inline bool gp_transform_chariot::has_geton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_transform_chariot::set_has_geton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_transform_chariot::clear_has_geton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_transform_chariot::clear_geton() {
  geton_ = false;
  clear_has_geton();
}
inline bool gp_transform_chariot::geton() const {
  return geton_;
}
inline void gp_transform_chariot::set_geton(bool value) {
  set_has_geton();
  geton_ = value;
}

// -------------------------------------------------------------------

// gp_fix_chariot

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_FIX_CHARIOT];
inline bool gp_fix_chariot::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_fix_chariot::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_fix_chariot::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_fix_chariot::clear_type() {
  type_ = 195;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_fix_chariot::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_fix_chariot::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool use_diamond = 2;
inline bool gp_fix_chariot::has_use_diamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_fix_chariot::set_has_use_diamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_fix_chariot::clear_has_use_diamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_fix_chariot::clear_use_diamond() {
  use_diamond_ = false;
  clear_has_use_diamond();
}
inline bool gp_fix_chariot::use_diamond() const {
  return use_diamond_;
}
inline void gp_fix_chariot::set_use_diamond(bool value) {
  set_has_use_diamond();
  use_diamond_ = value;
}

// -------------------------------------------------------------------

// gp_wuhun_open

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_WUHUN_OPEN];
inline bool gp_wuhun_open::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_wuhun_open::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_wuhun_open::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_wuhun_open::clear_type() {
  type_ = 191;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_wuhun_open::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_wuhun_open::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 wuhun_group_id = 2;
inline bool gp_wuhun_open::has_wuhun_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_wuhun_open::set_has_wuhun_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_wuhun_open::clear_has_wuhun_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_wuhun_open::clear_wuhun_group_id() {
  wuhun_group_id_ = 0;
  clear_has_wuhun_group_id();
}
inline ::google::protobuf::int32 gp_wuhun_open::wuhun_group_id() const {
  return wuhun_group_id_;
}
inline void gp_wuhun_open::set_wuhun_group_id(::google::protobuf::int32 value) {
  set_has_wuhun_group_id();
  wuhun_group_id_ = value;
}

// -------------------------------------------------------------------

// gp_wuhun_upgrade

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_WUHUN_UPGRADE];
inline bool gp_wuhun_upgrade::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_wuhun_upgrade::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_wuhun_upgrade::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_wuhun_upgrade::clear_type() {
  type_ = 192;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_wuhun_upgrade::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_wuhun_upgrade::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 node_id = 2;
inline bool gp_wuhun_upgrade::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_wuhun_upgrade::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_wuhun_upgrade::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_wuhun_upgrade::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 gp_wuhun_upgrade::node_id() const {
  return node_id_;
}
inline void gp_wuhun_upgrade::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
}

// optional int32 level = 3;
inline bool gp_wuhun_upgrade::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_wuhun_upgrade::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_wuhun_upgrade::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_wuhun_upgrade::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 gp_wuhun_upgrade::level() const {
  return level_;
}
inline void gp_wuhun_upgrade::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 upgrade_type = 4;
inline bool gp_wuhun_upgrade::has_upgrade_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_wuhun_upgrade::set_has_upgrade_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_wuhun_upgrade::clear_has_upgrade_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_wuhun_upgrade::clear_upgrade_type() {
  upgrade_type_ = 0;
  clear_has_upgrade_type();
}
inline ::google::protobuf::int32 gp_wuhun_upgrade::upgrade_type() const {
  return upgrade_type_;
}
inline void gp_wuhun_upgrade::set_upgrade_type(::google::protobuf::int32 value) {
  set_has_upgrade_type();
  upgrade_type_ = value;
}

// -------------------------------------------------------------------

// use_item_batch

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_USE_ITEM_BATCH];
inline bool use_item_batch::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void use_item_batch::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void use_item_batch::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void use_item_batch::clear_type() {
  type_ = 196;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE use_item_batch::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void use_item_batch::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 location = 2;
inline bool use_item_batch::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void use_item_batch::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void use_item_batch::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void use_item_batch::clear_location() {
  location_ = 0u;
  clear_has_location();
}
inline ::google::protobuf::uint32 use_item_batch::location() const {
  return location_;
}
inline void use_item_batch::set_location(::google::protobuf::uint32 value) {
  set_has_location();
  location_ = value;
}

// optional uint32 index = 3;
inline bool use_item_batch::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void use_item_batch::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void use_item_batch::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void use_item_batch::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 use_item_batch::index() const {
  return index_;
}
inline void use_item_batch::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 tid = 4;
inline bool use_item_batch::has_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void use_item_batch::set_has_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void use_item_batch::clear_has_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void use_item_batch::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 use_item_batch::tid() const {
  return tid_;
}
inline void use_item_batch::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
}

// optional uint32 count = 5;
inline bool use_item_batch::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void use_item_batch::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void use_item_batch::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void use_item_batch::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 use_item_batch::count() const {
  return count_;
}
inline void use_item_batch::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// gp_wine_game

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_WINE_GAME];
inline bool gp_wine_game::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_wine_game::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_wine_game::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_wine_game::clear_type() {
  type_ = 199;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_wine_game::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_wine_game::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 tid = 2;
inline bool gp_wine_game::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_wine_game::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_wine_game::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_wine_game::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 gp_wine_game::tid() const {
  return tid_;
}
inline void gp_wine_game::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// -------------------------------------------------------------------

// gp_strategy_level_up

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_STRATEGY_LEVEL_UP];
inline bool gp_strategy_level_up::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_strategy_level_up::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_strategy_level_up::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_strategy_level_up::clear_type() {
  type_ = 197;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_strategy_level_up::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_strategy_level_up::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 strategy_group_tid = 2;
inline bool gp_strategy_level_up::has_strategy_group_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_strategy_level_up::set_has_strategy_group_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_strategy_level_up::clear_has_strategy_group_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_strategy_level_up::clear_strategy_group_tid() {
  strategy_group_tid_ = 0;
  clear_has_strategy_group_tid();
}
inline ::google::protobuf::int32 gp_strategy_level_up::strategy_group_tid() const {
  return strategy_group_tid_;
}
inline void gp_strategy_level_up::set_strategy_group_tid(::google::protobuf::int32 value) {
  set_has_strategy_group_tid();
  strategy_group_tid_ = value;
}

// optional int32 strategy_tid = 3;
inline bool gp_strategy_level_up::has_strategy_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_strategy_level_up::set_has_strategy_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_strategy_level_up::clear_has_strategy_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_strategy_level_up::clear_strategy_tid() {
  strategy_tid_ = 0;
  clear_has_strategy_tid();
}
inline ::google::protobuf::int32 gp_strategy_level_up::strategy_tid() const {
  return strategy_tid_;
}
inline void gp_strategy_level_up::set_strategy_tid(::google::protobuf::int32 value) {
  set_has_strategy_tid();
  strategy_tid_ = value;
}

// -------------------------------------------------------------------

// gp_strategy_star_up

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_STRATEGY_STAR_UP];
inline bool gp_strategy_star_up::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_strategy_star_up::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_strategy_star_up::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_strategy_star_up::clear_type() {
  type_ = 198;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_strategy_star_up::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_strategy_star_up::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 strategy_group_tid = 2;
inline bool gp_strategy_star_up::has_strategy_group_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_strategy_star_up::set_has_strategy_group_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_strategy_star_up::clear_has_strategy_group_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_strategy_star_up::clear_strategy_group_tid() {
  strategy_group_tid_ = 0;
  clear_has_strategy_group_tid();
}
inline ::google::protobuf::int32 gp_strategy_star_up::strategy_group_tid() const {
  return strategy_group_tid_;
}
inline void gp_strategy_star_up::set_strategy_group_tid(::google::protobuf::int32 value) {
  set_has_strategy_group_tid();
  strategy_group_tid_ = value;
}

// optional int32 strategy_tid = 3;
inline bool gp_strategy_star_up::has_strategy_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_strategy_star_up::set_has_strategy_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_strategy_star_up::clear_has_strategy_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_strategy_star_up::clear_strategy_tid() {
  strategy_tid_ = 0;
  clear_has_strategy_tid();
}
inline ::google::protobuf::int32 gp_strategy_star_up::strategy_tid() const {
  return strategy_tid_;
}
inline void gp_strategy_star_up::set_strategy_tid(::google::protobuf::int32 value) {
  set_has_strategy_tid();
  strategy_tid_ = value;
}

// -------------------------------------------------------------------

// gp_surface_train

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_SURFACE_TRAIN];
inline bool gp_surface_train::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_surface_train::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_surface_train::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_surface_train::clear_type() {
  type_ = 200;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_surface_train::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_surface_train::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 surface_tid = 2;
inline bool gp_surface_train::has_surface_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_surface_train::set_has_surface_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_surface_train::clear_has_surface_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_surface_train::clear_surface_tid() {
  surface_tid_ = 0;
  clear_has_surface_tid();
}
inline ::google::protobuf::int32 gp_surface_train::surface_tid() const {
  return surface_tid_;
}
inline void gp_surface_train::set_surface_tid(::google::protobuf::int32 value) {
  set_has_surface_tid();
  surface_tid_ = value;
}

// optional int32 item_index = 3;
inline bool gp_surface_train::has_item_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_surface_train::set_has_item_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_surface_train::clear_has_item_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_surface_train::clear_item_index() {
  item_index_ = 0;
  clear_has_item_index();
}
inline ::google::protobuf::int32 gp_surface_train::item_index() const {
  return item_index_;
}
inline void gp_surface_train::set_item_index(::google::protobuf::int32 value) {
  set_has_item_index();
  item_index_ = value;
}

// optional int32 item_tid = 4;
inline bool gp_surface_train::has_item_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_surface_train::set_has_item_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_surface_train::clear_has_item_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_surface_train::clear_item_tid() {
  item_tid_ = 0;
  clear_has_item_tid();
}
inline ::google::protobuf::int32 gp_surface_train::item_tid() const {
  return item_tid_;
}
inline void gp_surface_train::set_item_tid(::google::protobuf::int32 value) {
  set_has_item_tid();
  item_tid_ = value;
}

// -------------------------------------------------------------------

// gp_region_war_cheer

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_REGION_WAR_CHEER];
inline bool gp_region_war_cheer::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_region_war_cheer::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_region_war_cheer::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_region_war_cheer::clear_type() {
  type_ = 201;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_region_war_cheer::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_region_war_cheer::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 war_id = 2;
inline bool gp_region_war_cheer::has_war_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_region_war_cheer::set_has_war_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_region_war_cheer::clear_has_war_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_region_war_cheer::clear_war_id() {
  war_id_ = 0;
  clear_has_war_id();
}
inline ::google::protobuf::int32 gp_region_war_cheer::war_id() const {
  return war_id_;
}
inline void gp_region_war_cheer::set_war_id(::google::protobuf::int32 value) {
  set_has_war_id();
  war_id_ = value;
}

// optional int32 war_side = 3;
inline bool gp_region_war_cheer::has_war_side() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_region_war_cheer::set_has_war_side() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_region_war_cheer::clear_has_war_side() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_region_war_cheer::clear_war_side() {
  war_side_ = 0;
  clear_has_war_side();
}
inline ::google::protobuf::int32 gp_region_war_cheer::war_side() const {
  return war_side_;
}
inline void gp_region_war_cheer::set_war_side(::google::protobuf::int32 value) {
  set_has_war_side();
  war_side_ = value;
}

// optional int32 cheer_amt = 4;
inline bool gp_region_war_cheer::has_cheer_amt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_region_war_cheer::set_has_cheer_amt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_region_war_cheer::clear_has_cheer_amt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_region_war_cheer::clear_cheer_amt() {
  cheer_amt_ = 0;
  clear_has_cheer_amt();
}
inline ::google::protobuf::int32 gp_region_war_cheer::cheer_amt() const {
  return cheer_amt_;
}
inline void gp_region_war_cheer::set_cheer_amt(::google::protobuf::int32 value) {
  set_has_cheer_amt();
  cheer_amt_ = value;
}

// -------------------------------------------------------------------

// gp_lantern

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_LANTERN];
inline bool gp_lantern::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_lantern::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_lantern::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_lantern::clear_type() {
  type_ = 202;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_lantern::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_lantern::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.gp_lantern.LANTERN_TYPE oper_type = 2;
inline bool gp_lantern::has_oper_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_lantern::set_has_oper_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_lantern::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_lantern::clear_oper_type() {
  oper_type_ = 0;
  clear_has_oper_type();
}
inline ::PB::gp_lantern_LANTERN_TYPE gp_lantern::oper_type() const {
  return static_cast< ::PB::gp_lantern_LANTERN_TYPE >(oper_type_);
}
inline void gp_lantern::set_oper_type(::PB::gp_lantern_LANTERN_TYPE value) {
  assert(::PB::gp_lantern_LANTERN_TYPE_IsValid(value));
  set_has_oper_type();
  oper_type_ = value;
}

// optional int32 oper_param1 = 3;
inline bool gp_lantern::has_oper_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_lantern::set_has_oper_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_lantern::clear_has_oper_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_lantern::clear_oper_param1() {
  oper_param1_ = 0;
  clear_has_oper_param1();
}
inline ::google::protobuf::int32 gp_lantern::oper_param1() const {
  return oper_param1_;
}
inline void gp_lantern::set_oper_param1(::google::protobuf::int32 value) {
  set_has_oper_param1();
  oper_param1_ = value;
}

// optional int32 oper_param2 = 4;
inline bool gp_lantern::has_oper_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_lantern::set_has_oper_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_lantern::clear_has_oper_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_lantern::clear_oper_param2() {
  oper_param2_ = 0;
  clear_has_oper_param2();
}
inline ::google::protobuf::int32 gp_lantern::oper_param2() const {
  return oper_param2_;
}
inline void gp_lantern::set_oper_param2(::google::protobuf::int32 value) {
  set_has_oper_param2();
  oper_param2_ = value;
}

// -------------------------------------------------------------------

// gp_exchange_activity

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EXCHANGE_ACTIVITY];
inline bool gp_exchange_activity::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_exchange_activity::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_exchange_activity::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_exchange_activity::clear_type() {
  type_ = 203;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_exchange_activity::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_exchange_activity::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.gp_exchange_activity.EXCHANGE_TYPE oper_type = 2;
inline bool gp_exchange_activity::has_oper_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_exchange_activity::set_has_oper_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_exchange_activity::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_exchange_activity::clear_oper_type() {
  oper_type_ = 0;
  clear_has_oper_type();
}
inline ::PB::gp_exchange_activity_EXCHANGE_TYPE gp_exchange_activity::oper_type() const {
  return static_cast< ::PB::gp_exchange_activity_EXCHANGE_TYPE >(oper_type_);
}
inline void gp_exchange_activity::set_oper_type(::PB::gp_exchange_activity_EXCHANGE_TYPE value) {
  assert(::PB::gp_exchange_activity_EXCHANGE_TYPE_IsValid(value));
  set_has_oper_type();
  oper_type_ = value;
}

// optional int32 activity_index = 3;
inline bool gp_exchange_activity::has_activity_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_exchange_activity::set_has_activity_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_exchange_activity::clear_has_activity_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_exchange_activity::clear_activity_index() {
  activity_index_ = 0;
  clear_has_activity_index();
}
inline ::google::protobuf::int32 gp_exchange_activity::activity_index() const {
  return activity_index_;
}
inline void gp_exchange_activity::set_activity_index(::google::protobuf::int32 value) {
  set_has_activity_index();
  activity_index_ = value;
}

// optional int32 oper_param = 4;
inline bool gp_exchange_activity::has_oper_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_exchange_activity::set_has_oper_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_exchange_activity::clear_has_oper_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_exchange_activity::clear_oper_param() {
  oper_param_ = 0;
  clear_has_oper_param();
}
inline ::google::protobuf::int32 gp_exchange_activity::oper_param() const {
  return oper_param_;
}
inline void gp_exchange_activity::set_oper_param(::google::protobuf::int32 value) {
  set_has_oper_param();
  oper_param_ = value;
}

// optional int32 array_index = 5;
inline bool gp_exchange_activity::has_array_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_exchange_activity::set_has_array_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_exchange_activity::clear_has_array_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_exchange_activity::clear_array_index() {
  array_index_ = 0;
  clear_has_array_index();
}
inline ::google::protobuf::int32 gp_exchange_activity::array_index() const {
  return array_index_;
}
inline void gp_exchange_activity::set_array_index(::google::protobuf::int32 value) {
  set_has_array_index();
  array_index_ = value;
}

// -------------------------------------------------------------------

// gp_equip_attach_mingwen

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_ATTACH_MINGWEN];
inline bool gp_equip_attach_mingwen::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_attach_mingwen::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_attach_mingwen::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_attach_mingwen::clear_type() {
  type_ = 204;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_attach_mingwen::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_attach_mingwen::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 equip_index = 2;
inline bool gp_equip_attach_mingwen::has_equip_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_attach_mingwen::set_has_equip_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_attach_mingwen::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_attach_mingwen::clear_equip_index() {
  equip_index_ = 0;
  clear_has_equip_index();
}
inline ::google::protobuf::int32 gp_equip_attach_mingwen::equip_index() const {
  return equip_index_;
}
inline void gp_equip_attach_mingwen::set_equip_index(::google::protobuf::int32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// required int32 equip_tid = 3;
inline bool gp_equip_attach_mingwen::has_equip_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_attach_mingwen::set_has_equip_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_attach_mingwen::clear_has_equip_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_attach_mingwen::clear_equip_tid() {
  equip_tid_ = 0;
  clear_has_equip_tid();
}
inline ::google::protobuf::int32 gp_equip_attach_mingwen::equip_tid() const {
  return equip_tid_;
}
inline void gp_equip_attach_mingwen::set_equip_tid(::google::protobuf::int32 value) {
  set_has_equip_tid();
  equip_tid_ = value;
}

// required int32 hole_index = 4;
inline bool gp_equip_attach_mingwen::has_hole_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_attach_mingwen::set_has_hole_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_attach_mingwen::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_attach_mingwen::clear_hole_index() {
  hole_index_ = 0;
  clear_has_hole_index();
}
inline ::google::protobuf::int32 gp_equip_attach_mingwen::hole_index() const {
  return hole_index_;
}
inline void gp_equip_attach_mingwen::set_hole_index(::google::protobuf::int32 value) {
  set_has_hole_index();
  hole_index_ = value;
}

// required int32 mingwen_index = 5;
inline bool gp_equip_attach_mingwen::has_mingwen_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_equip_attach_mingwen::set_has_mingwen_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_equip_attach_mingwen::clear_has_mingwen_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_equip_attach_mingwen::clear_mingwen_index() {
  mingwen_index_ = 0;
  clear_has_mingwen_index();
}
inline ::google::protobuf::int32 gp_equip_attach_mingwen::mingwen_index() const {
  return mingwen_index_;
}
inline void gp_equip_attach_mingwen::set_mingwen_index(::google::protobuf::int32 value) {
  set_has_mingwen_index();
  mingwen_index_ = value;
}

// required int32 mingwen_tid = 6;
inline bool gp_equip_attach_mingwen::has_mingwen_tid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_equip_attach_mingwen::set_has_mingwen_tid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_equip_attach_mingwen::clear_has_mingwen_tid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_equip_attach_mingwen::clear_mingwen_tid() {
  mingwen_tid_ = 0;
  clear_has_mingwen_tid();
}
inline ::google::protobuf::int32 gp_equip_attach_mingwen::mingwen_tid() const {
  return mingwen_tid_;
}
inline void gp_equip_attach_mingwen::set_mingwen_tid(::google::protobuf::int32 value) {
  set_has_mingwen_tid();
  mingwen_tid_ = value;
}

// -------------------------------------------------------------------

// gp_equip_detach_mingwen

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_DEATTACH_MINGWEN];
inline bool gp_equip_detach_mingwen::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_detach_mingwen::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_detach_mingwen::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_detach_mingwen::clear_type() {
  type_ = 205;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_detach_mingwen::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_detach_mingwen::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 equip_index = 2;
inline bool gp_equip_detach_mingwen::has_equip_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_detach_mingwen::set_has_equip_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_detach_mingwen::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_detach_mingwen::clear_equip_index() {
  equip_index_ = 0;
  clear_has_equip_index();
}
inline ::google::protobuf::int32 gp_equip_detach_mingwen::equip_index() const {
  return equip_index_;
}
inline void gp_equip_detach_mingwen::set_equip_index(::google::protobuf::int32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// required int32 equip_tid = 3;
inline bool gp_equip_detach_mingwen::has_equip_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_detach_mingwen::set_has_equip_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_detach_mingwen::clear_has_equip_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_detach_mingwen::clear_equip_tid() {
  equip_tid_ = 0;
  clear_has_equip_tid();
}
inline ::google::protobuf::int32 gp_equip_detach_mingwen::equip_tid() const {
  return equip_tid_;
}
inline void gp_equip_detach_mingwen::set_equip_tid(::google::protobuf::int32 value) {
  set_has_equip_tid();
  equip_tid_ = value;
}

// required int32 hole_index = 4;
inline bool gp_equip_detach_mingwen::has_hole_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_detach_mingwen::set_has_hole_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_detach_mingwen::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_detach_mingwen::clear_hole_index() {
  hole_index_ = 0;
  clear_has_hole_index();
}
inline ::google::protobuf::int32 gp_equip_detach_mingwen::hole_index() const {
  return hole_index_;
}
inline void gp_equip_detach_mingwen::set_hole_index(::google::protobuf::int32 value) {
  set_has_hole_index();
  hole_index_ = value;
}

// required int32 mingwen_tid = 5;
inline bool gp_equip_detach_mingwen::has_mingwen_tid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_equip_detach_mingwen::set_has_mingwen_tid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_equip_detach_mingwen::clear_has_mingwen_tid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_equip_detach_mingwen::clear_mingwen_tid() {
  mingwen_tid_ = 0;
  clear_has_mingwen_tid();
}
inline ::google::protobuf::int32 gp_equip_detach_mingwen::mingwen_tid() const {
  return mingwen_tid_;
}
inline void gp_equip_detach_mingwen::set_mingwen_tid(::google::protobuf::int32 value) {
  set_has_mingwen_tid();
  mingwen_tid_ = value;
}

// -------------------------------------------------------------------

// gp_magic_weapon_train

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_MAGIC_WEAPON_TRAIN];
inline bool gp_magic_weapon_train::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_magic_weapon_train::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_magic_weapon_train::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_magic_weapon_train::clear_type() {
  type_ = 206;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_magic_weapon_train::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_magic_weapon_train::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 weapon_tid = 2;
inline bool gp_magic_weapon_train::has_weapon_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_magic_weapon_train::set_has_weapon_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_magic_weapon_train::clear_has_weapon_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_magic_weapon_train::clear_weapon_tid() {
  weapon_tid_ = 0;
  clear_has_weapon_tid();
}
inline ::google::protobuf::int32 gp_magic_weapon_train::weapon_tid() const {
  return weapon_tid_;
}
inline void gp_magic_weapon_train::set_weapon_tid(::google::protobuf::int32 value) {
  set_has_weapon_tid();
  weapon_tid_ = value;
}

// -------------------------------------------------------------------

// gp_magic_weapon_summon

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_MAGIC_WEAPON_SUMMON];
inline bool gp_magic_weapon_summon::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_magic_weapon_summon::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_magic_weapon_summon::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_magic_weapon_summon::clear_type() {
  type_ = 207;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_magic_weapon_summon::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_magic_weapon_summon::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 weapon_tid = 2;
inline bool gp_magic_weapon_summon::has_weapon_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_magic_weapon_summon::set_has_weapon_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_magic_weapon_summon::clear_has_weapon_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_magic_weapon_summon::clear_weapon_tid() {
  weapon_tid_ = 0;
  clear_has_weapon_tid();
}
inline ::google::protobuf::int32 gp_magic_weapon_summon::weapon_tid() const {
  return weapon_tid_;
}
inline void gp_magic_weapon_summon::set_weapon_tid(::google::protobuf::int32 value) {
  set_has_weapon_tid();
  weapon_tid_ = value;
}

// -------------------------------------------------------------------

// gp_magic_weapon_refine

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_MAGIC_WEAPON_REFINE];
inline bool gp_magic_weapon_refine::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_magic_weapon_refine::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_magic_weapon_refine::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_magic_weapon_refine::clear_type() {
  type_ = 208;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_magic_weapon_refine::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_magic_weapon_refine::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 weapon_tid = 2;
inline bool gp_magic_weapon_refine::has_weapon_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_magic_weapon_refine::set_has_weapon_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_magic_weapon_refine::clear_has_weapon_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_magic_weapon_refine::clear_weapon_tid() {
  weapon_tid_ = 0;
  clear_has_weapon_tid();
}
inline ::google::protobuf::int32 gp_magic_weapon_refine::weapon_tid() const {
  return weapon_tid_;
}
inline void gp_magic_weapon_refine::set_weapon_tid(::google::protobuf::int32 value) {
  set_has_weapon_tid();
  weapon_tid_ = value;
}

// optional int32 color_group_index = 3;
inline bool gp_magic_weapon_refine::has_color_group_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_magic_weapon_refine::set_has_color_group_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_magic_weapon_refine::clear_has_color_group_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_magic_weapon_refine::clear_color_group_index() {
  color_group_index_ = 0;
  clear_has_color_group_index();
}
inline ::google::protobuf::int32 gp_magic_weapon_refine::color_group_index() const {
  return color_group_index_;
}
inline void gp_magic_weapon_refine::set_color_group_index(::google::protobuf::int32 value) {
  set_has_color_group_index();
  color_group_index_ = value;
}

// optional int32 color_index = 4;
inline bool gp_magic_weapon_refine::has_color_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_magic_weapon_refine::set_has_color_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_magic_weapon_refine::clear_has_color_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_magic_weapon_refine::clear_color_index() {
  color_index_ = 0;
  clear_has_color_index();
}
inline ::google::protobuf::int32 gp_magic_weapon_refine::color_index() const {
  return color_index_;
}
inline void gp_magic_weapon_refine::set_color_index(::google::protobuf::int32 value) {
  set_has_color_index();
  color_index_ = value;
}

// -------------------------------------------------------------------

// gp_pet_operate

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_PET_OPERATE];
inline bool gp_pet_operate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_pet_operate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_pet_operate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_pet_operate::clear_type() {
  type_ = 209;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_pet_operate::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_pet_operate::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.gp_pet_operate.OPERATE_TYPE oper_type = 2;
inline bool gp_pet_operate::has_oper_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_pet_operate::set_has_oper_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_pet_operate::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_pet_operate::clear_oper_type() {
  oper_type_ = 1;
  clear_has_oper_type();
}
inline ::PB::gp_pet_operate_OPERATE_TYPE gp_pet_operate::oper_type() const {
  return static_cast< ::PB::gp_pet_operate_OPERATE_TYPE >(oper_type_);
}
inline void gp_pet_operate::set_oper_type(::PB::gp_pet_operate_OPERATE_TYPE value) {
  assert(::PB::gp_pet_operate_OPERATE_TYPE_IsValid(value));
  set_has_oper_type();
  oper_type_ = value;
}

// optional int32 oper_param1 = 3;
inline bool gp_pet_operate::has_oper_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_pet_operate::set_has_oper_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_pet_operate::clear_has_oper_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_pet_operate::clear_oper_param1() {
  oper_param1_ = 0;
  clear_has_oper_param1();
}
inline ::google::protobuf::int32 gp_pet_operate::oper_param1() const {
  return oper_param1_;
}
inline void gp_pet_operate::set_oper_param1(::google::protobuf::int32 value) {
  set_has_oper_param1();
  oper_param1_ = value;
}

// optional int32 oper_param2 = 4;
inline bool gp_pet_operate::has_oper_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_pet_operate::set_has_oper_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_pet_operate::clear_has_oper_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_pet_operate::clear_oper_param2() {
  oper_param2_ = 0;
  clear_has_oper_param2();
}
inline ::google::protobuf::int32 gp_pet_operate::oper_param2() const {
  return oper_param2_;
}
inline void gp_pet_operate::set_oper_param2(::google::protobuf::int32 value) {
  set_has_oper_param2();
  oper_param2_ = value;
}

// -------------------------------------------------------------------

// gp_decompose_batch

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_DECOMPOSE_BATCH];
inline bool gp_decompose_batch::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_decompose_batch::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_decompose_batch::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_decompose_batch::clear_type() {
  type_ = 210;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_decompose_batch::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_decompose_batch::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 location = 2;
inline bool gp_decompose_batch::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_decompose_batch::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_decompose_batch::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_decompose_batch::clear_location() {
  location_ = 0;
  clear_has_location();
}
inline ::google::protobuf::int32 gp_decompose_batch::location() const {
  return location_;
}
inline void gp_decompose_batch::set_location(::google::protobuf::int32 value) {
  set_has_location();
  location_ = value;
}

// optional int32 index = 3;
inline bool gp_decompose_batch::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_decompose_batch::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_decompose_batch::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_decompose_batch::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 gp_decompose_batch::index() const {
  return index_;
}
inline void gp_decompose_batch::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 tid = 4;
inline bool gp_decompose_batch::has_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_decompose_batch::set_has_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_decompose_batch::clear_has_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_decompose_batch::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 gp_decompose_batch::tid() const {
  return tid_;
}
inline void gp_decompose_batch::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 count = 5;
inline bool gp_decompose_batch::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_decompose_batch::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_decompose_batch::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_decompose_batch::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 gp_decompose_batch::count() const {
  return count_;
}
inline void gp_decompose_batch::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// gp_change_prof

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CHANGE_PROF];
inline bool gp_change_prof::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_change_prof::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_change_prof::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_change_prof::clear_type() {
  type_ = 211;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_change_prof::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_change_prof::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 old_prof = 2;
inline bool gp_change_prof::has_old_prof() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_change_prof::set_has_old_prof() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_change_prof::clear_has_old_prof() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_change_prof::clear_old_prof() {
  old_prof_ = 0;
  clear_has_old_prof();
}
inline ::google::protobuf::int32 gp_change_prof::old_prof() const {
  return old_prof_;
}
inline void gp_change_prof::set_old_prof(::google::protobuf::int32 value) {
  set_has_old_prof();
  old_prof_ = value;
}

// required int32 new_prof = 3;
inline bool gp_change_prof::has_new_prof() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_change_prof::set_has_new_prof() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_change_prof::clear_has_new_prof() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_change_prof::clear_new_prof() {
  new_prof_ = 0;
  clear_has_new_prof();
}
inline ::google::protobuf::int32 gp_change_prof::new_prof() const {
  return new_prof_;
}
inline void gp_change_prof::set_new_prof(::google::protobuf::int32 value) {
  set_has_new_prof();
  new_prof_ = value;
}

// -------------------------------------------------------------------

// gp_crack_wuzhuang

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_CRACK_WUZHUANG];
inline bool gp_crack_wuzhuang::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_crack_wuzhuang::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_crack_wuzhuang::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_crack_wuzhuang::clear_type() {
  type_ = 212;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_crack_wuzhuang::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_crack_wuzhuang::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 instance_id = 2;
inline bool gp_crack_wuzhuang::has_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_crack_wuzhuang::set_has_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_crack_wuzhuang::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_crack_wuzhuang::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 gp_crack_wuzhuang::instance_id() const {
  return instance_id_;
}
inline void gp_crack_wuzhuang::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// optional int32 achievement_tid = 3;
inline bool gp_crack_wuzhuang::has_achievement_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_crack_wuzhuang::set_has_achievement_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_crack_wuzhuang::clear_has_achievement_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_crack_wuzhuang::clear_achievement_tid() {
  achievement_tid_ = 0;
  clear_has_achievement_tid();
}
inline ::google::protobuf::int32 gp_crack_wuzhuang::achievement_tid() const {
  return achievement_tid_;
}
inline void gp_crack_wuzhuang::set_achievement_tid(::google::protobuf::int32 value) {
  set_has_achievement_tid();
  achievement_tid_ = value;
}

// -------------------------------------------------------------------

// gp_roam

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_ROAM];
inline bool gp_roam::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_roam::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_roam::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_roam::clear_type() {
  type_ = 213;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_roam::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_roam::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 zoneid = 2;
inline bool gp_roam::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_roam::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_roam::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_roam::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 gp_roam::zoneid() const {
  return zoneid_;
}
inline void gp_roam::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// -------------------------------------------------------------------

// gp_diamond_repu_exchange

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_DIAMOND_REPU_EXCHANGE];
inline bool gp_diamond_repu_exchange::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_diamond_repu_exchange::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_diamond_repu_exchange::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_diamond_repu_exchange::clear_type() {
  type_ = 214;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_diamond_repu_exchange::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_diamond_repu_exchange::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 exchange_val = 2;
inline bool gp_diamond_repu_exchange::has_exchange_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_diamond_repu_exchange::set_has_exchange_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_diamond_repu_exchange::clear_has_exchange_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_diamond_repu_exchange::clear_exchange_val() {
  exchange_val_ = 0;
  clear_has_exchange_val();
}
inline ::google::protobuf::int32 gp_diamond_repu_exchange::exchange_val() const {
  return exchange_val_;
}
inline void gp_diamond_repu_exchange::set_exchange_val(::google::protobuf::int32 value) {
  set_has_exchange_val();
  exchange_val_ = value;
}

// -------------------------------------------------------------------

// gp_equip_soul_equip

// optional int32 location = 1;
inline bool gp_equip_soul_equip::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_soul_equip::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_soul_equip::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_soul_equip::clear_location() {
  location_ = 0;
  clear_has_location();
}
inline ::google::protobuf::int32 gp_equip_soul_equip::location() const {
  return location_;
}
inline void gp_equip_soul_equip::set_location(::google::protobuf::int32 value) {
  set_has_location();
  location_ = value;
}

// optional int32 index = 2;
inline bool gp_equip_soul_equip::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_soul_equip::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_soul_equip::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_soul_equip::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 gp_equip_soul_equip::index() const {
  return index_;
}
inline void gp_equip_soul_equip::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 tid = 3;
inline bool gp_equip_soul_equip::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_soul_equip::set_has_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_soul_equip::clear_has_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_soul_equip::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 gp_equip_soul_equip::tid() const {
  return tid_;
}
inline void gp_equip_soul_equip::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// -------------------------------------------------------------------

// gp_equip_soul

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_EQUIP_SOUL];
inline bool gp_equip_soul::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_soul::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_soul::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_soul::clear_type() {
  type_ = 215;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_equip_soul::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_soul::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 property_index = 2;
inline bool gp_equip_soul::has_property_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_soul::set_has_property_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_soul::clear_has_property_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_soul::clear_property_index() {
  property_index_ = 0;
  clear_has_property_index();
}
inline ::google::protobuf::int32 gp_equip_soul::property_index() const {
  return property_index_;
}
inline void gp_equip_soul::set_property_index(::google::protobuf::int32 value) {
  set_has_property_index();
  property_index_ = value;
}

// optional .PB.gp_equip_soul.equip main_equip = 3;
inline bool gp_equip_soul::has_main_equip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_soul::set_has_main_equip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_soul::clear_has_main_equip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_soul::clear_main_equip() {
  if (main_equip_ != NULL) main_equip_->::PB::gp_equip_soul_equip::Clear();
  clear_has_main_equip();
}
inline const ::PB::gp_equip_soul_equip& gp_equip_soul::main_equip() const {
  return main_equip_ != NULL ? *main_equip_ : *default_instance_->main_equip_;
}
inline ::PB::gp_equip_soul_equip* gp_equip_soul::mutable_main_equip() {
  set_has_main_equip();
  if (main_equip_ == NULL) main_equip_ = new ::PB::gp_equip_soul_equip;
  return main_equip_;
}
inline ::PB::gp_equip_soul_equip* gp_equip_soul::release_main_equip() {
  clear_has_main_equip();
  ::PB::gp_equip_soul_equip* temp = main_equip_;
  main_equip_ = NULL;
  return temp;
}
inline void gp_equip_soul::set_allocated_main_equip(::PB::gp_equip_soul_equip* main_equip) {
  delete main_equip_;
  main_equip_ = main_equip;
  if (main_equip) {
    set_has_main_equip();
  } else {
    clear_has_main_equip();
  }
}

// repeated .PB.gp_equip_soul.equip material_equip = 4;
inline int gp_equip_soul::material_equip_size() const {
  return material_equip_.size();
}
inline void gp_equip_soul::clear_material_equip() {
  material_equip_.Clear();
}
inline const ::PB::gp_equip_soul_equip& gp_equip_soul::material_equip(int index) const {
  return material_equip_.Get(index);
}
inline ::PB::gp_equip_soul_equip* gp_equip_soul::mutable_material_equip(int index) {
  return material_equip_.Mutable(index);
}
inline ::PB::gp_equip_soul_equip* gp_equip_soul::add_material_equip() {
  return material_equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_equip_soul_equip >&
gp_equip_soul::material_equip() const {
  return material_equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::gp_equip_soul_equip >*
gp_equip_soul::mutable_material_equip() {
  return &material_equip_;
}

// -------------------------------------------------------------------

// gp_query_roam_battle_target

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_QUERY_ROAM_BATTLE_TARGET];
inline bool gp_query_roam_battle_target::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_query_roam_battle_target::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_query_roam_battle_target::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_query_roam_battle_target::clear_type() {
  type_ = 216;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_query_roam_battle_target::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_query_roam_battle_target::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool refresh = 2;
inline bool gp_query_roam_battle_target::has_refresh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_query_roam_battle_target::set_has_refresh() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_query_roam_battle_target::clear_has_refresh() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_query_roam_battle_target::clear_refresh() {
  refresh_ = false;
  clear_has_refresh();
}
inline bool gp_query_roam_battle_target::refresh() const {
  return refresh_;
}
inline void gp_query_roam_battle_target::set_refresh(bool value) {
  set_has_refresh();
  refresh_ = value;
}

// -------------------------------------------------------------------

// gp_richman_operate

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_RICHMAN_OPERATE];
inline bool gp_richman_operate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_richman_operate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_richman_operate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_richman_operate::clear_type() {
  type_ = 218;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_richman_operate::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_richman_operate::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 operate_type = 2;
inline bool gp_richman_operate::has_operate_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_richman_operate::set_has_operate_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_richman_operate::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_richman_operate::clear_operate_type() {
  operate_type_ = 0;
  clear_has_operate_type();
}
inline ::google::protobuf::int32 gp_richman_operate::operate_type() const {
  return operate_type_;
}
inline void gp_richman_operate::set_operate_type(::google::protobuf::int32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// optional int32 operate_param1 = 3;
inline bool gp_richman_operate::has_operate_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_richman_operate::set_has_operate_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_richman_operate::clear_has_operate_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_richman_operate::clear_operate_param1() {
  operate_param1_ = 0;
  clear_has_operate_param1();
}
inline ::google::protobuf::int32 gp_richman_operate::operate_param1() const {
  return operate_param1_;
}
inline void gp_richman_operate::set_operate_param1(::google::protobuf::int32 value) {
  set_has_operate_param1();
  operate_param1_ = value;
}

// optional int32 operate_param2 = 4;
inline bool gp_richman_operate::has_operate_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_richman_operate::set_has_operate_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_richman_operate::clear_has_operate_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_richman_operate::clear_operate_param2() {
  operate_param2_ = 0;
  clear_has_operate_param2();
}
inline ::google::protobuf::int32 gp_richman_operate::operate_param2() const {
  return operate_param2_;
}
inline void gp_richman_operate::set_operate_param2(::google::protobuf::int32 value) {
  set_has_operate_param2();
  operate_param2_ = value;
}

// optional int32 operate_param3 = 5;
inline bool gp_richman_operate::has_operate_param3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_richman_operate::set_has_operate_param3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_richman_operate::clear_has_operate_param3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_richman_operate::clear_operate_param3() {
  operate_param3_ = 0;
  clear_has_operate_param3();
}
inline ::google::protobuf::int32 gp_richman_operate::operate_param3() const {
  return operate_param3_;
}
inline void gp_richman_operate::set_operate_param3(::google::protobuf::int32 value) {
  set_has_operate_param3();
  operate_param3_ = value;
}

// -------------------------------------------------------------------

// gp_roam_zhaoji

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_ROAM_ZHAOJI];
inline bool gp_roam_zhaoji::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_roam_zhaoji::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_roam_zhaoji::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_roam_zhaoji::clear_type() {
  type_ = 217;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_roam_zhaoji::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_roam_zhaoji::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 timestamp = 2;
inline bool gp_roam_zhaoji::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_roam_zhaoji::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_roam_zhaoji::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_roam_zhaoji::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 gp_roam_zhaoji::timestamp() const {
  return timestamp_;
}
inline void gp_roam_zhaoji::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// gp_general_soul_op

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GENERAL_SOUL_OP];
inline bool gp_general_soul_op::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_general_soul_op::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_general_soul_op::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_general_soul_op::clear_type() {
  type_ = 219;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_general_soul_op::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_general_soul_op::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 general_tid = 2;
inline bool gp_general_soul_op::has_general_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_general_soul_op::set_has_general_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_general_soul_op::clear_has_general_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_general_soul_op::clear_general_tid() {
  general_tid_ = 0;
  clear_has_general_tid();
}
inline ::google::protobuf::int32 gp_general_soul_op::general_tid() const {
  return general_tid_;
}
inline void gp_general_soul_op::set_general_tid(::google::protobuf::int32 value) {
  set_has_general_tid();
  general_tid_ = value;
}

// optional .PB.gp_general_soul_op.soul_operation operation = 3;
inline bool gp_general_soul_op::has_operation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_general_soul_op::set_has_operation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_general_soul_op::clear_has_operation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_general_soul_op::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::PB::gp_general_soul_op_soul_operation gp_general_soul_op::operation() const {
  return static_cast< ::PB::gp_general_soul_op_soul_operation >(operation_);
}
inline void gp_general_soul_op::set_operation(::PB::gp_general_soul_op_soul_operation value) {
  assert(::PB::gp_general_soul_op_soul_operation_IsValid(value));
  set_has_operation();
  operation_ = value;
}

// -------------------------------------------------------------------

// gp_general_soul_equip_op

// optional .PB.C2S_GS_PROTOC_TYPE type = 1 [default = GPROTOC_GENERAL_SOUL_EQUIP_OP];
inline bool gp_general_soul_equip_op::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_general_soul_equip_op::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_general_soul_equip_op::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_general_soul_equip_op::clear_type() {
  type_ = 220;
  clear_has_type();
}
inline ::PB::C2S_GS_PROTOC_TYPE gp_general_soul_equip_op::type() const {
  return static_cast< ::PB::C2S_GS_PROTOC_TYPE >(type_);
}
inline void gp_general_soul_equip_op::set_type(::PB::C2S_GS_PROTOC_TYPE value) {
  assert(::PB::C2S_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 general_tid = 2;
inline bool gp_general_soul_equip_op::has_general_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_general_soul_equip_op::set_has_general_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_general_soul_equip_op::clear_has_general_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_general_soul_equip_op::clear_general_tid() {
  general_tid_ = 0;
  clear_has_general_tid();
}
inline ::google::protobuf::int32 gp_general_soul_equip_op::general_tid() const {
  return general_tid_;
}
inline void gp_general_soul_equip_op::set_general_tid(::google::protobuf::int32 value) {
  set_has_general_tid();
  general_tid_ = value;
}

// optional int32 source_index = 3;
inline bool gp_general_soul_equip_op::has_source_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_general_soul_equip_op::set_has_source_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_general_soul_equip_op::clear_has_source_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_general_soul_equip_op::clear_source_index() {
  source_index_ = 0;
  clear_has_source_index();
}
inline ::google::protobuf::int32 gp_general_soul_equip_op::source_index() const {
  return source_index_;
}
inline void gp_general_soul_equip_op::set_source_index(::google::protobuf::int32 value) {
  set_has_source_index();
  source_index_ = value;
}

// optional int32 source_tid = 4;
inline bool gp_general_soul_equip_op::has_source_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_general_soul_equip_op::set_has_source_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_general_soul_equip_op::clear_has_source_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_general_soul_equip_op::clear_source_tid() {
  source_tid_ = 0;
  clear_has_source_tid();
}
inline ::google::protobuf::int32 gp_general_soul_equip_op::source_tid() const {
  return source_tid_;
}
inline void gp_general_soul_equip_op::set_source_tid(::google::protobuf::int32 value) {
  set_has_source_tid();
  source_tid_ = value;
}

// optional int32 dest_index = 5;
inline bool gp_general_soul_equip_op::has_dest_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_general_soul_equip_op::set_has_dest_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_general_soul_equip_op::clear_has_dest_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_general_soul_equip_op::clear_dest_index() {
  dest_index_ = 0;
  clear_has_dest_index();
}
inline ::google::protobuf::int32 gp_general_soul_equip_op::dest_index() const {
  return dest_index_;
}
inline void gp_general_soul_equip_op::set_dest_index(::google::protobuf::int32 value) {
  set_has_dest_index();
  dest_index_ = value;
}

// optional int32 dest_tid = 6;
inline bool gp_general_soul_equip_op::has_dest_tid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_general_soul_equip_op::set_has_dest_tid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_general_soul_equip_op::clear_has_dest_tid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_general_soul_equip_op::clear_dest_tid() {
  dest_tid_ = 0;
  clear_has_dest_tid();
}
inline ::google::protobuf::int32 gp_general_soul_equip_op::dest_tid() const {
  return dest_tid_;
}
inline void gp_general_soul_equip_op::set_dest_tid(::google::protobuf::int32 value) {
  set_has_dest_tid();
  dest_tid_ = value;
}

// optional .PB.gp_general_soul_equip_op.soul_operation operation = 7;
inline bool gp_general_soul_equip_op::has_operation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_general_soul_equip_op::set_has_operation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_general_soul_equip_op::clear_has_operation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_general_soul_equip_op::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::PB::gp_general_soul_equip_op_soul_operation gp_general_soul_equip_op::operation() const {
  return static_cast< ::PB::gp_general_soul_equip_op_soul_operation >(operation_);
}
inline void gp_general_soul_equip_op::set_operation(::PB::gp_general_soul_equip_op_soul_operation value) {
  assert(::PB::gp_general_soul_equip_op_soul_operation_IsValid(value));
  set_has_operation();
  operation_ = value;
}

// -------------------------------------------------------------------

// gp_self_enter_world

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_self_enter_world];
inline bool gp_self_enter_world::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_self_enter_world::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_self_enter_world::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_self_enter_world::clear_type() {
  type_ = 506;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_self_enter_world::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_self_enter_world::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 world_tid = 4;
inline bool gp_self_enter_world::has_world_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_self_enter_world::set_has_world_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_self_enter_world::clear_has_world_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_self_enter_world::clear_world_tid() {
  world_tid_ = 0;
  clear_has_world_tid();
}
inline ::google::protobuf::int32 gp_self_enter_world::world_tid() const {
  return world_tid_;
}
inline void gp_self_enter_world::set_world_tid(::google::protobuf::int32 value) {
  set_has_world_tid();
  world_tid_ = value;
}

// required int32 line_id = 2;
inline bool gp_self_enter_world::has_line_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_self_enter_world::set_has_line_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_self_enter_world::clear_has_line_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_self_enter_world::clear_line_id() {
  line_id_ = 0;
  clear_has_line_id();
}
inline ::google::protobuf::int32 gp_self_enter_world::line_id() const {
  return line_id_;
}
inline void gp_self_enter_world::set_line_id(::google::protobuf::int32 value) {
  set_has_line_id();
  line_id_ = value;
}

// required int32 world_id = 3;
inline bool gp_self_enter_world::has_world_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_self_enter_world::set_has_world_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_self_enter_world::clear_has_world_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_self_enter_world::clear_world_id() {
  world_id_ = 0;
  clear_has_world_id();
}
inline ::google::protobuf::int32 gp_self_enter_world::world_id() const {
  return world_id_;
}
inline void gp_self_enter_world::set_world_id(::google::protobuf::int32 value) {
  set_has_world_id();
  world_id_ = value;
}

// required int32 gmt = 5;
inline bool gp_self_enter_world::has_gmt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_self_enter_world::set_has_gmt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_self_enter_world::clear_has_gmt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_self_enter_world::clear_gmt() {
  gmt_ = 0;
  clear_has_gmt();
}
inline ::google::protobuf::int32 gp_self_enter_world::gmt() const {
  return gmt_;
}
inline void gp_self_enter_world::set_gmt(::google::protobuf::int32 value) {
  set_has_gmt();
  gmt_ = value;
}

// -------------------------------------------------------------------

// gp_scene_info_param_t

// required int32 index = 1;
inline bool gp_scene_info_param_t::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_scene_info_param_t::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_scene_info_param_t::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_scene_info_param_t::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 gp_scene_info_param_t::index() const {
  return index_;
}
inline void gp_scene_info_param_t::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required int32 param = 2;
inline bool gp_scene_info_param_t::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_scene_info_param_t::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_scene_info_param_t::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_scene_info_param_t::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 gp_scene_info_param_t::param() const {
  return param_;
}
inline void gp_scene_info_param_t::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// gp_scene_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_scene_info];
inline bool gp_scene_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_scene_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_scene_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_scene_info::clear_type() {
  type_ = 507;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_scene_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_scene_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 mirror_id = 9;
inline bool gp_scene_info::has_mirror_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_scene_info::set_has_mirror_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_scene_info::clear_has_mirror_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_scene_info::clear_mirror_id() {
  mirror_id_ = 0;
  clear_has_mirror_id();
}
inline ::google::protobuf::int32 gp_scene_info::mirror_id() const {
  return mirror_id_;
}
inline void gp_scene_info::set_mirror_id(::google::protobuf::int32 value) {
  set_has_mirror_id();
  mirror_id_ = value;
}

// repeated int32 all_mirrors = 2;
inline int gp_scene_info::all_mirrors_size() const {
  return all_mirrors_.size();
}
inline void gp_scene_info::clear_all_mirrors() {
  all_mirrors_.Clear();
}
inline ::google::protobuf::int32 gp_scene_info::all_mirrors(int index) const {
  return all_mirrors_.Get(index);
}
inline void gp_scene_info::set_all_mirrors(int index, ::google::protobuf::int32 value) {
  all_mirrors_.Set(index, value);
}
inline void gp_scene_info::add_all_mirrors(::google::protobuf::int32 value) {
  all_mirrors_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gp_scene_info::all_mirrors() const {
  return all_mirrors_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gp_scene_info::mutable_all_mirrors() {
  return &all_mirrors_;
}

// repeated .PB.gp_scene_info.param_t params = 3;
inline int gp_scene_info::params_size() const {
  return params_.size();
}
inline void gp_scene_info::clear_params() {
  params_.Clear();
}
inline const ::PB::gp_scene_info_param_t& gp_scene_info::params(int index) const {
  return params_.Get(index);
}
inline ::PB::gp_scene_info_param_t* gp_scene_info::mutable_params(int index) {
  return params_.Mutable(index);
}
inline ::PB::gp_scene_info_param_t* gp_scene_info::add_params() {
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_scene_info_param_t >&
gp_scene_info::params() const {
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::gp_scene_info_param_t >*
gp_scene_info::mutable_params() {
  return &params_;
}

// optional int32 lineid = 4;
inline bool gp_scene_info::has_lineid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_scene_info::set_has_lineid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_scene_info::clear_has_lineid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_scene_info::clear_lineid() {
  lineid_ = 0;
  clear_has_lineid();
}
inline ::google::protobuf::int32 gp_scene_info::lineid() const {
  return lineid_;
}
inline void gp_scene_info::set_lineid(::google::protobuf::int32 value) {
  set_has_lineid();
  lineid_ = value;
}

// optional int32 mask = 5;
inline bool gp_scene_info::has_mask() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_scene_info::set_has_mask() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_scene_info::clear_has_mask() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_scene_info::clear_mask() {
  mask_ = 0;
  clear_has_mask();
}
inline ::google::protobuf::int32 gp_scene_info::mask() const {
  return mask_;
}
inline void gp_scene_info::set_mask(::google::protobuf::int32 value) {
  set_has_mask();
  mask_ = value;
}

// optional int32 scene_tid = 6;
inline bool gp_scene_info::has_scene_tid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_scene_info::set_has_scene_tid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_scene_info::clear_has_scene_tid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_scene_info::clear_scene_tid() {
  scene_tid_ = 0;
  clear_has_scene_tid();
}
inline ::google::protobuf::int32 gp_scene_info::scene_tid() const {
  return scene_tid_;
}
inline void gp_scene_info::set_scene_tid(::google::protobuf::int32 value) {
  set_has_scene_tid();
  scene_tid_ = value;
}

// optional int32 server_mod = 7;
inline bool gp_scene_info::has_server_mod() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gp_scene_info::set_has_server_mod() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gp_scene_info::clear_has_server_mod() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gp_scene_info::clear_server_mod() {
  server_mod_ = 0;
  clear_has_server_mod();
}
inline ::google::protobuf::int32 gp_scene_info::server_mod() const {
  return server_mod_;
}
inline void gp_scene_info::set_server_mod(::google::protobuf::int32 value) {
  set_has_server_mod();
  server_mod_ = value;
}

// optional bool time_still = 8;
inline bool gp_scene_info::has_time_still() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gp_scene_info::set_has_time_still() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gp_scene_info::clear_has_time_still() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gp_scene_info::clear_time_still() {
  time_still_ = false;
  clear_has_time_still();
}
inline bool gp_scene_info::time_still() const {
  return time_still_;
}
inline void gp_scene_info::set_time_still(bool value) {
  set_has_time_still();
  time_still_ = value;
}

// -------------------------------------------------------------------

// gp_creature_base_info

// required int32 clothesid = 1;
inline bool gp_creature_base_info::has_clothesid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_creature_base_info::set_has_clothesid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_creature_base_info::clear_has_clothesid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_creature_base_info::clear_clothesid() {
  clothesid_ = 0;
  clear_has_clothesid();
}
inline ::google::protobuf::int32 gp_creature_base_info::clothesid() const {
  return clothesid_;
}
inline void gp_creature_base_info::set_clothesid(::google::protobuf::int32 value) {
  set_has_clothesid();
  clothesid_ = value;
}

// optional int32 idphoto = 2;
inline bool gp_creature_base_info::has_idphoto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_creature_base_info::set_has_idphoto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_creature_base_info::clear_has_idphoto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_creature_base_info::clear_idphoto() {
  idphoto_ = 0;
  clear_has_idphoto();
}
inline ::google::protobuf::int32 gp_creature_base_info::idphoto() const {
  return idphoto_;
}
inline void gp_creature_base_info::set_idphoto(::google::protobuf::int32 value) {
  set_has_idphoto();
  idphoto_ = value;
}

// optional int32 faceid = 3;
inline bool gp_creature_base_info::has_faceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_creature_base_info::set_has_faceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_creature_base_info::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_creature_base_info::clear_faceid() {
  faceid_ = 0;
  clear_has_faceid();
}
inline ::google::protobuf::int32 gp_creature_base_info::faceid() const {
  return faceid_;
}
inline void gp_creature_base_info::set_faceid(::google::protobuf::int32 value) {
  set_has_faceid();
  faceid_ = value;
}

// optional int32 hairid = 4;
inline bool gp_creature_base_info::has_hairid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_creature_base_info::set_has_hairid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_creature_base_info::clear_has_hairid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_creature_base_info::clear_hairid() {
  hairid_ = 0;
  clear_has_hairid();
}
inline ::google::protobuf::int32 gp_creature_base_info::hairid() const {
  return hairid_;
}
inline void gp_creature_base_info::set_hairid(::google::protobuf::int32 value) {
  set_has_hairid();
  hairid_ = value;
}

// optional int32 haircolor = 5;
inline bool gp_creature_base_info::has_haircolor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_creature_base_info::set_has_haircolor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_creature_base_info::clear_has_haircolor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_creature_base_info::clear_haircolor() {
  haircolor_ = 0;
  clear_has_haircolor();
}
inline ::google::protobuf::int32 gp_creature_base_info::haircolor() const {
  return haircolor_;
}
inline void gp_creature_base_info::set_haircolor(::google::protobuf::int32 value) {
  set_has_haircolor();
  haircolor_ = value;
}

// optional int32 skincolor = 6;
inline bool gp_creature_base_info::has_skincolor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_creature_base_info::set_has_skincolor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_creature_base_info::clear_has_skincolor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_creature_base_info::clear_skincolor() {
  skincolor_ = 0;
  clear_has_skincolor();
}
inline ::google::protobuf::int32 gp_creature_base_info::skincolor() const {
  return skincolor_;
}
inline void gp_creature_base_info::set_skincolor(::google::protobuf::int32 value) {
  set_has_skincolor();
  skincolor_ = value;
}

// optional int32 beardid = 7;
inline bool gp_creature_base_info::has_beardid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_creature_base_info::set_has_beardid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_creature_base_info::clear_has_beardid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_creature_base_info::clear_beardid() {
  beardid_ = 0;
  clear_has_beardid();
}
inline ::google::protobuf::int32 gp_creature_base_info::beardid() const {
  return beardid_;
}
inline void gp_creature_base_info::set_beardid(::google::protobuf::int32 value) {
  set_has_beardid();
  beardid_ = value;
}

// optional int32 tattoo = 8;
inline bool gp_creature_base_info::has_tattoo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gp_creature_base_info::set_has_tattoo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gp_creature_base_info::clear_has_tattoo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gp_creature_base_info::clear_tattoo() {
  tattoo_ = 0;
  clear_has_tattoo();
}
inline ::google::protobuf::int32 gp_creature_base_info::tattoo() const {
  return tattoo_;
}
inline void gp_creature_base_info::set_tattoo(::google::protobuf::int32 value) {
  set_has_tattoo();
  tattoo_ = value;
}

// optional int32 sharp = 9;
inline bool gp_creature_base_info::has_sharp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gp_creature_base_info::set_has_sharp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gp_creature_base_info::clear_has_sharp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gp_creature_base_info::clear_sharp() {
  sharp_ = 0;
  clear_has_sharp();
}
inline ::google::protobuf::int32 gp_creature_base_info::sharp() const {
  return sharp_;
}
inline void gp_creature_base_info::set_sharp(::google::protobuf::int32 value) {
  set_has_sharp();
  sharp_ = value;
}

// optional int32 level = 10;
inline bool gp_creature_base_info::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void gp_creature_base_info::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void gp_creature_base_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void gp_creature_base_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 gp_creature_base_info::level() const {
  return level_;
}
inline void gp_creature_base_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 prof = 11;
inline bool gp_creature_base_info::has_prof() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void gp_creature_base_info::set_has_prof() {
  _has_bits_[0] |= 0x00000400u;
}
inline void gp_creature_base_info::clear_has_prof() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void gp_creature_base_info::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 gp_creature_base_info::prof() const {
  return prof_;
}
inline void gp_creature_base_info::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 prof_level = 12;
inline bool gp_creature_base_info::has_prof_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void gp_creature_base_info::set_has_prof_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void gp_creature_base_info::clear_has_prof_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void gp_creature_base_info::clear_prof_level() {
  prof_level_ = 0;
  clear_has_prof_level();
}
inline ::google::protobuf::int32 gp_creature_base_info::prof_level() const {
  return prof_level_;
}
inline void gp_creature_base_info::set_prof_level(::google::protobuf::int32 value) {
  set_has_prof_level();
  prof_level_ = value;
}

// optional int32 appearance_crc = 13;
inline bool gp_creature_base_info::has_appearance_crc() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void gp_creature_base_info::set_has_appearance_crc() {
  _has_bits_[0] |= 0x00001000u;
}
inline void gp_creature_base_info::clear_has_appearance_crc() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void gp_creature_base_info::clear_appearance_crc() {
  appearance_crc_ = 0;
  clear_has_appearance_crc();
}
inline ::google::protobuf::int32 gp_creature_base_info::appearance_crc() const {
  return appearance_crc_;
}
inline void gp_creature_base_info::set_appearance_crc(::google::protobuf::int32 value) {
  set_has_appearance_crc();
  appearance_crc_ = value;
}

// -------------------------------------------------------------------

// gp_player_extend_state

// required uint64 extend_state = 1;
inline bool gp_player_extend_state::has_extend_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_player_extend_state::set_has_extend_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_player_extend_state::clear_has_extend_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_player_extend_state::clear_extend_state() {
  extend_state_ = GOOGLE_ULONGLONG(0);
  clear_has_extend_state();
}
inline ::google::protobuf::uint64 gp_player_extend_state::extend_state() const {
  return extend_state_;
}
inline void gp_player_extend_state::set_extend_state(::google::protobuf::uint64 value) {
  set_has_extend_state();
  extend_state_ = value;
}

// optional int32 visual_effect = 2;
inline bool gp_player_extend_state::has_visual_effect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_player_extend_state::set_has_visual_effect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_player_extend_state::clear_has_visual_effect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_player_extend_state::clear_visual_effect() {
  visual_effect_ = 0;
  clear_has_visual_effect();
}
inline ::google::protobuf::int32 gp_player_extend_state::visual_effect() const {
  return visual_effect_;
}
inline void gp_player_extend_state::set_visual_effect(::google::protobuf::int32 value) {
  set_has_visual_effect();
  visual_effect_ = value;
}

// optional int32 action_type = 3;
inline bool gp_player_extend_state::has_action_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_player_extend_state::set_has_action_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_player_extend_state::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_player_extend_state::clear_action_type() {
  action_type_ = 0;
  clear_has_action_type();
}
inline ::google::protobuf::int32 gp_player_extend_state::action_type() const {
  return action_type_;
}
inline void gp_player_extend_state::set_action_type(::google::protobuf::int32 value) {
  set_has_action_type();
  action_type_ = value;
}

// optional int32 action_arg = 4;
inline bool gp_player_extend_state::has_action_arg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_player_extend_state::set_has_action_arg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_player_extend_state::clear_has_action_arg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_player_extend_state::clear_action_arg() {
  action_arg_ = 0;
  clear_has_action_arg();
}
inline ::google::protobuf::int32 gp_player_extend_state::action_arg() const {
  return action_arg_;
}
inline void gp_player_extend_state::set_action_arg(::google::protobuf::int32 value) {
  set_has_action_arg();
  action_arg_ = value;
}

// optional int32 body_size_scale = 5;
inline bool gp_player_extend_state::has_body_size_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_player_extend_state::set_has_body_size_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_player_extend_state::clear_has_body_size_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_player_extend_state::clear_body_size_scale() {
  body_size_scale_ = 0;
  clear_has_body_size_scale();
}
inline ::google::protobuf::int32 gp_player_extend_state::body_size_scale() const {
  return body_size_scale_;
}
inline void gp_player_extend_state::set_body_size_scale(::google::protobuf::int32 value) {
  set_has_body_size_scale();
  body_size_scale_ = value;
}

// optional bytes player_signature = 6;
inline bool gp_player_extend_state::has_player_signature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_player_extend_state::set_has_player_signature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_player_extend_state::clear_has_player_signature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_player_extend_state::clear_player_signature() {
  if (player_signature_ != &::google::protobuf::internal::kEmptyString) {
    player_signature_->clear();
  }
  clear_has_player_signature();
}
inline const ::std::string& gp_player_extend_state::player_signature() const {
  return *player_signature_;
}
inline void gp_player_extend_state::set_player_signature(const ::std::string& value) {
  set_has_player_signature();
  if (player_signature_ == &::google::protobuf::internal::kEmptyString) {
    player_signature_ = new ::std::string;
  }
  player_signature_->assign(value);
}
inline void gp_player_extend_state::set_player_signature(const char* value) {
  set_has_player_signature();
  if (player_signature_ == &::google::protobuf::internal::kEmptyString) {
    player_signature_ = new ::std::string;
  }
  player_signature_->assign(value);
}
inline void gp_player_extend_state::set_player_signature(const void* value, size_t size) {
  set_has_player_signature();
  if (player_signature_ == &::google::protobuf::internal::kEmptyString) {
    player_signature_ = new ::std::string;
  }
  player_signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_player_extend_state::mutable_player_signature() {
  set_has_player_signature();
  if (player_signature_ == &::google::protobuf::internal::kEmptyString) {
    player_signature_ = new ::std::string;
  }
  return player_signature_;
}
inline ::std::string* gp_player_extend_state::release_player_signature() {
  clear_has_player_signature();
  if (player_signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_signature_;
    player_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gp_player_extend_state::set_allocated_player_signature(::std::string* player_signature) {
  if (player_signature_ != &::google::protobuf::internal::kEmptyString) {
    delete player_signature_;
  }
  if (player_signature) {
    set_has_player_signature();
    player_signature_ = player_signature;
  } else {
    clear_has_player_signature();
    player_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 family_id = 7;
inline bool gp_player_extend_state::has_family_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_player_extend_state::set_has_family_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_player_extend_state::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_player_extend_state::clear_family_id() {
  family_id_ = 0;
  clear_has_family_id();
}
inline ::google::protobuf::int32 gp_player_extend_state::family_id() const {
  return family_id_;
}
inline void gp_player_extend_state::set_family_id(::google::protobuf::int32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional int32 mafia_id = 8;
inline bool gp_player_extend_state::has_mafia_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gp_player_extend_state::set_has_mafia_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gp_player_extend_state::clear_has_mafia_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gp_player_extend_state::clear_mafia_id() {
  mafia_id_ = 0;
  clear_has_mafia_id();
}
inline ::google::protobuf::int32 gp_player_extend_state::mafia_id() const {
  return mafia_id_;
}
inline void gp_player_extend_state::set_mafia_id(::google::protobuf::int32 value) {
  set_has_mafia_id();
  mafia_id_ = value;
}

// optional int32 mafia_rank = 9;
inline bool gp_player_extend_state::has_mafia_rank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gp_player_extend_state::set_has_mafia_rank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gp_player_extend_state::clear_has_mafia_rank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gp_player_extend_state::clear_mafia_rank() {
  mafia_rank_ = 0;
  clear_has_mafia_rank();
}
inline ::google::protobuf::int32 gp_player_extend_state::mafia_rank() const {
  return mafia_rank_;
}
inline void gp_player_extend_state::set_mafia_rank(::google::protobuf::int32 value) {
  set_has_mafia_rank();
  mafia_rank_ = value;
}

// optional int32 mafia_domain = 10;
inline bool gp_player_extend_state::has_mafia_domain() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void gp_player_extend_state::set_has_mafia_domain() {
  _has_bits_[0] |= 0x00000200u;
}
inline void gp_player_extend_state::clear_has_mafia_domain() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void gp_player_extend_state::clear_mafia_domain() {
  mafia_domain_ = 0;
  clear_has_mafia_domain();
}
inline ::google::protobuf::int32 gp_player_extend_state::mafia_domain() const {
  return mafia_domain_;
}
inline void gp_player_extend_state::set_mafia_domain(::google::protobuf::int32 value) {
  set_has_mafia_domain();
  mafia_domain_ = value;
}

// optional int32 mafia_owner = 11;
inline bool gp_player_extend_state::has_mafia_owner() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void gp_player_extend_state::set_has_mafia_owner() {
  _has_bits_[0] |= 0x00000400u;
}
inline void gp_player_extend_state::clear_has_mafia_owner() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void gp_player_extend_state::clear_mafia_owner() {
  mafia_owner_ = 0;
  clear_has_mafia_owner();
}
inline ::google::protobuf::int32 gp_player_extend_state::mafia_owner() const {
  return mafia_owner_;
}
inline void gp_player_extend_state::set_mafia_owner(::google::protobuf::int32 value) {
  set_has_mafia_owner();
  mafia_owner_ = value;
}

// optional int32 title_id = 14;
inline bool gp_player_extend_state::has_title_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void gp_player_extend_state::set_has_title_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void gp_player_extend_state::clear_has_title_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void gp_player_extend_state::clear_title_id() {
  title_id_ = 0;
  clear_has_title_id();
}
inline ::google::protobuf::int32 gp_player_extend_state::title_id() const {
  return title_id_;
}
inline void gp_player_extend_state::set_title_id(::google::protobuf::int32 value) {
  set_has_title_id();
  title_id_ = value;
}

// optional bytes tilte = 15;
inline bool gp_player_extend_state::has_tilte() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void gp_player_extend_state::set_has_tilte() {
  _has_bits_[0] |= 0x00001000u;
}
inline void gp_player_extend_state::clear_has_tilte() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void gp_player_extend_state::clear_tilte() {
  if (tilte_ != &::google::protobuf::internal::kEmptyString) {
    tilte_->clear();
  }
  clear_has_tilte();
}
inline const ::std::string& gp_player_extend_state::tilte() const {
  return *tilte_;
}
inline void gp_player_extend_state::set_tilte(const ::std::string& value) {
  set_has_tilte();
  if (tilte_ == &::google::protobuf::internal::kEmptyString) {
    tilte_ = new ::std::string;
  }
  tilte_->assign(value);
}
inline void gp_player_extend_state::set_tilte(const char* value) {
  set_has_tilte();
  if (tilte_ == &::google::protobuf::internal::kEmptyString) {
    tilte_ = new ::std::string;
  }
  tilte_->assign(value);
}
inline void gp_player_extend_state::set_tilte(const void* value, size_t size) {
  set_has_tilte();
  if (tilte_ == &::google::protobuf::internal::kEmptyString) {
    tilte_ = new ::std::string;
  }
  tilte_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_player_extend_state::mutable_tilte() {
  set_has_tilte();
  if (tilte_ == &::google::protobuf::internal::kEmptyString) {
    tilte_ = new ::std::string;
  }
  return tilte_;
}
inline ::std::string* gp_player_extend_state::release_tilte() {
  clear_has_tilte();
  if (tilte_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tilte_;
    tilte_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gp_player_extend_state::set_allocated_tilte(::std::string* tilte) {
  if (tilte_ != &::google::protobuf::internal::kEmptyString) {
    delete tilte_;
  }
  if (tilte) {
    set_has_tilte();
    tilte_ = tilte;
  } else {
    clear_has_tilte();
    tilte_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 spouse_id = 16;
inline bool gp_player_extend_state::has_spouse_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void gp_player_extend_state::set_has_spouse_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void gp_player_extend_state::clear_has_spouse_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void gp_player_extend_state::clear_spouse_id() {
  spouse_id_ = GOOGLE_LONGLONG(0);
  clear_has_spouse_id();
}
inline ::google::protobuf::int64 gp_player_extend_state::spouse_id() const {
  return spouse_id_;
}
inline void gp_player_extend_state::set_spouse_id(::google::protobuf::int64 value) {
  set_has_spouse_id();
  spouse_id_ = value;
}

// optional int32 teamid = 17;
inline bool gp_player_extend_state::has_teamid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void gp_player_extend_state::set_has_teamid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void gp_player_extend_state::clear_has_teamid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void gp_player_extend_state::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 gp_player_extend_state::teamid() const {
  return teamid_;
}
inline void gp_player_extend_state::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional int32 pos_in_xyxw = 18;
inline bool gp_player_extend_state::has_pos_in_xyxw() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void gp_player_extend_state::set_has_pos_in_xyxw() {
  _has_bits_[0] |= 0x00008000u;
}
inline void gp_player_extend_state::clear_has_pos_in_xyxw() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void gp_player_extend_state::clear_pos_in_xyxw() {
  pos_in_xyxw_ = 0;
  clear_has_pos_in_xyxw();
}
inline ::google::protobuf::int32 gp_player_extend_state::pos_in_xyxw() const {
  return pos_in_xyxw_;
}
inline void gp_player_extend_state::set_pos_in_xyxw(::google::protobuf::int32 value) {
  set_has_pos_in_xyxw();
  pos_in_xyxw_ = value;
}

// optional int64 xyxw_id = 19;
inline bool gp_player_extend_state::has_xyxw_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void gp_player_extend_state::set_has_xyxw_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void gp_player_extend_state::clear_has_xyxw_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void gp_player_extend_state::clear_xyxw_id() {
  xyxw_id_ = GOOGLE_LONGLONG(0);
  clear_has_xyxw_id();
}
inline ::google::protobuf::int64 gp_player_extend_state::xyxw_id() const {
  return xyxw_id_;
}
inline void gp_player_extend_state::set_xyxw_id(::google::protobuf::int64 value) {
  set_has_xyxw_id();
  xyxw_id_ = value;
}

// optional int32 transform_tid = 20;
inline bool gp_player_extend_state::has_transform_tid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void gp_player_extend_state::set_has_transform_tid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void gp_player_extend_state::clear_has_transform_tid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void gp_player_extend_state::clear_transform_tid() {
  transform_tid_ = 0;
  clear_has_transform_tid();
}
inline ::google::protobuf::int32 gp_player_extend_state::transform_tid() const {
  return transform_tid_;
}
inline void gp_player_extend_state::set_transform_tid(::google::protobuf::int32 value) {
  set_has_transform_tid();
  transform_tid_ = value;
}

// optional int32 native_zoneid = 21;
inline bool gp_player_extend_state::has_native_zoneid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void gp_player_extend_state::set_has_native_zoneid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void gp_player_extend_state::clear_has_native_zoneid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void gp_player_extend_state::clear_native_zoneid() {
  native_zoneid_ = 0;
  clear_has_native_zoneid();
}
inline ::google::protobuf::int32 gp_player_extend_state::native_zoneid() const {
  return native_zoneid_;
}
inline void gp_player_extend_state::set_native_zoneid(::google::protobuf::int32 value) {
  set_has_native_zoneid();
  native_zoneid_ = value;
}

// -------------------------------------------------------------------

// gp_player_definite_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_player_definite_info];
inline bool gp_player_definite_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_player_definite_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_player_definite_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_player_definite_info::clear_type() {
  type_ = 508;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_player_definite_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_player_definite_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required sint64 roleid = 14;
inline bool gp_player_definite_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_player_definite_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_player_definite_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_player_definite_info::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 gp_player_definite_info::roleid() const {
  return roleid_;
}
inline void gp_player_definite_info::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required sint32 newobjid = 2;
inline bool gp_player_definite_info::has_newobjid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_player_definite_info::set_has_newobjid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_player_definite_info::clear_has_newobjid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_player_definite_info::clear_newobjid() {
  newobjid_ = 0;
  clear_has_newobjid();
}
inline ::google::protobuf::int32 gp_player_definite_info::newobjid() const {
  return newobjid_;
}
inline void gp_player_definite_info::set_newobjid(::google::protobuf::int32 value) {
  set_has_newobjid();
  newobjid_ = value;
}

// required .PB.gp_creature_base_info base_info = 3;
inline bool gp_player_definite_info::has_base_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_player_definite_info::set_has_base_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_player_definite_info::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_player_definite_info::clear_base_info() {
  if (base_info_ != NULL) base_info_->::PB::gp_creature_base_info::Clear();
  clear_has_base_info();
}
inline const ::PB::gp_creature_base_info& gp_player_definite_info::base_info() const {
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::PB::gp_creature_base_info* gp_player_definite_info::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::PB::gp_creature_base_info;
  return base_info_;
}
inline ::PB::gp_creature_base_info* gp_player_definite_info::release_base_info() {
  clear_has_base_info();
  ::PB::gp_creature_base_info* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline void gp_player_definite_info::set_allocated_base_info(::PB::gp_creature_base_info* base_info) {
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    set_has_base_info();
  } else {
    clear_has_base_info();
  }
}

// required bytes prop = 4;
inline bool gp_player_definite_info::has_prop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_player_definite_info::set_has_prop() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_player_definite_info::clear_has_prop() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_player_definite_info::clear_prop() {
  if (prop_ != &::google::protobuf::internal::kEmptyString) {
    prop_->clear();
  }
  clear_has_prop();
}
inline const ::std::string& gp_player_definite_info::prop() const {
  return *prop_;
}
inline void gp_player_definite_info::set_prop(const ::std::string& value) {
  set_has_prop();
  if (prop_ == &::google::protobuf::internal::kEmptyString) {
    prop_ = new ::std::string;
  }
  prop_->assign(value);
}
inline void gp_player_definite_info::set_prop(const char* value) {
  set_has_prop();
  if (prop_ == &::google::protobuf::internal::kEmptyString) {
    prop_ = new ::std::string;
  }
  prop_->assign(value);
}
inline void gp_player_definite_info::set_prop(const void* value, size_t size) {
  set_has_prop();
  if (prop_ == &::google::protobuf::internal::kEmptyString) {
    prop_ = new ::std::string;
  }
  prop_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_player_definite_info::mutable_prop() {
  set_has_prop();
  if (prop_ == &::google::protobuf::internal::kEmptyString) {
    prop_ = new ::std::string;
  }
  return prop_;
}
inline ::std::string* gp_player_definite_info::release_prop() {
  clear_has_prop();
  if (prop_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prop_;
    prop_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gp_player_definite_info::set_allocated_prop(::std::string* prop) {
  if (prop_ != &::google::protobuf::internal::kEmptyString) {
    delete prop_;
  }
  if (prop) {
    set_has_prop();
    prop_ = prop;
  } else {
    clear_has_prop();
    prop_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PB.a3d_pos pos = 5;
inline bool gp_player_definite_info::has_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_player_definite_info::set_has_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_player_definite_info::clear_has_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_player_definite_info::clear_pos() {
  if (pos_ != NULL) pos_->::PB::a3d_pos::Clear();
  clear_has_pos();
}
inline const ::PB::a3d_pos& gp_player_definite_info::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::PB::a3d_pos* gp_player_definite_info::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PB::a3d_pos;
  return pos_;
}
inline ::PB::a3d_pos* gp_player_definite_info::release_pos() {
  clear_has_pos();
  ::PB::a3d_pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void gp_player_definite_info::set_allocated_pos(::PB::a3d_pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional int32 dir = 6;
inline bool gp_player_definite_info::has_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_player_definite_info::set_has_dir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_player_definite_info::clear_has_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_player_definite_info::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline ::google::protobuf::int32 gp_player_definite_info::dir() const {
  return dir_;
}
inline void gp_player_definite_info::set_dir(::google::protobuf::int32 value) {
  set_has_dir();
  dir_ = value;
}

// optional int32 faction = 7;
inline bool gp_player_definite_info::has_faction() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gp_player_definite_info::set_has_faction() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gp_player_definite_info::clear_has_faction() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gp_player_definite_info::clear_faction() {
  faction_ = 0;
  clear_has_faction();
}
inline ::google::protobuf::int32 gp_player_definite_info::faction() const {
  return faction_;
}
inline void gp_player_definite_info::set_faction(::google::protobuf::int32 value) {
  set_has_faction();
  faction_ = value;
}

// optional int32 pk_level = 8;
inline bool gp_player_definite_info::has_pk_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gp_player_definite_info::set_has_pk_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gp_player_definite_info::clear_has_pk_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gp_player_definite_info::clear_pk_level() {
  pk_level_ = 0;
  clear_has_pk_level();
}
inline ::google::protobuf::int32 gp_player_definite_info::pk_level() const {
  return pk_level_;
}
inline void gp_player_definite_info::set_pk_level(::google::protobuf::int32 value) {
  set_has_pk_level();
  pk_level_ = value;
}

// optional int32 crc = 9;
inline bool gp_player_definite_info::has_crc() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void gp_player_definite_info::set_has_crc() {
  _has_bits_[0] |= 0x00000200u;
}
inline void gp_player_definite_info::clear_has_crc() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void gp_player_definite_info::clear_crc() {
  crc_ = 0;
  clear_has_crc();
}
inline ::google::protobuf::int32 gp_player_definite_info::crc() const {
  return crc_;
}
inline void gp_player_definite_info::set_crc(::google::protobuf::int32 value) {
  set_has_crc();
  crc_ = value;
}

// required .PB.gp_player_extend_state extend_state = 10;
inline bool gp_player_definite_info::has_extend_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void gp_player_definite_info::set_has_extend_state() {
  _has_bits_[0] |= 0x00000400u;
}
inline void gp_player_definite_info::clear_has_extend_state() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void gp_player_definite_info::clear_extend_state() {
  if (extend_state_ != NULL) extend_state_->::PB::gp_player_extend_state::Clear();
  clear_has_extend_state();
}
inline const ::PB::gp_player_extend_state& gp_player_definite_info::extend_state() const {
  return extend_state_ != NULL ? *extend_state_ : *default_instance_->extend_state_;
}
inline ::PB::gp_player_extend_state* gp_player_definite_info::mutable_extend_state() {
  set_has_extend_state();
  if (extend_state_ == NULL) extend_state_ = new ::PB::gp_player_extend_state;
  return extend_state_;
}
inline ::PB::gp_player_extend_state* gp_player_definite_info::release_extend_state() {
  clear_has_extend_state();
  ::PB::gp_player_extend_state* temp = extend_state_;
  extend_state_ = NULL;
  return temp;
}
inline void gp_player_definite_info::set_allocated_extend_state(::PB::gp_player_extend_state* extend_state) {
  delete extend_state_;
  extend_state_ = extend_state;
  if (extend_state) {
    set_has_extend_state();
  } else {
    clear_has_extend_state();
  }
}

// optional bytes name = 12;
inline bool gp_player_definite_info::has_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void gp_player_definite_info::set_has_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void gp_player_definite_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void gp_player_definite_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& gp_player_definite_info::name() const {
  return *name_;
}
inline void gp_player_definite_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gp_player_definite_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gp_player_definite_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_player_definite_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* gp_player_definite_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gp_player_definite_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes alias = 13;
inline bool gp_player_definite_info::has_alias() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void gp_player_definite_info::set_has_alias() {
  _has_bits_[0] |= 0x00001000u;
}
inline void gp_player_definite_info::clear_has_alias() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void gp_player_definite_info::clear_alias() {
  if (alias_ != &::google::protobuf::internal::kEmptyString) {
    alias_->clear();
  }
  clear_has_alias();
}
inline const ::std::string& gp_player_definite_info::alias() const {
  return *alias_;
}
inline void gp_player_definite_info::set_alias(const ::std::string& value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
}
inline void gp_player_definite_info::set_alias(const char* value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
}
inline void gp_player_definite_info::set_alias(const void* value, size_t size) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    alias_ = new ::std::string;
  }
  alias_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_player_definite_info::mutable_alias() {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    alias_ = new ::std::string;
  }
  return alias_;
}
inline ::std::string* gp_player_definite_info::release_alias() {
  clear_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alias_;
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gp_player_definite_info::set_allocated_alias(::std::string* alias) {
  if (alias_ != &::google::protobuf::internal::kEmptyString) {
    delete alias_;
  }
  if (alias) {
    set_has_alias();
    alias_ = alias;
  } else {
    clear_has_alias();
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 lock_enemy_state = 15;
inline bool gp_player_definite_info::has_lock_enemy_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void gp_player_definite_info::set_has_lock_enemy_state() {
  _has_bits_[0] |= 0x00002000u;
}
inline void gp_player_definite_info::clear_has_lock_enemy_state() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void gp_player_definite_info::clear_lock_enemy_state() {
  lock_enemy_state_ = 0;
  clear_has_lock_enemy_state();
}
inline ::google::protobuf::int32 gp_player_definite_info::lock_enemy_state() const {
  return lock_enemy_state_;
}
inline void gp_player_definite_info::set_lock_enemy_state(::google::protobuf::int32 value) {
  set_has_lock_enemy_state();
  lock_enemy_state_ = value;
}

// -------------------------------------------------------------------

// gp_equip_refresh_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_refresh_result];
inline bool gp_equip_refresh_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_refresh_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_refresh_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_refresh_result::clear_type() {
  type_ = 509;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_equip_refresh_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_refresh_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 location = 2;
inline bool gp_equip_refresh_result::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_refresh_result::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_refresh_result::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_refresh_result::clear_location() {
  location_ = 0u;
  clear_has_location();
}
inline ::google::protobuf::uint32 gp_equip_refresh_result::location() const {
  return location_;
}
inline void gp_equip_refresh_result::set_location(::google::protobuf::uint32 value) {
  set_has_location();
  location_ = value;
}

// required uint32 index = 3;
inline bool gp_equip_refresh_result::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_refresh_result::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_refresh_result::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_refresh_result::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 gp_equip_refresh_result::index() const {
  return index_;
}
inline void gp_equip_refresh_result::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required uint32 count = 4;
inline bool gp_equip_refresh_result::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_refresh_result::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_refresh_result::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_refresh_result::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 gp_equip_refresh_result::count() const {
  return count_;
}
inline void gp_equip_refresh_result::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// gp_equip_gradeup_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_gradeup_result];
inline bool gp_equip_gradeup_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_gradeup_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_gradeup_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_gradeup_result::clear_type() {
  type_ = 559;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_equip_gradeup_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_gradeup_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 ret = 2;
inline bool gp_equip_gradeup_result::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_gradeup_result::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_gradeup_result::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_gradeup_result::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 gp_equip_gradeup_result::ret() const {
  return ret_;
}
inline void gp_equip_gradeup_result::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// required bool special = 3;
inline bool gp_equip_gradeup_result::has_special() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_gradeup_result::set_has_special() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_gradeup_result::clear_has_special() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_gradeup_result::clear_special() {
  special_ = false;
  clear_has_special();
}
inline bool gp_equip_gradeup_result::special() const {
  return special_;
}
inline void gp_equip_gradeup_result::set_special(bool value) {
  set_has_special();
  special_ = value;
}

// -------------------------------------------------------------------

// gp_equip_starup_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_starup_result];
inline bool gp_equip_starup_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_starup_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_starup_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_starup_result::clear_type() {
  type_ = 510;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_equip_starup_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_starup_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 location = 2;
inline bool gp_equip_starup_result::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_starup_result::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_starup_result::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_starup_result::clear_location() {
  location_ = 0u;
  clear_has_location();
}
inline ::google::protobuf::uint32 gp_equip_starup_result::location() const {
  return location_;
}
inline void gp_equip_starup_result::set_location(::google::protobuf::uint32 value) {
  set_has_location();
  location_ = value;
}

// required uint32 index = 3;
inline bool gp_equip_starup_result::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_starup_result::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_starup_result::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_starup_result::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 gp_equip_starup_result::index() const {
  return index_;
}
inline void gp_equip_starup_result::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required bool result = 4;
inline bool gp_equip_starup_result::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_starup_result::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_starup_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_starup_result::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool gp_equip_starup_result::result() const {
  return result_;
}
inline void gp_equip_starup_result::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gp_equip_train_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_train_result];
inline bool gp_equip_train_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_train_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_train_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_train_result::clear_type() {
  type_ = 569;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_equip_train_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_train_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 result = 2;
inline bool gp_equip_train_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_train_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_train_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_train_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gp_equip_train_result::result() const {
  return result_;
}
inline void gp_equip_train_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 prop_index = 3;
inline bool gp_equip_train_result::has_prop_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_train_result::set_has_prop_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_train_result::clear_has_prop_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_train_result::clear_prop_index() {
  prop_index_ = 0;
  clear_has_prop_index();
}
inline ::google::protobuf::int32 gp_equip_train_result::prop_index() const {
  return prop_index_;
}
inline void gp_equip_train_result::set_prop_index(::google::protobuf::int32 value) {
  set_has_prop_index();
  prop_index_ = value;
}

// required bool one_button_up = 4;
inline bool gp_equip_train_result::has_one_button_up() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_train_result::set_has_one_button_up() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_train_result::clear_has_one_button_up() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_train_result::clear_one_button_up() {
  one_button_up_ = false;
  clear_has_one_button_up();
}
inline bool gp_equip_train_result::one_button_up() const {
  return one_button_up_;
}
inline void gp_equip_train_result::set_one_button_up(bool value) {
  set_has_one_button_up();
  one_button_up_ = value;
}

// required bool level_up = 5;
inline bool gp_equip_train_result::has_level_up() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_equip_train_result::set_has_level_up() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_equip_train_result::clear_has_level_up() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_equip_train_result::clear_level_up() {
  level_up_ = false;
  clear_has_level_up();
}
inline bool gp_equip_train_result::level_up() const {
  return level_up_;
}
inline void gp_equip_train_result::set_level_up(bool value) {
  set_has_level_up();
  level_up_ = value;
}

// required int32 add = 6;
inline bool gp_equip_train_result::has_add() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_equip_train_result::set_has_add() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_equip_train_result::clear_has_add() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_equip_train_result::clear_add() {
  add_ = 0;
  clear_has_add();
}
inline ::google::protobuf::int32 gp_equip_train_result::add() const {
  return add_;
}
inline void gp_equip_train_result::set_add(::google::protobuf::int32 value) {
  set_has_add();
  add_ = value;
}

// -------------------------------------------------------------------

// gp_equip_switch_surface_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_switch_surface_result];
inline bool gp_equip_switch_surface_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_switch_surface_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_switch_surface_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_switch_surface_result::clear_type() {
  type_ = 572;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_equip_switch_surface_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_switch_surface_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 result = 2;
inline bool gp_equip_switch_surface_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_switch_surface_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_switch_surface_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_switch_surface_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gp_equip_switch_surface_result::result() const {
  return result_;
}
inline void gp_equip_switch_surface_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 index = 3;
inline bool gp_equip_switch_surface_result::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_switch_surface_result::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_switch_surface_result::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_switch_surface_result::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 gp_equip_switch_surface_result::index() const {
  return index_;
}
inline void gp_equip_switch_surface_result::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// gp_gain_surface

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_gain_surface];
inline bool gp_gain_surface::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_gain_surface::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_gain_surface::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_gain_surface::clear_type() {
  type_ = 573;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_gain_surface::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_gain_surface::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 surface_tid = 2;
inline bool gp_gain_surface::has_surface_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_gain_surface::set_has_surface_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_gain_surface::clear_has_surface_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_gain_surface::clear_surface_tid() {
  surface_tid_ = 0;
  clear_has_surface_tid();
}
inline ::google::protobuf::int32 gp_gain_surface::surface_tid() const {
  return surface_tid_;
}
inline void gp_gain_surface::set_surface_tid(::google::protobuf::int32 value) {
  set_has_surface_tid();
  surface_tid_ = value;
}

// -------------------------------------------------------------------

// gp_revive_times_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_revive_times_info];
inline bool gp_revive_times_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_revive_times_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_revive_times_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_revive_times_info::clear_type() {
  type_ = 511;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_revive_times_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_revive_times_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required sint32 stand_revive_times = 2;
inline bool gp_revive_times_info::has_stand_revive_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_revive_times_info::set_has_stand_revive_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_revive_times_info::clear_has_stand_revive_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_revive_times_info::clear_stand_revive_times() {
  stand_revive_times_ = 0;
  clear_has_stand_revive_times();
}
inline ::google::protobuf::int32 gp_revive_times_info::stand_revive_times() const {
  return stand_revive_times_;
}
inline void gp_revive_times_info::set_stand_revive_times(::google::protobuf::int32 value) {
  set_has_stand_revive_times();
  stand_revive_times_ = value;
}

// required sint32 stand_revive_times_lianxu = 3;
inline bool gp_revive_times_info::has_stand_revive_times_lianxu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_revive_times_info::set_has_stand_revive_times_lianxu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_revive_times_info::clear_has_stand_revive_times_lianxu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_revive_times_info::clear_stand_revive_times_lianxu() {
  stand_revive_times_lianxu_ = 0;
  clear_has_stand_revive_times_lianxu();
}
inline ::google::protobuf::int32 gp_revive_times_info::stand_revive_times_lianxu() const {
  return stand_revive_times_lianxu_;
}
inline void gp_revive_times_info::set_stand_revive_times_lianxu(::google::protobuf::int32 value) {
  set_has_stand_revive_times_lianxu();
  stand_revive_times_lianxu_ = value;
}

// required sint32 perfect_revive_times = 4;
inline bool gp_revive_times_info::has_perfect_revive_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_revive_times_info::set_has_perfect_revive_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_revive_times_info::clear_has_perfect_revive_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_revive_times_info::clear_perfect_revive_times() {
  perfect_revive_times_ = 0;
  clear_has_perfect_revive_times();
}
inline ::google::protobuf::int32 gp_revive_times_info::perfect_revive_times() const {
  return perfect_revive_times_;
}
inline void gp_revive_times_info::set_perfect_revive_times(::google::protobuf::int32 value) {
  set_has_perfect_revive_times();
  perfect_revive_times_ = value;
}

// required sint32 perfect_revive_times_lianxu = 5;
inline bool gp_revive_times_info::has_perfect_revive_times_lianxu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_revive_times_info::set_has_perfect_revive_times_lianxu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_revive_times_info::clear_has_perfect_revive_times_lianxu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_revive_times_info::clear_perfect_revive_times_lianxu() {
  perfect_revive_times_lianxu_ = 0;
  clear_has_perfect_revive_times_lianxu();
}
inline ::google::protobuf::int32 gp_revive_times_info::perfect_revive_times_lianxu() const {
  return perfect_revive_times_lianxu_;
}
inline void gp_revive_times_info::set_perfect_revive_times_lianxu(::google::protobuf::int32 value) {
  set_has_perfect_revive_times_lianxu();
  perfect_revive_times_lianxu_ = value;
}

// -------------------------------------------------------------------

// gp_item_combine_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_item_combine_result];
inline bool gp_item_combine_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_item_combine_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_item_combine_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_item_combine_result::clear_type() {
  type_ = 512;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_item_combine_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_item_combine_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 stamp = 2;
inline bool gp_item_combine_result::has_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_item_combine_result::set_has_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_item_combine_result::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_item_combine_result::clear_stamp() {
  stamp_ = 0;
  clear_has_stamp();
}
inline ::google::protobuf::int32 gp_item_combine_result::stamp() const {
  return stamp_;
}
inline void gp_item_combine_result::set_stamp(::google::protobuf::int32 value) {
  set_has_stamp();
  stamp_ = value;
}

// required int32 result = 3;
inline bool gp_item_combine_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_item_combine_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_item_combine_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_item_combine_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gp_item_combine_result::result() const {
  return result_;
}
inline void gp_item_combine_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gp_nation_escort_mount

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_nation_escort_mount];
inline bool gp_nation_escort_mount::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_nation_escort_mount::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_nation_escort_mount::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_nation_escort_mount::clear_type() {
  type_ = 513;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_nation_escort_mount::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_nation_escort_mount::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool gp_nation_escort_mount::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_nation_escort_mount::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_nation_escort_mount::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_nation_escort_mount::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 gp_nation_escort_mount::roleid() const {
  return roleid_;
}
inline void gp_nation_escort_mount::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int64 npcid = 3;
inline bool gp_nation_escort_mount::has_npcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_nation_escort_mount::set_has_npcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_nation_escort_mount::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_nation_escort_mount::clear_npcid() {
  npcid_ = GOOGLE_LONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::int64 gp_nation_escort_mount::npcid() const {
  return npcid_;
}
inline void gp_nation_escort_mount::set_npcid(::google::protobuf::int64 value) {
  set_has_npcid();
  npcid_ = value;
}

// required bool mount = 4;
inline bool gp_nation_escort_mount::has_mount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_nation_escort_mount::set_has_mount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_nation_escort_mount::clear_has_mount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_nation_escort_mount::clear_mount() {
  mount_ = false;
  clear_has_mount();
}
inline bool gp_nation_escort_mount::mount() const {
  return mount_;
}
inline void gp_nation_escort_mount::set_mount(bool value) {
  set_has_mount();
  mount_ = value;
}

// -------------------------------------------------------------------

// gp_nation_escort_locate

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_nation_escort_locate];
inline bool gp_nation_escort_locate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_nation_escort_locate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_nation_escort_locate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_nation_escort_locate::clear_type() {
  type_ = 535;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_nation_escort_locate::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_nation_escort_locate::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 npcid = 2;
inline bool gp_nation_escort_locate::has_npcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_nation_escort_locate::set_has_npcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_nation_escort_locate::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_nation_escort_locate::clear_npcid() {
  npcid_ = GOOGLE_LONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::int64 gp_nation_escort_locate::npcid() const {
  return npcid_;
}
inline void gp_nation_escort_locate::set_npcid(::google::protobuf::int64 value) {
  set_has_npcid();
  npcid_ = value;
}

// required uint32 scene_tag = 3;
inline bool gp_nation_escort_locate::has_scene_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_nation_escort_locate::set_has_scene_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_nation_escort_locate::clear_has_scene_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_nation_escort_locate::clear_scene_tag() {
  scene_tag_ = 0u;
  clear_has_scene_tag();
}
inline ::google::protobuf::uint32 gp_nation_escort_locate::scene_tag() const {
  return scene_tag_;
}
inline void gp_nation_escort_locate::set_scene_tag(::google::protobuf::uint32 value) {
  set_has_scene_tag();
  scene_tag_ = value;
}

// required uint32 mirrorid = 4;
inline bool gp_nation_escort_locate::has_mirrorid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_nation_escort_locate::set_has_mirrorid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_nation_escort_locate::clear_has_mirrorid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_nation_escort_locate::clear_mirrorid() {
  mirrorid_ = 0u;
  clear_has_mirrorid();
}
inline ::google::protobuf::uint32 gp_nation_escort_locate::mirrorid() const {
  return mirrorid_;
}
inline void gp_nation_escort_locate::set_mirrorid(::google::protobuf::uint32 value) {
  set_has_mirrorid();
  mirrorid_ = value;
}

// required .PB.a3d_pos pos = 5;
inline bool gp_nation_escort_locate::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_nation_escort_locate::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_nation_escort_locate::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_nation_escort_locate::clear_pos() {
  if (pos_ != NULL) pos_->::PB::a3d_pos::Clear();
  clear_has_pos();
}
inline const ::PB::a3d_pos& gp_nation_escort_locate::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::PB::a3d_pos* gp_nation_escort_locate::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PB::a3d_pos;
  return pos_;
}
inline ::PB::a3d_pos* gp_nation_escort_locate::release_pos() {
  clear_has_pos();
  ::PB::a3d_pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void gp_nation_escort_locate::set_allocated_pos(::PB::a3d_pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// -------------------------------------------------------------------

// gp_escort_speed_state

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_escort_speed_state];
inline bool gp_escort_speed_state::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_escort_speed_state::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_escort_speed_state::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_escort_speed_state::clear_type() {
  type_ = 541;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_escort_speed_state::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_escort_speed_state::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 state = 2;
inline bool gp_escort_speed_state::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_escort_speed_state::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_escort_speed_state::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_escort_speed_state::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 gp_escort_speed_state::state() const {
  return state_;
}
inline void gp_escort_speed_state::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// gp_transform_state

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_transform_state];
inline bool gp_transform_state::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_transform_state::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_transform_state::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_transform_state::clear_type() {
  type_ = 552;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_transform_state::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_transform_state::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool gp_transform_state::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_transform_state::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_transform_state::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_transform_state::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 gp_transform_state::roleid() const {
  return roleid_;
}
inline void gp_transform_state::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required uint32 tid = 3;
inline bool gp_transform_state::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_transform_state::set_has_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_transform_state::clear_has_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_transform_state::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 gp_transform_state::tid() const {
  return tid_;
}
inline void gp_transform_state::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
}

// -------------------------------------------------------------------

// gp_nation_officer_state

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_nation_officer_state];
inline bool gp_nation_officer_state::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_nation_officer_state::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_nation_officer_state::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_nation_officer_state::clear_type() {
  type_ = 577;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_nation_officer_state::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_nation_officer_state::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool gp_nation_officer_state::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_nation_officer_state::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_nation_officer_state::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_nation_officer_state::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 gp_nation_officer_state::roleid() const {
  return roleid_;
}
inline void gp_nation_officer_state::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 nation_officer = 3;
inline bool gp_nation_officer_state::has_nation_officer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_nation_officer_state::set_has_nation_officer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_nation_officer_state::clear_has_nation_officer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_nation_officer_state::clear_nation_officer() {
  nation_officer_ = 0;
  clear_has_nation_officer();
}
inline ::google::protobuf::int32 gp_nation_officer_state::nation_officer() const {
  return nation_officer_;
}
inline void gp_nation_officer_state::set_nation_officer(::google::protobuf::int32 value) {
  set_has_nation_officer();
  nation_officer_ = value;
}

// -------------------------------------------------------------------

// gp_broadcast_value_change

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_broadcast_value_change];
inline bool gp_broadcast_value_change::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_broadcast_value_change::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_broadcast_value_change::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_broadcast_value_change::clear_type() {
  type_ = 554;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_broadcast_value_change::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_broadcast_value_change::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool gp_broadcast_value_change::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_broadcast_value_change::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_broadcast_value_change::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_broadcast_value_change::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 gp_broadcast_value_change::roleid() const {
  return roleid_;
}
inline void gp_broadcast_value_change::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required .PB.gp_broadcast_value_change.VALUE_TYPE value_type = 3;
inline bool gp_broadcast_value_change::has_value_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_broadcast_value_change::set_has_value_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_broadcast_value_change::clear_has_value_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_broadcast_value_change::clear_value_type() {
  value_type_ = 1;
  clear_has_value_type();
}
inline ::PB::gp_broadcast_value_change_VALUE_TYPE gp_broadcast_value_change::value_type() const {
  return static_cast< ::PB::gp_broadcast_value_change_VALUE_TYPE >(value_type_);
}
inline void gp_broadcast_value_change::set_value_type(::PB::gp_broadcast_value_change_VALUE_TYPE value) {
  assert(::PB::gp_broadcast_value_change_VALUE_TYPE_IsValid(value));
  set_has_value_type();
  value_type_ = value;
}

// required int32 new_value = 4;
inline bool gp_broadcast_value_change::has_new_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_broadcast_value_change::set_has_new_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_broadcast_value_change::clear_has_new_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_broadcast_value_change::clear_new_value() {
  new_value_ = 0;
  clear_has_new_value();
}
inline ::google::protobuf::int32 gp_broadcast_value_change::new_value() const {
  return new_value_;
}
inline void gp_broadcast_value_change::set_new_value(::google::protobuf::int32 value) {
  set_has_new_value();
  new_value_ = value;
}

// -------------------------------------------------------------------

// gp_object_change_faction

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_object_change_faction];
inline bool gp_object_change_faction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_object_change_faction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_object_change_faction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_object_change_faction::clear_type() {
  type_ = 553;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_object_change_faction::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_object_change_faction::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 id = 2;
inline bool gp_object_change_faction::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_object_change_faction::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_object_change_faction::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_object_change_faction::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 gp_object_change_faction::id() const {
  return id_;
}
inline void gp_object_change_faction::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required uint32 faction = 3;
inline bool gp_object_change_faction::has_faction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_object_change_faction::set_has_faction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_object_change_faction::clear_has_faction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_object_change_faction::clear_faction() {
  faction_ = 0u;
  clear_has_faction();
}
inline ::google::protobuf::uint32 gp_object_change_faction::faction() const {
  return faction_;
}
inline void gp_object_change_faction::set_faction(::google::protobuf::uint32 value) {
  set_has_faction();
  faction_ = value;
}

// -------------------------------------------------------------------

// gp_wine_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_wine_info];
inline bool gp_wine_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_wine_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_wine_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_wine_info::clear_type() {
  type_ = 542;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_wine_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_wine_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 wine_config_id = 2;
inline bool gp_wine_info::has_wine_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_wine_info::set_has_wine_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_wine_info::clear_has_wine_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_wine_info::clear_wine_config_id() {
  wine_config_id_ = 0u;
  clear_has_wine_config_id();
}
inline ::google::protobuf::uint32 gp_wine_info::wine_config_id() const {
  return wine_config_id_;
}
inline void gp_wine_info::set_wine_config_id(::google::protobuf::uint32 value) {
  set_has_wine_config_id();
  wine_config_id_ = value;
}

// required uint32 wine_remain_drink = 3;
inline bool gp_wine_info::has_wine_remain_drink() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_wine_info::set_has_wine_remain_drink() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_wine_info::clear_has_wine_remain_drink() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_wine_info::clear_wine_remain_drink() {
  wine_remain_drink_ = 0u;
  clear_has_wine_remain_drink();
}
inline ::google::protobuf::uint32 gp_wine_info::wine_remain_drink() const {
  return wine_remain_drink_;
}
inline void gp_wine_info::set_wine_remain_drink(::google::protobuf::uint32 value) {
  set_has_wine_remain_drink();
  wine_remain_drink_ = value;
}

// -------------------------------------------------------------------

// gp_minigame_operate_notify

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_minigame_operate_notify];
inline bool gp_minigame_operate_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_minigame_operate_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_minigame_operate_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_minigame_operate_notify::clear_type() {
  type_ = 543;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_minigame_operate_notify::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_minigame_operate_notify::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 oper_man = 2;
inline bool gp_minigame_operate_notify::has_oper_man() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_minigame_operate_notify::set_has_oper_man() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_minigame_operate_notify::clear_has_oper_man() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_minigame_operate_notify::clear_oper_man() {
  oper_man_ = GOOGLE_LONGLONG(0);
  clear_has_oper_man();
}
inline ::google::protobuf::int64 gp_minigame_operate_notify::oper_man() const {
  return oper_man_;
}
inline void gp_minigame_operate_notify::set_oper_man(::google::protobuf::int64 value) {
  set_has_oper_man();
  oper_man_ = value;
}

// required uint32 oper = 3;
inline bool gp_minigame_operate_notify::has_oper() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_minigame_operate_notify::set_has_oper() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_minigame_operate_notify::clear_has_oper() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_minigame_operate_notify::clear_oper() {
  oper_ = 0u;
  clear_has_oper();
}
inline ::google::protobuf::uint32 gp_minigame_operate_notify::oper() const {
  return oper_;
}
inline void gp_minigame_operate_notify::set_oper(::google::protobuf::uint32 value) {
  set_has_oper();
  oper_ = value;
}

// required uint32 param1 = 4;
inline bool gp_minigame_operate_notify::has_param1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_minigame_operate_notify::set_has_param1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_minigame_operate_notify::clear_has_param1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_minigame_operate_notify::clear_param1() {
  param1_ = 0u;
  clear_has_param1();
}
inline ::google::protobuf::uint32 gp_minigame_operate_notify::param1() const {
  return param1_;
}
inline void gp_minigame_operate_notify::set_param1(::google::protobuf::uint32 value) {
  set_has_param1();
  param1_ = value;
}

// required uint32 param2 = 5;
inline bool gp_minigame_operate_notify::has_param2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_minigame_operate_notify::set_has_param2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_minigame_operate_notify::clear_has_param2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_minigame_operate_notify::clear_param2() {
  param2_ = 0u;
  clear_has_param2();
}
inline ::google::protobuf::uint32 gp_minigame_operate_notify::param2() const {
  return param2_;
}
inline void gp_minigame_operate_notify::set_param2(::google::protobuf::uint32 value) {
  set_has_param2();
  param2_ = value;
}

// required bytes data = 6;
inline bool gp_minigame_operate_notify::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_minigame_operate_notify::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_minigame_operate_notify::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_minigame_operate_notify::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& gp_minigame_operate_notify::data() const {
  return *data_;
}
inline void gp_minigame_operate_notify::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void gp_minigame_operate_notify::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void gp_minigame_operate_notify::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_minigame_operate_notify::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* gp_minigame_operate_notify::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gp_minigame_operate_notify::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gp_equip_transfer_reulst

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_transfer_result];
inline bool gp_equip_transfer_reulst::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_transfer_reulst::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_transfer_reulst::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_transfer_reulst::clear_type() {
  type_ = 514;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_equip_transfer_reulst::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_transfer_reulst::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 src_location = 2;
inline bool gp_equip_transfer_reulst::has_src_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_transfer_reulst::set_has_src_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_transfer_reulst::clear_has_src_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_transfer_reulst::clear_src_location() {
  src_location_ = 0u;
  clear_has_src_location();
}
inline ::google::protobuf::uint32 gp_equip_transfer_reulst::src_location() const {
  return src_location_;
}
inline void gp_equip_transfer_reulst::set_src_location(::google::protobuf::uint32 value) {
  set_has_src_location();
  src_location_ = value;
}

// required uint32 src_index = 3;
inline bool gp_equip_transfer_reulst::has_src_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_transfer_reulst::set_has_src_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_transfer_reulst::clear_has_src_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_transfer_reulst::clear_src_index() {
  src_index_ = 0u;
  clear_has_src_index();
}
inline ::google::protobuf::uint32 gp_equip_transfer_reulst::src_index() const {
  return src_index_;
}
inline void gp_equip_transfer_reulst::set_src_index(::google::protobuf::uint32 value) {
  set_has_src_index();
  src_index_ = value;
}

// required uint32 dst_location = 4;
inline bool gp_equip_transfer_reulst::has_dst_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_transfer_reulst::set_has_dst_location() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_transfer_reulst::clear_has_dst_location() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_transfer_reulst::clear_dst_location() {
  dst_location_ = 0u;
  clear_has_dst_location();
}
inline ::google::protobuf::uint32 gp_equip_transfer_reulst::dst_location() const {
  return dst_location_;
}
inline void gp_equip_transfer_reulst::set_dst_location(::google::protobuf::uint32 value) {
  set_has_dst_location();
  dst_location_ = value;
}

// required uint32 dst_index = 5;
inline bool gp_equip_transfer_reulst::has_dst_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_equip_transfer_reulst::set_has_dst_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_equip_transfer_reulst::clear_has_dst_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_equip_transfer_reulst::clear_dst_index() {
  dst_index_ = 0u;
  clear_has_dst_index();
}
inline ::google::protobuf::uint32 gp_equip_transfer_reulst::dst_index() const {
  return dst_index_;
}
inline void gp_equip_transfer_reulst::set_dst_index(::google::protobuf::uint32 value) {
  set_has_dst_index();
  dst_index_ = value;
}

// required int32 result = 6;
inline bool gp_equip_transfer_reulst::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_equip_transfer_reulst::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_equip_transfer_reulst::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_equip_transfer_reulst::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gp_equip_transfer_reulst::result() const {
  return result_;
}
inline void gp_equip_transfer_reulst::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gp_equip_refine_reulst

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_refine_result];
inline bool gp_equip_refine_reulst::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_refine_reulst::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_refine_reulst::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_refine_reulst::clear_type() {
  type_ = 565;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_equip_refine_reulst::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_refine_reulst::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 main_location = 2;
inline bool gp_equip_refine_reulst::has_main_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_refine_reulst::set_has_main_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_refine_reulst::clear_has_main_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_refine_reulst::clear_main_location() {
  main_location_ = 0u;
  clear_has_main_location();
}
inline ::google::protobuf::uint32 gp_equip_refine_reulst::main_location() const {
  return main_location_;
}
inline void gp_equip_refine_reulst::set_main_location(::google::protobuf::uint32 value) {
  set_has_main_location();
  main_location_ = value;
}

// required uint32 main_index = 3;
inline bool gp_equip_refine_reulst::has_main_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_refine_reulst::set_has_main_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_refine_reulst::clear_has_main_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_refine_reulst::clear_main_index() {
  main_index_ = 0u;
  clear_has_main_index();
}
inline ::google::protobuf::uint32 gp_equip_refine_reulst::main_index() const {
  return main_index_;
}
inline void gp_equip_refine_reulst::set_main_index(::google::protobuf::uint32 value) {
  set_has_main_index();
  main_index_ = value;
}

// required uint32 material_location = 4;
inline bool gp_equip_refine_reulst::has_material_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_refine_reulst::set_has_material_location() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_refine_reulst::clear_has_material_location() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_refine_reulst::clear_material_location() {
  material_location_ = 0u;
  clear_has_material_location();
}
inline ::google::protobuf::uint32 gp_equip_refine_reulst::material_location() const {
  return material_location_;
}
inline void gp_equip_refine_reulst::set_material_location(::google::protobuf::uint32 value) {
  set_has_material_location();
  material_location_ = value;
}

// required uint32 material_index = 5;
inline bool gp_equip_refine_reulst::has_material_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_equip_refine_reulst::set_has_material_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_equip_refine_reulst::clear_has_material_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_equip_refine_reulst::clear_material_index() {
  material_index_ = 0u;
  clear_has_material_index();
}
inline ::google::protobuf::uint32 gp_equip_refine_reulst::material_index() const {
  return material_index_;
}
inline void gp_equip_refine_reulst::set_material_index(::google::protobuf::uint32 value) {
  set_has_material_index();
  material_index_ = value;
}

// required int32 result = 6;
inline bool gp_equip_refine_reulst::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_equip_refine_reulst::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_equip_refine_reulst::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_equip_refine_reulst::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gp_equip_refine_reulst::result() const {
  return result_;
}
inline void gp_equip_refine_reulst::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 random_index = 7;
inline bool gp_equip_refine_reulst::has_random_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_equip_refine_reulst::set_has_random_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_equip_refine_reulst::clear_has_random_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_equip_refine_reulst::clear_random_index() {
  random_index_ = 0;
  clear_has_random_index();
}
inline ::google::protobuf::int32 gp_equip_refine_reulst::random_index() const {
  return random_index_;
}
inline void gp_equip_refine_reulst::set_random_index(::google::protobuf::int32 value) {
  set_has_random_index();
  random_index_ = value;
}

// -------------------------------------------------------------------

// gp_equip_attach_gem_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_attach_gem_result];
inline bool gp_equip_attach_gem_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_attach_gem_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_attach_gem_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_attach_gem_result::clear_type() {
  type_ = 563;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_equip_attach_gem_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_attach_gem_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 equip_index = 2;
inline bool gp_equip_attach_gem_result::has_equip_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_attach_gem_result::set_has_equip_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_attach_gem_result::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_attach_gem_result::clear_equip_index() {
  equip_index_ = 0u;
  clear_has_equip_index();
}
inline ::google::protobuf::uint32 gp_equip_attach_gem_result::equip_index() const {
  return equip_index_;
}
inline void gp_equip_attach_gem_result::set_equip_index(::google::protobuf::uint32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// required uint32 hole_index = 3;
inline bool gp_equip_attach_gem_result::has_hole_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_attach_gem_result::set_has_hole_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_attach_gem_result::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_attach_gem_result::clear_hole_index() {
  hole_index_ = 0u;
  clear_has_hole_index();
}
inline ::google::protobuf::uint32 gp_equip_attach_gem_result::hole_index() const {
  return hole_index_;
}
inline void gp_equip_attach_gem_result::set_hole_index(::google::protobuf::uint32 value) {
  set_has_hole_index();
  hole_index_ = value;
}

// required int32 result = 4;
inline bool gp_equip_attach_gem_result::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_attach_gem_result::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_attach_gem_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_attach_gem_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gp_equip_attach_gem_result::result() const {
  return result_;
}
inline void gp_equip_attach_gem_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gp_equip_detach_gem_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_detach_gem_result];
inline bool gp_equip_detach_gem_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_detach_gem_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_detach_gem_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_detach_gem_result::clear_type() {
  type_ = 576;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_equip_detach_gem_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_detach_gem_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 equip_index = 2;
inline bool gp_equip_detach_gem_result::has_equip_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_detach_gem_result::set_has_equip_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_detach_gem_result::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_detach_gem_result::clear_equip_index() {
  equip_index_ = 0u;
  clear_has_equip_index();
}
inline ::google::protobuf::uint32 gp_equip_detach_gem_result::equip_index() const {
  return equip_index_;
}
inline void gp_equip_detach_gem_result::set_equip_index(::google::protobuf::uint32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// required uint32 hole_index = 3;
inline bool gp_equip_detach_gem_result::has_hole_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_detach_gem_result::set_has_hole_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_detach_gem_result::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_detach_gem_result::clear_hole_index() {
  hole_index_ = 0u;
  clear_has_hole_index();
}
inline ::google::protobuf::uint32 gp_equip_detach_gem_result::hole_index() const {
  return hole_index_;
}
inline void gp_equip_detach_gem_result::set_hole_index(::google::protobuf::uint32 value) {
  set_has_hole_index();
  hole_index_ = value;
}

// required int32 result = 4;
inline bool gp_equip_detach_gem_result::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_detach_gem_result::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_detach_gem_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_detach_gem_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gp_equip_detach_gem_result::result() const {
  return result_;
}
inline void gp_equip_detach_gem_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gp_equip_attach_gem_upgrade_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_attach_gem_upgrade_result];
inline bool gp_equip_attach_gem_upgrade_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_attach_gem_upgrade_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_attach_gem_upgrade_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_attach_gem_upgrade_result::clear_type() {
  type_ = 574;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_equip_attach_gem_upgrade_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_attach_gem_upgrade_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 equip_index = 2;
inline bool gp_equip_attach_gem_upgrade_result::has_equip_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_attach_gem_upgrade_result::set_has_equip_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_attach_gem_upgrade_result::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_attach_gem_upgrade_result::clear_equip_index() {
  equip_index_ = 0u;
  clear_has_equip_index();
}
inline ::google::protobuf::uint32 gp_equip_attach_gem_upgrade_result::equip_index() const {
  return equip_index_;
}
inline void gp_equip_attach_gem_upgrade_result::set_equip_index(::google::protobuf::uint32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// required uint32 hole_index = 3;
inline bool gp_equip_attach_gem_upgrade_result::has_hole_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_attach_gem_upgrade_result::set_has_hole_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_attach_gem_upgrade_result::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_attach_gem_upgrade_result::clear_hole_index() {
  hole_index_ = 0u;
  clear_has_hole_index();
}
inline ::google::protobuf::uint32 gp_equip_attach_gem_upgrade_result::hole_index() const {
  return hole_index_;
}
inline void gp_equip_attach_gem_upgrade_result::set_hole_index(::google::protobuf::uint32 value) {
  set_has_hole_index();
  hole_index_ = value;
}

// required int32 result = 4;
inline bool gp_equip_attach_gem_upgrade_result::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_attach_gem_upgrade_result::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_attach_gem_upgrade_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_attach_gem_upgrade_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gp_equip_attach_gem_upgrade_result::result() const {
  return result_;
}
inline void gp_equip_attach_gem_upgrade_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gp_bingfa_info_bingfa_cell

// required int32 bingfa_id = 1;
inline bool gp_bingfa_info_bingfa_cell::has_bingfa_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_bingfa_info_bingfa_cell::set_has_bingfa_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_bingfa_info_bingfa_cell::clear_has_bingfa_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_bingfa_info_bingfa_cell::clear_bingfa_id() {
  bingfa_id_ = 0;
  clear_has_bingfa_id();
}
inline ::google::protobuf::int32 gp_bingfa_info_bingfa_cell::bingfa_id() const {
  return bingfa_id_;
}
inline void gp_bingfa_info_bingfa_cell::set_bingfa_id(::google::protobuf::int32 value) {
  set_has_bingfa_id();
  bingfa_id_ = value;
}

// required int32 bingfa_level = 2;
inline bool gp_bingfa_info_bingfa_cell::has_bingfa_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_bingfa_info_bingfa_cell::set_has_bingfa_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_bingfa_info_bingfa_cell::clear_has_bingfa_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_bingfa_info_bingfa_cell::clear_bingfa_level() {
  bingfa_level_ = 0;
  clear_has_bingfa_level();
}
inline ::google::protobuf::int32 gp_bingfa_info_bingfa_cell::bingfa_level() const {
  return bingfa_level_;
}
inline void gp_bingfa_info_bingfa_cell::set_bingfa_level(::google::protobuf::int32 value) {
  set_has_bingfa_level();
  bingfa_level_ = value;
}

// -------------------------------------------------------------------

// gp_bingfa_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_bingfa_info];
inline bool gp_bingfa_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_bingfa_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_bingfa_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_bingfa_info::clear_type() {
  type_ = 536;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_bingfa_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_bingfa_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 location = 2;
inline bool gp_bingfa_info::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_bingfa_info::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_bingfa_info::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_bingfa_info::clear_location() {
  location_ = 0;
  clear_has_location();
}
inline ::google::protobuf::int32 gp_bingfa_info::location() const {
  return location_;
}
inline void gp_bingfa_info::set_location(::google::protobuf::int32 value) {
  set_has_location();
  location_ = value;
}

// required .PB.gp_bingfa_info.BINGFA_INFO_TYPE info_type = 3;
inline bool gp_bingfa_info::has_info_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_bingfa_info::set_has_info_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_bingfa_info::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_bingfa_info::clear_info_type() {
  info_type_ = 1;
  clear_has_info_type();
}
inline ::PB::gp_bingfa_info_BINGFA_INFO_TYPE gp_bingfa_info::info_type() const {
  return static_cast< ::PB::gp_bingfa_info_BINGFA_INFO_TYPE >(info_type_);
}
inline void gp_bingfa_info::set_info_type(::PB::gp_bingfa_info_BINGFA_INFO_TYPE value) {
  assert(::PB::gp_bingfa_info_BINGFA_INFO_TYPE_IsValid(value));
  set_has_info_type();
  info_type_ = value;
}

// repeated .PB.gp_bingfa_info.bingfa_cell bingfa_cells = 4;
inline int gp_bingfa_info::bingfa_cells_size() const {
  return bingfa_cells_.size();
}
inline void gp_bingfa_info::clear_bingfa_cells() {
  bingfa_cells_.Clear();
}
inline const ::PB::gp_bingfa_info_bingfa_cell& gp_bingfa_info::bingfa_cells(int index) const {
  return bingfa_cells_.Get(index);
}
inline ::PB::gp_bingfa_info_bingfa_cell* gp_bingfa_info::mutable_bingfa_cells(int index) {
  return bingfa_cells_.Mutable(index);
}
inline ::PB::gp_bingfa_info_bingfa_cell* gp_bingfa_info::add_bingfa_cells() {
  return bingfa_cells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_bingfa_info_bingfa_cell >&
gp_bingfa_info::bingfa_cells() const {
  return bingfa_cells_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::gp_bingfa_info_bingfa_cell >*
gp_bingfa_info::mutable_bingfa_cells() {
  return &bingfa_cells_;
}

// -------------------------------------------------------------------

// gp_wuhun_info_wuhun_cell

// required int32 wuhun_node_id = 1;
inline bool gp_wuhun_info_wuhun_cell::has_wuhun_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_wuhun_info_wuhun_cell::set_has_wuhun_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_wuhun_info_wuhun_cell::clear_has_wuhun_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_wuhun_info_wuhun_cell::clear_wuhun_node_id() {
  wuhun_node_id_ = 0;
  clear_has_wuhun_node_id();
}
inline ::google::protobuf::int32 gp_wuhun_info_wuhun_cell::wuhun_node_id() const {
  return wuhun_node_id_;
}
inline void gp_wuhun_info_wuhun_cell::set_wuhun_node_id(::google::protobuf::int32 value) {
  set_has_wuhun_node_id();
  wuhun_node_id_ = value;
}

// required int32 wuhun_node_level = 2;
inline bool gp_wuhun_info_wuhun_cell::has_wuhun_node_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_wuhun_info_wuhun_cell::set_has_wuhun_node_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_wuhun_info_wuhun_cell::clear_has_wuhun_node_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_wuhun_info_wuhun_cell::clear_wuhun_node_level() {
  wuhun_node_level_ = 0;
  clear_has_wuhun_node_level();
}
inline ::google::protobuf::int32 gp_wuhun_info_wuhun_cell::wuhun_node_level() const {
  return wuhun_node_level_;
}
inline void gp_wuhun_info_wuhun_cell::set_wuhun_node_level(::google::protobuf::int32 value) {
  set_has_wuhun_node_level();
  wuhun_node_level_ = value;
}

// -------------------------------------------------------------------

// gp_wuhun_info_wuhun_upgrade

// optional int32 upgrade_type = 1;
inline bool gp_wuhun_info_wuhun_upgrade::has_upgrade_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_wuhun_info_wuhun_upgrade::set_has_upgrade_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_wuhun_info_wuhun_upgrade::clear_has_upgrade_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_wuhun_info_wuhun_upgrade::clear_upgrade_type() {
  upgrade_type_ = 0;
  clear_has_upgrade_type();
}
inline ::google::protobuf::int32 gp_wuhun_info_wuhun_upgrade::upgrade_type() const {
  return upgrade_type_;
}
inline void gp_wuhun_info_wuhun_upgrade::set_upgrade_type(::google::protobuf::int32 value) {
  set_has_upgrade_type();
  upgrade_type_ = value;
}

// optional int32 upgrade_node_id = 2;
inline bool gp_wuhun_info_wuhun_upgrade::has_upgrade_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_wuhun_info_wuhun_upgrade::set_has_upgrade_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_wuhun_info_wuhun_upgrade::clear_has_upgrade_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_wuhun_info_wuhun_upgrade::clear_upgrade_node_id() {
  upgrade_node_id_ = 0;
  clear_has_upgrade_node_id();
}
inline ::google::protobuf::int32 gp_wuhun_info_wuhun_upgrade::upgrade_node_id() const {
  return upgrade_node_id_;
}
inline void gp_wuhun_info_wuhun_upgrade::set_upgrade_node_id(::google::protobuf::int32 value) {
  set_has_upgrade_node_id();
  upgrade_node_id_ = value;
}

// optional int32 upgrade_finish_time = 3;
inline bool gp_wuhun_info_wuhun_upgrade::has_upgrade_finish_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_wuhun_info_wuhun_upgrade::set_has_upgrade_finish_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_wuhun_info_wuhun_upgrade::clear_has_upgrade_finish_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_wuhun_info_wuhun_upgrade::clear_upgrade_finish_time() {
  upgrade_finish_time_ = 0;
  clear_has_upgrade_finish_time();
}
inline ::google::protobuf::int32 gp_wuhun_info_wuhun_upgrade::upgrade_finish_time() const {
  return upgrade_finish_time_;
}
inline void gp_wuhun_info_wuhun_upgrade::set_upgrade_finish_time(::google::protobuf::int32 value) {
  set_has_upgrade_finish_time();
  upgrade_finish_time_ = value;
}

// optional int32 upgrade_task = 4;
inline bool gp_wuhun_info_wuhun_upgrade::has_upgrade_task() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_wuhun_info_wuhun_upgrade::set_has_upgrade_task() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_wuhun_info_wuhun_upgrade::clear_has_upgrade_task() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_wuhun_info_wuhun_upgrade::clear_upgrade_task() {
  upgrade_task_ = 0;
  clear_has_upgrade_task();
}
inline ::google::protobuf::int32 gp_wuhun_info_wuhun_upgrade::upgrade_task() const {
  return upgrade_task_;
}
inline void gp_wuhun_info_wuhun_upgrade::set_upgrade_task(::google::protobuf::int32 value) {
  set_has_upgrade_task();
  upgrade_task_ = value;
}

// -------------------------------------------------------------------

// gp_wuhun_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_wuhun_info];
inline bool gp_wuhun_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_wuhun_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_wuhun_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_wuhun_info::clear_type() {
  type_ = 592;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_wuhun_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_wuhun_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_wuhun_info.WUHUN_INFO_TYPE info_type = 2;
inline bool gp_wuhun_info::has_info_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_wuhun_info::set_has_info_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_wuhun_info::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_wuhun_info::clear_info_type() {
  info_type_ = 1;
  clear_has_info_type();
}
inline ::PB::gp_wuhun_info_WUHUN_INFO_TYPE gp_wuhun_info::info_type() const {
  return static_cast< ::PB::gp_wuhun_info_WUHUN_INFO_TYPE >(info_type_);
}
inline void gp_wuhun_info::set_info_type(::PB::gp_wuhun_info_WUHUN_INFO_TYPE value) {
  assert(::PB::gp_wuhun_info_WUHUN_INFO_TYPE_IsValid(value));
  set_has_info_type();
  info_type_ = value;
}

// repeated int32 wuhun_pages = 3;
inline int gp_wuhun_info::wuhun_pages_size() const {
  return wuhun_pages_.size();
}
inline void gp_wuhun_info::clear_wuhun_pages() {
  wuhun_pages_.Clear();
}
inline ::google::protobuf::int32 gp_wuhun_info::wuhun_pages(int index) const {
  return wuhun_pages_.Get(index);
}
inline void gp_wuhun_info::set_wuhun_pages(int index, ::google::protobuf::int32 value) {
  wuhun_pages_.Set(index, value);
}
inline void gp_wuhun_info::add_wuhun_pages(::google::protobuf::int32 value) {
  wuhun_pages_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gp_wuhun_info::wuhun_pages() const {
  return wuhun_pages_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gp_wuhun_info::mutable_wuhun_pages() {
  return &wuhun_pages_;
}

// repeated .PB.gp_wuhun_info.wuhun_cell wuhun_nodes = 4;
inline int gp_wuhun_info::wuhun_nodes_size() const {
  return wuhun_nodes_.size();
}
inline void gp_wuhun_info::clear_wuhun_nodes() {
  wuhun_nodes_.Clear();
}
inline const ::PB::gp_wuhun_info_wuhun_cell& gp_wuhun_info::wuhun_nodes(int index) const {
  return wuhun_nodes_.Get(index);
}
inline ::PB::gp_wuhun_info_wuhun_cell* gp_wuhun_info::mutable_wuhun_nodes(int index) {
  return wuhun_nodes_.Mutable(index);
}
inline ::PB::gp_wuhun_info_wuhun_cell* gp_wuhun_info::add_wuhun_nodes() {
  return wuhun_nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_wuhun_info_wuhun_cell >&
gp_wuhun_info::wuhun_nodes() const {
  return wuhun_nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::gp_wuhun_info_wuhun_cell >*
gp_wuhun_info::mutable_wuhun_nodes() {
  return &wuhun_nodes_;
}

// optional .PB.gp_wuhun_info.wuhun_upgrade upgrade_info = 5;
inline bool gp_wuhun_info::has_upgrade_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_wuhun_info::set_has_upgrade_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_wuhun_info::clear_has_upgrade_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_wuhun_info::clear_upgrade_info() {
  if (upgrade_info_ != NULL) upgrade_info_->::PB::gp_wuhun_info_wuhun_upgrade::Clear();
  clear_has_upgrade_info();
}
inline const ::PB::gp_wuhun_info_wuhun_upgrade& gp_wuhun_info::upgrade_info() const {
  return upgrade_info_ != NULL ? *upgrade_info_ : *default_instance_->upgrade_info_;
}
inline ::PB::gp_wuhun_info_wuhun_upgrade* gp_wuhun_info::mutable_upgrade_info() {
  set_has_upgrade_info();
  if (upgrade_info_ == NULL) upgrade_info_ = new ::PB::gp_wuhun_info_wuhun_upgrade;
  return upgrade_info_;
}
inline ::PB::gp_wuhun_info_wuhun_upgrade* gp_wuhun_info::release_upgrade_info() {
  clear_has_upgrade_info();
  ::PB::gp_wuhun_info_wuhun_upgrade* temp = upgrade_info_;
  upgrade_info_ = NULL;
  return temp;
}
inline void gp_wuhun_info::set_allocated_upgrade_info(::PB::gp_wuhun_info_wuhun_upgrade* upgrade_info) {
  delete upgrade_info_;
  upgrade_info_ = upgrade_info;
  if (upgrade_info) {
    set_has_upgrade_info();
  } else {
    clear_has_upgrade_info();
  }
}

// -------------------------------------------------------------------

// gp_pk_man

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_pk_man];
inline bool gp_pk_man::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_pk_man::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_pk_man::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_pk_man::clear_type() {
  type_ = 515;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_pk_man::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_pk_man::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 roleid = 2;
inline bool gp_pk_man::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_pk_man::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_pk_man::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_pk_man::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 gp_pk_man::roleid() const {
  return roleid_;
}
inline void gp_pk_man::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 pk_level = 3;
inline bool gp_pk_man::has_pk_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_pk_man::set_has_pk_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_pk_man::clear_has_pk_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_pk_man::clear_pk_level() {
  pk_level_ = 0;
  clear_has_pk_level();
}
inline ::google::protobuf::int32 gp_pk_man::pk_level() const {
  return pk_level_;
}
inline void gp_pk_man::set_pk_level(::google::protobuf::int32 value) {
  set_has_pk_level();
  pk_level_ = value;
}

// optional int32 pk_setting = 4;
inline bool gp_pk_man::has_pk_setting() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_pk_man::set_has_pk_setting() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_pk_man::clear_has_pk_setting() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_pk_man::clear_pk_setting() {
  pk_setting_ = 0;
  clear_has_pk_setting();
}
inline ::google::protobuf::int32 gp_pk_man::pk_setting() const {
  return pk_setting_;
}
inline void gp_pk_man::set_pk_setting(::google::protobuf::int32 value) {
  set_has_pk_setting();
  pk_setting_ = value;
}

// -------------------------------------------------------------------

// gp_fight_back_list

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_fight_back_list];
inline bool gp_fight_back_list::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_fight_back_list::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_fight_back_list::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_fight_back_list::clear_type() {
  type_ = 516;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_fight_back_list::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_fight_back_list::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool insert = 2;
inline bool gp_fight_back_list::has_insert() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_fight_back_list::set_has_insert() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_fight_back_list::clear_has_insert() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_fight_back_list::clear_insert() {
  insert_ = false;
  clear_has_insert();
}
inline bool gp_fight_back_list::insert() const {
  return insert_;
}
inline void gp_fight_back_list::set_insert(bool value) {
  set_has_insert();
  insert_ = value;
}

// optional int64 roleid = 4;
inline bool gp_fight_back_list::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_fight_back_list::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_fight_back_list::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_fight_back_list::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 gp_fight_back_list::roleid() const {
  return roleid_;
}
inline void gp_fight_back_list::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// gp_auto_reward_list_reward_entry

// required int32 type = 1;
inline bool gp_auto_reward_list_reward_entry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_auto_reward_list_reward_entry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_auto_reward_list_reward_entry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_auto_reward_list_reward_entry::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 gp_auto_reward_list_reward_entry::type() const {
  return type_;
}
inline void gp_auto_reward_list_reward_entry::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 reward = 2;
inline bool gp_auto_reward_list_reward_entry::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_auto_reward_list_reward_entry::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_auto_reward_list_reward_entry::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_auto_reward_list_reward_entry::clear_reward() {
  reward_ = 0;
  clear_has_reward();
}
inline ::google::protobuf::int32 gp_auto_reward_list_reward_entry::reward() const {
  return reward_;
}
inline void gp_auto_reward_list_reward_entry::set_reward(::google::protobuf::int32 value) {
  set_has_reward();
  reward_ = value;
}

// required int64 data = 3;
inline bool gp_auto_reward_list_reward_entry::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_auto_reward_list_reward_entry::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_auto_reward_list_reward_entry::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_auto_reward_list_reward_entry::clear_data() {
  data_ = GOOGLE_LONGLONG(0);
  clear_has_data();
}
inline ::google::protobuf::int64 gp_auto_reward_list_reward_entry::data() const {
  return data_;
}
inline void gp_auto_reward_list_reward_entry::set_data(::google::protobuf::int64 value) {
  set_has_data();
  data_ = value;
}

// -------------------------------------------------------------------

// gp_auto_reward_list

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_auto_reward_list];
inline bool gp_auto_reward_list::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_auto_reward_list::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_auto_reward_list::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_auto_reward_list::clear_type() {
  type_ = 517;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_auto_reward_list::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_auto_reward_list::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.gp_auto_reward_list.reward_entry entry = 2;
inline int gp_auto_reward_list::entry_size() const {
  return entry_.size();
}
inline void gp_auto_reward_list::clear_entry() {
  entry_.Clear();
}
inline const ::PB::gp_auto_reward_list_reward_entry& gp_auto_reward_list::entry(int index) const {
  return entry_.Get(index);
}
inline ::PB::gp_auto_reward_list_reward_entry* gp_auto_reward_list::mutable_entry(int index) {
  return entry_.Mutable(index);
}
inline ::PB::gp_auto_reward_list_reward_entry* gp_auto_reward_list::add_entry() {
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_auto_reward_list_reward_entry >&
gp_auto_reward_list::entry() const {
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::gp_auto_reward_list_reward_entry >*
gp_auto_reward_list::mutable_entry() {
  return &entry_;
}

// -------------------------------------------------------------------

// gp_vip_info_online_info

// optional int64 save_second = 1;
inline bool gp_vip_info_online_info::has_save_second() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_vip_info_online_info::set_has_save_second() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_vip_info_online_info::clear_has_save_second() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_vip_info_online_info::clear_save_second() {
  save_second_ = GOOGLE_LONGLONG(0);
  clear_has_save_second();
}
inline ::google::protobuf::int64 gp_vip_info_online_info::save_second() const {
  return save_second_;
}
inline void gp_vip_info_online_info::set_save_second(::google::protobuf::int64 value) {
  set_has_save_second();
  save_second_ = value;
}

// optional int64 offline_second = 2;
inline bool gp_vip_info_online_info::has_offline_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_vip_info_online_info::set_has_offline_second() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_vip_info_online_info::clear_has_offline_second() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_vip_info_online_info::clear_offline_second() {
  offline_second_ = GOOGLE_LONGLONG(0);
  clear_has_offline_second();
}
inline ::google::protobuf::int64 gp_vip_info_online_info::offline_second() const {
  return offline_second_;
}
inline void gp_vip_info_online_info::set_offline_second(::google::protobuf::int64 value) {
  set_has_offline_second();
  offline_second_ = value;
}

// optional int64 logout_exp_last = 3;
inline bool gp_vip_info_online_info::has_logout_exp_last() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_vip_info_online_info::set_has_logout_exp_last() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_vip_info_online_info::clear_has_logout_exp_last() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_vip_info_online_info::clear_logout_exp_last() {
  logout_exp_last_ = GOOGLE_LONGLONG(0);
  clear_has_logout_exp_last();
}
inline ::google::protobuf::int64 gp_vip_info_online_info::logout_exp_last() const {
  return logout_exp_last_;
}
inline void gp_vip_info_online_info::set_logout_exp_last(::google::protobuf::int64 value) {
  set_has_logout_exp_last();
  logout_exp_last_ = value;
}

// optional int64 login_timestamp = 4;
inline bool gp_vip_info_online_info::has_login_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_vip_info_online_info::set_has_login_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_vip_info_online_info::clear_has_login_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_vip_info_online_info::clear_login_timestamp() {
  login_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_login_timestamp();
}
inline ::google::protobuf::int64 gp_vip_info_online_info::login_timestamp() const {
  return login_timestamp_;
}
inline void gp_vip_info_online_info::set_login_timestamp(::google::protobuf::int64 value) {
  set_has_login_timestamp();
  login_timestamp_ = value;
}

// optional int32 online_second = 5;
inline bool gp_vip_info_online_info::has_online_second() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_vip_info_online_info::set_has_online_second() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_vip_info_online_info::clear_has_online_second() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_vip_info_online_info::clear_online_second() {
  online_second_ = 0;
  clear_has_online_second();
}
inline ::google::protobuf::int32 gp_vip_info_online_info::online_second() const {
  return online_second_;
}
inline void gp_vip_info_online_info::set_online_second(::google::protobuf::int32 value) {
  set_has_online_second();
  online_second_ = value;
}

// -------------------------------------------------------------------

// gp_vip_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_vip_info];
inline bool gp_vip_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_vip_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_vip_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_vip_info::clear_type() {
  type_ = 518;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_vip_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_vip_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 cur_vip_level = 2;
inline bool gp_vip_info::has_cur_vip_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_vip_info::set_has_cur_vip_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_vip_info::clear_has_cur_vip_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_vip_info::clear_cur_vip_level() {
  cur_vip_level_ = 0u;
  clear_has_cur_vip_level();
}
inline ::google::protobuf::uint32 gp_vip_info::cur_vip_level() const {
  return cur_vip_level_;
}
inline void gp_vip_info::set_cur_vip_level(::google::protobuf::uint32 value) {
  set_has_cur_vip_level();
  cur_vip_level_ = value;
}

// optional uint32 reward_vip_level = 3;
inline bool gp_vip_info::has_reward_vip_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_vip_info::set_has_reward_vip_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_vip_info::clear_has_reward_vip_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_vip_info::clear_reward_vip_level() {
  reward_vip_level_ = 0u;
  clear_has_reward_vip_level();
}
inline ::google::protobuf::uint32 gp_vip_info::reward_vip_level() const {
  return reward_vip_level_;
}
inline void gp_vip_info::set_reward_vip_level(::google::protobuf::uint32 value) {
  set_has_reward_vip_level();
  reward_vip_level_ = value;
}

// optional uint32 reward_vip_end_time = 4;
inline bool gp_vip_info::has_reward_vip_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_vip_info::set_has_reward_vip_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_vip_info::clear_has_reward_vip_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_vip_info::clear_reward_vip_end_time() {
  reward_vip_end_time_ = 0u;
  clear_has_reward_vip_end_time();
}
inline ::google::protobuf::uint32 gp_vip_info::reward_vip_end_time() const {
  return reward_vip_end_time_;
}
inline void gp_vip_info::set_reward_vip_end_time(::google::protobuf::uint32 value) {
  set_has_reward_vip_end_time();
  reward_vip_end_time_ = value;
}

// optional int32 new_id = 5;
inline bool gp_vip_info::has_new_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_vip_info::set_has_new_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_vip_info::clear_has_new_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_vip_info::clear_new_id() {
  new_id_ = 0;
  clear_has_new_id();
}
inline ::google::protobuf::int32 gp_vip_info::new_id() const {
  return new_id_;
}
inline void gp_vip_info::set_new_id(::google::protobuf::int32 value) {
  set_has_new_id();
  new_id_ = value;
}

// optional bool system_close = 6 [default = false];
inline bool gp_vip_info::has_system_close() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_vip_info::set_has_system_close() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_vip_info::clear_has_system_close() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_vip_info::clear_system_close() {
  system_close_ = false;
  clear_has_system_close();
}
inline bool gp_vip_info::system_close() const {
  return system_close_;
}
inline void gp_vip_info::set_system_close(bool value) {
  set_has_system_close();
  system_close_ = value;
}

// optional uint32 buy_force_times_today = 7;
inline bool gp_vip_info::has_buy_force_times_today() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_vip_info::set_has_buy_force_times_today() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_vip_info::clear_has_buy_force_times_today() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_vip_info::clear_buy_force_times_today() {
  buy_force_times_today_ = 0u;
  clear_has_buy_force_times_today();
}
inline ::google::protobuf::uint32 gp_vip_info::buy_force_times_today() const {
  return buy_force_times_today_;
}
inline void gp_vip_info::set_buy_force_times_today(::google::protobuf::uint32 value) {
  set_has_buy_force_times_today();
  buy_force_times_today_ = value;
}

// optional .PB.gp_vip_info.online_info online = 8;
inline bool gp_vip_info::has_online() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gp_vip_info::set_has_online() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gp_vip_info::clear_has_online() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gp_vip_info::clear_online() {
  if (online_ != NULL) online_->::PB::gp_vip_info_online_info::Clear();
  clear_has_online();
}
inline const ::PB::gp_vip_info_online_info& gp_vip_info::online() const {
  return online_ != NULL ? *online_ : *default_instance_->online_;
}
inline ::PB::gp_vip_info_online_info* gp_vip_info::mutable_online() {
  set_has_online();
  if (online_ == NULL) online_ = new ::PB::gp_vip_info_online_info;
  return online_;
}
inline ::PB::gp_vip_info_online_info* gp_vip_info::release_online() {
  clear_has_online();
  ::PB::gp_vip_info_online_info* temp = online_;
  online_ = NULL;
  return temp;
}
inline void gp_vip_info::set_allocated_online(::PB::gp_vip_info_online_info* online) {
  delete online_;
  online_ = online;
  if (online) {
    set_has_online();
  } else {
    clear_has_online();
  }
}

// optional uint32 vip_upgrade_time = 9;
inline bool gp_vip_info::has_vip_upgrade_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gp_vip_info::set_has_vip_upgrade_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gp_vip_info::clear_has_vip_upgrade_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gp_vip_info::clear_vip_upgrade_time() {
  vip_upgrade_time_ = 0u;
  clear_has_vip_upgrade_time();
}
inline ::google::protobuf::uint32 gp_vip_info::vip_upgrade_time() const {
  return vip_upgrade_time_;
}
inline void gp_vip_info::set_vip_upgrade_time(::google::protobuf::uint32 value) {
  set_has_vip_upgrade_time();
  vip_upgrade_time_ = value;
}

// -------------------------------------------------------------------

// gp_object_state

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_object_state];
inline bool gp_object_state::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_object_state::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_object_state::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_object_state::clear_type() {
  type_ = 519;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_object_state::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_object_state::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 roleid = 2;
inline bool gp_object_state::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_object_state::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_object_state::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_object_state::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 gp_object_state::roleid() const {
  return roleid_;
}
inline void gp_object_state::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional uint64 object_state = 3;
inline bool gp_object_state::has_object_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_object_state::set_has_object_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_object_state::clear_has_object_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_object_state::clear_object_state() {
  object_state_ = GOOGLE_ULONGLONG(0);
  clear_has_object_state();
}
inline ::google::protobuf::uint64 gp_object_state::object_state() const {
  return object_state_;
}
inline void gp_object_state::set_object_state(::google::protobuf::uint64 value) {
  set_has_object_state();
  object_state_ = value;
}

// optional uint32 mount_tid = 4;
inline bool gp_object_state::has_mount_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_object_state::set_has_mount_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_object_state::clear_has_mount_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_object_state::clear_mount_tid() {
  mount_tid_ = 0u;
  clear_has_mount_tid();
}
inline ::google::protobuf::uint32 gp_object_state::mount_tid() const {
  return mount_tid_;
}
inline void gp_object_state::set_mount_tid(::google::protobuf::uint32 value) {
  set_has_mount_tid();
  mount_tid_ = value;
}

// optional bool clear_quit_state = 5;
inline bool gp_object_state::has_clear_quit_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_object_state::set_has_clear_quit_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_object_state::clear_has_clear_quit_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_object_state::clear_clear_quit_state() {
  clear_quit_state_ = false;
  clear_has_clear_quit_state();
}
inline bool gp_object_state::clear_quit_state() const {
  return clear_quit_state_;
}
inline void gp_object_state::set_clear_quit_state(bool value) {
  set_has_clear_quit_state();
  clear_quit_state_ = value;
}

// optional uint32 mount_quality = 6;
inline bool gp_object_state::has_mount_quality() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_object_state::set_has_mount_quality() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_object_state::clear_has_mount_quality() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_object_state::clear_mount_quality() {
  mount_quality_ = 0u;
  clear_has_mount_quality();
}
inline ::google::protobuf::uint32 gp_object_state::mount_quality() const {
  return mount_quality_;
}
inline void gp_object_state::set_mount_quality(::google::protobuf::uint32 value) {
  set_has_mount_quality();
  mount_quality_ = value;
}

// -------------------------------------------------------------------

// gp_hero_defined_info_hero_info

// required int32 index = 1;
inline bool gp_hero_defined_info_hero_info::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_hero_defined_info_hero_info::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_hero_defined_info_hero_info::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_hero_defined_info_hero_info::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 gp_hero_defined_info_hero_info::index() const {
  return index_;
}
inline void gp_hero_defined_info_hero_info::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required int32 tid = 2;
inline bool gp_hero_defined_info_hero_info::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_hero_defined_info_hero_info::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_hero_defined_info_hero_info::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_hero_defined_info_hero_info::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 gp_hero_defined_info_hero_info::tid() const {
  return tid_;
}
inline void gp_hero_defined_info_hero_info::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional bytes property = 3;
inline bool gp_hero_defined_info_hero_info::has_property() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_hero_defined_info_hero_info::set_has_property() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_hero_defined_info_hero_info::clear_has_property() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_hero_defined_info_hero_info::clear_property() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    property_->clear();
  }
  clear_has_property();
}
inline const ::std::string& gp_hero_defined_info_hero_info::property() const {
  return *property_;
}
inline void gp_hero_defined_info_hero_info::set_property(const ::std::string& value) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(value);
}
inline void gp_hero_defined_info_hero_info::set_property(const char* value) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(value);
}
inline void gp_hero_defined_info_hero_info::set_property(const void* value, size_t size) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_hero_defined_info_hero_info::mutable_property() {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  return property_;
}
inline ::std::string* gp_hero_defined_info_hero_info::release_property() {
  clear_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = property_;
    property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gp_hero_defined_info_hero_info::set_allocated_property(::std::string* property) {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (property) {
    set_has_property();
    property_ = property;
  } else {
    clear_has_property();
    property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 quality = 4;
inline bool gp_hero_defined_info_hero_info::has_quality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_hero_defined_info_hero_info::set_has_quality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_hero_defined_info_hero_info::clear_has_quality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_hero_defined_info_hero_info::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 gp_hero_defined_info_hero_info::quality() const {
  return quality_;
}
inline void gp_hero_defined_info_hero_info::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 exp = 5;
inline bool gp_hero_defined_info_hero_info::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_hero_defined_info_hero_info::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_hero_defined_info_hero_info::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_hero_defined_info_hero_info::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 gp_hero_defined_info_hero_info::exp() const {
  return exp_;
}
inline void gp_hero_defined_info_hero_info::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 level = 6;
inline bool gp_hero_defined_info_hero_info::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_hero_defined_info_hero_info::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_hero_defined_info_hero_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_hero_defined_info_hero_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 gp_hero_defined_info_hero_info::level() const {
  return level_;
}
inline void gp_hero_defined_info_hero_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 prof_exp = 7;
inline bool gp_hero_defined_info_hero_info::has_prof_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_hero_defined_info_hero_info::set_has_prof_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_hero_defined_info_hero_info::clear_has_prof_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_hero_defined_info_hero_info::clear_prof_exp() {
  prof_exp_ = 0;
  clear_has_prof_exp();
}
inline ::google::protobuf::int32 gp_hero_defined_info_hero_info::prof_exp() const {
  return prof_exp_;
}
inline void gp_hero_defined_info_hero_info::set_prof_exp(::google::protobuf::int32 value) {
  set_has_prof_exp();
  prof_exp_ = value;
}

// optional int32 prof_level = 8;
inline bool gp_hero_defined_info_hero_info::has_prof_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gp_hero_defined_info_hero_info::set_has_prof_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gp_hero_defined_info_hero_info::clear_has_prof_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gp_hero_defined_info_hero_info::clear_prof_level() {
  prof_level_ = 0;
  clear_has_prof_level();
}
inline ::google::protobuf::int32 gp_hero_defined_info_hero_info::prof_level() const {
  return prof_level_;
}
inline void gp_hero_defined_info_hero_info::set_prof_level(::google::protobuf::int32 value) {
  set_has_prof_level();
  prof_level_ = value;
}

// optional bool is_summoned = 9;
inline bool gp_hero_defined_info_hero_info::has_is_summoned() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gp_hero_defined_info_hero_info::set_has_is_summoned() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gp_hero_defined_info_hero_info::clear_has_is_summoned() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gp_hero_defined_info_hero_info::clear_is_summoned() {
  is_summoned_ = false;
  clear_has_is_summoned();
}
inline bool gp_hero_defined_info_hero_info::is_summoned() const {
  return is_summoned_;
}
inline void gp_hero_defined_info_hero_info::set_is_summoned(bool value) {
  set_has_is_summoned();
  is_summoned_ = value;
}

// -------------------------------------------------------------------

// gp_hero_defined_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_hero_defined_info];
inline bool gp_hero_defined_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_hero_defined_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_hero_defined_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_hero_defined_info::clear_type() {
  type_ = 520;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_hero_defined_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_hero_defined_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 roleid = 2;
inline bool gp_hero_defined_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_hero_defined_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_hero_defined_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_hero_defined_info::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 gp_hero_defined_info::roleid() const {
  return roleid_;
}
inline void gp_hero_defined_info::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// repeated .PB.gp_hero_defined_info.hero_info heros = 3;
inline int gp_hero_defined_info::heros_size() const {
  return heros_.size();
}
inline void gp_hero_defined_info::clear_heros() {
  heros_.Clear();
}
inline const ::PB::gp_hero_defined_info_hero_info& gp_hero_defined_info::heros(int index) const {
  return heros_.Get(index);
}
inline ::PB::gp_hero_defined_info_hero_info* gp_hero_defined_info::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::PB::gp_hero_defined_info_hero_info* gp_hero_defined_info::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_hero_defined_info_hero_info >&
gp_hero_defined_info::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::gp_hero_defined_info_hero_info >*
gp_hero_defined_info::mutable_heros() {
  return &heros_;
}

// optional int32 cmd_type = 4;
inline bool gp_hero_defined_info::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_hero_defined_info::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_hero_defined_info::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_hero_defined_info::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
inline ::google::protobuf::int32 gp_hero_defined_info::cmd_type() const {
  return cmd_type_;
}
inline void gp_hero_defined_info::set_cmd_type(::google::protobuf::int32 value) {
  set_has_cmd_type();
  cmd_type_ = value;
}

// -------------------------------------------------------------------

// gp_hero_incre_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_hero_incre_info];
inline bool gp_hero_incre_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_hero_incre_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_hero_incre_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_hero_incre_info::clear_type() {
  type_ = 522;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_hero_incre_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_hero_incre_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 index = 2;
inline bool gp_hero_incre_info::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_hero_incre_info::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_hero_incre_info::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_hero_incre_info::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 gp_hero_incre_info::index() const {
  return index_;
}
inline void gp_hero_incre_info::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required .PB.gp_hero_incre_info.CMD_TYPE cmd_type = 3;
inline bool gp_hero_incre_info::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_hero_incre_info::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_hero_incre_info::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_hero_incre_info::clear_cmd_type() {
  cmd_type_ = 1;
  clear_has_cmd_type();
}
inline ::PB::gp_hero_incre_info_CMD_TYPE gp_hero_incre_info::cmd_type() const {
  return static_cast< ::PB::gp_hero_incre_info_CMD_TYPE >(cmd_type_);
}
inline void gp_hero_incre_info::set_cmd_type(::PB::gp_hero_incre_info_CMD_TYPE value) {
  assert(::PB::gp_hero_incre_info_CMD_TYPE_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
}

// optional int32 quality = 4;
inline bool gp_hero_incre_info::has_quality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_hero_incre_info::set_has_quality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_hero_incre_info::clear_has_quality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_hero_incre_info::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 gp_hero_incre_info::quality() const {
  return quality_;
}
inline void gp_hero_incre_info::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 exp = 5;
inline bool gp_hero_incre_info::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_hero_incre_info::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_hero_incre_info::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_hero_incre_info::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 gp_hero_incre_info::exp() const {
  return exp_;
}
inline void gp_hero_incre_info::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 level = 6;
inline bool gp_hero_incre_info::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_hero_incre_info::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_hero_incre_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_hero_incre_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 gp_hero_incre_info::level() const {
  return level_;
}
inline void gp_hero_incre_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 prof_exp = 7;
inline bool gp_hero_incre_info::has_prof_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_hero_incre_info::set_has_prof_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_hero_incre_info::clear_has_prof_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_hero_incre_info::clear_prof_exp() {
  prof_exp_ = 0;
  clear_has_prof_exp();
}
inline ::google::protobuf::int32 gp_hero_incre_info::prof_exp() const {
  return prof_exp_;
}
inline void gp_hero_incre_info::set_prof_exp(::google::protobuf::int32 value) {
  set_has_prof_exp();
  prof_exp_ = value;
}

// optional int32 prof_level = 8;
inline bool gp_hero_incre_info::has_prof_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gp_hero_incre_info::set_has_prof_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gp_hero_incre_info::clear_has_prof_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gp_hero_incre_info::clear_prof_level() {
  prof_level_ = 0;
  clear_has_prof_level();
}
inline ::google::protobuf::int32 gp_hero_incre_info::prof_level() const {
  return prof_level_;
}
inline void gp_hero_incre_info::set_prof_level(::google::protobuf::int32 value) {
  set_has_prof_level();
  prof_level_ = value;
}

// optional bool is_summoned = 9;
inline bool gp_hero_incre_info::has_is_summoned() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gp_hero_incre_info::set_has_is_summoned() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gp_hero_incre_info::clear_has_is_summoned() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gp_hero_incre_info::clear_is_summoned() {
  is_summoned_ = false;
  clear_has_is_summoned();
}
inline bool gp_hero_incre_info::is_summoned() const {
  return is_summoned_;
}
inline void gp_hero_incre_info::set_is_summoned(bool value) {
  set_has_is_summoned();
  is_summoned_ = value;
}

// optional int32 value = 10;
inline bool gp_hero_incre_info::has_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void gp_hero_incre_info::set_has_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void gp_hero_incre_info::clear_has_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void gp_hero_incre_info::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 gp_hero_incre_info::value() const {
  return value_;
}
inline void gp_hero_incre_info::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional bool is_level_up = 11;
inline bool gp_hero_incre_info::has_is_level_up() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void gp_hero_incre_info::set_has_is_level_up() {
  _has_bits_[0] |= 0x00000400u;
}
inline void gp_hero_incre_info::clear_has_is_level_up() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void gp_hero_incre_info::clear_is_level_up() {
  is_level_up_ = false;
  clear_has_is_level_up();
}
inline bool gp_hero_incre_info::is_level_up() const {
  return is_level_up_;
}
inline void gp_hero_incre_info::set_is_level_up(bool value) {
  set_has_is_level_up();
  is_level_up_ = value;
}

// -------------------------------------------------------------------

// enemy_info

// required int64 roleid = 1;
inline bool enemy_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enemy_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enemy_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enemy_info::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 enemy_info::roleid() const {
  return roleid_;
}
inline void enemy_info::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 timestamp = 2;
inline bool enemy_info::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enemy_info::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enemy_info::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enemy_info::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 enemy_info::timestamp() const {
  return timestamp_;
}
inline void enemy_info::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional bytes role_name = 3;
inline bool enemy_info::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enemy_info::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enemy_info::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enemy_info::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& enemy_info::role_name() const {
  return *role_name_;
}
inline void enemy_info::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void enemy_info::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void enemy_info::set_role_name(const void* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* enemy_info::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* enemy_info::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void enemy_info::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gp_enemy_list

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_enemy_list];
inline bool gp_enemy_list::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_enemy_list::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_enemy_list::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_enemy_list::clear_type() {
  type_ = 521;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_enemy_list::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_enemy_list::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 mode = 2;
inline bool gp_enemy_list::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_enemy_list::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_enemy_list::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_enemy_list::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 gp_enemy_list::mode() const {
  return mode_;
}
inline void gp_enemy_list::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// repeated .PB.enemy_info enemy_infos = 3;
inline int gp_enemy_list::enemy_infos_size() const {
  return enemy_infos_.size();
}
inline void gp_enemy_list::clear_enemy_infos() {
  enemy_infos_.Clear();
}
inline const ::PB::enemy_info& gp_enemy_list::enemy_infos(int index) const {
  return enemy_infos_.Get(index);
}
inline ::PB::enemy_info* gp_enemy_list::mutable_enemy_infos(int index) {
  return enemy_infos_.Mutable(index);
}
inline ::PB::enemy_info* gp_enemy_list::add_enemy_infos() {
  return enemy_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::enemy_info >&
gp_enemy_list::enemy_infos() const {
  return enemy_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::enemy_info >*
gp_enemy_list::mutable_enemy_infos() {
  return &enemy_infos_;
}

// -------------------------------------------------------------------

// gp_auto_combat_config_s2c

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_auto_combat_config];
inline bool gp_auto_combat_config_s2c::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_auto_combat_config_s2c::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_auto_combat_config_s2c::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_auto_combat_config_s2c::clear_type() {
  type_ = 523;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_auto_combat_config_s2c::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_auto_combat_config_s2c::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.auto_combat_config config = 2;
inline bool gp_auto_combat_config_s2c::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_auto_combat_config_s2c::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_auto_combat_config_s2c::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_auto_combat_config_s2c::clear_config() {
  if (config_ != NULL) config_->::PB::auto_combat_config::Clear();
  clear_has_config();
}
inline const ::PB::auto_combat_config& gp_auto_combat_config_s2c::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::PB::auto_combat_config* gp_auto_combat_config_s2c::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::PB::auto_combat_config;
  return config_;
}
inline ::PB::auto_combat_config* gp_auto_combat_config_s2c::release_config() {
  clear_has_config();
  ::PB::auto_combat_config* temp = config_;
  config_ = NULL;
  return temp;
}
inline void gp_auto_combat_config_s2c::set_allocated_config(::PB::auto_combat_config* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// -------------------------------------------------------------------

// gp_lottery_prize_repu_str

// optional uint32 repuid = 1;
inline bool gp_lottery_prize_repu_str::has_repuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_lottery_prize_repu_str::set_has_repuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_lottery_prize_repu_str::clear_has_repuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_lottery_prize_repu_str::clear_repuid() {
  repuid_ = 0u;
  clear_has_repuid();
}
inline ::google::protobuf::uint32 gp_lottery_prize_repu_str::repuid() const {
  return repuid_;
}
inline void gp_lottery_prize_repu_str::set_repuid(::google::protobuf::uint32 value) {
  set_has_repuid();
  repuid_ = value;
}

// optional uint32 repu_value = 2;
inline bool gp_lottery_prize_repu_str::has_repu_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_lottery_prize_repu_str::set_has_repu_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_lottery_prize_repu_str::clear_has_repu_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_lottery_prize_repu_str::clear_repu_value() {
  repu_value_ = 0u;
  clear_has_repu_value();
}
inline ::google::protobuf::uint32 gp_lottery_prize_repu_str::repu_value() const {
  return repu_value_;
}
inline void gp_lottery_prize_repu_str::set_repu_value(::google::protobuf::uint32 value) {
  set_has_repu_value();
  repu_value_ = value;
}

// -------------------------------------------------------------------

// gp_lottery_prize_item_str

// optional uint32 tid = 1;
inline bool gp_lottery_prize_item_str::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_lottery_prize_item_str::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_lottery_prize_item_str::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_lottery_prize_item_str::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 gp_lottery_prize_item_str::tid() const {
  return tid_;
}
inline void gp_lottery_prize_item_str::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
}

// optional uint32 count = 2;
inline bool gp_lottery_prize_item_str::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_lottery_prize_item_str::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_lottery_prize_item_str::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_lottery_prize_item_str::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 gp_lottery_prize_item_str::count() const {
  return count_;
}
inline void gp_lottery_prize_item_str::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 quality = 3;
inline bool gp_lottery_prize_item_str::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_lottery_prize_item_str::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_lottery_prize_item_str::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_lottery_prize_item_str::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 gp_lottery_prize_item_str::quality() const {
  return quality_;
}
inline void gp_lottery_prize_item_str::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// -------------------------------------------------------------------

// gp_lottery_prize

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_lottery_prize];
inline bool gp_lottery_prize::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_lottery_prize::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_lottery_prize::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_lottery_prize::clear_type() {
  type_ = 533;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_lottery_prize::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_lottery_prize::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 tid = 2;
inline bool gp_lottery_prize::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_lottery_prize::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_lottery_prize::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_lottery_prize::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 gp_lottery_prize::tid() const {
  return tid_;
}
inline void gp_lottery_prize::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
}

// optional uint64 bind_money = 3;
inline bool gp_lottery_prize::has_bind_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_lottery_prize::set_has_bind_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_lottery_prize::clear_has_bind_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_lottery_prize::clear_bind_money() {
  bind_money_ = GOOGLE_ULONGLONG(0);
  clear_has_bind_money();
}
inline ::google::protobuf::uint64 gp_lottery_prize::bind_money() const {
  return bind_money_;
}
inline void gp_lottery_prize::set_bind_money(::google::protobuf::uint64 value) {
  set_has_bind_money();
  bind_money_ = value;
}

// optional uint64 trade_money = 4;
inline bool gp_lottery_prize::has_trade_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_lottery_prize::set_has_trade_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_lottery_prize::clear_has_trade_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_lottery_prize::clear_trade_money() {
  trade_money_ = GOOGLE_ULONGLONG(0);
  clear_has_trade_money();
}
inline ::google::protobuf::uint64 gp_lottery_prize::trade_money() const {
  return trade_money_;
}
inline void gp_lottery_prize::set_trade_money(::google::protobuf::uint64 value) {
  set_has_trade_money();
  trade_money_ = value;
}

// optional uint32 prof_exp = 5;
inline bool gp_lottery_prize::has_prof_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_lottery_prize::set_has_prof_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_lottery_prize::clear_has_prof_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_lottery_prize::clear_prof_exp() {
  prof_exp_ = 0u;
  clear_has_prof_exp();
}
inline ::google::protobuf::uint32 gp_lottery_prize::prof_exp() const {
  return prof_exp_;
}
inline void gp_lottery_prize::set_prof_exp(::google::protobuf::uint32 value) {
  set_has_prof_exp();
  prof_exp_ = value;
}

// optional uint32 exp = 6;
inline bool gp_lottery_prize::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_lottery_prize::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_lottery_prize::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_lottery_prize::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 gp_lottery_prize::exp() const {
  return exp_;
}
inline void gp_lottery_prize::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// repeated .PB.gp_lottery_prize.repu_str repus = 7;
inline int gp_lottery_prize::repus_size() const {
  return repus_.size();
}
inline void gp_lottery_prize::clear_repus() {
  repus_.Clear();
}
inline const ::PB::gp_lottery_prize_repu_str& gp_lottery_prize::repus(int index) const {
  return repus_.Get(index);
}
inline ::PB::gp_lottery_prize_repu_str* gp_lottery_prize::mutable_repus(int index) {
  return repus_.Mutable(index);
}
inline ::PB::gp_lottery_prize_repu_str* gp_lottery_prize::add_repus() {
  return repus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_lottery_prize_repu_str >&
gp_lottery_prize::repus() const {
  return repus_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::gp_lottery_prize_repu_str >*
gp_lottery_prize::mutable_repus() {
  return &repus_;
}

// repeated .PB.gp_lottery_prize.item_str itmes = 8;
inline int gp_lottery_prize::itmes_size() const {
  return itmes_.size();
}
inline void gp_lottery_prize::clear_itmes() {
  itmes_.Clear();
}
inline const ::PB::gp_lottery_prize_item_str& gp_lottery_prize::itmes(int index) const {
  return itmes_.Get(index);
}
inline ::PB::gp_lottery_prize_item_str* gp_lottery_prize::mutable_itmes(int index) {
  return itmes_.Mutable(index);
}
inline ::PB::gp_lottery_prize_item_str* gp_lottery_prize::add_itmes() {
  return itmes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_lottery_prize_item_str >&
gp_lottery_prize::itmes() const {
  return itmes_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::gp_lottery_prize_item_str >*
gp_lottery_prize::mutable_itmes() {
  return &itmes_;
}

// optional uint32 vp = 9;
inline bool gp_lottery_prize::has_vp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gp_lottery_prize::set_has_vp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gp_lottery_prize::clear_has_vp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gp_lottery_prize::clear_vp() {
  vp_ = 0u;
  clear_has_vp();
}
inline ::google::protobuf::uint32 gp_lottery_prize::vp() const {
  return vp_;
}
inline void gp_lottery_prize::set_vp(::google::protobuf::uint32 value) {
  set_has_vp();
  vp_ = value;
}

// optional uint32 cur_service_tid = 10;
inline bool gp_lottery_prize::has_cur_service_tid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void gp_lottery_prize::set_has_cur_service_tid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void gp_lottery_prize::clear_has_cur_service_tid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void gp_lottery_prize::clear_cur_service_tid() {
  cur_service_tid_ = 0u;
  clear_has_cur_service_tid();
}
inline ::google::protobuf::uint32 gp_lottery_prize::cur_service_tid() const {
  return cur_service_tid_;
}
inline void gp_lottery_prize::set_cur_service_tid(::google::protobuf::uint32 value) {
  set_has_cur_service_tid();
  cur_service_tid_ = value;
}

// -------------------------------------------------------------------

// gp_suit_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_suit_info];
inline bool gp_suit_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_suit_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_suit_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_suit_info::clear_type() {
  type_ = 534;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_suit_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_suit_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 quality_suit_id = 2;
inline bool gp_suit_info::has_quality_suit_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_suit_info::set_has_quality_suit_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_suit_info::clear_has_quality_suit_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_suit_info::clear_quality_suit_id() {
  quality_suit_id_ = 0u;
  clear_has_quality_suit_id();
}
inline ::google::protobuf::uint32 gp_suit_info::quality_suit_id() const {
  return quality_suit_id_;
}
inline void gp_suit_info::set_quality_suit_id(::google::protobuf::uint32 value) {
  set_has_quality_suit_id();
  quality_suit_id_ = value;
}

// optional uint32 star_suit_id = 3;
inline bool gp_suit_info::has_star_suit_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_suit_info::set_has_star_suit_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_suit_info::clear_has_star_suit_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_suit_info::clear_star_suit_id() {
  star_suit_id_ = 0u;
  clear_has_star_suit_id();
}
inline ::google::protobuf::uint32 gp_suit_info::star_suit_id() const {
  return star_suit_id_;
}
inline void gp_suit_info::set_star_suit_id(::google::protobuf::uint32 value) {
  set_has_star_suit_id();
  star_suit_id_ = value;
}

// optional bool is_init = 4;
inline bool gp_suit_info::has_is_init() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_suit_info::set_has_is_init() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_suit_info::clear_has_is_init() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_suit_info::clear_is_init() {
  is_init_ = false;
  clear_has_is_init();
}
inline bool gp_suit_info::is_init() const {
  return is_init_;
}
inline void gp_suit_info::set_is_init(bool value) {
  set_has_is_init();
  is_init_ = value;
}

// -------------------------------------------------------------------

// gp_attack_loop

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_attack_loop];
inline bool gp_attack_loop::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_attack_loop::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_attack_loop::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_attack_loop::clear_type() {
  type_ = 537;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_attack_loop::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_attack_loop::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 object_new_id = 2;
inline bool gp_attack_loop::has_object_new_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_attack_loop::set_has_object_new_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_attack_loop::clear_has_object_new_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_attack_loop::clear_object_new_id() {
  object_new_id_ = 0u;
  clear_has_object_new_id();
}
inline ::google::protobuf::uint32 gp_attack_loop::object_new_id() const {
  return object_new_id_;
}
inline void gp_attack_loop::set_object_new_id(::google::protobuf::uint32 value) {
  set_has_object_new_id();
  object_new_id_ = value;
}

// optional bool start = 3;
inline bool gp_attack_loop::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_attack_loop::set_has_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_attack_loop::clear_has_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_attack_loop::clear_start() {
  start_ = false;
  clear_has_start();
}
inline bool gp_attack_loop::start() const {
  return start_;
}
inline void gp_attack_loop::set_start(bool value) {
  set_has_start();
  start_ = value;
}

// optional uint32 skill = 4;
inline bool gp_attack_loop::has_skill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_attack_loop::set_has_skill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_attack_loop::clear_has_skill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_attack_loop::clear_skill() {
  skill_ = 0u;
  clear_has_skill();
}
inline ::google::protobuf::uint32 gp_attack_loop::skill() const {
  return skill_;
}
inline void gp_attack_loop::set_skill(::google::protobuf::uint32 value) {
  set_has_skill();
  skill_ = value;
}

// optional uint32 target_new_id = 5;
inline bool gp_attack_loop::has_target_new_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_attack_loop::set_has_target_new_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_attack_loop::clear_has_target_new_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_attack_loop::clear_target_new_id() {
  target_new_id_ = 0u;
  clear_has_target_new_id();
}
inline ::google::protobuf::uint32 gp_attack_loop::target_new_id() const {
  return target_new_id_;
}
inline void gp_attack_loop::set_target_new_id(::google::protobuf::uint32 value) {
  set_has_target_new_id();
  target_new_id_ = value;
}

// optional bool is_main_hand = 6;
inline bool gp_attack_loop::has_is_main_hand() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_attack_loop::set_has_is_main_hand() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_attack_loop::clear_has_is_main_hand() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_attack_loop::clear_is_main_hand() {
  is_main_hand_ = false;
  clear_has_is_main_hand();
}
inline bool gp_attack_loop::is_main_hand() const {
  return is_main_hand_;
}
inline void gp_attack_loop::set_is_main_hand(bool value) {
  set_has_is_main_hand();
  is_main_hand_ = value;
}

// -------------------------------------------------------------------

// gp_operation_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_operation_result];
inline bool gp_operation_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_operation_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_operation_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_operation_result::clear_type() {
  type_ = 538;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_operation_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_operation_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.gp_operation_result.OPER_TYPE oper_type = 2;
inline bool gp_operation_result::has_oper_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_operation_result::set_has_oper_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_operation_result::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_operation_result::clear_oper_type() {
  oper_type_ = 1;
  clear_has_oper_type();
}
inline ::PB::gp_operation_result_OPER_TYPE gp_operation_result::oper_type() const {
  return static_cast< ::PB::gp_operation_result_OPER_TYPE >(oper_type_);
}
inline void gp_operation_result::set_oper_type(::PB::gp_operation_result_OPER_TYPE value) {
  assert(::PB::gp_operation_result_OPER_TYPE_IsValid(value));
  set_has_oper_type();
  oper_type_ = value;
}

// optional .PB.gp_operation_result.OPER_RESULT oper_result = 3;
inline bool gp_operation_result::has_oper_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_operation_result::set_has_oper_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_operation_result::clear_has_oper_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_operation_result::clear_oper_result() {
  oper_result_ = 1;
  clear_has_oper_result();
}
inline ::PB::gp_operation_result_OPER_RESULT gp_operation_result::oper_result() const {
  return static_cast< ::PB::gp_operation_result_OPER_RESULT >(oper_result_);
}
inline void gp_operation_result::set_oper_result(::PB::gp_operation_result_OPER_RESULT value) {
  assert(::PB::gp_operation_result_OPER_RESULT_IsValid(value));
  set_has_oper_result();
  oper_result_ = value;
}

// -------------------------------------------------------------------

// gp_start_cg

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_start_cg];
inline bool gp_start_cg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_start_cg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_start_cg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_start_cg::clear_type() {
  type_ = 539;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_start_cg::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_start_cg::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 cg_id = 2;
inline bool gp_start_cg::has_cg_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_start_cg::set_has_cg_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_start_cg::clear_has_cg_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_start_cg::clear_cg_id() {
  cg_id_ = 0;
  clear_has_cg_id();
}
inline ::google::protobuf::int32 gp_start_cg::cg_id() const {
  return cg_id_;
}
inline void gp_start_cg::set_cg_id(::google::protobuf::int32 value) {
  set_has_cg_id();
  cg_id_ = value;
}

// optional bool stop_attack = 3 [default = false];
inline bool gp_start_cg::has_stop_attack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_start_cg::set_has_stop_attack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_start_cg::clear_has_stop_attack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_start_cg::clear_stop_attack() {
  stop_attack_ = false;
  clear_has_stop_attack();
}
inline bool gp_start_cg::stop_attack() const {
  return stop_attack_;
}
inline void gp_start_cg::set_stop_attack(bool value) {
  set_has_stop_attack();
  stop_attack_ = value;
}

// -------------------------------------------------------------------

// gp_stop_cg

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_stop_cg];
inline bool gp_stop_cg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_stop_cg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_stop_cg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_stop_cg::clear_type() {
  type_ = 540;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_stop_cg::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_stop_cg::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool cg_player_complete = 2 [default = true];
inline bool gp_stop_cg::has_cg_player_complete() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_stop_cg::set_has_cg_player_complete() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_stop_cg::clear_has_cg_player_complete() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_stop_cg::clear_cg_player_complete() {
  cg_player_complete_ = true;
  clear_has_cg_player_complete();
}
inline bool gp_stop_cg::cg_player_complete() const {
  return cg_player_complete_;
}
inline void gp_stop_cg::set_cg_player_complete(bool value) {
  set_has_cg_player_complete();
  cg_player_complete_ = value;
}

// -------------------------------------------------------------------

// gp_player_stune_config

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_stunt_config];
inline bool gp_player_stune_config::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_player_stune_config::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_player_stune_config::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_player_stune_config::clear_type() {
  type_ = 546;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_player_stune_config::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_player_stune_config::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.player_stune_config config = 2;
inline bool gp_player_stune_config::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_player_stune_config::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_player_stune_config::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_player_stune_config::clear_config() {
  if (config_ != NULL) config_->::PB::player_stune_config::Clear();
  clear_has_config();
}
inline const ::PB::player_stune_config& gp_player_stune_config::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::PB::player_stune_config* gp_player_stune_config::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::PB::player_stune_config;
  return config_;
}
inline ::PB::player_stune_config* gp_player_stune_config::release_config() {
  clear_has_config();
  ::PB::player_stune_config* temp = config_;
  config_ = NULL;
  return temp;
}
inline void gp_player_stune_config::set_allocated_config(::PB::player_stune_config* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// -------------------------------------------------------------------

// gp_stunt_config_res

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_stunt_config_res];
inline bool gp_stunt_config_res::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_stunt_config_res::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_stunt_config_res::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_stunt_config_res::clear_type() {
  type_ = 545;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_stunt_config_res::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_stunt_config_res::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 retcode = 2;
inline bool gp_stunt_config_res::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_stunt_config_res::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_stunt_config_res::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_stunt_config_res::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 gp_stunt_config_res::retcode() const {
  return retcode_;
}
inline void gp_stunt_config_res::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required .PB.STUNT_CONFIG_TYPE op = 3;
inline bool gp_stunt_config_res::has_op() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_stunt_config_res::set_has_op() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_stunt_config_res::clear_has_op() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_stunt_config_res::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::PB::STUNT_CONFIG_TYPE gp_stunt_config_res::op() const {
  return static_cast< ::PB::STUNT_CONFIG_TYPE >(op_);
}
inline void gp_stunt_config_res::set_op(::PB::STUNT_CONFIG_TYPE value) {
  assert(::PB::STUNT_CONFIG_TYPE_IsValid(value));
  set_has_op();
  op_ = value;
}

// optional int32 rune_set_index = 4;
inline bool gp_stunt_config_res::has_rune_set_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_stunt_config_res::set_has_rune_set_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_stunt_config_res::clear_has_rune_set_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_stunt_config_res::clear_rune_set_index() {
  rune_set_index_ = 0;
  clear_has_rune_set_index();
}
inline ::google::protobuf::int32 gp_stunt_config_res::rune_set_index() const {
  return rune_set_index_;
}
inline void gp_stunt_config_res::set_rune_set_index(::google::protobuf::int32 value) {
  set_has_rune_set_index();
  rune_set_index_ = value;
}

// optional int32 master_skill_id = 5;
inline bool gp_stunt_config_res::has_master_skill_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_stunt_config_res::set_has_master_skill_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_stunt_config_res::clear_has_master_skill_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_stunt_config_res::clear_master_skill_id() {
  master_skill_id_ = 0;
  clear_has_master_skill_id();
}
inline ::google::protobuf::int32 gp_stunt_config_res::master_skill_id() const {
  return master_skill_id_;
}
inline void gp_stunt_config_res::set_master_skill_id(::google::protobuf::int32 value) {
  set_has_master_skill_id();
  master_skill_id_ = value;
}

// optional int32 rune_index = 6;
inline bool gp_stunt_config_res::has_rune_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_stunt_config_res::set_has_rune_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_stunt_config_res::clear_has_rune_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_stunt_config_res::clear_rune_index() {
  rune_index_ = 0;
  clear_has_rune_index();
}
inline ::google::protobuf::int32 gp_stunt_config_res::rune_index() const {
  return rune_index_;
}
inline void gp_stunt_config_res::set_rune_index(::google::protobuf::int32 value) {
  set_has_rune_index();
  rune_index_ = value;
}

// optional int32 ret_value = 7;
inline bool gp_stunt_config_res::has_ret_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_stunt_config_res::set_has_ret_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_stunt_config_res::clear_has_ret_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_stunt_config_res::clear_ret_value() {
  ret_value_ = 0;
  clear_has_ret_value();
}
inline ::google::protobuf::int32 gp_stunt_config_res::ret_value() const {
  return ret_value_;
}
inline void gp_stunt_config_res::set_ret_value(::google::protobuf::int32 value) {
  set_has_ret_value();
  ret_value_ = value;
}

// -------------------------------------------------------------------

// gp_card_data_notify

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_card_data_notify];
inline bool gp_card_data_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_card_data_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_card_data_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_card_data_notify::clear_type() {
  type_ = 544;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_card_data_notify::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_card_data_notify::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_card_data_notify.N_TYPE notify_type = 2;
inline bool gp_card_data_notify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_card_data_notify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_card_data_notify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_card_data_notify::clear_notify_type() {
  notify_type_ = 1;
  clear_has_notify_type();
}
inline ::PB::gp_card_data_notify_N_TYPE gp_card_data_notify::notify_type() const {
  return static_cast< ::PB::gp_card_data_notify_N_TYPE >(notify_type_);
}
inline void gp_card_data_notify::set_notify_type(::PB::gp_card_data_notify_N_TYPE value) {
  assert(::PB::gp_card_data_notify_N_TYPE_IsValid(value));
  set_has_notify_type();
  notify_type_ = value;
}

// repeated .PB.card_info cards = 3;
inline int gp_card_data_notify::cards_size() const {
  return cards_.size();
}
inline void gp_card_data_notify::clear_cards() {
  cards_.Clear();
}
inline const ::PB::card_info& gp_card_data_notify::cards(int index) const {
  return cards_.Get(index);
}
inline ::PB::card_info* gp_card_data_notify::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::PB::card_info* gp_card_data_notify::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::card_info >&
gp_card_data_notify::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::card_info >*
gp_card_data_notify::mutable_cards() {
  return &cards_;
}

// repeated int32 card_suits = 4;
inline int gp_card_data_notify::card_suits_size() const {
  return card_suits_.size();
}
inline void gp_card_data_notify::clear_card_suits() {
  card_suits_.Clear();
}
inline ::google::protobuf::int32 gp_card_data_notify::card_suits(int index) const {
  return card_suits_.Get(index);
}
inline void gp_card_data_notify::set_card_suits(int index, ::google::protobuf::int32 value) {
  card_suits_.Set(index, value);
}
inline void gp_card_data_notify::add_card_suits(::google::protobuf::int32 value) {
  card_suits_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gp_card_data_notify::card_suits() const {
  return card_suits_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gp_card_data_notify::mutable_card_suits() {
  return &card_suits_;
}

// -------------------------------------------------------------------

// gp_load_protoc_finish

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_load_protoc_finish];
inline bool gp_load_protoc_finish::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_load_protoc_finish::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_load_protoc_finish::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_load_protoc_finish::clear_type() {
  type_ = 547;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_load_protoc_finish::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_load_protoc_finish::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool is_login = 2;
inline bool gp_load_protoc_finish::has_is_login() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_load_protoc_finish::set_has_is_login() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_load_protoc_finish::clear_has_is_login() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_load_protoc_finish::clear_is_login() {
  is_login_ = false;
  clear_has_is_login();
}
inline bool gp_load_protoc_finish::is_login() const {
  return is_login_;
}
inline void gp_load_protoc_finish::set_is_login(bool value) {
  set_has_is_login();
  is_login_ = value;
}

// -------------------------------------------------------------------

// gp_magicshop_notify

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_climbtower_magic_shop];
inline bool gp_magicshop_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_magicshop_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_magicshop_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_magicshop_notify::clear_type() {
  type_ = 570;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_magicshop_notify::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_magicshop_notify::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_magicshop_notify.NOTIFY_TYPE notify_type = 2;
inline bool gp_magicshop_notify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_magicshop_notify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_magicshop_notify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_magicshop_notify::clear_notify_type() {
  notify_type_ = 1;
  clear_has_notify_type();
}
inline ::PB::gp_magicshop_notify_NOTIFY_TYPE gp_magicshop_notify::notify_type() const {
  return static_cast< ::PB::gp_magicshop_notify_NOTIFY_TYPE >(notify_type_);
}
inline void gp_magicshop_notify::set_notify_type(::PB::gp_magicshop_notify_NOTIFY_TYPE value) {
  assert(::PB::gp_magicshop_notify_NOTIFY_TYPE_IsValid(value));
  set_has_notify_type();
  notify_type_ = value;
}

// repeated .PB.climbtower_magic_shop_info climbtower_shops = 3;
inline int gp_magicshop_notify::climbtower_shops_size() const {
  return climbtower_shops_.size();
}
inline void gp_magicshop_notify::clear_climbtower_shops() {
  climbtower_shops_.Clear();
}
inline const ::PB::climbtower_magic_shop_info& gp_magicshop_notify::climbtower_shops(int index) const {
  return climbtower_shops_.Get(index);
}
inline ::PB::climbtower_magic_shop_info* gp_magicshop_notify::mutable_climbtower_shops(int index) {
  return climbtower_shops_.Mutable(index);
}
inline ::PB::climbtower_magic_shop_info* gp_magicshop_notify::add_climbtower_shops() {
  return climbtower_shops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info >&
gp_magicshop_notify::climbtower_shops() const {
  return climbtower_shops_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info >*
gp_magicshop_notify::mutable_climbtower_shops() {
  return &climbtower_shops_;
}

// -------------------------------------------------------------------

// gp_blackshop_notify

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_blackshop_notify];
inline bool gp_blackshop_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_blackshop_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_blackshop_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_blackshop_notify::clear_type() {
  type_ = 548;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_blackshop_notify::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_blackshop_notify::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_blackshop_notify.NOTIFY_TYPE notify_type = 2;
inline bool gp_blackshop_notify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_blackshop_notify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_blackshop_notify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_blackshop_notify::clear_notify_type() {
  notify_type_ = 1;
  clear_has_notify_type();
}
inline ::PB::gp_blackshop_notify_NOTIFY_TYPE gp_blackshop_notify::notify_type() const {
  return static_cast< ::PB::gp_blackshop_notify_NOTIFY_TYPE >(notify_type_);
}
inline void gp_blackshop_notify::set_notify_type(::PB::gp_blackshop_notify_NOTIFY_TYPE value) {
  assert(::PB::gp_blackshop_notify_NOTIFY_TYPE_IsValid(value));
  set_has_notify_type();
  notify_type_ = value;
}

// repeated .PB.black_shop_info shops = 3;
inline int gp_blackshop_notify::shops_size() const {
  return shops_.size();
}
inline void gp_blackshop_notify::clear_shops() {
  shops_.Clear();
}
inline const ::PB::black_shop_info& gp_blackshop_notify::shops(int index) const {
  return shops_.Get(index);
}
inline ::PB::black_shop_info* gp_blackshop_notify::mutable_shops(int index) {
  return shops_.Mutable(index);
}
inline ::PB::black_shop_info* gp_blackshop_notify::add_shops() {
  return shops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info >&
gp_blackshop_notify::shops() const {
  return shops_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info >*
gp_blackshop_notify::mutable_shops() {
  return &shops_;
}

// -------------------------------------------------------------------

// gp_hero_trial_config

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_hero_trial_config];
inline bool gp_hero_trial_config::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_hero_trial_config::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_hero_trial_config::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_hero_trial_config::clear_type() {
  type_ = 550;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_hero_trial_config::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_hero_trial_config::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.db_hero_trial_config config = 2;
inline bool gp_hero_trial_config::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_hero_trial_config::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_hero_trial_config::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_hero_trial_config::clear_config() {
  if (config_ != NULL) config_->::PB::db_hero_trial_config::Clear();
  clear_has_config();
}
inline const ::PB::db_hero_trial_config& gp_hero_trial_config::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::PB::db_hero_trial_config* gp_hero_trial_config::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::PB::db_hero_trial_config;
  return config_;
}
inline ::PB::db_hero_trial_config* gp_hero_trial_config::release_config() {
  clear_has_config();
  ::PB::db_hero_trial_config* temp = config_;
  config_ = NULL;
  return temp;
}
inline void gp_hero_trial_config::set_allocated_config(::PB::db_hero_trial_config* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// -------------------------------------------------------------------

// gp_duke_notify

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_duke_notify];
inline bool gp_duke_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_duke_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_duke_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_duke_notify::clear_type() {
  type_ = 549;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_duke_notify::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_duke_notify::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.gp_duke_notify.NOTIFY_TYPE notify_type = 2;
inline bool gp_duke_notify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_duke_notify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_duke_notify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_duke_notify::clear_notify_type() {
  notify_type_ = 1;
  clear_has_notify_type();
}
inline ::PB::gp_duke_notify_NOTIFY_TYPE gp_duke_notify::notify_type() const {
  return static_cast< ::PB::gp_duke_notify_NOTIFY_TYPE >(notify_type_);
}
inline void gp_duke_notify::set_notify_type(::PB::gp_duke_notify_NOTIFY_TYPE value) {
  assert(::PB::gp_duke_notify_NOTIFY_TYPE_IsValid(value));
  set_has_notify_type();
  notify_type_ = value;
}

// optional int32 duke_level = 3;
inline bool gp_duke_notify::has_duke_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_duke_notify::set_has_duke_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_duke_notify::clear_has_duke_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_duke_notify::clear_duke_level() {
  duke_level_ = 0;
  clear_has_duke_level();
}
inline ::google::protobuf::int32 gp_duke_notify::duke_level() const {
  return duke_level_;
}
inline void gp_duke_notify::set_duke_level(::google::protobuf::int32 value) {
  set_has_duke_level();
  duke_level_ = value;
}

// optional int32 active_duke_skill = 4;
inline bool gp_duke_notify::has_active_duke_skill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_duke_notify::set_has_active_duke_skill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_duke_notify::clear_has_active_duke_skill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_duke_notify::clear_active_duke_skill() {
  active_duke_skill_ = 0;
  clear_has_active_duke_skill();
}
inline ::google::protobuf::int32 gp_duke_notify::active_duke_skill() const {
  return active_duke_skill_;
}
inline void gp_duke_notify::set_active_duke_skill(::google::protobuf::int32 value) {
  set_has_active_duke_skill();
  active_duke_skill_ = value;
}

// optional int32 reward_count = 5;
inline bool gp_duke_notify::has_reward_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_duke_notify::set_has_reward_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_duke_notify::clear_has_reward_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_duke_notify::clear_reward_count() {
  reward_count_ = 0;
  clear_has_reward_count();
}
inline ::google::protobuf::int32 gp_duke_notify::reward_count() const {
  return reward_count_;
}
inline void gp_duke_notify::set_reward_count(::google::protobuf::int32 value) {
  set_has_reward_count();
  reward_count_ = value;
}

// -------------------------------------------------------------------

// gp_player_corp_config

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_player_crop_config];
inline bool gp_player_corp_config::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_player_corp_config::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_player_corp_config::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_player_corp_config::clear_type() {
  type_ = 551;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_player_corp_config::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_player_corp_config::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.player_corps_attr_config config = 2;
inline bool gp_player_corp_config::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_player_corp_config::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_player_corp_config::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_player_corp_config::clear_config() {
  if (config_ != NULL) config_->::PB::player_corps_attr_config::Clear();
  clear_has_config();
}
inline const ::PB::player_corps_attr_config& gp_player_corp_config::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::PB::player_corps_attr_config* gp_player_corp_config::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::PB::player_corps_attr_config;
  return config_;
}
inline ::PB::player_corps_attr_config* gp_player_corp_config::release_config() {
  clear_has_config();
  ::PB::player_corps_attr_config* temp = config_;
  config_ = NULL;
  return temp;
}
inline void gp_player_corp_config::set_allocated_config(::PB::player_corps_attr_config* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// -------------------------------------------------------------------

// gp_net_error_message

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_net_error_message];
inline bool gp_net_error_message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_net_error_message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_net_error_message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_net_error_message::clear_type() {
  type_ = 555;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_net_error_message::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_net_error_message::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 for_ipt_proto_type = 2;
inline bool gp_net_error_message::has_for_ipt_proto_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_net_error_message::set_has_for_ipt_proto_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_net_error_message::clear_has_for_ipt_proto_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_net_error_message::clear_for_ipt_proto_type() {
  for_ipt_proto_type_ = 0;
  clear_has_for_ipt_proto_type();
}
inline ::google::protobuf::int32 gp_net_error_message::for_ipt_proto_type() const {
  return for_ipt_proto_type_;
}
inline void gp_net_error_message::set_for_ipt_proto_type(::google::protobuf::int32 value) {
  set_has_for_ipt_proto_type();
  for_ipt_proto_type_ = value;
}

// optional int32 error_code = 3;
inline bool gp_net_error_message::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_net_error_message::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_net_error_message::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_net_error_message::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gp_net_error_message::error_code() const {
  return error_code_;
}
inline void gp_net_error_message::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// gp_gs_error_message

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_gs_error_message];
inline bool gp_gs_error_message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_gs_error_message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_gs_error_message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_gs_error_message::clear_type() {
  type_ = 587;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_gs_error_message::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_gs_error_message::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 proto_type = 2;
inline bool gp_gs_error_message::has_proto_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_gs_error_message::set_has_proto_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_gs_error_message::clear_has_proto_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_gs_error_message::clear_proto_type() {
  proto_type_ = 0;
  clear_has_proto_type();
}
inline ::google::protobuf::int32 gp_gs_error_message::proto_type() const {
  return proto_type_;
}
inline void gp_gs_error_message::set_proto_type(::google::protobuf::int32 value) {
  set_has_proto_type();
  proto_type_ = value;
}

// optional int32 error_code = 3;
inline bool gp_gs_error_message::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_gs_error_message::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_gs_error_message::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_gs_error_message::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gp_gs_error_message::error_code() const {
  return error_code_;
}
inline void gp_gs_error_message::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional int32 param = 4;
inline bool gp_gs_error_message::has_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_gs_error_message::set_has_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_gs_error_message::clear_has_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_gs_error_message::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 gp_gs_error_message::param() const {
  return param_;
}
inline void gp_gs_error_message::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// instance_info_t

// optional int32 tid = 1;
inline bool instance_info_t::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void instance_info_t::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void instance_info_t::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void instance_info_t::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 instance_info_t::tid() const {
  return tid_;
}
inline void instance_info_t::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 timestamp = 2;
inline bool instance_info_t::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void instance_info_t::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void instance_info_t::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void instance_info_t::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 instance_info_t::timestamp() const {
  return timestamp_;
}
inline void instance_info_t::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional int32 count = 3;
inline bool instance_info_t::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void instance_info_t::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void instance_info_t::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void instance_info_t::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 instance_info_t::count() const {
  return count_;
}
inline void instance_info_t::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 addition_count = 4;
inline bool instance_info_t::has_addition_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void instance_info_t::set_has_addition_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void instance_info_t::clear_has_addition_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void instance_info_t::clear_addition_count() {
  addition_count_ = 0;
  clear_has_addition_count();
}
inline ::google::protobuf::int32 instance_info_t::addition_count() const {
  return addition_count_;
}
inline void instance_info_t::set_addition_count(::google::protobuf::int32 value) {
  set_has_addition_count();
  addition_count_ = value;
}

// optional int32 professional = 5;
inline bool instance_info_t::has_professional() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void instance_info_t::set_has_professional() {
  _has_bits_[0] |= 0x00000010u;
}
inline void instance_info_t::clear_has_professional() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void instance_info_t::clear_professional() {
  professional_ = 0;
  clear_has_professional();
}
inline ::google::protobuf::int32 instance_info_t::professional() const {
  return professional_;
}
inline void instance_info_t::set_professional(::google::protobuf::int32 value) {
  set_has_professional();
  professional_ = value;
}

// optional int32 refresh_timestamp = 6;
inline bool instance_info_t::has_refresh_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void instance_info_t::set_has_refresh_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void instance_info_t::clear_has_refresh_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void instance_info_t::clear_refresh_timestamp() {
  refresh_timestamp_ = 0;
  clear_has_refresh_timestamp();
}
inline ::google::protobuf::int32 instance_info_t::refresh_timestamp() const {
  return refresh_timestamp_;
}
inline void instance_info_t::set_refresh_timestamp(::google::protobuf::int32 value) {
  set_has_refresh_timestamp();
  refresh_timestamp_ = value;
}

// optional int32 use_time = 7;
inline bool instance_info_t::has_use_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void instance_info_t::set_has_use_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void instance_info_t::clear_has_use_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void instance_info_t::clear_use_time() {
  use_time_ = 0;
  clear_has_use_time();
}
inline ::google::protobuf::int32 instance_info_t::use_time() const {
  return use_time_;
}
inline void instance_info_t::set_use_time(::google::protobuf::int32 value) {
  set_has_use_time();
  use_time_ = value;
}

// optional int32 max_difficulty = 8;
inline bool instance_info_t::has_max_difficulty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void instance_info_t::set_has_max_difficulty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void instance_info_t::clear_has_max_difficulty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void instance_info_t::clear_max_difficulty() {
  max_difficulty_ = 0;
  clear_has_max_difficulty();
}
inline ::google::protobuf::int32 instance_info_t::max_difficulty() const {
  return max_difficulty_;
}
inline void instance_info_t::set_max_difficulty(::google::protobuf::int32 value) {
  set_has_max_difficulty();
  max_difficulty_ = value;
}

// -------------------------------------------------------------------

// gp_instance_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_instance_info];
inline bool gp_instance_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_instance_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_instance_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_instance_info::clear_type() {
  type_ = 556;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_instance_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_instance_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 mode = 2 [default = -1];
inline bool gp_instance_info::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_instance_info::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_instance_info::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_instance_info::clear_mode() {
  mode_ = -1;
  clear_has_mode();
}
inline ::google::protobuf::int32 gp_instance_info::mode() const {
  return mode_;
}
inline void gp_instance_info::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// repeated .PB.instance_info_t info = 3;
inline int gp_instance_info::info_size() const {
  return info_.size();
}
inline void gp_instance_info::clear_info() {
  info_.Clear();
}
inline const ::PB::instance_info_t& gp_instance_info::info(int index) const {
  return info_.Get(index);
}
inline ::PB::instance_info_t* gp_instance_info::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PB::instance_info_t* gp_instance_info::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::instance_info_t >&
gp_instance_info::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::instance_info_t >*
gp_instance_info::mutable_info() {
  return &info_;
}

// repeated int32 passed_instance = 4;
inline int gp_instance_info::passed_instance_size() const {
  return passed_instance_.size();
}
inline void gp_instance_info::clear_passed_instance() {
  passed_instance_.Clear();
}
inline ::google::protobuf::int32 gp_instance_info::passed_instance(int index) const {
  return passed_instance_.Get(index);
}
inline void gp_instance_info::set_passed_instance(int index, ::google::protobuf::int32 value) {
  passed_instance_.Set(index, value);
}
inline void gp_instance_info::add_passed_instance(::google::protobuf::int32 value) {
  passed_instance_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gp_instance_info::passed_instance() const {
  return passed_instance_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gp_instance_info::mutable_passed_instance() {
  return &passed_instance_;
}

// optional bool total_info = 5 [default = false];
inline bool gp_instance_info::has_total_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_instance_info::set_has_total_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_instance_info::clear_has_total_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_instance_info::clear_total_info() {
  total_info_ = false;
  clear_has_total_info();
}
inline bool gp_instance_info::total_info() const {
  return total_info_;
}
inline void gp_instance_info::set_total_info(bool value) {
  set_has_total_info();
  total_info_ = value;
}

// -------------------------------------------------------------------

// gp_inventory_size

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_inventory_size];
inline bool gp_inventory_size::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_inventory_size::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_inventory_size::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_inventory_size::clear_type() {
  type_ = 557;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_inventory_size::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_inventory_size::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 inventory_type = 2 [default = 0];
inline bool gp_inventory_size::has_inventory_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_inventory_size::set_has_inventory_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_inventory_size::clear_has_inventory_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_inventory_size::clear_inventory_type() {
  inventory_type_ = 0;
  clear_has_inventory_type();
}
inline ::google::protobuf::int32 gp_inventory_size::inventory_type() const {
  return inventory_type_;
}
inline void gp_inventory_size::set_inventory_type(::google::protobuf::int32 value) {
  set_has_inventory_type();
  inventory_type_ = value;
}

// optional int32 cur_size = 3;
inline bool gp_inventory_size::has_cur_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_inventory_size::set_has_cur_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_inventory_size::clear_has_cur_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_inventory_size::clear_cur_size() {
  cur_size_ = 0;
  clear_has_cur_size();
}
inline ::google::protobuf::int32 gp_inventory_size::cur_size() const {
  return cur_size_;
}
inline void gp_inventory_size::set_cur_size(::google::protobuf::int32 value) {
  set_has_cur_size();
  cur_size_ = value;
}

// optional int32 reason = 4;
inline bool gp_inventory_size::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_inventory_size::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_inventory_size::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_inventory_size::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 gp_inventory_size::reason() const {
  return reason_;
}
inline void gp_inventory_size::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// gp_level_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_level_result];
inline bool gp_level_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_level_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_level_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_level_result::clear_type() {
  type_ = 558;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_level_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_level_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool gp_level_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_level_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_level_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_level_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gp_level_result::result() const {
  return result_;
}
inline void gp_level_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated bytes list_name = 3;
inline int gp_level_result::list_name_size() const {
  return list_name_.size();
}
inline void gp_level_result::clear_list_name() {
  list_name_.Clear();
}
inline const ::std::string& gp_level_result::list_name(int index) const {
  return list_name_.Get(index);
}
inline ::std::string* gp_level_result::mutable_list_name(int index) {
  return list_name_.Mutable(index);
}
inline void gp_level_result::set_list_name(int index, const ::std::string& value) {
  list_name_.Mutable(index)->assign(value);
}
inline void gp_level_result::set_list_name(int index, const char* value) {
  list_name_.Mutable(index)->assign(value);
}
inline void gp_level_result::set_list_name(int index, const void* value, size_t size) {
  list_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_level_result::add_list_name() {
  return list_name_.Add();
}
inline void gp_level_result::add_list_name(const ::std::string& value) {
  list_name_.Add()->assign(value);
}
inline void gp_level_result::add_list_name(const char* value) {
  list_name_.Add()->assign(value);
}
inline void gp_level_result::add_list_name(const void* value, size_t size) {
  list_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
gp_level_result::list_name() const {
  return list_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
gp_level_result::mutable_list_name() {
  return &list_name_;
}

// repeated int32 list_score = 4;
inline int gp_level_result::list_score_size() const {
  return list_score_.size();
}
inline void gp_level_result::clear_list_score() {
  list_score_.Clear();
}
inline ::google::protobuf::int32 gp_level_result::list_score(int index) const {
  return list_score_.Get(index);
}
inline void gp_level_result::set_list_score(int index, ::google::protobuf::int32 value) {
  list_score_.Set(index, value);
}
inline void gp_level_result::add_list_score(::google::protobuf::int32 value) {
  list_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gp_level_result::list_score() const {
  return list_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gp_level_result::mutable_list_score() {
  return &list_score_;
}

// -------------------------------------------------------------------

// modify_corps_data

// optional int32 padding = 1;
inline bool modify_corps_data::has_padding() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void modify_corps_data::set_has_padding() {
  _has_bits_[0] |= 0x00000001u;
}
inline void modify_corps_data::clear_has_padding() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void modify_corps_data::clear_padding() {
  padding_ = 0;
  clear_has_padding();
}
inline ::google::protobuf::int32 modify_corps_data::padding() const {
  return padding_;
}
inline void modify_corps_data::set_padding(::google::protobuf::int32 value) {
  set_has_padding();
  padding_ = value;
}

// required int32 corpsid = 2;
inline bool modify_corps_data::has_corpsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void modify_corps_data::set_has_corpsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void modify_corps_data::clear_has_corpsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void modify_corps_data::clear_corpsid() {
  corpsid_ = 0;
  clear_has_corpsid();
}
inline ::google::protobuf::int32 modify_corps_data::corpsid() const {
  return corpsid_;
}
inline void modify_corps_data::set_corpsid(::google::protobuf::int32 value) {
  set_has_corpsid();
  corpsid_ = value;
}

// optional int32 mode = 3;
inline bool modify_corps_data::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void modify_corps_data::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void modify_corps_data::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void modify_corps_data::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 modify_corps_data::mode() const {
  return mode_;
}
inline void modify_corps_data::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// optional int64 roleid = 5;
inline bool modify_corps_data::has_roleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void modify_corps_data::set_has_roleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void modify_corps_data::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void modify_corps_data::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 modify_corps_data::roleid() const {
  return roleid_;
}
inline void modify_corps_data::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int64 money = 6;
inline bool modify_corps_data::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void modify_corps_data::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void modify_corps_data::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void modify_corps_data::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 modify_corps_data::money() const {
  return money_;
}
inline void modify_corps_data::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// optional int64 contribution = 7;
inline bool modify_corps_data::has_contribution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void modify_corps_data::set_has_contribution() {
  _has_bits_[0] |= 0x00000020u;
}
inline void modify_corps_data::clear_has_contribution() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void modify_corps_data::clear_contribution() {
  contribution_ = GOOGLE_LONGLONG(0);
  clear_has_contribution();
}
inline ::google::protobuf::int64 modify_corps_data::contribution() const {
  return contribution_;
}
inline void modify_corps_data::set_contribution(::google::protobuf::int64 value) {
  set_has_contribution();
  contribution_ = value;
}

// optional int64 key = 8;
inline bool modify_corps_data::has_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void modify_corps_data::set_has_key() {
  _has_bits_[0] |= 0x00000040u;
}
inline void modify_corps_data::clear_has_key() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void modify_corps_data::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::int64 modify_corps_data::key() const {
  return key_;
}
inline void modify_corps_data::set_key(::google::protobuf::int64 value) {
  set_has_key();
  key_ = value;
}

// optional int64 value = 9;
inline bool modify_corps_data::has_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void modify_corps_data::set_has_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void modify_corps_data::clear_has_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void modify_corps_data::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 modify_corps_data::value() const {
  return value_;
}
inline void modify_corps_data::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// gp_ipt_container

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_ipt_container];
inline bool gp_ipt_container::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_ipt_container::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_ipt_container::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_ipt_container::clear_type() {
  type_ = 560;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_ipt_container::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_ipt_container::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.modify_corps_data corps_info = 2;
inline bool gp_ipt_container::has_corps_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_ipt_container::set_has_corps_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_ipt_container::clear_has_corps_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_ipt_container::clear_corps_info() {
  if (corps_info_ != NULL) corps_info_->::PB::modify_corps_data::Clear();
  clear_has_corps_info();
}
inline const ::PB::modify_corps_data& gp_ipt_container::corps_info() const {
  return corps_info_ != NULL ? *corps_info_ : *default_instance_->corps_info_;
}
inline ::PB::modify_corps_data* gp_ipt_container::mutable_corps_info() {
  set_has_corps_info();
  if (corps_info_ == NULL) corps_info_ = new ::PB::modify_corps_data;
  return corps_info_;
}
inline ::PB::modify_corps_data* gp_ipt_container::release_corps_info() {
  clear_has_corps_info();
  ::PB::modify_corps_data* temp = corps_info_;
  corps_info_ = NULL;
  return temp;
}
inline void gp_ipt_container::set_allocated_corps_info(::PB::modify_corps_data* corps_info) {
  delete corps_info_;
  corps_info_ = corps_info;
  if (corps_info) {
    set_has_corps_info();
  } else {
    clear_has_corps_info();
  }
}

// -------------------------------------------------------------------

// db_corp_farm_data

// optional int32 level = 1;
inline bool db_corp_farm_data::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_corp_farm_data::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_corp_farm_data::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_corp_farm_data::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 db_corp_farm_data::level() const {
  return level_;
}
inline void db_corp_farm_data::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 exp = 2;
inline bool db_corp_farm_data::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_corp_farm_data::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_corp_farm_data::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_corp_farm_data::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 db_corp_farm_data::exp() const {
  return exp_;
}
inline void db_corp_farm_data::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// repeated .PB.corp_farmland farmlands = 3;
inline int db_corp_farm_data::farmlands_size() const {
  return farmlands_.size();
}
inline void db_corp_farm_data::clear_farmlands() {
  farmlands_.Clear();
}
inline const ::PB::corp_farmland& db_corp_farm_data::farmlands(int index) const {
  return farmlands_.Get(index);
}
inline ::PB::corp_farmland* db_corp_farm_data::mutable_farmlands(int index) {
  return farmlands_.Mutable(index);
}
inline ::PB::corp_farmland* db_corp_farm_data::add_farmlands() {
  return farmlands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_farmland >&
db_corp_farm_data::farmlands() const {
  return farmlands_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::corp_farmland >*
db_corp_farm_data::mutable_farmlands() {
  return &farmlands_;
}

// -------------------------------------------------------------------

// gp_farm_data

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_farm_data];
inline bool gp_farm_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_farm_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_farm_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_farm_data::clear_type() {
  type_ = 561;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_farm_data::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_farm_data::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.db_corp_farm_data whole = 2;
inline bool gp_farm_data::has_whole() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_farm_data::set_has_whole() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_farm_data::clear_has_whole() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_farm_data::clear_whole() {
  if (whole_ != NULL) whole_->::PB::db_corp_farm_data::Clear();
  clear_has_whole();
}
inline const ::PB::db_corp_farm_data& gp_farm_data::whole() const {
  return whole_ != NULL ? *whole_ : *default_instance_->whole_;
}
inline ::PB::db_corp_farm_data* gp_farm_data::mutable_whole() {
  set_has_whole();
  if (whole_ == NULL) whole_ = new ::PB::db_corp_farm_data;
  return whole_;
}
inline ::PB::db_corp_farm_data* gp_farm_data::release_whole() {
  clear_has_whole();
  ::PB::db_corp_farm_data* temp = whole_;
  whole_ = NULL;
  return temp;
}
inline void gp_farm_data::set_allocated_whole(::PB::db_corp_farm_data* whole) {
  delete whole_;
  whole_ = whole;
  if (whole) {
    set_has_whole();
  } else {
    clear_has_whole();
  }
}

// optional .PB.corp_farmland part_farmland = 3;
inline bool gp_farm_data::has_part_farmland() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_farm_data::set_has_part_farmland() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_farm_data::clear_has_part_farmland() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_farm_data::clear_part_farmland() {
  if (part_farmland_ != NULL) part_farmland_->::PB::corp_farmland::Clear();
  clear_has_part_farmland();
}
inline const ::PB::corp_farmland& gp_farm_data::part_farmland() const {
  return part_farmland_ != NULL ? *part_farmland_ : *default_instance_->part_farmland_;
}
inline ::PB::corp_farmland* gp_farm_data::mutable_part_farmland() {
  set_has_part_farmland();
  if (part_farmland_ == NULL) part_farmland_ = new ::PB::corp_farmland;
  return part_farmland_;
}
inline ::PB::corp_farmland* gp_farm_data::release_part_farmland() {
  clear_has_part_farmland();
  ::PB::corp_farmland* temp = part_farmland_;
  part_farmland_ = NULL;
  return temp;
}
inline void gp_farm_data::set_allocated_part_farmland(::PB::corp_farmland* part_farmland) {
  delete part_farmland_;
  part_farmland_ = part_farmland;
  if (part_farmland) {
    set_has_part_farmland();
  } else {
    clear_has_part_farmland();
  }
}

// optional uint32 part_farmland_index = 4;
inline bool gp_farm_data::has_part_farmland_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_farm_data::set_has_part_farmland_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_farm_data::clear_has_part_farmland_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_farm_data::clear_part_farmland_index() {
  part_farmland_index_ = 0u;
  clear_has_part_farmland_index();
}
inline ::google::protobuf::uint32 gp_farm_data::part_farmland_index() const {
  return part_farmland_index_;
}
inline void gp_farm_data::set_part_farmland_index(::google::protobuf::uint32 value) {
  set_has_part_farmland_index();
  part_farmland_index_ = value;
}

// -------------------------------------------------------------------

// gp_climb_tower

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_climb_tower];
inline bool gp_climb_tower::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_climb_tower::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_climb_tower::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_climb_tower::clear_type() {
  type_ = 562;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_climb_tower::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_climb_tower::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 max_tower_lvl = 2;
inline bool gp_climb_tower::has_max_tower_lvl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_climb_tower::set_has_max_tower_lvl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_climb_tower::clear_has_max_tower_lvl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_climb_tower::clear_max_tower_lvl() {
  max_tower_lvl_ = 0;
  clear_has_max_tower_lvl();
}
inline ::google::protobuf::int32 gp_climb_tower::max_tower_lvl() const {
  return max_tower_lvl_;
}
inline void gp_climb_tower::set_max_tower_lvl(::google::protobuf::int32 value) {
  set_has_max_tower_lvl();
  max_tower_lvl_ = value;
}

// required int32 cur_tower_lvl = 3;
inline bool gp_climb_tower::has_cur_tower_lvl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_climb_tower::set_has_cur_tower_lvl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_climb_tower::clear_has_cur_tower_lvl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_climb_tower::clear_cur_tower_lvl() {
  cur_tower_lvl_ = 0;
  clear_has_cur_tower_lvl();
}
inline ::google::protobuf::int32 gp_climb_tower::cur_tower_lvl() const {
  return cur_tower_lvl_;
}
inline void gp_climb_tower::set_cur_tower_lvl(::google::protobuf::int32 value) {
  set_has_cur_tower_lvl();
  cur_tower_lvl_ = value;
}

// required bool is_auto_running = 5;
inline bool gp_climb_tower::has_is_auto_running() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_climb_tower::set_has_is_auto_running() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_climb_tower::clear_has_is_auto_running() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_climb_tower::clear_is_auto_running() {
  is_auto_running_ = false;
  clear_has_is_auto_running();
}
inline bool gp_climb_tower::is_auto_running() const {
  return is_auto_running_;
}
inline void gp_climb_tower::set_is_auto_running(bool value) {
  set_has_is_auto_running();
  is_auto_running_ = value;
}

// required int32 auto_begin_time = 6;
inline bool gp_climb_tower::has_auto_begin_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_climb_tower::set_has_auto_begin_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_climb_tower::clear_has_auto_begin_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_climb_tower::clear_auto_begin_time() {
  auto_begin_time_ = 0;
  clear_has_auto_begin_time();
}
inline ::google::protobuf::int32 gp_climb_tower::auto_begin_time() const {
  return auto_begin_time_;
}
inline void gp_climb_tower::set_auto_begin_time(::google::protobuf::int32 value) {
  set_has_auto_begin_time();
  auto_begin_time_ = value;
}

// required int32 auto_begin_lvl = 7;
inline bool gp_climb_tower::has_auto_begin_lvl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_climb_tower::set_has_auto_begin_lvl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_climb_tower::clear_has_auto_begin_lvl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_climb_tower::clear_auto_begin_lvl() {
  auto_begin_lvl_ = 0;
  clear_has_auto_begin_lvl();
}
inline ::google::protobuf::int32 gp_climb_tower::auto_begin_lvl() const {
  return auto_begin_lvl_;
}
inline void gp_climb_tower::set_auto_begin_lvl(::google::protobuf::int32 value) {
  set_has_auto_begin_lvl();
  auto_begin_lvl_ = value;
}

// required int32 auto_reward_begin = 8;
inline bool gp_climb_tower::has_auto_reward_begin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_climb_tower::set_has_auto_reward_begin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_climb_tower::clear_has_auto_reward_begin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_climb_tower::clear_auto_reward_begin() {
  auto_reward_begin_ = 0;
  clear_has_auto_reward_begin();
}
inline ::google::protobuf::int32 gp_climb_tower::auto_reward_begin() const {
  return auto_reward_begin_;
}
inline void gp_climb_tower::set_auto_reward_begin(::google::protobuf::int32 value) {
  set_has_auto_reward_begin();
  auto_reward_begin_ = value;
}

// required int32 auto_reward_end = 9;
inline bool gp_climb_tower::has_auto_reward_end() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gp_climb_tower::set_has_auto_reward_end() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gp_climb_tower::clear_has_auto_reward_end() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gp_climb_tower::clear_auto_reward_end() {
  auto_reward_end_ = 0;
  clear_has_auto_reward_end();
}
inline ::google::protobuf::int32 gp_climb_tower::auto_reward_end() const {
  return auto_reward_end_;
}
inline void gp_climb_tower::set_auto_reward_end(::google::protobuf::int32 value) {
  set_has_auto_reward_end();
  auto_reward_end_ = value;
}

// required int32 auto_cur_lvl = 10;
inline bool gp_climb_tower::has_auto_cur_lvl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gp_climb_tower::set_has_auto_cur_lvl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gp_climb_tower::clear_has_auto_cur_lvl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gp_climb_tower::clear_auto_cur_lvl() {
  auto_cur_lvl_ = 0;
  clear_has_auto_cur_lvl();
}
inline ::google::protobuf::int32 gp_climb_tower::auto_cur_lvl() const {
  return auto_cur_lvl_;
}
inline void gp_climb_tower::set_auto_cur_lvl(::google::protobuf::int32 value) {
  set_has_auto_cur_lvl();
  auto_cur_lvl_ = value;
}

// repeated .PB.level_shopid level4shopid = 11;
inline int gp_climb_tower::level4shopid_size() const {
  return level4shopid_.size();
}
inline void gp_climb_tower::clear_level4shopid() {
  level4shopid_.Clear();
}
inline const ::PB::level_shopid& gp_climb_tower::level4shopid(int index) const {
  return level4shopid_.Get(index);
}
inline ::PB::level_shopid* gp_climb_tower::mutable_level4shopid(int index) {
  return level4shopid_.Mutable(index);
}
inline ::PB::level_shopid* gp_climb_tower::add_level4shopid() {
  return level4shopid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::level_shopid >&
gp_climb_tower::level4shopid() const {
  return level4shopid_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::level_shopid >*
gp_climb_tower::mutable_level4shopid() {
  return &level4shopid_;
}

// -------------------------------------------------------------------

// gp_s2c_gs_ping

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_gs_ping];
inline bool gp_s2c_gs_ping::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_s2c_gs_ping::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_s2c_gs_ping::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_s2c_gs_ping::clear_type() {
  type_ = 564;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_s2c_gs_ping::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_s2c_gs_ping::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 client_send_time = 2;
inline bool gp_s2c_gs_ping::has_client_send_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_s2c_gs_ping::set_has_client_send_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_s2c_gs_ping::clear_has_client_send_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_s2c_gs_ping::clear_client_send_time() {
  client_send_time_ = 0;
  clear_has_client_send_time();
}
inline ::google::protobuf::int32 gp_s2c_gs_ping::client_send_time() const {
  return client_send_time_;
}
inline void gp_s2c_gs_ping::set_client_send_time(::google::protobuf::int32 value) {
  set_has_client_send_time();
  client_send_time_ = value;
}

// -------------------------------------------------------------------

// gp_level_score

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_level_score];
inline bool gp_level_score::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_level_score::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_level_score::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_level_score::clear_type() {
  type_ = 566;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_level_score::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_level_score::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 score = 2 [default = -1];
inline bool gp_level_score::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_level_score::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_level_score::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_level_score::clear_score() {
  score_ = -1;
  clear_has_score();
}
inline ::google::protobuf::int32 gp_level_score::score() const {
  return score_;
}
inline void gp_level_score::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// gp_player_list_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_player_list_info];
inline bool gp_player_list_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_player_list_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_player_list_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_player_list_info::clear_type() {
  type_ = 567;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_player_list_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_player_list_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated int32 new_id = 2;
inline int gp_player_list_info::new_id_size() const {
  return new_id_.size();
}
inline void gp_player_list_info::clear_new_id() {
  new_id_.Clear();
}
inline ::google::protobuf::int32 gp_player_list_info::new_id(int index) const {
  return new_id_.Get(index);
}
inline void gp_player_list_info::set_new_id(int index, ::google::protobuf::int32 value) {
  new_id_.Set(index, value);
}
inline void gp_player_list_info::add_new_id(::google::protobuf::int32 value) {
  new_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gp_player_list_info::new_id() const {
  return new_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gp_player_list_info::mutable_new_id() {
  return &new_id_;
}

// repeated int32 fightcapacity = 3;
inline int gp_player_list_info::fightcapacity_size() const {
  return fightcapacity_.size();
}
inline void gp_player_list_info::clear_fightcapacity() {
  fightcapacity_.Clear();
}
inline ::google::protobuf::int32 gp_player_list_info::fightcapacity(int index) const {
  return fightcapacity_.Get(index);
}
inline void gp_player_list_info::set_fightcapacity(int index, ::google::protobuf::int32 value) {
  fightcapacity_.Set(index, value);
}
inline void gp_player_list_info::add_fightcapacity(::google::protobuf::int32 value) {
  fightcapacity_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gp_player_list_info::fightcapacity() const {
  return fightcapacity_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gp_player_list_info::mutable_fightcapacity() {
  return &fightcapacity_;
}

// -------------------------------------------------------------------

// gp_level_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_level_info];
inline bool gp_level_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_level_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_level_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_level_info::clear_type() {
  type_ = 568;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_level_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_level_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 inst_start_time = 2;
inline bool gp_level_info::has_inst_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_level_info::set_has_inst_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_level_info::clear_has_inst_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_level_info::clear_inst_start_time() {
  inst_start_time_ = 0;
  clear_has_inst_start_time();
}
inline ::google::protobuf::int32 gp_level_info::inst_start_time() const {
  return inst_start_time_;
}
inline void gp_level_info::set_inst_start_time(::google::protobuf::int32 value) {
  set_has_inst_start_time();
  inst_start_time_ = value;
}

// optional int32 stage_start_time = 3;
inline bool gp_level_info::has_stage_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_level_info::set_has_stage_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_level_info::clear_has_stage_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_level_info::clear_stage_start_time() {
  stage_start_time_ = 0;
  clear_has_stage_start_time();
}
inline ::google::protobuf::int32 gp_level_info::stage_start_time() const {
  return stage_start_time_;
}
inline void gp_level_info::set_stage_start_time(::google::protobuf::int32 value) {
  set_has_stage_start_time();
  stage_start_time_ = value;
}

// -------------------------------------------------------------------

// gp_notify_ask_help

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_ask_help];
inline bool gp_notify_ask_help::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_ask_help::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_ask_help::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_ask_help::clear_type() {
  type_ = 571;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_ask_help::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_ask_help::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 timestamp = 2;
inline bool gp_notify_ask_help::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_ask_help::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_ask_help::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_ask_help::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 gp_notify_ask_help::timestamp() const {
  return timestamp_;
}
inline void gp_notify_ask_help::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// gp_find_way_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_find_way_result];
inline bool gp_find_way_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_find_way_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_find_way_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_find_way_result::clear_type() {
  type_ = 575;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_find_way_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_find_way_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 retcode = 2;
inline bool gp_find_way_result::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_find_way_result::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_find_way_result::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_find_way_result::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 gp_find_way_result::retcode() const {
  return retcode_;
}
inline void gp_find_way_result::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// repeated .PB.a3d_pos way_point = 3;
inline int gp_find_way_result::way_point_size() const {
  return way_point_.size();
}
inline void gp_find_way_result::clear_way_point() {
  way_point_.Clear();
}
inline const ::PB::a3d_pos& gp_find_way_result::way_point(int index) const {
  return way_point_.Get(index);
}
inline ::PB::a3d_pos* gp_find_way_result::mutable_way_point(int index) {
  return way_point_.Mutable(index);
}
inline ::PB::a3d_pos* gp_find_way_result::add_way_point() {
  return way_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::a3d_pos >&
gp_find_way_result::way_point() const {
  return way_point_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::a3d_pos >*
gp_find_way_result::mutable_way_point() {
  return &way_point_;
}

// optional int32 reason = 4;
inline bool gp_find_way_result::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_find_way_result::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_find_way_result::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_find_way_result::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 gp_find_way_result::reason() const {
  return reason_;
}
inline void gp_find_way_result::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// gp_npc_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_npc_info];
inline bool gp_npc_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_npc_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_npc_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_npc_info::clear_type() {
  type_ = 578;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_npc_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_npc_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 newtype = 2;
inline bool gp_npc_info::has_newtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_npc_info::set_has_newtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_npc_info::clear_has_newtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_npc_info::clear_newtype() {
  newtype_ = 0u;
  clear_has_newtype();
}
inline ::google::protobuf::uint32 gp_npc_info::newtype() const {
  return newtype_;
}
inline void gp_npc_info::set_newtype(::google::protobuf::uint32 value) {
  set_has_newtype();
  newtype_ = value;
}

// optional bool can_be_attacked = 3;
inline bool gp_npc_info::has_can_be_attacked() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_npc_info::set_has_can_be_attacked() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_npc_info::clear_has_can_be_attacked() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_npc_info::clear_can_be_attacked() {
  can_be_attacked_ = false;
  clear_has_can_be_attacked();
}
inline bool gp_npc_info::can_be_attacked() const {
  return can_be_attacked_;
}
inline void gp_npc_info::set_can_be_attacked(bool value) {
  set_has_can_be_attacked();
  can_be_attacked_ = value;
}

// -------------------------------------------------------------------

// gp_easy_mall_service_end

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_easy_mall_service_end];
inline bool gp_easy_mall_service_end::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_easy_mall_service_end::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_easy_mall_service_end::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_easy_mall_service_end::clear_type() {
  type_ = 579;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_easy_mall_service_end::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_easy_mall_service_end::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 retcode = 2;
inline bool gp_easy_mall_service_end::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_easy_mall_service_end::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_easy_mall_service_end::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_easy_mall_service_end::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 gp_easy_mall_service_end::retcode() const {
  return retcode_;
}
inline void gp_easy_mall_service_end::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// -------------------------------------------------------------------

// gp_notify_plant_gp_seed

// required int32 seed_id = 1;
inline bool gp_notify_plant_gp_seed::has_seed_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_plant_gp_seed::set_has_seed_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_plant_gp_seed::clear_has_seed_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_plant_gp_seed::clear_seed_id() {
  seed_id_ = 0;
  clear_has_seed_id();
}
inline ::google::protobuf::int32 gp_notify_plant_gp_seed::seed_id() const {
  return seed_id_;
}
inline void gp_notify_plant_gp_seed::set_seed_id(::google::protobuf::int32 value) {
  set_has_seed_id();
  seed_id_ = value;
}

// optional int32 sow_time = 2;
inline bool gp_notify_plant_gp_seed::has_sow_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_plant_gp_seed::set_has_sow_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_plant_gp_seed::clear_has_sow_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_plant_gp_seed::clear_sow_time() {
  sow_time_ = 0;
  clear_has_sow_time();
}
inline ::google::protobuf::int32 gp_notify_plant_gp_seed::sow_time() const {
  return sow_time_;
}
inline void gp_notify_plant_gp_seed::set_sow_time(::google::protobuf::int32 value) {
  set_has_sow_time();
  sow_time_ = value;
}

// -------------------------------------------------------------------

// gp_notify_plant

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_plant];
inline bool gp_notify_plant::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_plant::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_plant::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_plant::clear_type() {
  type_ = 580;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_plant::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_plant::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.gp_notify_plant.gp_seed seeds = 2;
inline int gp_notify_plant::seeds_size() const {
  return seeds_.size();
}
inline void gp_notify_plant::clear_seeds() {
  seeds_.Clear();
}
inline const ::PB::gp_notify_plant_gp_seed& gp_notify_plant::seeds(int index) const {
  return seeds_.Get(index);
}
inline ::PB::gp_notify_plant_gp_seed* gp_notify_plant::mutable_seeds(int index) {
  return seeds_.Mutable(index);
}
inline ::PB::gp_notify_plant_gp_seed* gp_notify_plant::add_seeds() {
  return seeds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_notify_plant_gp_seed >&
gp_notify_plant::seeds() const {
  return seeds_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::gp_notify_plant_gp_seed >*
gp_notify_plant::mutable_seeds() {
  return &seeds_;
}

// optional int32 remain_times = 3;
inline bool gp_notify_plant::has_remain_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_notify_plant::set_has_remain_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_notify_plant::clear_has_remain_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_notify_plant::clear_remain_times() {
  remain_times_ = 0;
  clear_has_remain_times();
}
inline ::google::protobuf::int32 gp_notify_plant::remain_times() const {
  return remain_times_;
}
inline void gp_notify_plant::set_remain_times(::google::protobuf::int32 value) {
  set_has_remain_times();
  remain_times_ = value;
}

// -------------------------------------------------------------------

// gp_notify_cash_change

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_cash_change];
inline bool gp_notify_cash_change::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_cash_change::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_cash_change::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_cash_change::clear_type() {
  type_ = 581;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_cash_change::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_cash_change::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.gp_notify_cash_change.CC_TYPE change_type = 2;
inline bool gp_notify_cash_change::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_cash_change::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_cash_change::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_cash_change::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ::PB::gp_notify_cash_change_CC_TYPE gp_notify_cash_change::change_type() const {
  return static_cast< ::PB::gp_notify_cash_change_CC_TYPE >(change_type_);
}
inline void gp_notify_cash_change::set_change_type(::PB::gp_notify_cash_change_CC_TYPE value) {
  assert(::PB::gp_notify_cash_change_CC_TYPE_IsValid(value));
  set_has_change_type();
  change_type_ = value;
}

// optional uint32 value = 3;
inline bool gp_notify_cash_change::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_notify_cash_change::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_notify_cash_change::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_notify_cash_change::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 gp_notify_cash_change::value() const {
  return value_;
}
inline void gp_notify_cash_change::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// gp_notify_monitor_blood

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_monitor_blood];
inline bool gp_notify_monitor_blood::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_monitor_blood::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_monitor_blood::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_monitor_blood::clear_type() {
  type_ = 582;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_monitor_blood::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_monitor_blood::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated int64 id = 2;
inline int gp_notify_monitor_blood::id_size() const {
  return id_.size();
}
inline void gp_notify_monitor_blood::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int64 gp_notify_monitor_blood::id(int index) const {
  return id_.Get(index);
}
inline void gp_notify_monitor_blood::set_id(int index, ::google::protobuf::int64 value) {
  id_.Set(index, value);
}
inline void gp_notify_monitor_blood::add_id(::google::protobuf::int64 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
gp_notify_monitor_blood::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
gp_notify_monitor_blood::mutable_id() {
  return &id_;
}

// repeated int32 slot = 3;
inline int gp_notify_monitor_blood::slot_size() const {
  return slot_.size();
}
inline void gp_notify_monitor_blood::clear_slot() {
  slot_.Clear();
}
inline ::google::protobuf::int32 gp_notify_monitor_blood::slot(int index) const {
  return slot_.Get(index);
}
inline void gp_notify_monitor_blood::set_slot(int index, ::google::protobuf::int32 value) {
  slot_.Set(index, value);
}
inline void gp_notify_monitor_blood::add_slot(::google::protobuf::int32 value) {
  slot_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gp_notify_monitor_blood::slot() const {
  return slot_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gp_notify_monitor_blood::mutable_slot() {
  return &slot_;
}

// repeated bool can_be_attack = 4;
inline int gp_notify_monitor_blood::can_be_attack_size() const {
  return can_be_attack_.size();
}
inline void gp_notify_monitor_blood::clear_can_be_attack() {
  can_be_attack_.Clear();
}
inline bool gp_notify_monitor_blood::can_be_attack(int index) const {
  return can_be_attack_.Get(index);
}
inline void gp_notify_monitor_blood::set_can_be_attack(int index, bool value) {
  can_be_attack_.Set(index, value);
}
inline void gp_notify_monitor_blood::add_can_be_attack(bool value) {
  can_be_attack_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
gp_notify_monitor_blood::can_be_attack() const {
  return can_be_attack_;
}
inline ::google::protobuf::RepeatedField< bool >*
gp_notify_monitor_blood::mutable_can_be_attack() {
  return &can_be_attack_;
}

// -------------------------------------------------------------------

// gp_notify_prop_ready

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_prop_ready];
inline bool gp_notify_prop_ready::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_prop_ready::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_prop_ready::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_prop_ready::clear_type() {
  type_ = 583;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_prop_ready::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_prop_ready::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool ready = 2;
inline bool gp_notify_prop_ready::has_ready() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_prop_ready::set_has_ready() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_prop_ready::clear_has_ready() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_prop_ready::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
inline bool gp_notify_prop_ready::ready() const {
  return ready_;
}
inline void gp_notify_prop_ready::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
}

// -------------------------------------------------------------------

// retrieve_info_str

// optional int32 type = 1;
inline bool retrieve_info_str::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void retrieve_info_str::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void retrieve_info_str::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void retrieve_info_str::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 retrieve_info_str::type() const {
  return type_;
}
inline void retrieve_info_str::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 tid = 2;
inline bool retrieve_info_str::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void retrieve_info_str::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void retrieve_info_str::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void retrieve_info_str::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 retrieve_info_str::tid() const {
  return tid_;
}
inline void retrieve_info_str::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 left_count = 3;
inline bool retrieve_info_str::has_left_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void retrieve_info_str::set_has_left_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void retrieve_info_str::clear_has_left_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void retrieve_info_str::clear_left_count() {
  left_count_ = 0;
  clear_has_left_count();
}
inline ::google::protobuf::int32 retrieve_info_str::left_count() const {
  return left_count_;
}
inline void retrieve_info_str::set_left_count(::google::protobuf::int32 value) {
  set_has_left_count();
  left_count_ = value;
}

// optional int32 timestamp = 4;
inline bool retrieve_info_str::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void retrieve_info_str::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void retrieve_info_str::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void retrieve_info_str::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 retrieve_info_str::timestamp() const {
  return timestamp_;
}
inline void retrieve_info_str::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional int32 retrieve_count = 5;
inline bool retrieve_info_str::has_retrieve_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void retrieve_info_str::set_has_retrieve_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void retrieve_info_str::clear_has_retrieve_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void retrieve_info_str::clear_retrieve_count() {
  retrieve_count_ = 0;
  clear_has_retrieve_count();
}
inline ::google::protobuf::int32 retrieve_info_str::retrieve_count() const {
  return retrieve_count_;
}
inline void retrieve_info_str::set_retrieve_count(::google::protobuf::int32 value) {
  set_has_retrieve_count();
  retrieve_count_ = value;
}

// optional int32 activity_id = 6;
inline bool retrieve_info_str::has_activity_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void retrieve_info_str::set_has_activity_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void retrieve_info_str::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void retrieve_info_str::clear_activity_id() {
  activity_id_ = 0;
  clear_has_activity_id();
}
inline ::google::protobuf::int32 retrieve_info_str::activity_id() const {
  return activity_id_;
}
inline void retrieve_info_str::set_activity_id(::google::protobuf::int32 value) {
  set_has_activity_id();
  activity_id_ = value;
}

// -------------------------------------------------------------------

// retrieve_info

// repeated .PB.retrieve_info_str retrieve = 1;
inline int retrieve_info::retrieve_size() const {
  return retrieve_.size();
}
inline void retrieve_info::clear_retrieve() {
  retrieve_.Clear();
}
inline const ::PB::retrieve_info_str& retrieve_info::retrieve(int index) const {
  return retrieve_.Get(index);
}
inline ::PB::retrieve_info_str* retrieve_info::mutable_retrieve(int index) {
  return retrieve_.Mutable(index);
}
inline ::PB::retrieve_info_str* retrieve_info::add_retrieve() {
  return retrieve_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::retrieve_info_str >&
retrieve_info::retrieve() const {
  return retrieve_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::retrieve_info_str >*
retrieve_info::mutable_retrieve() {
  return &retrieve_;
}

// -------------------------------------------------------------------

// gp_retrieve_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_retrieve_info];
inline bool gp_retrieve_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_retrieve_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_retrieve_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_retrieve_info::clear_type() {
  type_ = 584;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_retrieve_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_retrieve_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.retrieve_info info = 2;
inline bool gp_retrieve_info::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_retrieve_info::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_retrieve_info::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_retrieve_info::clear_info() {
  if (info_ != NULL) info_->::PB::retrieve_info::Clear();
  clear_has_info();
}
inline const ::PB::retrieve_info& gp_retrieve_info::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PB::retrieve_info* gp_retrieve_info::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PB::retrieve_info;
  return info_;
}
inline ::PB::retrieve_info* gp_retrieve_info::release_info() {
  clear_has_info();
  ::PB::retrieve_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void gp_retrieve_info::set_allocated_info(::PB::retrieve_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional .PB.retrieve_info_str one = 3;
inline bool gp_retrieve_info::has_one() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_retrieve_info::set_has_one() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_retrieve_info::clear_has_one() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_retrieve_info::clear_one() {
  if (one_ != NULL) one_->::PB::retrieve_info_str::Clear();
  clear_has_one();
}
inline const ::PB::retrieve_info_str& gp_retrieve_info::one() const {
  return one_ != NULL ? *one_ : *default_instance_->one_;
}
inline ::PB::retrieve_info_str* gp_retrieve_info::mutable_one() {
  set_has_one();
  if (one_ == NULL) one_ = new ::PB::retrieve_info_str;
  return one_;
}
inline ::PB::retrieve_info_str* gp_retrieve_info::release_one() {
  clear_has_one();
  ::PB::retrieve_info_str* temp = one_;
  one_ = NULL;
  return temp;
}
inline void gp_retrieve_info::set_allocated_one(::PB::retrieve_info_str* one) {
  delete one_;
  one_ = one;
  if (one) {
    set_has_one();
  } else {
    clear_has_one();
  }
}

// optional bool single_data = 4;
inline bool gp_retrieve_info::has_single_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_retrieve_info::set_has_single_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_retrieve_info::clear_has_single_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_retrieve_info::clear_single_data() {
  single_data_ = false;
  clear_has_single_data();
}
inline bool gp_retrieve_info::single_data() const {
  return single_data_;
}
inline void gp_retrieve_info::set_single_data(bool value) {
  set_has_single_data();
  single_data_ = value;
}

// -------------------------------------------------------------------

// gp_red_packet

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_red_packet];
inline bool gp_red_packet::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_red_packet::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_red_packet::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_red_packet::clear_type() {
  type_ = 585;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_red_packet::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_red_packet::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 tid = 2;
inline bool gp_red_packet::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_red_packet::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_red_packet::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_red_packet::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 gp_red_packet::tid() const {
  return tid_;
}
inline void gp_red_packet::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 count = 3;
inline bool gp_red_packet::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_red_packet::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_red_packet::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_red_packet::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 gp_red_packet::count() const {
  return count_;
}
inline void gp_red_packet::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int64 src = 4;
inline bool gp_red_packet::has_src() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_red_packet::set_has_src() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_red_packet::clear_has_src() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_red_packet::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 gp_red_packet::src() const {
  return src_;
}
inline void gp_red_packet::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
}

// optional bytes src_name = 5;
inline bool gp_red_packet::has_src_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_red_packet::set_has_src_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_red_packet::clear_has_src_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_red_packet::clear_src_name() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    src_name_->clear();
  }
  clear_has_src_name();
}
inline const ::std::string& gp_red_packet::src_name() const {
  return *src_name_;
}
inline void gp_red_packet::set_src_name(const ::std::string& value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void gp_red_packet::set_src_name(const char* value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void gp_red_packet::set_src_name(const void* value, size_t size) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_red_packet::mutable_src_name() {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  return src_name_;
}
inline ::std::string* gp_red_packet::release_src_name() {
  clear_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_name_;
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gp_red_packet::set_allocated_src_name(::std::string* src_name) {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (src_name) {
    set_has_src_name();
    src_name_ = src_name;
  } else {
    clear_has_src_name();
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 timestamp = 6;
inline bool gp_red_packet::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_red_packet::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_red_packet::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_red_packet::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 gp_red_packet::timestamp() const {
  return timestamp_;
}
inline void gp_red_packet::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional int32 timeout = 7;
inline bool gp_red_packet::has_timeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_red_packet::set_has_timeout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_red_packet::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_red_packet::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline ::google::protobuf::int32 gp_red_packet::timeout() const {
  return timeout_;
}
inline void gp_red_packet::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
}

// -------------------------------------------------------------------

// gp_secure_idip

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_secure_idip];
inline bool gp_secure_idip::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_secure_idip::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_secure_idip::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_secure_idip::clear_type() {
  type_ = 586;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_secure_idip::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_secure_idip::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 mode = 2;
inline bool gp_secure_idip::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_secure_idip::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_secure_idip::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_secure_idip::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 gp_secure_idip::mode() const {
  return mode_;
}
inline void gp_secure_idip::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// optional bytes content = 3;
inline bool gp_secure_idip::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_secure_idip::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_secure_idip::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_secure_idip::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& gp_secure_idip::content() const {
  return *content_;
}
inline void gp_secure_idip::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void gp_secure_idip::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void gp_secure_idip::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_secure_idip::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* gp_secure_idip::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gp_secure_idip::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 para1 = 4;
inline bool gp_secure_idip::has_para1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_secure_idip::set_has_para1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_secure_idip::clear_has_para1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_secure_idip::clear_para1() {
  para1_ = 0;
  clear_has_para1();
}
inline ::google::protobuf::int32 gp_secure_idip::para1() const {
  return para1_;
}
inline void gp_secure_idip::set_para1(::google::protobuf::int32 value) {
  set_has_para1();
  para1_ = value;
}

// optional int32 time = 5;
inline bool gp_secure_idip::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_secure_idip::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_secure_idip::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_secure_idip::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 gp_secure_idip::time() const {
  return time_;
}
inline void gp_secure_idip::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// gp_multi_exp

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_multi_exp];
inline bool gp_multi_exp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_multi_exp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_multi_exp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_multi_exp::clear_type() {
  type_ = 588;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_multi_exp::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_multi_exp::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 rate = 2;
inline bool gp_multi_exp::has_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_multi_exp::set_has_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_multi_exp::clear_has_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_multi_exp::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline ::google::protobuf::int32 gp_multi_exp::rate() const {
  return rate_;
}
inline void gp_multi_exp::set_rate(::google::protobuf::int32 value) {
  set_has_rate();
  rate_ = value;
}

// optional int32 left_time = 3;
inline bool gp_multi_exp::has_left_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_multi_exp::set_has_left_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_multi_exp::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_multi_exp::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 gp_multi_exp::left_time() const {
  return left_time_;
}
inline void gp_multi_exp::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// optional int32 login_time = 4;
inline bool gp_multi_exp::has_login_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_multi_exp::set_has_login_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_multi_exp::clear_has_login_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_multi_exp::clear_login_time() {
  login_time_ = 0;
  clear_has_login_time();
}
inline ::google::protobuf::int32 gp_multi_exp::login_time() const {
  return login_time_;
}
inline void gp_multi_exp::set_login_time(::google::protobuf::int32 value) {
  set_has_login_time();
  login_time_ = value;
}

// optional int32 tid = 5;
inline bool gp_multi_exp::has_tid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_multi_exp::set_has_tid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_multi_exp::clear_has_tid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_multi_exp::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 gp_multi_exp::tid() const {
  return tid_;
}
inline void gp_multi_exp::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// -------------------------------------------------------------------

// gp_refuse_fight

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_refuse_fight];
inline bool gp_refuse_fight::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_refuse_fight::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_refuse_fight::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_refuse_fight::clear_type() {
  type_ = 589;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_refuse_fight::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_refuse_fight::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 tid = 2;
inline bool gp_refuse_fight::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_refuse_fight::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_refuse_fight::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_refuse_fight::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 gp_refuse_fight::tid() const {
  return tid_;
}
inline void gp_refuse_fight::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 end_timestamp = 3;
inline bool gp_refuse_fight::has_end_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_refuse_fight::set_has_end_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_refuse_fight::clear_has_end_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_refuse_fight::clear_end_timestamp() {
  end_timestamp_ = 0;
  clear_has_end_timestamp();
}
inline ::google::protobuf::int32 gp_refuse_fight::end_timestamp() const {
  return end_timestamp_;
}
inline void gp_refuse_fight::set_end_timestamp(::google::protobuf::int32 value) {
  set_has_end_timestamp();
  end_timestamp_ = value;
}

// optional bool cancel_in_war = 4;
inline bool gp_refuse_fight::has_cancel_in_war() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_refuse_fight::set_has_cancel_in_war() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_refuse_fight::clear_has_cancel_in_war() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_refuse_fight::clear_cancel_in_war() {
  cancel_in_war_ = false;
  clear_has_cancel_in_war();
}
inline bool gp_refuse_fight::cancel_in_war() const {
  return cancel_in_war_;
}
inline void gp_refuse_fight::set_cancel_in_war(bool value) {
  set_has_cancel_in_war();
  cancel_in_war_ = value;
}

// -------------------------------------------------------------------

// gp_old_prof_skill_level

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_old_prof_skill_level];
inline bool gp_old_prof_skill_level::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_old_prof_skill_level::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_old_prof_skill_level::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_old_prof_skill_level::clear_type() {
  type_ = 614;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_old_prof_skill_level::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_old_prof_skill_level::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 skill_id = 2;
inline bool gp_old_prof_skill_level::has_skill_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_old_prof_skill_level::set_has_skill_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_old_prof_skill_level::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_old_prof_skill_level::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 gp_old_prof_skill_level::skill_id() const {
  return skill_id_;
}
inline void gp_old_prof_skill_level::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// required int32 skill_level = 3;
inline bool gp_old_prof_skill_level::has_skill_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_old_prof_skill_level::set_has_skill_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_old_prof_skill_level::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_old_prof_skill_level::clear_skill_level() {
  skill_level_ = 0;
  clear_has_skill_level();
}
inline ::google::protobuf::int32 gp_old_prof_skill_level::skill_level() const {
  return skill_level_;
}
inline void gp_old_prof_skill_level::set_skill_level(::google::protobuf::int32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// -------------------------------------------------------------------

// gp_deliver_compensation

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_deliver_compensation];
inline bool gp_deliver_compensation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_deliver_compensation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_deliver_compensation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_deliver_compensation::clear_type() {
  type_ = 590;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_deliver_compensation::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_deliver_compensation::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.gp_compensation list = 2;
inline int gp_deliver_compensation::list_size() const {
  return list_.size();
}
inline void gp_deliver_compensation::clear_list() {
  list_.Clear();
}
inline const ::PB::gp_compensation& gp_deliver_compensation::list(int index) const {
  return list_.Get(index);
}
inline ::PB::gp_compensation* gp_deliver_compensation::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::PB::gp_compensation* gp_deliver_compensation::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_compensation >&
gp_deliver_compensation::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::gp_compensation >*
gp_deliver_compensation::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// level_sorted_info

// optional int32 score = 1;
inline bool level_sorted_info::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void level_sorted_info::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void level_sorted_info::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void level_sorted_info::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 level_sorted_info::score() const {
  return score_;
}
inline void level_sorted_info::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional bytes name = 2;
inline bool level_sorted_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void level_sorted_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void level_sorted_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void level_sorted_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& level_sorted_info::name() const {
  return *name_;
}
inline void level_sorted_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void level_sorted_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void level_sorted_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* level_sorted_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* level_sorted_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void level_sorted_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 id = 3;
inline bool level_sorted_info::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void level_sorted_info::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void level_sorted_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void level_sorted_info::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 level_sorted_info::id() const {
  return id_;
}
inline void level_sorted_info::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// gp_send_level_sorted_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_send_level_sorted_info];
inline bool gp_send_level_sorted_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_send_level_sorted_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_send_level_sorted_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_send_level_sorted_info::clear_type() {
  type_ = 591;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_send_level_sorted_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_send_level_sorted_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.level_sorted_info list = 2;
inline int gp_send_level_sorted_info::list_size() const {
  return list_.size();
}
inline void gp_send_level_sorted_info::clear_list() {
  list_.Clear();
}
inline const ::PB::level_sorted_info& gp_send_level_sorted_info::list(int index) const {
  return list_.Get(index);
}
inline ::PB::level_sorted_info* gp_send_level_sorted_info::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::PB::level_sorted_info* gp_send_level_sorted_info::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::level_sorted_info >&
gp_send_level_sorted_info::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::level_sorted_info >*
gp_send_level_sorted_info::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// gp_send_level_info_with_time

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_send_level_info_with_time];
inline bool gp_send_level_info_with_time::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_send_level_info_with_time::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_send_level_info_with_time::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_send_level_info_with_time::clear_type() {
  type_ = 593;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_send_level_info_with_time::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_send_level_info_with_time::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 time = 2;
inline bool gp_send_level_info_with_time::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_send_level_info_with_time::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_send_level_info_with_time::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_send_level_info_with_time::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 gp_send_level_info_with_time::time() const {
  return time_;
}
inline void gp_send_level_info_with_time::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// repeated int32 info = 3;
inline int gp_send_level_info_with_time::info_size() const {
  return info_.size();
}
inline void gp_send_level_info_with_time::clear_info() {
  info_.Clear();
}
inline ::google::protobuf::int32 gp_send_level_info_with_time::info(int index) const {
  return info_.Get(index);
}
inline void gp_send_level_info_with_time::set_info(int index, ::google::protobuf::int32 value) {
  info_.Set(index, value);
}
inline void gp_send_level_info_with_time::add_info(::google::protobuf::int32 value) {
  info_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gp_send_level_info_with_time::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gp_send_level_info_with_time::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// gp_notify_strategy_vectors

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_strategis];
inline bool gp_notify_strategy_vectors::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_strategy_vectors::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_strategy_vectors::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_strategy_vectors::clear_type() {
  type_ = 594;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_strategy_vectors::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_strategy_vectors::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.db_strategy_vectors db_strategies = 2;
inline bool gp_notify_strategy_vectors::has_db_strategies() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_strategy_vectors::set_has_db_strategies() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_strategy_vectors::clear_has_db_strategies() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_strategy_vectors::clear_db_strategies() {
  if (db_strategies_ != NULL) db_strategies_->::PB::db_strategy_vectors::Clear();
  clear_has_db_strategies();
}
inline const ::PB::db_strategy_vectors& gp_notify_strategy_vectors::db_strategies() const {
  return db_strategies_ != NULL ? *db_strategies_ : *default_instance_->db_strategies_;
}
inline ::PB::db_strategy_vectors* gp_notify_strategy_vectors::mutable_db_strategies() {
  set_has_db_strategies();
  if (db_strategies_ == NULL) db_strategies_ = new ::PB::db_strategy_vectors;
  return db_strategies_;
}
inline ::PB::db_strategy_vectors* gp_notify_strategy_vectors::release_db_strategies() {
  clear_has_db_strategies();
  ::PB::db_strategy_vectors* temp = db_strategies_;
  db_strategies_ = NULL;
  return temp;
}
inline void gp_notify_strategy_vectors::set_allocated_db_strategies(::PB::db_strategy_vectors* db_strategies) {
  delete db_strategies_;
  db_strategies_ = db_strategies;
  if (db_strategies) {
    set_has_db_strategies();
  } else {
    clear_has_db_strategies();
  }
}

// -------------------------------------------------------------------

// gp_notify_strategy_levelup

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_strategy_levelup];
inline bool gp_notify_strategy_levelup::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_strategy_levelup::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_strategy_levelup::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_strategy_levelup::clear_type() {
  type_ = 595;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_strategy_levelup::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_strategy_levelup::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 strategy_group_tid = 2;
inline bool gp_notify_strategy_levelup::has_strategy_group_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_strategy_levelup::set_has_strategy_group_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_strategy_levelup::clear_has_strategy_group_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_strategy_levelup::clear_strategy_group_tid() {
  strategy_group_tid_ = 0;
  clear_has_strategy_group_tid();
}
inline ::google::protobuf::int32 gp_notify_strategy_levelup::strategy_group_tid() const {
  return strategy_group_tid_;
}
inline void gp_notify_strategy_levelup::set_strategy_group_tid(::google::protobuf::int32 value) {
  set_has_strategy_group_tid();
  strategy_group_tid_ = value;
}

// optional int32 strategy_tid = 3;
inline bool gp_notify_strategy_levelup::has_strategy_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_notify_strategy_levelup::set_has_strategy_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_notify_strategy_levelup::clear_has_strategy_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_notify_strategy_levelup::clear_strategy_tid() {
  strategy_tid_ = 0;
  clear_has_strategy_tid();
}
inline ::google::protobuf::int32 gp_notify_strategy_levelup::strategy_tid() const {
  return strategy_tid_;
}
inline void gp_notify_strategy_levelup::set_strategy_tid(::google::protobuf::int32 value) {
  set_has_strategy_tid();
  strategy_tid_ = value;
}

// optional int32 level = 4;
inline bool gp_notify_strategy_levelup::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_notify_strategy_levelup::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_notify_strategy_levelup::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_notify_strategy_levelup::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 gp_notify_strategy_levelup::level() const {
  return level_;
}
inline void gp_notify_strategy_levelup::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 chip_count = 5;
inline bool gp_notify_strategy_levelup::has_chip_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_notify_strategy_levelup::set_has_chip_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_notify_strategy_levelup::clear_has_chip_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_notify_strategy_levelup::clear_chip_count() {
  chip_count_ = 0;
  clear_has_chip_count();
}
inline ::google::protobuf::int32 gp_notify_strategy_levelup::chip_count() const {
  return chip_count_;
}
inline void gp_notify_strategy_levelup::set_chip_count(::google::protobuf::int32 value) {
  set_has_chip_count();
  chip_count_ = value;
}

// optional bool result = 6;
inline bool gp_notify_strategy_levelup::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_notify_strategy_levelup::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_notify_strategy_levelup::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_notify_strategy_levelup::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool gp_notify_strategy_levelup::result() const {
  return result_;
}
inline void gp_notify_strategy_levelup::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gp_notify_strategy_starup

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_strategy_starup];
inline bool gp_notify_strategy_starup::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_strategy_starup::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_strategy_starup::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_strategy_starup::clear_type() {
  type_ = 596;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_strategy_starup::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_strategy_starup::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 strategy_group_tid = 2;
inline bool gp_notify_strategy_starup::has_strategy_group_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_strategy_starup::set_has_strategy_group_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_strategy_starup::clear_has_strategy_group_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_strategy_starup::clear_strategy_group_tid() {
  strategy_group_tid_ = 0;
  clear_has_strategy_group_tid();
}
inline ::google::protobuf::int32 gp_notify_strategy_starup::strategy_group_tid() const {
  return strategy_group_tid_;
}
inline void gp_notify_strategy_starup::set_strategy_group_tid(::google::protobuf::int32 value) {
  set_has_strategy_group_tid();
  strategy_group_tid_ = value;
}

// optional int32 strategy_tid = 3;
inline bool gp_notify_strategy_starup::has_strategy_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_notify_strategy_starup::set_has_strategy_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_notify_strategy_starup::clear_has_strategy_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_notify_strategy_starup::clear_strategy_tid() {
  strategy_tid_ = 0;
  clear_has_strategy_tid();
}
inline ::google::protobuf::int32 gp_notify_strategy_starup::strategy_tid() const {
  return strategy_tid_;
}
inline void gp_notify_strategy_starup::set_strategy_tid(::google::protobuf::int32 value) {
  set_has_strategy_tid();
  strategy_tid_ = value;
}

// optional int32 star_level = 4;
inline bool gp_notify_strategy_starup::has_star_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_notify_strategy_starup::set_has_star_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_notify_strategy_starup::clear_has_star_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_notify_strategy_starup::clear_star_level() {
  star_level_ = 0;
  clear_has_star_level();
}
inline ::google::protobuf::int32 gp_notify_strategy_starup::star_level() const {
  return star_level_;
}
inline void gp_notify_strategy_starup::set_star_level(::google::protobuf::int32 value) {
  set_has_star_level();
  star_level_ = value;
}

// optional int32 blessing_num = 5;
inline bool gp_notify_strategy_starup::has_blessing_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_notify_strategy_starup::set_has_blessing_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_notify_strategy_starup::clear_has_blessing_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_notify_strategy_starup::clear_blessing_num() {
  blessing_num_ = 0;
  clear_has_blessing_num();
}
inline ::google::protobuf::int32 gp_notify_strategy_starup::blessing_num() const {
  return blessing_num_;
}
inline void gp_notify_strategy_starup::set_blessing_num(::google::protobuf::int32 value) {
  set_has_blessing_num();
  blessing_num_ = value;
}

// -------------------------------------------------------------------

// gp_notify_surface_train

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_surface_train];
inline bool gp_notify_surface_train::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_surface_train::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_surface_train::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_surface_train::clear_type() {
  type_ = 597;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_surface_train::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_surface_train::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 surface_tid = 2;
inline bool gp_notify_surface_train::has_surface_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_surface_train::set_has_surface_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_surface_train::clear_has_surface_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_surface_train::clear_surface_tid() {
  surface_tid_ = 0;
  clear_has_surface_tid();
}
inline ::google::protobuf::int32 gp_notify_surface_train::surface_tid() const {
  return surface_tid_;
}
inline void gp_notify_surface_train::set_surface_tid(::google::protobuf::int32 value) {
  set_has_surface_tid();
  surface_tid_ = value;
}

// optional int32 train_level = 3;
inline bool gp_notify_surface_train::has_train_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_notify_surface_train::set_has_train_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_notify_surface_train::clear_has_train_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_notify_surface_train::clear_train_level() {
  train_level_ = 0;
  clear_has_train_level();
}
inline ::google::protobuf::int32 gp_notify_surface_train::train_level() const {
  return train_level_;
}
inline void gp_notify_surface_train::set_train_level(::google::protobuf::int32 value) {
  set_has_train_level();
  train_level_ = value;
}

// optional int32 train_result = 4;
inline bool gp_notify_surface_train::has_train_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_notify_surface_train::set_has_train_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_notify_surface_train::clear_has_train_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_notify_surface_train::clear_train_result() {
  train_result_ = 0;
  clear_has_train_result();
}
inline ::google::protobuf::int32 gp_notify_surface_train::train_result() const {
  return train_result_;
}
inline void gp_notify_surface_train::set_train_result(::google::protobuf::int32 value) {
  set_has_train_result();
  train_result_ = value;
}

// repeated .PB.db_surface_soul souls = 5;
inline int gp_notify_surface_train::souls_size() const {
  return souls_.size();
}
inline void gp_notify_surface_train::clear_souls() {
  souls_.Clear();
}
inline const ::PB::db_surface_soul& gp_notify_surface_train::souls(int index) const {
  return souls_.Get(index);
}
inline ::PB::db_surface_soul* gp_notify_surface_train::mutable_souls(int index) {
  return souls_.Mutable(index);
}
inline ::PB::db_surface_soul* gp_notify_surface_train::add_souls() {
  return souls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul >&
gp_notify_surface_train::souls() const {
  return souls_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul >*
gp_notify_surface_train::mutable_souls() {
  return &souls_;
}

// -------------------------------------------------------------------

// gp_punishment_time

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_punishment_time];
inline bool gp_punishment_time::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_punishment_time::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_punishment_time::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_punishment_time::clear_type() {
  type_ = 598;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_punishment_time::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_punishment_time::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 punishment_type = 2;
inline bool gp_punishment_time::has_punishment_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_punishment_time::set_has_punishment_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_punishment_time::clear_has_punishment_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_punishment_time::clear_punishment_type() {
  punishment_type_ = 0;
  clear_has_punishment_type();
}
inline ::google::protobuf::int32 gp_punishment_time::punishment_type() const {
  return punishment_type_;
}
inline void gp_punishment_time::set_punishment_type(::google::protobuf::int32 value) {
  set_has_punishment_type();
  punishment_type_ = value;
}

// required int32 end_time = 3;
inline bool gp_punishment_time::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_punishment_time::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_punishment_time::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_punishment_time::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline ::google::protobuf::int32 gp_punishment_time::end_time() const {
  return end_time_;
}
inline void gp_punishment_time::set_end_time(::google::protobuf::int32 value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// faction_battle_player_info

// optional int64 roleid = 1;
inline bool faction_battle_player_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void faction_battle_player_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void faction_battle_player_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void faction_battle_player_info::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 faction_battle_player_info::roleid() const {
  return roleid_;
}
inline void faction_battle_player_info::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional bytes name = 2;
inline bool faction_battle_player_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void faction_battle_player_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void faction_battle_player_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void faction_battle_player_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& faction_battle_player_info::name() const {
  return *name_;
}
inline void faction_battle_player_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void faction_battle_player_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void faction_battle_player_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* faction_battle_player_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* faction_battle_player_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void faction_battle_player_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 score = 3;
inline bool faction_battle_player_info::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void faction_battle_player_info::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void faction_battle_player_info::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void faction_battle_player_info::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 faction_battle_player_info::score() const {
  return score_;
}
inline void faction_battle_player_info::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 kill = 4;
inline bool faction_battle_player_info::has_kill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void faction_battle_player_info::set_has_kill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void faction_battle_player_info::clear_has_kill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void faction_battle_player_info::clear_kill() {
  kill_ = 0;
  clear_has_kill();
}
inline ::google::protobuf::int32 faction_battle_player_info::kill() const {
  return kill_;
}
inline void faction_battle_player_info::set_kill(::google::protobuf::int32 value) {
  set_has_kill();
  kill_ = value;
}

// -------------------------------------------------------------------

// gp_faction_battle_player_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_faction_battle_player_info];
inline bool gp_faction_battle_player_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_faction_battle_player_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_faction_battle_player_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_faction_battle_player_info::clear_type() {
  type_ = 599;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_faction_battle_player_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_faction_battle_player_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 camp = 2;
inline bool gp_faction_battle_player_info::has_camp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_faction_battle_player_info::set_has_camp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_faction_battle_player_info::clear_has_camp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_faction_battle_player_info::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 gp_faction_battle_player_info::camp() const {
  return camp_;
}
inline void gp_faction_battle_player_info::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// repeated .PB.faction_battle_player_info info = 3;
inline int gp_faction_battle_player_info::info_size() const {
  return info_.size();
}
inline void gp_faction_battle_player_info::clear_info() {
  info_.Clear();
}
inline const ::PB::faction_battle_player_info& gp_faction_battle_player_info::info(int index) const {
  return info_.Get(index);
}
inline ::PB::faction_battle_player_info* gp_faction_battle_player_info::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PB::faction_battle_player_info* gp_faction_battle_player_info::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::faction_battle_player_info >&
gp_faction_battle_player_info::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::faction_battle_player_info >*
gp_faction_battle_player_info::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// gp_equip_attach_mingwen_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_attach_mingwen_result];
inline bool gp_equip_attach_mingwen_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_attach_mingwen_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_attach_mingwen_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_attach_mingwen_result::clear_type() {
  type_ = 600;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_equip_attach_mingwen_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_attach_mingwen_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 equip_index = 2;
inline bool gp_equip_attach_mingwen_result::has_equip_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_attach_mingwen_result::set_has_equip_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_attach_mingwen_result::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_attach_mingwen_result::clear_equip_index() {
  equip_index_ = 0;
  clear_has_equip_index();
}
inline ::google::protobuf::int32 gp_equip_attach_mingwen_result::equip_index() const {
  return equip_index_;
}
inline void gp_equip_attach_mingwen_result::set_equip_index(::google::protobuf::int32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// required int32 hole_index = 3;
inline bool gp_equip_attach_mingwen_result::has_hole_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_attach_mingwen_result::set_has_hole_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_attach_mingwen_result::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_attach_mingwen_result::clear_hole_index() {
  hole_index_ = 0;
  clear_has_hole_index();
}
inline ::google::protobuf::int32 gp_equip_attach_mingwen_result::hole_index() const {
  return hole_index_;
}
inline void gp_equip_attach_mingwen_result::set_hole_index(::google::protobuf::int32 value) {
  set_has_hole_index();
  hole_index_ = value;
}

// required int32 result = 4;
inline bool gp_equip_attach_mingwen_result::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_attach_mingwen_result::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_attach_mingwen_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_attach_mingwen_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gp_equip_attach_mingwen_result::result() const {
  return result_;
}
inline void gp_equip_attach_mingwen_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gp_equip_detach_mingwen_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_detach_mingwen_result];
inline bool gp_equip_detach_mingwen_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_detach_mingwen_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_detach_mingwen_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_detach_mingwen_result::clear_type() {
  type_ = 601;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_equip_detach_mingwen_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_detach_mingwen_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 equip_index = 2;
inline bool gp_equip_detach_mingwen_result::has_equip_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_detach_mingwen_result::set_has_equip_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_detach_mingwen_result::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_detach_mingwen_result::clear_equip_index() {
  equip_index_ = 0;
  clear_has_equip_index();
}
inline ::google::protobuf::int32 gp_equip_detach_mingwen_result::equip_index() const {
  return equip_index_;
}
inline void gp_equip_detach_mingwen_result::set_equip_index(::google::protobuf::int32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// required int32 hole_index = 3;
inline bool gp_equip_detach_mingwen_result::has_hole_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_detach_mingwen_result::set_has_hole_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_detach_mingwen_result::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_detach_mingwen_result::clear_hole_index() {
  hole_index_ = 0;
  clear_has_hole_index();
}
inline ::google::protobuf::int32 gp_equip_detach_mingwen_result::hole_index() const {
  return hole_index_;
}
inline void gp_equip_detach_mingwen_result::set_hole_index(::google::protobuf::int32 value) {
  set_has_hole_index();
  hole_index_ = value;
}

// required int32 result = 4;
inline bool gp_equip_detach_mingwen_result::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_detach_mingwen_result::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_detach_mingwen_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_detach_mingwen_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gp_equip_detach_mingwen_result::result() const {
  return result_;
}
inline void gp_equip_detach_mingwen_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gp_notify_magic_weapon

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_magic_weapon];
inline bool gp_notify_magic_weapon::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_magic_weapon::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_magic_weapon::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_magic_weapon::clear_type() {
  type_ = 602;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_magic_weapon::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_magic_weapon::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.db_magic_weapons weapons = 2;
inline bool gp_notify_magic_weapon::has_weapons() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_magic_weapon::set_has_weapons() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_magic_weapon::clear_has_weapons() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_magic_weapon::clear_weapons() {
  if (weapons_ != NULL) weapons_->::PB::db_magic_weapons::Clear();
  clear_has_weapons();
}
inline const ::PB::db_magic_weapons& gp_notify_magic_weapon::weapons() const {
  return weapons_ != NULL ? *weapons_ : *default_instance_->weapons_;
}
inline ::PB::db_magic_weapons* gp_notify_magic_weapon::mutable_weapons() {
  set_has_weapons();
  if (weapons_ == NULL) weapons_ = new ::PB::db_magic_weapons;
  return weapons_;
}
inline ::PB::db_magic_weapons* gp_notify_magic_weapon::release_weapons() {
  clear_has_weapons();
  ::PB::db_magic_weapons* temp = weapons_;
  weapons_ = NULL;
  return temp;
}
inline void gp_notify_magic_weapon::set_allocated_weapons(::PB::db_magic_weapons* weapons) {
  delete weapons_;
  weapons_ = weapons;
  if (weapons) {
    set_has_weapons();
  } else {
    clear_has_weapons();
  }
}

// -------------------------------------------------------------------

// gp_notify_magic_weapon_train_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_magic_weapon_train_result];
inline bool gp_notify_magic_weapon_train_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_magic_weapon_train_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_magic_weapon_train_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_magic_weapon_train_result::clear_type() {
  type_ = 603;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_magic_weapon_train_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_magic_weapon_train_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 weapon_tid = 2;
inline bool gp_notify_magic_weapon_train_result::has_weapon_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_magic_weapon_train_result::set_has_weapon_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_magic_weapon_train_result::clear_has_weapon_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_magic_weapon_train_result::clear_weapon_tid() {
  weapon_tid_ = 0;
  clear_has_weapon_tid();
}
inline ::google::protobuf::int32 gp_notify_magic_weapon_train_result::weapon_tid() const {
  return weapon_tid_;
}
inline void gp_notify_magic_weapon_train_result::set_weapon_tid(::google::protobuf::int32 value) {
  set_has_weapon_tid();
  weapon_tid_ = value;
}

// optional int32 property_index = 3;
inline bool gp_notify_magic_weapon_train_result::has_property_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_notify_magic_weapon_train_result::set_has_property_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_notify_magic_weapon_train_result::clear_has_property_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_notify_magic_weapon_train_result::clear_property_index() {
  property_index_ = 0;
  clear_has_property_index();
}
inline ::google::protobuf::int32 gp_notify_magic_weapon_train_result::property_index() const {
  return property_index_;
}
inline void gp_notify_magic_weapon_train_result::set_property_index(::google::protobuf::int32 value) {
  set_has_property_index();
  property_index_ = value;
}

// optional int32 multime = 4;
inline bool gp_notify_magic_weapon_train_result::has_multime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_notify_magic_weapon_train_result::set_has_multime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_notify_magic_weapon_train_result::clear_has_multime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_notify_magic_weapon_train_result::clear_multime() {
  multime_ = 0;
  clear_has_multime();
}
inline ::google::protobuf::int32 gp_notify_magic_weapon_train_result::multime() const {
  return multime_;
}
inline void gp_notify_magic_weapon_train_result::set_multime(::google::protobuf::int32 value) {
  set_has_multime();
  multime_ = value;
}

// optional int32 exp_value = 5;
inline bool gp_notify_magic_weapon_train_result::has_exp_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_notify_magic_weapon_train_result::set_has_exp_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_notify_magic_weapon_train_result::clear_has_exp_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_notify_magic_weapon_train_result::clear_exp_value() {
  exp_value_ = 0;
  clear_has_exp_value();
}
inline ::google::protobuf::int32 gp_notify_magic_weapon_train_result::exp_value() const {
  return exp_value_;
}
inline void gp_notify_magic_weapon_train_result::set_exp_value(::google::protobuf::int32 value) {
  set_has_exp_value();
  exp_value_ = value;
}

// optional int32 end_time = 6;
inline bool gp_notify_magic_weapon_train_result::has_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_notify_magic_weapon_train_result::set_has_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_notify_magic_weapon_train_result::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_notify_magic_weapon_train_result::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline ::google::protobuf::int32 gp_notify_magic_weapon_train_result::end_time() const {
  return end_time_;
}
inline void gp_notify_magic_weapon_train_result::set_end_time(::google::protobuf::int32 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional int32 level = 7;
inline bool gp_notify_magic_weapon_train_result::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_notify_magic_weapon_train_result::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_notify_magic_weapon_train_result::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_notify_magic_weapon_train_result::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 gp_notify_magic_weapon_train_result::level() const {
  return level_;
}
inline void gp_notify_magic_weapon_train_result::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional bool active = 8;
inline bool gp_notify_magic_weapon_train_result::has_active() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gp_notify_magic_weapon_train_result::set_has_active() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gp_notify_magic_weapon_train_result::clear_has_active() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gp_notify_magic_weapon_train_result::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool gp_notify_magic_weapon_train_result::active() const {
  return active_;
}
inline void gp_notify_magic_weapon_train_result::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// -------------------------------------------------------------------

// gp_notify_magic_weapon_summon_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_magic_weapon_summon_result];
inline bool gp_notify_magic_weapon_summon_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_magic_weapon_summon_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_magic_weapon_summon_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_magic_weapon_summon_result::clear_type() {
  type_ = 604;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_magic_weapon_summon_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_magic_weapon_summon_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 weapon_tid = 2;
inline bool gp_notify_magic_weapon_summon_result::has_weapon_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_magic_weapon_summon_result::set_has_weapon_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_magic_weapon_summon_result::clear_has_weapon_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_magic_weapon_summon_result::clear_weapon_tid() {
  weapon_tid_ = 0;
  clear_has_weapon_tid();
}
inline ::google::protobuf::int32 gp_notify_magic_weapon_summon_result::weapon_tid() const {
  return weapon_tid_;
}
inline void gp_notify_magic_weapon_summon_result::set_weapon_tid(::google::protobuf::int32 value) {
  set_has_weapon_tid();
  weapon_tid_ = value;
}

// -------------------------------------------------------------------

// gp_notify_magic_weapon_refine_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_magic_weapon_refine_result];
inline bool gp_notify_magic_weapon_refine_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_magic_weapon_refine_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_magic_weapon_refine_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_magic_weapon_refine_result::clear_type() {
  type_ = 605;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_magic_weapon_refine_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_magic_weapon_refine_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 weapon_tid = 2;
inline bool gp_notify_magic_weapon_refine_result::has_weapon_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_magic_weapon_refine_result::set_has_weapon_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_magic_weapon_refine_result::clear_has_weapon_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_magic_weapon_refine_result::clear_weapon_tid() {
  weapon_tid_ = 0;
  clear_has_weapon_tid();
}
inline ::google::protobuf::int32 gp_notify_magic_weapon_refine_result::weapon_tid() const {
  return weapon_tid_;
}
inline void gp_notify_magic_weapon_refine_result::set_weapon_tid(::google::protobuf::int32 value) {
  set_has_weapon_tid();
  weapon_tid_ = value;
}

// optional int32 color_group_index = 3;
inline bool gp_notify_magic_weapon_refine_result::has_color_group_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_notify_magic_weapon_refine_result::set_has_color_group_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_notify_magic_weapon_refine_result::clear_has_color_group_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_notify_magic_weapon_refine_result::clear_color_group_index() {
  color_group_index_ = 0;
  clear_has_color_group_index();
}
inline ::google::protobuf::int32 gp_notify_magic_weapon_refine_result::color_group_index() const {
  return color_group_index_;
}
inline void gp_notify_magic_weapon_refine_result::set_color_group_index(::google::protobuf::int32 value) {
  set_has_color_group_index();
  color_group_index_ = value;
}

// optional int32 color_index = 4;
inline bool gp_notify_magic_weapon_refine_result::has_color_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_notify_magic_weapon_refine_result::set_has_color_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_notify_magic_weapon_refine_result::clear_has_color_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_notify_magic_weapon_refine_result::clear_color_index() {
  color_index_ = 0;
  clear_has_color_index();
}
inline ::google::protobuf::int32 gp_notify_magic_weapon_refine_result::color_index() const {
  return color_index_;
}
inline void gp_notify_magic_weapon_refine_result::set_color_index(::google::protobuf::int32 value) {
  set_has_color_index();
  color_index_ = value;
}

// optional int32 train_level = 5;
inline bool gp_notify_magic_weapon_refine_result::has_train_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_notify_magic_weapon_refine_result::set_has_train_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_notify_magic_weapon_refine_result::clear_has_train_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_notify_magic_weapon_refine_result::clear_train_level() {
  train_level_ = 0;
  clear_has_train_level();
}
inline ::google::protobuf::int32 gp_notify_magic_weapon_refine_result::train_level() const {
  return train_level_;
}
inline void gp_notify_magic_weapon_refine_result::set_train_level(::google::protobuf::int32 value) {
  set_has_train_level();
  train_level_ = value;
}

// optional int32 blessing_value = 6;
inline bool gp_notify_magic_weapon_refine_result::has_blessing_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_notify_magic_weapon_refine_result::set_has_blessing_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_notify_magic_weapon_refine_result::clear_has_blessing_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_notify_magic_weapon_refine_result::clear_blessing_value() {
  blessing_value_ = 0;
  clear_has_blessing_value();
}
inline ::google::protobuf::int32 gp_notify_magic_weapon_refine_result::blessing_value() const {
  return blessing_value_;
}
inline void gp_notify_magic_weapon_refine_result::set_blessing_value(::google::protobuf::int32 value) {
  set_has_blessing_value();
  blessing_value_ = value;
}

// -------------------------------------------------------------------

// gp_notify_magic_weapon_change

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_magic_weapon_change];
inline bool gp_notify_magic_weapon_change::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_magic_weapon_change::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_magic_weapon_change::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_magic_weapon_change::clear_type() {
  type_ = 606;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_magic_weapon_change::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_magic_weapon_change::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 roleid = 2;
inline bool gp_notify_magic_weapon_change::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_magic_weapon_change::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_magic_weapon_change::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_magic_weapon_change::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 gp_notify_magic_weapon_change::roleid() const {
  return roleid_;
}
inline void gp_notify_magic_weapon_change::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 weapon_tid = 3;
inline bool gp_notify_magic_weapon_change::has_weapon_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_notify_magic_weapon_change::set_has_weapon_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_notify_magic_weapon_change::clear_has_weapon_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_notify_magic_weapon_change::clear_weapon_tid() {
  weapon_tid_ = 0;
  clear_has_weapon_tid();
}
inline ::google::protobuf::int32 gp_notify_magic_weapon_change::weapon_tid() const {
  return weapon_tid_;
}
inline void gp_notify_magic_weapon_change::set_weapon_tid(::google::protobuf::int32 value) {
  set_has_weapon_tid();
  weapon_tid_ = value;
}

// -------------------------------------------------------------------

// gp_equip_soul_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_equip_soul_result];
inline bool gp_equip_soul_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_equip_soul_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_equip_soul_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_equip_soul_result::clear_type() {
  type_ = 615;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_equip_soul_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_equip_soul_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 pet_location = 2;
inline bool gp_equip_soul_result::has_pet_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_equip_soul_result::set_has_pet_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_equip_soul_result::clear_has_pet_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_equip_soul_result::clear_pet_location() {
  pet_location_ = 0;
  clear_has_pet_location();
}
inline ::google::protobuf::int32 gp_equip_soul_result::pet_location() const {
  return pet_location_;
}
inline void gp_equip_soul_result::set_pet_location(::google::protobuf::int32 value) {
  set_has_pet_location();
  pet_location_ = value;
}

// optional int32 equip_index = 3;
inline bool gp_equip_soul_result::has_equip_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_equip_soul_result::set_has_equip_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_equip_soul_result::clear_has_equip_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_equip_soul_result::clear_equip_index() {
  equip_index_ = 0;
  clear_has_equip_index();
}
inline ::google::protobuf::int32 gp_equip_soul_result::equip_index() const {
  return equip_index_;
}
inline void gp_equip_soul_result::set_equip_index(::google::protobuf::int32 value) {
  set_has_equip_index();
  equip_index_ = value;
}

// optional int32 property_index = 4;
inline bool gp_equip_soul_result::has_property_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_equip_soul_result::set_has_property_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_equip_soul_result::clear_has_property_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_equip_soul_result::clear_property_index() {
  property_index_ = 0;
  clear_has_property_index();
}
inline ::google::protobuf::int32 gp_equip_soul_result::property_index() const {
  return property_index_;
}
inline void gp_equip_soul_result::set_property_index(::google::protobuf::int32 value) {
  set_has_property_index();
  property_index_ = value;
}

// optional int32 exp_change = 5;
inline bool gp_equip_soul_result::has_exp_change() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_equip_soul_result::set_has_exp_change() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_equip_soul_result::clear_has_exp_change() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_equip_soul_result::clear_exp_change() {
  exp_change_ = 0;
  clear_has_exp_change();
}
inline ::google::protobuf::int32 gp_equip_soul_result::exp_change() const {
  return exp_change_;
}
inline void gp_equip_soul_result::set_exp_change(::google::protobuf::int32 value) {
  set_has_exp_change();
  exp_change_ = value;
}

// optional int32 level = 6;
inline bool gp_equip_soul_result::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_equip_soul_result::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_equip_soul_result::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_equip_soul_result::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 gp_equip_soul_result::level() const {
  return level_;
}
inline void gp_equip_soul_result::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 result = 7;
inline bool gp_equip_soul_result::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gp_equip_soul_result::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gp_equip_soul_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gp_equip_soul_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gp_equip_soul_result::result() const {
  return result_;
}
inline void gp_equip_soul_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gp_crack_wuzhuang_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_crack_wuzhuang_result];
inline bool gp_crack_wuzhuang_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_crack_wuzhuang_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_crack_wuzhuang_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_crack_wuzhuang_result::clear_type() {
  type_ = 616;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_crack_wuzhuang_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_crack_wuzhuang_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 achievement_id = 2;
inline bool gp_crack_wuzhuang_result::has_achievement_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_crack_wuzhuang_result::set_has_achievement_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_crack_wuzhuang_result::clear_has_achievement_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_crack_wuzhuang_result::clear_achievement_id() {
  achievement_id_ = 0;
  clear_has_achievement_id();
}
inline ::google::protobuf::int32 gp_crack_wuzhuang_result::achievement_id() const {
  return achievement_id_;
}
inline void gp_crack_wuzhuang_result::set_achievement_id(::google::protobuf::int32 value) {
  set_has_achievement_id();
  achievement_id_ = value;
}

// optional int32 result = 3;
inline bool gp_crack_wuzhuang_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_crack_wuzhuang_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_crack_wuzhuang_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_crack_wuzhuang_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gp_crack_wuzhuang_result::result() const {
  return result_;
}
inline void gp_crack_wuzhuang_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// achievement_info

// optional int32 id = 1;
inline bool achievement_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void achievement_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void achievement_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void achievement_info::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 achievement_info::id() const {
  return id_;
}
inline void achievement_info::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bool accomplish = 2;
inline bool achievement_info::has_accomplish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void achievement_info::set_has_accomplish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void achievement_info::clear_has_accomplish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void achievement_info::clear_accomplish() {
  accomplish_ = false;
  clear_has_accomplish();
}
inline bool achievement_info::accomplish() const {
  return accomplish_;
}
inline void achievement_info::set_accomplish(bool value) {
  set_has_accomplish();
  accomplish_ = value;
}

// repeated int32 condition_data = 3;
inline int achievement_info::condition_data_size() const {
  return condition_data_.size();
}
inline void achievement_info::clear_condition_data() {
  condition_data_.Clear();
}
inline ::google::protobuf::int32 achievement_info::condition_data(int index) const {
  return condition_data_.Get(index);
}
inline void achievement_info::set_condition_data(int index, ::google::protobuf::int32 value) {
  condition_data_.Set(index, value);
}
inline void achievement_info::add_condition_data(::google::protobuf::int32 value) {
  condition_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
achievement_info::condition_data() const {
  return condition_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
achievement_info::mutable_condition_data() {
  return &condition_data_;
}

// -------------------------------------------------------------------

// gp_roam_battle_achievement

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_roam_battle_achievement];
inline bool gp_roam_battle_achievement::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_roam_battle_achievement::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_roam_battle_achievement::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_roam_battle_achievement::clear_type() {
  type_ = 617;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_roam_battle_achievement::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_roam_battle_achievement::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.achievement_info achievements = 3;
inline int gp_roam_battle_achievement::achievements_size() const {
  return achievements_.size();
}
inline void gp_roam_battle_achievement::clear_achievements() {
  achievements_.Clear();
}
inline const ::PB::achievement_info& gp_roam_battle_achievement::achievements(int index) const {
  return achievements_.Get(index);
}
inline ::PB::achievement_info* gp_roam_battle_achievement::mutable_achievements(int index) {
  return achievements_.Mutable(index);
}
inline ::PB::achievement_info* gp_roam_battle_achievement::add_achievements() {
  return achievements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::achievement_info >&
gp_roam_battle_achievement::achievements() const {
  return achievements_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::achievement_info >*
gp_roam_battle_achievement::mutable_achievements() {
  return &achievements_;
}

// -------------------------------------------------------------------

// gp_richman_operate_re

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_richman_operate_re];
inline bool gp_richman_operate_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_richman_operate_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_richman_operate_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_richman_operate_re::clear_type() {
  type_ = 619;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_richman_operate_re::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_richman_operate_re::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 operate_type = 2;
inline bool gp_richman_operate_re::has_operate_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_richman_operate_re::set_has_operate_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_richman_operate_re::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_richman_operate_re::clear_operate_type() {
  operate_type_ = 0;
  clear_has_operate_type();
}
inline ::google::protobuf::int32 gp_richman_operate_re::operate_type() const {
  return operate_type_;
}
inline void gp_richman_operate_re::set_operate_type(::google::protobuf::int32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// optional int32 operate_result = 3;
inline bool gp_richman_operate_re::has_operate_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_richman_operate_re::set_has_operate_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_richman_operate_re::clear_has_operate_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_richman_operate_re::clear_operate_result() {
  operate_result_ = 0;
  clear_has_operate_result();
}
inline ::google::protobuf::int32 gp_richman_operate_re::operate_result() const {
  return operate_result_;
}
inline void gp_richman_operate_re::set_operate_result(::google::protobuf::int32 value) {
  set_has_operate_result();
  operate_result_ = value;
}

// -------------------------------------------------------------------

// richman_passby_award

// optional int32 cell_pos = 1;
inline bool richman_passby_award::has_cell_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void richman_passby_award::set_has_cell_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void richman_passby_award::clear_has_cell_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void richman_passby_award::clear_cell_pos() {
  cell_pos_ = 0;
  clear_has_cell_pos();
}
inline ::google::protobuf::int32 richman_passby_award::cell_pos() const {
  return cell_pos_;
}
inline void richman_passby_award::set_cell_pos(::google::protobuf::int32 value) {
  set_has_cell_pos();
  cell_pos_ = value;
}

// optional int32 award_tid = 2;
inline bool richman_passby_award::has_award_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void richman_passby_award::set_has_award_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void richman_passby_award::clear_has_award_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void richman_passby_award::clear_award_tid() {
  award_tid_ = 0;
  clear_has_award_tid();
}
inline ::google::protobuf::int32 richman_passby_award::award_tid() const {
  return award_tid_;
}
inline void richman_passby_award::set_award_tid(::google::protobuf::int32 value) {
  set_has_award_tid();
  award_tid_ = value;
}

// optional int32 status = 3;
inline bool richman_passby_award::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void richman_passby_award::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void richman_passby_award::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void richman_passby_award::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 richman_passby_award::status() const {
  return status_;
}
inline void richman_passby_award::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// richman_data

// optional .PB.GPS_TYPE type = 1 [default = GUT_RICHMAN_DATA];
inline bool richman_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void richman_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void richman_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void richman_data::clear_type() {
  type_ = 32;
  clear_has_type();
}
inline ::PB::GPS_TYPE richman_data::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void richman_data::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 game_id = 2;
inline bool richman_data::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void richman_data::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void richman_data::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void richman_data::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 richman_data::game_id() const {
  return game_id_;
}
inline void richman_data::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional int32 step_pos = 3;
inline bool richman_data::has_step_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void richman_data::set_has_step_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void richman_data::clear_has_step_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void richman_data::clear_step_pos() {
  step_pos_ = 0;
  clear_has_step_pos();
}
inline ::google::protobuf::int32 richman_data::step_pos() const {
  return step_pos_;
}
inline void richman_data::set_step_pos(::google::protobuf::int32 value) {
  set_has_step_pos();
  step_pos_ = value;
}

// repeated int32 game_cells = 4;
inline int richman_data::game_cells_size() const {
  return game_cells_.size();
}
inline void richman_data::clear_game_cells() {
  game_cells_.Clear();
}
inline ::google::protobuf::int32 richman_data::game_cells(int index) const {
  return game_cells_.Get(index);
}
inline void richman_data::set_game_cells(int index, ::google::protobuf::int32 value) {
  game_cells_.Set(index, value);
}
inline void richman_data::add_game_cells(::google::protobuf::int32 value) {
  game_cells_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
richman_data::game_cells() const {
  return game_cells_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
richman_data::mutable_game_cells() {
  return &game_cells_;
}

// repeated .PB.richman_passby_award passby_award = 5;
inline int richman_data::passby_award_size() const {
  return passby_award_.size();
}
inline void richman_data::clear_passby_award() {
  passby_award_.Clear();
}
inline const ::PB::richman_passby_award& richman_data::passby_award(int index) const {
  return passby_award_.Get(index);
}
inline ::PB::richman_passby_award* richman_data::mutable_passby_award(int index) {
  return passby_award_.Mutable(index);
}
inline ::PB::richman_passby_award* richman_data::add_passby_award() {
  return passby_award_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::richman_passby_award >&
richman_data::passby_award() const {
  return passby_award_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::richman_passby_award >*
richman_data::mutable_passby_award() {
  return &passby_award_;
}

// repeated int32 touched_cells = 6;
inline int richman_data::touched_cells_size() const {
  return touched_cells_.size();
}
inline void richman_data::clear_touched_cells() {
  touched_cells_.Clear();
}
inline ::google::protobuf::int32 richman_data::touched_cells(int index) const {
  return touched_cells_.Get(index);
}
inline void richman_data::set_touched_cells(int index, ::google::protobuf::int32 value) {
  touched_cells_.Set(index, value);
}
inline void richman_data::add_touched_cells(::google::protobuf::int32 value) {
  touched_cells_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
richman_data::touched_cells() const {
  return touched_cells_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
richman_data::mutable_touched_cells() {
  return &touched_cells_;
}

// -------------------------------------------------------------------

// gp_richman_data

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_richman_data];
inline bool gp_richman_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_richman_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_richman_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_richman_data::clear_type() {
  type_ = 620;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_richman_data::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_richman_data::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.richman_data data = 2;
inline bool gp_richman_data::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_richman_data::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_richman_data::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_richman_data::clear_data() {
  if (data_ != NULL) data_->::PB::richman_data::Clear();
  clear_has_data();
}
inline const ::PB::richman_data& gp_richman_data::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::PB::richman_data* gp_richman_data::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::PB::richman_data;
  return data_;
}
inline ::PB::richman_data* gp_richman_data::release_data() {
  clear_has_data();
  ::PB::richman_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void gp_richman_data::set_allocated_data(::PB::richman_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// gp_roam_zhaoji_notify

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_roam_zhaoji];
inline bool gp_roam_zhaoji_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_roam_zhaoji_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_roam_zhaoji_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_roam_zhaoji_notify::clear_type() {
  type_ = 618;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_roam_zhaoji_notify::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_roam_zhaoji_notify::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 roleid = 2;
inline bool gp_roam_zhaoji_notify::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_roam_zhaoji_notify::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_roam_zhaoji_notify::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_roam_zhaoji_notify::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 gp_roam_zhaoji_notify::roleid() const {
  return roleid_;
}
inline void gp_roam_zhaoji_notify::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional bytes name = 3;
inline bool gp_roam_zhaoji_notify::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_roam_zhaoji_notify::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_roam_zhaoji_notify::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_roam_zhaoji_notify::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& gp_roam_zhaoji_notify::name() const {
  return *name_;
}
inline void gp_roam_zhaoji_notify::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gp_roam_zhaoji_notify::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gp_roam_zhaoji_notify::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gp_roam_zhaoji_notify::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* gp_roam_zhaoji_notify::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gp_roam_zhaoji_notify::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 timestamp = 4;
inline bool gp_roam_zhaoji_notify::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_roam_zhaoji_notify::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_roam_zhaoji_notify::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_roam_zhaoji_notify::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 gp_roam_zhaoji_notify::timestamp() const {
  return timestamp_;
}
inline void gp_roam_zhaoji_notify::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// hero_event

// optional int32 eventType = 1;
inline bool hero_event::has_eventtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_event::set_has_eventtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_event::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_event::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::google::protobuf::int32 hero_event::eventtype() const {
  return eventtype_;
}
inline void hero_event::set_eventtype(::google::protobuf::int32 value) {
  set_has_eventtype();
  eventtype_ = value;
}

// optional int32 time = 2;
inline bool hero_event::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_event::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_event::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_event::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 hero_event::time() const {
  return time_;
}
inline void hero_event::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional bytes name = 3;
inline bool hero_event::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_event::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_event::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_event::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& hero_event::name() const {
  return *name_;
}
inline void hero_event::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void hero_event::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void hero_event::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hero_event::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* hero_event::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void hero_event::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gp_hero_event

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_hero_event];
inline bool gp_hero_event::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_hero_event::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_hero_event::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_hero_event::clear_type() {
  type_ = 621;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_hero_event::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_hero_event::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 camp = 2;
inline bool gp_hero_event::has_camp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_hero_event::set_has_camp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_hero_event::clear_has_camp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_hero_event::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 gp_hero_event::camp() const {
  return camp_;
}
inline void gp_hero_event::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// repeated .PB.hero_event event = 3;
inline int gp_hero_event::event_size() const {
  return event_.size();
}
inline void gp_hero_event::clear_event() {
  event_.Clear();
}
inline const ::PB::hero_event& gp_hero_event::event(int index) const {
  return event_.Get(index);
}
inline ::PB::hero_event* gp_hero_event::mutable_event(int index) {
  return event_.Mutable(index);
}
inline ::PB::hero_event* gp_hero_event::add_event() {
  return event_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::hero_event >&
gp_hero_event::event() const {
  return event_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::hero_event >*
gp_hero_event::mutable_event() {
  return &event_;
}

// -------------------------------------------------------------------

// gp_notify_general_souls

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_general_soul];
inline bool gp_notify_general_souls::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_general_souls::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_general_souls::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_general_souls::clear_type() {
  type_ = 622;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_general_souls::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_general_souls::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.db_general_souls generals = 2;
inline bool gp_notify_general_souls::has_generals() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_general_souls::set_has_generals() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_general_souls::clear_has_generals() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_general_souls::clear_generals() {
  if (generals_ != NULL) generals_->::PB::db_general_souls::Clear();
  clear_has_generals();
}
inline const ::PB::db_general_souls& gp_notify_general_souls::generals() const {
  return generals_ != NULL ? *generals_ : *default_instance_->generals_;
}
inline ::PB::db_general_souls* gp_notify_general_souls::mutable_generals() {
  set_has_generals();
  if (generals_ == NULL) generals_ = new ::PB::db_general_souls;
  return generals_;
}
inline ::PB::db_general_souls* gp_notify_general_souls::release_generals() {
  clear_has_generals();
  ::PB::db_general_souls* temp = generals_;
  generals_ = NULL;
  return temp;
}
inline void gp_notify_general_souls::set_allocated_generals(::PB::db_general_souls* generals) {
  delete generals_;
  generals_ = generals;
  if (generals) {
    set_has_generals();
  } else {
    clear_has_generals();
  }
}

// -------------------------------------------------------------------

// gp_gain_general_soul

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_gain_general_soul];
inline bool gp_gain_general_soul::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_gain_general_soul::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_gain_general_soul::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_gain_general_soul::clear_type() {
  type_ = 623;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_gain_general_soul::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_gain_general_soul::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 general_tid = 2;
inline bool gp_gain_general_soul::has_general_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_gain_general_soul::set_has_general_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_gain_general_soul::clear_has_general_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_gain_general_soul::clear_general_tid() {
  general_tid_ = 0;
  clear_has_general_tid();
}
inline ::google::protobuf::int32 gp_gain_general_soul::general_tid() const {
  return general_tid_;
}
inline void gp_gain_general_soul::set_general_tid(::google::protobuf::int32 value) {
  set_has_general_tid();
  general_tid_ = value;
}

// optional int32 level = 3;
inline bool gp_gain_general_soul::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_gain_general_soul::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_gain_general_soul::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_gain_general_soul::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 gp_gain_general_soul::level() const {
  return level_;
}
inline void gp_gain_general_soul::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// gp_notify_general_soul

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_notify_general_soul];
inline bool gp_notify_general_soul::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_notify_general_soul::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_notify_general_soul::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_notify_general_soul::clear_type() {
  type_ = 624;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_notify_general_soul::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_notify_general_soul::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 general_tid = 2;
inline bool gp_notify_general_soul::has_general_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_notify_general_soul::set_has_general_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_notify_general_soul::clear_has_general_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_notify_general_soul::clear_general_tid() {
  general_tid_ = 0;
  clear_has_general_tid();
}
inline ::google::protobuf::int32 gp_notify_general_soul::general_tid() const {
  return general_tid_;
}
inline void gp_notify_general_soul::set_general_tid(::google::protobuf::int32 value) {
  set_has_general_tid();
  general_tid_ = value;
}

// optional .PB.db_general_soul general_soul = 3;
inline bool gp_notify_general_soul::has_general_soul() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_notify_general_soul::set_has_general_soul() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_notify_general_soul::clear_has_general_soul() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_notify_general_soul::clear_general_soul() {
  if (general_soul_ != NULL) general_soul_->::PB::db_general_soul::Clear();
  clear_has_general_soul();
}
inline const ::PB::db_general_soul& gp_notify_general_soul::general_soul() const {
  return general_soul_ != NULL ? *general_soul_ : *default_instance_->general_soul_;
}
inline ::PB::db_general_soul* gp_notify_general_soul::mutable_general_soul() {
  set_has_general_soul();
  if (general_soul_ == NULL) general_soul_ = new ::PB::db_general_soul;
  return general_soul_;
}
inline ::PB::db_general_soul* gp_notify_general_soul::release_general_soul() {
  clear_has_general_soul();
  ::PB::db_general_soul* temp = general_soul_;
  general_soul_ = NULL;
  return temp;
}
inline void gp_notify_general_soul::set_allocated_general_soul(::PB::db_general_soul* general_soul) {
  delete general_soul_;
  general_soul_ = general_soul;
  if (general_soul) {
    set_has_general_soul();
  } else {
    clear_has_general_soul();
  }
}

// -------------------------------------------------------------------

// gp_synthetize_result

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_synthetize_result];
inline bool gp_synthetize_result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_synthetize_result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_synthetize_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_synthetize_result::clear_type() {
  type_ = 625;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_synthetize_result::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_synthetize_result::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.general_list success_list = 2;
inline bool gp_synthetize_result::has_success_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_synthetize_result::set_has_success_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_synthetize_result::clear_has_success_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_synthetize_result::clear_success_list() {
  if (success_list_ != NULL) success_list_->::PB::general_list::Clear();
  clear_has_success_list();
}
inline const ::PB::general_list& gp_synthetize_result::success_list() const {
  return success_list_ != NULL ? *success_list_ : *default_instance_->success_list_;
}
inline ::PB::general_list* gp_synthetize_result::mutable_success_list() {
  set_has_success_list();
  if (success_list_ == NULL) success_list_ = new ::PB::general_list;
  return success_list_;
}
inline ::PB::general_list* gp_synthetize_result::release_success_list() {
  clear_has_success_list();
  ::PB::general_list* temp = success_list_;
  success_list_ = NULL;
  return temp;
}
inline void gp_synthetize_result::set_allocated_success_list(::PB::general_list* success_list) {
  delete success_list_;
  success_list_ = success_list;
  if (success_list) {
    set_has_success_list();
  } else {
    clear_has_success_list();
  }
}

// optional .PB.general_list fail_list = 3;
inline bool gp_synthetize_result::has_fail_list() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_synthetize_result::set_has_fail_list() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_synthetize_result::clear_has_fail_list() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_synthetize_result::clear_fail_list() {
  if (fail_list_ != NULL) fail_list_->::PB::general_list::Clear();
  clear_has_fail_list();
}
inline const ::PB::general_list& gp_synthetize_result::fail_list() const {
  return fail_list_ != NULL ? *fail_list_ : *default_instance_->fail_list_;
}
inline ::PB::general_list* gp_synthetize_result::mutable_fail_list() {
  set_has_fail_list();
  if (fail_list_ == NULL) fail_list_ = new ::PB::general_list;
  return fail_list_;
}
inline ::PB::general_list* gp_synthetize_result::release_fail_list() {
  clear_has_fail_list();
  ::PB::general_list* temp = fail_list_;
  fail_list_ = NULL;
  return temp;
}
inline void gp_synthetize_result::set_allocated_fail_list(::PB::general_list* fail_list) {
  delete fail_list_;
  fail_list_ = fail_list;
  if (fail_list) {
    set_has_fail_list();
  } else {
    clear_has_fail_list();
  }
}

// -------------------------------------------------------------------

// gp_dynamic_move_map

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_dynamic_move_map];
inline bool gp_dynamic_move_map::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_dynamic_move_map::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_dynamic_move_map::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_dynamic_move_map::clear_type() {
  type_ = 626;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_dynamic_move_map::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_dynamic_move_map::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated int32 map_seq = 2;
inline int gp_dynamic_move_map::map_seq_size() const {
  return map_seq_.size();
}
inline void gp_dynamic_move_map::clear_map_seq() {
  map_seq_.Clear();
}
inline ::google::protobuf::int32 gp_dynamic_move_map::map_seq(int index) const {
  return map_seq_.Get(index);
}
inline void gp_dynamic_move_map::set_map_seq(int index, ::google::protobuf::int32 value) {
  map_seq_.Set(index, value);
}
inline void gp_dynamic_move_map::add_map_seq(::google::protobuf::int32 value) {
  map_seq_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gp_dynamic_move_map::map_seq() const {
  return map_seq_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gp_dynamic_move_map::mutable_map_seq() {
  return &map_seq_;
}

// optional int32 scene_id = 4;
inline bool gp_dynamic_move_map::has_scene_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_dynamic_move_map::set_has_scene_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_dynamic_move_map::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_dynamic_move_map::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 gp_dynamic_move_map::scene_id() const {
  return scene_id_;
}
inline void gp_dynamic_move_map::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// -------------------------------------------------------------------

// level_object_info

// optional int64 ruid = 1;
inline bool level_object_info::has_ruid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void level_object_info::set_has_ruid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void level_object_info::clear_has_ruid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void level_object_info::clear_ruid() {
  ruid_ = GOOGLE_LONGLONG(0);
  clear_has_ruid();
}
inline ::google::protobuf::int64 level_object_info::ruid() const {
  return ruid_;
}
inline void level_object_info::set_ruid(::google::protobuf::int64 value) {
  set_has_ruid();
  ruid_ = value;
}

// optional bytes name = 2;
inline bool level_object_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void level_object_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void level_object_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void level_object_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& level_object_info::name() const {
  return *name_;
}
inline void level_object_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void level_object_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void level_object_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* level_object_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* level_object_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void level_object_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 param = 3;
inline int level_object_info::param_size() const {
  return param_.size();
}
inline void level_object_info::clear_param() {
  param_.Clear();
}
inline ::google::protobuf::int32 level_object_info::param(int index) const {
  return param_.Get(index);
}
inline void level_object_info::set_param(int index, ::google::protobuf::int32 value) {
  param_.Set(index, value);
}
inline void level_object_info::add_param(::google::protobuf::int32 value) {
  param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
level_object_info::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
level_object_info::mutable_param() {
  return &param_;
}

// -------------------------------------------------------------------

// gp_level_object_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_level_object_info];
inline bool gp_level_object_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_level_object_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_level_object_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_level_object_info::clear_type() {
  type_ = 627;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_level_object_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_level_object_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.level_object_info info = 2;
inline int gp_level_object_info::info_size() const {
  return info_.size();
}
inline void gp_level_object_info::clear_info() {
  info_.Clear();
}
inline const ::PB::level_object_info& gp_level_object_info::info(int index) const {
  return info_.Get(index);
}
inline ::PB::level_object_info* gp_level_object_info::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PB::level_object_info* gp_level_object_info::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::level_object_info >&
gp_level_object_info::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::level_object_info >*
gp_level_object_info::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// gp_self_leave_scene

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_self_leave_scene];
inline bool gp_self_leave_scene::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_self_leave_scene::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_self_leave_scene::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_self_leave_scene::clear_type() {
  type_ = 628;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_self_leave_scene::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_self_leave_scene::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 scene_tag = 2;
inline bool gp_self_leave_scene::has_scene_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_self_leave_scene::set_has_scene_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_self_leave_scene::clear_has_scene_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_self_leave_scene::clear_scene_tag() {
  scene_tag_ = 0u;
  clear_has_scene_tag();
}
inline ::google::protobuf::uint32 gp_self_leave_scene::scene_tag() const {
  return scene_tag_;
}
inline void gp_self_leave_scene::set_scene_tag(::google::protobuf::uint32 value) {
  set_has_scene_tag();
  scene_tag_ = value;
}

// optional bool is_seamless = 3 [default = false];
inline bool gp_self_leave_scene::has_is_seamless() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_self_leave_scene::set_has_is_seamless() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_self_leave_scene::clear_has_is_seamless() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_self_leave_scene::clear_is_seamless() {
  is_seamless_ = false;
  clear_has_is_seamless();
}
inline bool gp_self_leave_scene::is_seamless() const {
  return is_seamless_;
}
inline void gp_self_leave_scene::set_is_seamless(bool value) {
  set_has_is_seamless();
  is_seamless_ = value;
}

// -------------------------------------------------------------------

// gp_self_misc_property

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_self_misc_property];
inline bool gp_self_misc_property::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_self_misc_property::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_self_misc_property::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_self_misc_property::clear_type() {
  type_ = 629;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_self_misc_property::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_self_misc_property::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 cur_skill_spec_index = 2;
inline bool gp_self_misc_property::has_cur_skill_spec_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_self_misc_property::set_has_cur_skill_spec_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_self_misc_property::clear_has_cur_skill_spec_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_self_misc_property::clear_cur_skill_spec_index() {
  cur_skill_spec_index_ = 0u;
  clear_has_cur_skill_spec_index();
}
inline ::google::protobuf::uint32 gp_self_misc_property::cur_skill_spec_index() const {
  return cur_skill_spec_index_;
}
inline void gp_self_misc_property::set_cur_skill_spec_index(::google::protobuf::uint32 value) {
  set_has_cur_skill_spec_index();
  cur_skill_spec_index_ = value;
}

// -------------------------------------------------------------------

// db_player_misc_revive_data

// optional bool revive_on_enter = 1;
inline bool db_player_misc_revive_data::has_revive_on_enter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_misc_revive_data::set_has_revive_on_enter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_misc_revive_data::clear_has_revive_on_enter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_misc_revive_data::clear_revive_on_enter() {
  revive_on_enter_ = false;
  clear_has_revive_on_enter();
}
inline bool db_player_misc_revive_data::revive_on_enter() const {
  return revive_on_enter_;
}
inline void db_player_misc_revive_data::set_revive_on_enter(bool value) {
  set_has_revive_on_enter();
  revive_on_enter_ = value;
}

// -------------------------------------------------------------------

// db_player_misc

// optional .PB.GPS_TYPE type = 1 [default = GUT_PLAYER_MISC];
inline bool db_player_misc::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_misc::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_misc::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_misc::clear_type() {
  type_ = 12;
  clear_has_type();
}
inline ::PB::GPS_TYPE db_player_misc::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void db_player_misc::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.db_player_misc.revive_data revive = 2;
inline bool db_player_misc::has_revive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_player_misc::set_has_revive() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_player_misc::clear_has_revive() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_player_misc::clear_revive() {
  if (revive_ != NULL) revive_->::PB::db_player_misc_revive_data::Clear();
  clear_has_revive();
}
inline const ::PB::db_player_misc_revive_data& db_player_misc::revive() const {
  return revive_ != NULL ? *revive_ : *default_instance_->revive_;
}
inline ::PB::db_player_misc_revive_data* db_player_misc::mutable_revive() {
  set_has_revive();
  if (revive_ == NULL) revive_ = new ::PB::db_player_misc_revive_data;
  return revive_;
}
inline ::PB::db_player_misc_revive_data* db_player_misc::release_revive() {
  clear_has_revive();
  ::PB::db_player_misc_revive_data* temp = revive_;
  revive_ = NULL;
  return temp;
}
inline void db_player_misc::set_allocated_revive(::PB::db_player_misc_revive_data* revive) {
  delete revive_;
  revive_ = revive;
  if (revive) {
    set_has_revive();
  } else {
    clear_has_revive();
  }
}

// optional int32 prev_levelup_time_used = 3;
inline bool db_player_misc::has_prev_levelup_time_used() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_player_misc::set_has_prev_levelup_time_used() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_player_misc::clear_has_prev_levelup_time_used() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_player_misc::clear_prev_levelup_time_used() {
  prev_levelup_time_used_ = 0;
  clear_has_prev_levelup_time_used();
}
inline ::google::protobuf::int32 db_player_misc::prev_levelup_time_used() const {
  return prev_levelup_time_used_;
}
inline void db_player_misc::set_prev_levelup_time_used(::google::protobuf::int32 value) {
  set_has_prev_levelup_time_used();
  prev_levelup_time_used_ = value;
}

// optional .PB.gp_multi_exp multi_exp = 4;
inline bool db_player_misc::has_multi_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_player_misc::set_has_multi_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_player_misc::clear_has_multi_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_player_misc::clear_multi_exp() {
  if (multi_exp_ != NULL) multi_exp_->::PB::gp_multi_exp::Clear();
  clear_has_multi_exp();
}
inline const ::PB::gp_multi_exp& db_player_misc::multi_exp() const {
  return multi_exp_ != NULL ? *multi_exp_ : *default_instance_->multi_exp_;
}
inline ::PB::gp_multi_exp* db_player_misc::mutable_multi_exp() {
  set_has_multi_exp();
  if (multi_exp_ == NULL) multi_exp_ = new ::PB::gp_multi_exp;
  return multi_exp_;
}
inline ::PB::gp_multi_exp* db_player_misc::release_multi_exp() {
  clear_has_multi_exp();
  ::PB::gp_multi_exp* temp = multi_exp_;
  multi_exp_ = NULL;
  return temp;
}
inline void db_player_misc::set_allocated_multi_exp(::PB::gp_multi_exp* multi_exp) {
  delete multi_exp_;
  multi_exp_ = multi_exp;
  if (multi_exp) {
    set_has_multi_exp();
  } else {
    clear_has_multi_exp();
  }
}

// optional .PB.gp_refuse_fight refuse_fight = 5;
inline bool db_player_misc::has_refuse_fight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_player_misc::set_has_refuse_fight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_player_misc::clear_has_refuse_fight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_player_misc::clear_refuse_fight() {
  if (refuse_fight_ != NULL) refuse_fight_->::PB::gp_refuse_fight::Clear();
  clear_has_refuse_fight();
}
inline const ::PB::gp_refuse_fight& db_player_misc::refuse_fight() const {
  return refuse_fight_ != NULL ? *refuse_fight_ : *default_instance_->refuse_fight_;
}
inline ::PB::gp_refuse_fight* db_player_misc::mutable_refuse_fight() {
  set_has_refuse_fight();
  if (refuse_fight_ == NULL) refuse_fight_ = new ::PB::gp_refuse_fight;
  return refuse_fight_;
}
inline ::PB::gp_refuse_fight* db_player_misc::release_refuse_fight() {
  clear_has_refuse_fight();
  ::PB::gp_refuse_fight* temp = refuse_fight_;
  refuse_fight_ = NULL;
  return temp;
}
inline void db_player_misc::set_allocated_refuse_fight(::PB::gp_refuse_fight* refuse_fight) {
  delete refuse_fight_;
  refuse_fight_ = refuse_fight;
  if (refuse_fight) {
    set_has_refuse_fight();
  } else {
    clear_has_refuse_fight();
  }
}

// optional int32 old_prof_mask = 6;
inline bool db_player_misc::has_old_prof_mask() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_player_misc::set_has_old_prof_mask() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_player_misc::clear_has_old_prof_mask() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_player_misc::clear_old_prof_mask() {
  old_prof_mask_ = 0;
  clear_has_old_prof_mask();
}
inline ::google::protobuf::int32 db_player_misc::old_prof_mask() const {
  return old_prof_mask_;
}
inline void db_player_misc::set_old_prof_mask(::google::protobuf::int32 value) {
  set_has_old_prof_mask();
  old_prof_mask_ = value;
}

// repeated .PB.gp_old_prof_skill_level old_skill_info = 7;
inline int db_player_misc::old_skill_info_size() const {
  return old_skill_info_.size();
}
inline void db_player_misc::clear_old_skill_info() {
  old_skill_info_.Clear();
}
inline const ::PB::gp_old_prof_skill_level& db_player_misc::old_skill_info(int index) const {
  return old_skill_info_.Get(index);
}
inline ::PB::gp_old_prof_skill_level* db_player_misc::mutable_old_skill_info(int index) {
  return old_skill_info_.Mutable(index);
}
inline ::PB::gp_old_prof_skill_level* db_player_misc::add_old_skill_info() {
  return old_skill_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_old_prof_skill_level >&
db_player_misc::old_skill_info() const {
  return old_skill_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::gp_old_prof_skill_level >*
db_player_misc::mutable_old_skill_info() {
  return &old_skill_info_;
}

// -------------------------------------------------------------------

// npt_get_qqgroup_openid_req

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_QQGROUP_OPENID];
inline bool npt_get_qqgroup_openid_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_get_qqgroup_openid_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_get_qqgroup_openid_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_get_qqgroup_openid_req::clear_type() {
  type_ = 52;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_get_qqgroup_openid_req::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_get_qqgroup_openid_req::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool npt_get_qqgroup_openid_req::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_get_qqgroup_openid_req::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_get_qqgroup_openid_req::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_get_qqgroup_openid_req::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_get_qqgroup_openid_req::roleid() const {
  return roleid_;
}
inline void npt_get_qqgroup_openid_req::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 unionid = 3;
inline bool npt_get_qqgroup_openid_req::has_unionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_get_qqgroup_openid_req::set_has_unionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_get_qqgroup_openid_req::clear_has_unionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_get_qqgroup_openid_req::clear_unionid() {
  unionid_ = 0;
  clear_has_unionid();
}
inline ::google::protobuf::int32 npt_get_qqgroup_openid_req::unionid() const {
  return unionid_;
}
inline void npt_get_qqgroup_openid_req::set_unionid(::google::protobuf::int32 value) {
  set_has_unionid();
  unionid_ = value;
}

// optional int32 opt = 4 [default = 0];
inline bool npt_get_qqgroup_openid_req::has_opt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_get_qqgroup_openid_req::set_has_opt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_get_qqgroup_openid_req::clear_has_opt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_get_qqgroup_openid_req::clear_opt() {
  opt_ = 0;
  clear_has_opt();
}
inline ::google::protobuf::int32 npt_get_qqgroup_openid_req::opt() const {
  return opt_;
}
inline void npt_get_qqgroup_openid_req::set_opt(::google::protobuf::int32 value) {
  set_has_opt();
  opt_ = value;
}

// optional int32 groupcode = 5;
inline bool npt_get_qqgroup_openid_req::has_groupcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_get_qqgroup_openid_req::set_has_groupcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_get_qqgroup_openid_req::clear_has_groupcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_get_qqgroup_openid_req::clear_groupcode() {
  groupcode_ = 0;
  clear_has_groupcode();
}
inline ::google::protobuf::int32 npt_get_qqgroup_openid_req::groupcode() const {
  return groupcode_;
}
inline void npt_get_qqgroup_openid_req::set_groupcode(::google::protobuf::int32 value) {
  set_has_groupcode();
  groupcode_ = value;
}

// -------------------------------------------------------------------

// npt_get_qqgroup_openid_resp

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RESP_QQGROUP_OPENID];
inline bool npt_get_qqgroup_openid_resp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_get_qqgroup_openid_resp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_get_qqgroup_openid_resp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_get_qqgroup_openid_resp::clear_type() {
  type_ = 53;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_get_qqgroup_openid_resp::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_get_qqgroup_openid_resp::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 retcode = 2 [default = 1000];
inline bool npt_get_qqgroup_openid_resp::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_get_qqgroup_openid_resp::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_get_qqgroup_openid_resp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_get_qqgroup_openid_resp::clear_retcode() {
  retcode_ = 1000;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_get_qqgroup_openid_resp::retcode() const {
  return retcode_;
}
inline void npt_get_qqgroup_openid_resp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int64 roleid = 3;
inline bool npt_get_qqgroup_openid_resp::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_get_qqgroup_openid_resp::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_get_qqgroup_openid_resp::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_get_qqgroup_openid_resp::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_get_qqgroup_openid_resp::roleid() const {
  return roleid_;
}
inline void npt_get_qqgroup_openid_resp::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 unionid = 4;
inline bool npt_get_qqgroup_openid_resp::has_unionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_get_qqgroup_openid_resp::set_has_unionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_get_qqgroup_openid_resp::clear_has_unionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_get_qqgroup_openid_resp::clear_unionid() {
  unionid_ = 0;
  clear_has_unionid();
}
inline ::google::protobuf::int32 npt_get_qqgroup_openid_resp::unionid() const {
  return unionid_;
}
inline void npt_get_qqgroup_openid_resp::set_unionid(::google::protobuf::int32 value) {
  set_has_unionid();
  unionid_ = value;
}

// optional int32 opt = 5 [default = 0];
inline bool npt_get_qqgroup_openid_resp::has_opt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_get_qqgroup_openid_resp::set_has_opt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_get_qqgroup_openid_resp::clear_has_opt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_get_qqgroup_openid_resp::clear_opt() {
  opt_ = 0;
  clear_has_opt();
}
inline ::google::protobuf::int32 npt_get_qqgroup_openid_resp::opt() const {
  return opt_;
}
inline void npt_get_qqgroup_openid_resp::set_opt(::google::protobuf::int32 value) {
  set_has_opt();
  opt_ = value;
}

// optional int32 groupcode = 6;
inline bool npt_get_qqgroup_openid_resp::has_groupcode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_get_qqgroup_openid_resp::set_has_groupcode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_get_qqgroup_openid_resp::clear_has_groupcode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_get_qqgroup_openid_resp::clear_groupcode() {
  groupcode_ = 0;
  clear_has_groupcode();
}
inline ::google::protobuf::int32 npt_get_qqgroup_openid_resp::groupcode() const {
  return groupcode_;
}
inline void npt_get_qqgroup_openid_resp::set_groupcode(::google::protobuf::int32 value) {
  set_has_groupcode();
  groupcode_ = value;
}

// optional int32 is_lost = 7 [default = 0];
inline bool npt_get_qqgroup_openid_resp::has_is_lost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_get_qqgroup_openid_resp::set_has_is_lost() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_get_qqgroup_openid_resp::clear_has_is_lost() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_get_qqgroup_openid_resp::clear_is_lost() {
  is_lost_ = 0;
  clear_has_is_lost();
}
inline ::google::protobuf::int32 npt_get_qqgroup_openid_resp::is_lost() const {
  return is_lost_;
}
inline void npt_get_qqgroup_openid_resp::set_is_lost(::google::protobuf::int32 value) {
  set_has_is_lost();
  is_lost_ = value;
}

// optional bytes group_openid = 8;
inline bool npt_get_qqgroup_openid_resp::has_group_openid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_get_qqgroup_openid_resp::set_has_group_openid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_get_qqgroup_openid_resp::clear_has_group_openid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_get_qqgroup_openid_resp::clear_group_openid() {
  if (group_openid_ != &::google::protobuf::internal::kEmptyString) {
    group_openid_->clear();
  }
  clear_has_group_openid();
}
inline const ::std::string& npt_get_qqgroup_openid_resp::group_openid() const {
  return *group_openid_;
}
inline void npt_get_qqgroup_openid_resp::set_group_openid(const ::std::string& value) {
  set_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    group_openid_ = new ::std::string;
  }
  group_openid_->assign(value);
}
inline void npt_get_qqgroup_openid_resp::set_group_openid(const char* value) {
  set_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    group_openid_ = new ::std::string;
  }
  group_openid_->assign(value);
}
inline void npt_get_qqgroup_openid_resp::set_group_openid(const void* value, size_t size) {
  set_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    group_openid_ = new ::std::string;
  }
  group_openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_get_qqgroup_openid_resp::mutable_group_openid() {
  set_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    group_openid_ = new ::std::string;
  }
  return group_openid_;
}
inline ::std::string* npt_get_qqgroup_openid_resp::release_group_openid() {
  clear_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_openid_;
    group_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_get_qqgroup_openid_resp::set_allocated_group_openid(::std::string* group_openid) {
  if (group_openid_ != &::google::protobuf::internal::kEmptyString) {
    delete group_openid_;
  }
  if (group_openid) {
    set_has_group_openid();
    group_openid_ = group_openid;
  } else {
    clear_has_group_openid();
    group_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes msg = 9;
inline bool npt_get_qqgroup_openid_resp::has_msg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void npt_get_qqgroup_openid_resp::set_has_msg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void npt_get_qqgroup_openid_resp::clear_has_msg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void npt_get_qqgroup_openid_resp::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& npt_get_qqgroup_openid_resp::msg() const {
  return *msg_;
}
inline void npt_get_qqgroup_openid_resp::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void npt_get_qqgroup_openid_resp::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void npt_get_qqgroup_openid_resp::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_get_qqgroup_openid_resp::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* npt_get_qqgroup_openid_resp::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_get_qqgroup_openid_resp::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes group_name = 10;
inline bool npt_get_qqgroup_openid_resp::has_group_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void npt_get_qqgroup_openid_resp::set_has_group_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void npt_get_qqgroup_openid_resp::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void npt_get_qqgroup_openid_resp::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& npt_get_qqgroup_openid_resp::group_name() const {
  return *group_name_;
}
inline void npt_get_qqgroup_openid_resp::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void npt_get_qqgroup_openid_resp::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void npt_get_qqgroup_openid_resp::set_group_name(const void* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_get_qqgroup_openid_resp::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  return group_name_;
}
inline ::std::string* npt_get_qqgroup_openid_resp::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_get_qqgroup_openid_resp::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_get_http_req

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_HTTP_REQ];
inline bool npt_get_http_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_get_http_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_get_http_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_get_http_req::clear_type() {
  type_ = 59;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_get_http_req::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_get_http_req::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 method = 2 [default = 0];
inline bool npt_get_http_req::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_get_http_req::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_get_http_req::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_get_http_req::clear_method() {
  method_ = 0;
  clear_has_method();
}
inline ::google::protobuf::int32 npt_get_http_req::method() const {
  return method_;
}
inline void npt_get_http_req::set_method(::google::protobuf::int32 value) {
  set_has_method();
  method_ = value;
}

// optional bytes url = 3;
inline bool npt_get_http_req::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_get_http_req::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_get_http_req::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_get_http_req::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& npt_get_http_req::url() const {
  return *url_;
}
inline void npt_get_http_req::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void npt_get_http_req::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void npt_get_http_req::set_url(const void* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_get_http_req::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* npt_get_http_req::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_get_http_req::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes body = 4;
inline bool npt_get_http_req::has_body() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_get_http_req::set_has_body() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_get_http_req::clear_has_body() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_get_http_req::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& npt_get_http_req::body() const {
  return *body_;
}
inline void npt_get_http_req::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void npt_get_http_req::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void npt_get_http_req::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_get_http_req::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* npt_get_http_req::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_get_http_req::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 reserved = 5;
inline bool npt_get_http_req::has_reserved() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_get_http_req::set_has_reserved() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_get_http_req::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_get_http_req::clear_reserved() {
  reserved_ = 0;
  clear_has_reserved();
}
inline ::google::protobuf::int32 npt_get_http_req::reserved() const {
  return reserved_;
}
inline void npt_get_http_req::set_reserved(::google::protobuf::int32 value) {
  set_has_reserved();
  reserved_ = value;
}

// -------------------------------------------------------------------

// npt_get_http_resp

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_HTTP_RESP];
inline bool npt_get_http_resp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_get_http_resp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_get_http_resp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_get_http_resp::clear_type() {
  type_ = 60;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_get_http_resp::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_get_http_resp::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 method = 2 [default = 0];
inline bool npt_get_http_resp::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_get_http_resp::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_get_http_resp::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_get_http_resp::clear_method() {
  method_ = 0;
  clear_has_method();
}
inline ::google::protobuf::int32 npt_get_http_resp::method() const {
  return method_;
}
inline void npt_get_http_resp::set_method(::google::protobuf::int32 value) {
  set_has_method();
  method_ = value;
}

// optional int32 retcode = 3 [default = 200];
inline bool npt_get_http_resp::has_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_get_http_resp::set_has_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_get_http_resp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_get_http_resp::clear_retcode() {
  retcode_ = 200;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_get_http_resp::retcode() const {
  return retcode_;
}
inline void npt_get_http_resp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional bytes contents = 4;
inline bool npt_get_http_resp::has_contents() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_get_http_resp::set_has_contents() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_get_http_resp::clear_has_contents() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_get_http_resp::clear_contents() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& npt_get_http_resp::contents() const {
  return *contents_;
}
inline void npt_get_http_resp::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void npt_get_http_resp::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void npt_get_http_resp::set_contents(const void* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_get_http_resp::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  return contents_;
}
inline ::std::string* npt_get_http_resp::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_get_http_resp::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 reserved = 5;
inline bool npt_get_http_resp::has_reserved() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_get_http_resp::set_has_reserved() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_get_http_resp::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_get_http_resp::clear_reserved() {
  reserved_ = 0;
  clear_has_reserved();
}
inline ::google::protobuf::int32 npt_get_http_resp::reserved() const {
  return reserved_;
}
inline void npt_get_http_resp::set_reserved(::google::protobuf::int32 value) {
  set_has_reserved();
  reserved_ = value;
}

// -------------------------------------------------------------------

// npt_unbind_qqgroup_req

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_UNBIND_QQGROUP_REQ];
inline bool npt_unbind_qqgroup_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_unbind_qqgroup_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_unbind_qqgroup_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_unbind_qqgroup_req::clear_type() {
  type_ = 63;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_unbind_qqgroup_req::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_unbind_qqgroup_req::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool npt_unbind_qqgroup_req::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_unbind_qqgroup_req::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_unbind_qqgroup_req::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_unbind_qqgroup_req::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_unbind_qqgroup_req::roleid() const {
  return roleid_;
}
inline void npt_unbind_qqgroup_req::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 unionid = 3;
inline bool npt_unbind_qqgroup_req::has_unionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_unbind_qqgroup_req::set_has_unionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_unbind_qqgroup_req::clear_has_unionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_unbind_qqgroup_req::clear_unionid() {
  unionid_ = 0;
  clear_has_unionid();
}
inline ::google::protobuf::int32 npt_unbind_qqgroup_req::unionid() const {
  return unionid_;
}
inline void npt_unbind_qqgroup_req::set_unionid(::google::protobuf::int32 value) {
  set_has_unionid();
  unionid_ = value;
}

// required bytes group_openid = 4;
inline bool npt_unbind_qqgroup_req::has_group_openid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_unbind_qqgroup_req::set_has_group_openid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_unbind_qqgroup_req::clear_has_group_openid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_unbind_qqgroup_req::clear_group_openid() {
  if (group_openid_ != &::google::protobuf::internal::kEmptyString) {
    group_openid_->clear();
  }
  clear_has_group_openid();
}
inline const ::std::string& npt_unbind_qqgroup_req::group_openid() const {
  return *group_openid_;
}
inline void npt_unbind_qqgroup_req::set_group_openid(const ::std::string& value) {
  set_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    group_openid_ = new ::std::string;
  }
  group_openid_->assign(value);
}
inline void npt_unbind_qqgroup_req::set_group_openid(const char* value) {
  set_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    group_openid_ = new ::std::string;
  }
  group_openid_->assign(value);
}
inline void npt_unbind_qqgroup_req::set_group_openid(const void* value, size_t size) {
  set_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    group_openid_ = new ::std::string;
  }
  group_openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_unbind_qqgroup_req::mutable_group_openid() {
  set_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    group_openid_ = new ::std::string;
  }
  return group_openid_;
}
inline ::std::string* npt_unbind_qqgroup_req::release_group_openid() {
  clear_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_openid_;
    group_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_unbind_qqgroup_req::set_allocated_group_openid(::std::string* group_openid) {
  if (group_openid_ != &::google::protobuf::internal::kEmptyString) {
    delete group_openid_;
  }
  if (group_openid) {
    set_has_group_openid();
    group_openid_ = group_openid;
  } else {
    clear_has_group_openid();
    group_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 opt = 5 [default = 0];
inline bool npt_unbind_qqgroup_req::has_opt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_unbind_qqgroup_req::set_has_opt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_unbind_qqgroup_req::clear_has_opt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_unbind_qqgroup_req::clear_opt() {
  opt_ = 0;
  clear_has_opt();
}
inline ::google::protobuf::int32 npt_unbind_qqgroup_req::opt() const {
  return opt_;
}
inline void npt_unbind_qqgroup_req::set_opt(::google::protobuf::int32 value) {
  set_has_opt();
  opt_ = value;
}

// -------------------------------------------------------------------

// npt_unbind_qqgroup_resp

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_UNBIND_QQGROUP_RESP];
inline bool npt_unbind_qqgroup_resp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_unbind_qqgroup_resp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_unbind_qqgroup_resp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_unbind_qqgroup_resp::clear_type() {
  type_ = 64;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_unbind_qqgroup_resp::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_unbind_qqgroup_resp::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 retcode = 2 [default = 1000];
inline bool npt_unbind_qqgroup_resp::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_unbind_qqgroup_resp::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_unbind_qqgroup_resp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_unbind_qqgroup_resp::clear_retcode() {
  retcode_ = 1000;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_unbind_qqgroup_resp::retcode() const {
  return retcode_;
}
inline void npt_unbind_qqgroup_resp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int64 roleid = 3;
inline bool npt_unbind_qqgroup_resp::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_unbind_qqgroup_resp::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_unbind_qqgroup_resp::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_unbind_qqgroup_resp::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_unbind_qqgroup_resp::roleid() const {
  return roleid_;
}
inline void npt_unbind_qqgroup_resp::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 is_lost = 4 [default = 0];
inline bool npt_unbind_qqgroup_resp::has_is_lost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_unbind_qqgroup_resp::set_has_is_lost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_unbind_qqgroup_resp::clear_has_is_lost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_unbind_qqgroup_resp::clear_is_lost() {
  is_lost_ = 0;
  clear_has_is_lost();
}
inline ::google::protobuf::int32 npt_unbind_qqgroup_resp::is_lost() const {
  return is_lost_;
}
inline void npt_unbind_qqgroup_resp::set_is_lost(::google::protobuf::int32 value) {
  set_has_is_lost();
  is_lost_ = value;
}

// optional bytes msg = 5;
inline bool npt_unbind_qqgroup_resp::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_unbind_qqgroup_resp::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_unbind_qqgroup_resp::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_unbind_qqgroup_resp::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& npt_unbind_qqgroup_resp::msg() const {
  return *msg_;
}
inline void npt_unbind_qqgroup_resp::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void npt_unbind_qqgroup_resp::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void npt_unbind_qqgroup_resp::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_unbind_qqgroup_resp::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* npt_unbind_qqgroup_resp::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_unbind_qqgroup_resp::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_recharge_plat_vip

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RECHARGE_PLAT_VIP];
inline bool npt_recharge_plat_vip::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_recharge_plat_vip::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_recharge_plat_vip::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_recharge_plat_vip::clear_type() {
  type_ = 65;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_recharge_plat_vip::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_recharge_plat_vip::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 vipKind = 2;
inline bool npt_recharge_plat_vip::has_vipkind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_recharge_plat_vip::set_has_vipkind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_recharge_plat_vip::clear_has_vipkind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_recharge_plat_vip::clear_vipkind() {
  vipkind_ = 0;
  clear_has_vipkind();
}
inline ::google::protobuf::int32 npt_recharge_plat_vip::vipkind() const {
  return vipkind_;
}
inline void npt_recharge_plat_vip::set_vipkind(::google::protobuf::int32 value) {
  set_has_vipkind();
  vipkind_ = value;
}

// -------------------------------------------------------------------

// npt_send_tlog_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_TLOG_INFO];
inline bool npt_send_tlog_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_send_tlog_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_send_tlog_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_send_tlog_info::clear_type() {
  type_ = 61;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_send_tlog_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_send_tlog_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 tlog_type = 2;
inline bool npt_send_tlog_info::has_tlog_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_send_tlog_info::set_has_tlog_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_send_tlog_info::clear_has_tlog_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_send_tlog_info::clear_tlog_type() {
  tlog_type_ = 0;
  clear_has_tlog_type();
}
inline ::google::protobuf::int32 npt_send_tlog_info::tlog_type() const {
  return tlog_type_;
}
inline void npt_send_tlog_info::set_tlog_type(::google::protobuf::int32 value) {
  set_has_tlog_type();
  tlog_type_ = value;
}

// optional int32 param1 = 3;
inline bool npt_send_tlog_info::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_send_tlog_info::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_send_tlog_info::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_send_tlog_info::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 npt_send_tlog_info::param1() const {
  return param1_;
}
inline void npt_send_tlog_info::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// optional int32 param2 = 4;
inline bool npt_send_tlog_info::has_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_send_tlog_info::set_has_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_send_tlog_info::clear_has_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_send_tlog_info::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline ::google::protobuf::int32 npt_send_tlog_info::param2() const {
  return param2_;
}
inline void npt_send_tlog_info::set_param2(::google::protobuf::int32 value) {
  set_has_param2();
  param2_ = value;
}

// optional int32 param3 = 5;
inline bool npt_send_tlog_info::has_param3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_send_tlog_info::set_has_param3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_send_tlog_info::clear_has_param3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_send_tlog_info::clear_param3() {
  param3_ = 0;
  clear_has_param3();
}
inline ::google::protobuf::int32 npt_send_tlog_info::param3() const {
  return param3_;
}
inline void npt_send_tlog_info::set_param3(::google::protobuf::int32 value) {
  set_has_param3();
  param3_ = value;
}

// -------------------------------------------------------------------

// npt_qqgroup_joinkey_req

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_QQGROUP_JOINKEY_REQ];
inline bool npt_qqgroup_joinkey_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_qqgroup_joinkey_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_qqgroup_joinkey_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_qqgroup_joinkey_req::clear_type() {
  type_ = 66;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_qqgroup_joinkey_req::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_qqgroup_joinkey_req::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool npt_qqgroup_joinkey_req::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_qqgroup_joinkey_req::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_qqgroup_joinkey_req::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_qqgroup_joinkey_req::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_qqgroup_joinkey_req::roleid() const {
  return roleid_;
}
inline void npt_qqgroup_joinkey_req::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 unionid = 3;
inline bool npt_qqgroup_joinkey_req::has_unionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_qqgroup_joinkey_req::set_has_unionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_qqgroup_joinkey_req::clear_has_unionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_qqgroup_joinkey_req::clear_unionid() {
  unionid_ = 0;
  clear_has_unionid();
}
inline ::google::protobuf::int32 npt_qqgroup_joinkey_req::unionid() const {
  return unionid_;
}
inline void npt_qqgroup_joinkey_req::set_unionid(::google::protobuf::int32 value) {
  set_has_unionid();
  unionid_ = value;
}

// required bytes group_openid = 4;
inline bool npt_qqgroup_joinkey_req::has_group_openid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_qqgroup_joinkey_req::set_has_group_openid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_qqgroup_joinkey_req::clear_has_group_openid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_qqgroup_joinkey_req::clear_group_openid() {
  if (group_openid_ != &::google::protobuf::internal::kEmptyString) {
    group_openid_->clear();
  }
  clear_has_group_openid();
}
inline const ::std::string& npt_qqgroup_joinkey_req::group_openid() const {
  return *group_openid_;
}
inline void npt_qqgroup_joinkey_req::set_group_openid(const ::std::string& value) {
  set_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    group_openid_ = new ::std::string;
  }
  group_openid_->assign(value);
}
inline void npt_qqgroup_joinkey_req::set_group_openid(const char* value) {
  set_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    group_openid_ = new ::std::string;
  }
  group_openid_->assign(value);
}
inline void npt_qqgroup_joinkey_req::set_group_openid(const void* value, size_t size) {
  set_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    group_openid_ = new ::std::string;
  }
  group_openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_qqgroup_joinkey_req::mutable_group_openid() {
  set_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    group_openid_ = new ::std::string;
  }
  return group_openid_;
}
inline ::std::string* npt_qqgroup_joinkey_req::release_group_openid() {
  clear_has_group_openid();
  if (group_openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_openid_;
    group_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_qqgroup_joinkey_req::set_allocated_group_openid(::std::string* group_openid) {
  if (group_openid_ != &::google::protobuf::internal::kEmptyString) {
    delete group_openid_;
  }
  if (group_openid) {
    set_has_group_openid();
    group_openid_ = group_openid;
  } else {
    clear_has_group_openid();
    group_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_qqgroup_joinkey_resp

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_QQGROUP_JOINKEY_RESP];
inline bool npt_qqgroup_joinkey_resp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_qqgroup_joinkey_resp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_qqgroup_joinkey_resp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_qqgroup_joinkey_resp::clear_type() {
  type_ = 67;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_qqgroup_joinkey_resp::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_qqgroup_joinkey_resp::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 retcode = 2 [default = 1000];
inline bool npt_qqgroup_joinkey_resp::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_qqgroup_joinkey_resp::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_qqgroup_joinkey_resp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_qqgroup_joinkey_resp::clear_retcode() {
  retcode_ = 1000;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_qqgroup_joinkey_resp::retcode() const {
  return retcode_;
}
inline void npt_qqgroup_joinkey_resp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int64 roleid = 3;
inline bool npt_qqgroup_joinkey_resp::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_qqgroup_joinkey_resp::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_qqgroup_joinkey_resp::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_qqgroup_joinkey_resp::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_qqgroup_joinkey_resp::roleid() const {
  return roleid_;
}
inline void npt_qqgroup_joinkey_resp::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 is_lost = 4 [default = 0];
inline bool npt_qqgroup_joinkey_resp::has_is_lost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_qqgroup_joinkey_resp::set_has_is_lost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_qqgroup_joinkey_resp::clear_has_is_lost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_qqgroup_joinkey_resp::clear_is_lost() {
  is_lost_ = 0;
  clear_has_is_lost();
}
inline ::google::protobuf::int32 npt_qqgroup_joinkey_resp::is_lost() const {
  return is_lost_;
}
inline void npt_qqgroup_joinkey_resp::set_is_lost(::google::protobuf::int32 value) {
  set_has_is_lost();
  is_lost_ = value;
}

// required bytes join_group_key = 5;
inline bool npt_qqgroup_joinkey_resp::has_join_group_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_qqgroup_joinkey_resp::set_has_join_group_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_qqgroup_joinkey_resp::clear_has_join_group_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_qqgroup_joinkey_resp::clear_join_group_key() {
  if (join_group_key_ != &::google::protobuf::internal::kEmptyString) {
    join_group_key_->clear();
  }
  clear_has_join_group_key();
}
inline const ::std::string& npt_qqgroup_joinkey_resp::join_group_key() const {
  return *join_group_key_;
}
inline void npt_qqgroup_joinkey_resp::set_join_group_key(const ::std::string& value) {
  set_has_join_group_key();
  if (join_group_key_ == &::google::protobuf::internal::kEmptyString) {
    join_group_key_ = new ::std::string;
  }
  join_group_key_->assign(value);
}
inline void npt_qqgroup_joinkey_resp::set_join_group_key(const char* value) {
  set_has_join_group_key();
  if (join_group_key_ == &::google::protobuf::internal::kEmptyString) {
    join_group_key_ = new ::std::string;
  }
  join_group_key_->assign(value);
}
inline void npt_qqgroup_joinkey_resp::set_join_group_key(const void* value, size_t size) {
  set_has_join_group_key();
  if (join_group_key_ == &::google::protobuf::internal::kEmptyString) {
    join_group_key_ = new ::std::string;
  }
  join_group_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_qqgroup_joinkey_resp::mutable_join_group_key() {
  set_has_join_group_key();
  if (join_group_key_ == &::google::protobuf::internal::kEmptyString) {
    join_group_key_ = new ::std::string;
  }
  return join_group_key_;
}
inline ::std::string* npt_qqgroup_joinkey_resp::release_join_group_key() {
  clear_has_join_group_key();
  if (join_group_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = join_group_key_;
    join_group_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_qqgroup_joinkey_resp::set_allocated_join_group_key(::std::string* join_group_key) {
  if (join_group_key_ != &::google::protobuf::internal::kEmptyString) {
    delete join_group_key_;
  }
  if (join_group_key) {
    set_has_join_group_key();
    join_group_key_ = join_group_key;
  } else {
    clear_has_join_group_key();
    join_group_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes msg = 6;
inline bool npt_qqgroup_joinkey_resp::has_msg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_qqgroup_joinkey_resp::set_has_msg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_qqgroup_joinkey_resp::clear_has_msg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_qqgroup_joinkey_resp::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& npt_qqgroup_joinkey_resp::msg() const {
  return *msg_;
}
inline void npt_qqgroup_joinkey_resp::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void npt_qqgroup_joinkey_resp::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void npt_qqgroup_joinkey_resp::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_qqgroup_joinkey_resp::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* npt_qqgroup_joinkey_resp::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_qqgroup_joinkey_resp::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_grc_get_self_plat_vip_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GET_SELF_PLAT_VIP_INFO];
inline bool npt_grc_get_self_plat_vip_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_get_self_plat_vip_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_get_self_plat_vip_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_get_self_plat_vip_info::clear_type() {
  type_ = 69;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_get_self_plat_vip_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_get_self_plat_vip_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 plat_vip_kind = 2;
inline bool npt_grc_get_self_plat_vip_info::has_plat_vip_kind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_get_self_plat_vip_info::set_has_plat_vip_kind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_get_self_plat_vip_info::clear_has_plat_vip_kind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_get_self_plat_vip_info::clear_plat_vip_kind() {
  plat_vip_kind_ = 0;
  clear_has_plat_vip_kind();
}
inline ::google::protobuf::int32 npt_grc_get_self_plat_vip_info::plat_vip_kind() const {
  return plat_vip_kind_;
}
inline void npt_grc_get_self_plat_vip_info::set_plat_vip_kind(::google::protobuf::int32 value) {
  set_has_plat_vip_kind();
  plat_vip_kind_ = value;
}

// required int32 retcode = 3;
inline bool npt_grc_get_self_plat_vip_info::has_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_get_self_plat_vip_info::set_has_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_get_self_plat_vip_info::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_get_self_plat_vip_info::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_grc_get_self_plat_vip_info::retcode() const {
  return retcode_;
}
inline void npt_grc_get_self_plat_vip_info::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// -------------------------------------------------------------------

// greet_investor_info_cl

// optional int32 greet_tid = 1;
inline bool greet_investor_info_cl::has_greet_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void greet_investor_info_cl::set_has_greet_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void greet_investor_info_cl::clear_has_greet_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void greet_investor_info_cl::clear_greet_tid() {
  greet_tid_ = 0;
  clear_has_greet_tid();
}
inline ::google::protobuf::int32 greet_investor_info_cl::greet_tid() const {
  return greet_tid_;
}
inline void greet_investor_info_cl::set_greet_tid(::google::protobuf::int32 value) {
  set_has_greet_tid();
  greet_tid_ = value;
}

// optional int32 valid_time = 2;
inline bool greet_investor_info_cl::has_valid_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void greet_investor_info_cl::set_has_valid_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void greet_investor_info_cl::clear_has_valid_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void greet_investor_info_cl::clear_valid_time() {
  valid_time_ = 0;
  clear_has_valid_time();
}
inline ::google::protobuf::int32 greet_investor_info_cl::valid_time() const {
  return valid_time_;
}
inline void greet_investor_info_cl::set_valid_time(::google::protobuf::int32 value) {
  set_has_valid_time();
  valid_time_ = value;
}

// repeated .PB.player_id_name investor_list = 3;
inline int greet_investor_info_cl::investor_list_size() const {
  return investor_list_.size();
}
inline void greet_investor_info_cl::clear_investor_list() {
  investor_list_.Clear();
}
inline const ::PB::player_id_name& greet_investor_info_cl::investor_list(int index) const {
  return investor_list_.Get(index);
}
inline ::PB::player_id_name* greet_investor_info_cl::mutable_investor_list(int index) {
  return investor_list_.Mutable(index);
}
inline ::PB::player_id_name* greet_investor_info_cl::add_investor_list() {
  return investor_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::player_id_name >&
greet_investor_info_cl::investor_list() const {
  return investor_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::player_id_name >*
greet_investor_info_cl::mutable_investor_list() {
  return &investor_list_;
}

// -------------------------------------------------------------------

// greet_investee_info_cl

// optional int32 greet_tid = 1;
inline bool greet_investee_info_cl::has_greet_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void greet_investee_info_cl::set_has_greet_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void greet_investee_info_cl::clear_has_greet_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void greet_investee_info_cl::clear_greet_tid() {
  greet_tid_ = 0;
  clear_has_greet_tid();
}
inline ::google::protobuf::int32 greet_investee_info_cl::greet_tid() const {
  return greet_tid_;
}
inline void greet_investee_info_cl::set_greet_tid(::google::protobuf::int32 value) {
  set_has_greet_tid();
  greet_tid_ = value;
}

// optional int32 valid_time = 2;
inline bool greet_investee_info_cl::has_valid_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void greet_investee_info_cl::set_has_valid_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void greet_investee_info_cl::clear_has_valid_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void greet_investee_info_cl::clear_valid_time() {
  valid_time_ = 0;
  clear_has_valid_time();
}
inline ::google::protobuf::int32 greet_investee_info_cl::valid_time() const {
  return valid_time_;
}
inline void greet_investee_info_cl::set_valid_time(::google::protobuf::int32 value) {
  set_has_valid_time();
  valid_time_ = value;
}

// optional .PB.player_id_name dst_role = 3;
inline bool greet_investee_info_cl::has_dst_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void greet_investee_info_cl::set_has_dst_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void greet_investee_info_cl::clear_has_dst_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void greet_investee_info_cl::clear_dst_role() {
  if (dst_role_ != NULL) dst_role_->::PB::player_id_name::Clear();
  clear_has_dst_role();
}
inline const ::PB::player_id_name& greet_investee_info_cl::dst_role() const {
  return dst_role_ != NULL ? *dst_role_ : *default_instance_->dst_role_;
}
inline ::PB::player_id_name* greet_investee_info_cl::mutable_dst_role() {
  set_has_dst_role();
  if (dst_role_ == NULL) dst_role_ = new ::PB::player_id_name;
  return dst_role_;
}
inline ::PB::player_id_name* greet_investee_info_cl::release_dst_role() {
  clear_has_dst_role();
  ::PB::player_id_name* temp = dst_role_;
  dst_role_ = NULL;
  return temp;
}
inline void greet_investee_info_cl::set_allocated_dst_role(::PB::player_id_name* dst_role) {
  delete dst_role_;
  dst_role_ = dst_role;
  if (dst_role) {
    set_has_dst_role();
  } else {
    clear_has_dst_role();
  }
}

// -------------------------------------------------------------------

// greet_reward_info_cl

// optional int32 greet_tid = 1;
inline bool greet_reward_info_cl::has_greet_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void greet_reward_info_cl::set_has_greet_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void greet_reward_info_cl::clear_has_greet_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void greet_reward_info_cl::clear_greet_tid() {
  greet_tid_ = 0;
  clear_has_greet_tid();
}
inline ::google::protobuf::int32 greet_reward_info_cl::greet_tid() const {
  return greet_tid_;
}
inline void greet_reward_info_cl::set_greet_tid(::google::protobuf::int32 value) {
  set_has_greet_tid();
  greet_tid_ = value;
}

// optional int32 award_tid = 2;
inline bool greet_reward_info_cl::has_award_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void greet_reward_info_cl::set_has_award_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void greet_reward_info_cl::clear_has_award_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void greet_reward_info_cl::clear_award_tid() {
  award_tid_ = 0;
  clear_has_award_tid();
}
inline ::google::protobuf::int32 greet_reward_info_cl::award_tid() const {
  return award_tid_;
}
inline void greet_reward_info_cl::set_award_tid(::google::protobuf::int32 value) {
  set_has_award_tid();
  award_tid_ = value;
}

// optional int32 award_count = 3;
inline bool greet_reward_info_cl::has_award_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void greet_reward_info_cl::set_has_award_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void greet_reward_info_cl::clear_has_award_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void greet_reward_info_cl::clear_award_count() {
  award_count_ = 0;
  clear_has_award_count();
}
inline ::google::protobuf::int32 greet_reward_info_cl::award_count() const {
  return award_count_;
}
inline void greet_reward_info_cl::set_award_count(::google::protobuf::int32 value) {
  set_has_award_count();
  award_count_ = value;
}

// optional int64 role_id = 4;
inline bool greet_reward_info_cl::has_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void greet_reward_info_cl::set_has_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void greet_reward_info_cl::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void greet_reward_info_cl::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 greet_reward_info_cl::role_id() const {
  return role_id_;
}
inline void greet_reward_info_cl::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// npt_greet_invest_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREET_INVEST_INFO];
inline bool npt_greet_invest_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_greet_invest_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_greet_invest_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_greet_invest_info::clear_type() {
  type_ = 70;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_greet_invest_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_greet_invest_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.greet_investor_info_cl investor = 2;
inline int npt_greet_invest_info::investor_size() const {
  return investor_.size();
}
inline void npt_greet_invest_info::clear_investor() {
  investor_.Clear();
}
inline const ::PB::greet_investor_info_cl& npt_greet_invest_info::investor(int index) const {
  return investor_.Get(index);
}
inline ::PB::greet_investor_info_cl* npt_greet_invest_info::mutable_investor(int index) {
  return investor_.Mutable(index);
}
inline ::PB::greet_investor_info_cl* npt_greet_invest_info::add_investor() {
  return investor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::greet_investor_info_cl >&
npt_greet_invest_info::investor() const {
  return investor_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::greet_investor_info_cl >*
npt_greet_invest_info::mutable_investor() {
  return &investor_;
}

// repeated .PB.greet_investee_info_cl investee = 3;
inline int npt_greet_invest_info::investee_size() const {
  return investee_.size();
}
inline void npt_greet_invest_info::clear_investee() {
  investee_.Clear();
}
inline const ::PB::greet_investee_info_cl& npt_greet_invest_info::investee(int index) const {
  return investee_.Get(index);
}
inline ::PB::greet_investee_info_cl* npt_greet_invest_info::mutable_investee(int index) {
  return investee_.Mutable(index);
}
inline ::PB::greet_investee_info_cl* npt_greet_invest_info::add_investee() {
  return investee_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::greet_investee_info_cl >&
npt_greet_invest_info::investee() const {
  return investee_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::greet_investee_info_cl >*
npt_greet_invest_info::mutable_investee() {
  return &investee_;
}

// repeated .PB.greet_reward_info_cl award = 4;
inline int npt_greet_invest_info::award_size() const {
  return award_.size();
}
inline void npt_greet_invest_info::clear_award() {
  award_.Clear();
}
inline const ::PB::greet_reward_info_cl& npt_greet_invest_info::award(int index) const {
  return award_.Get(index);
}
inline ::PB::greet_reward_info_cl* npt_greet_invest_info::mutable_award(int index) {
  return award_.Mutable(index);
}
inline ::PB::greet_reward_info_cl* npt_greet_invest_info::add_award() {
  return award_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::greet_reward_info_cl >&
npt_greet_invest_info::award() const {
  return award_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::greet_reward_info_cl >*
npt_greet_invest_info::mutable_award() {
  return &award_;
}

// -------------------------------------------------------------------

// npt_greet_invest_award

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREET_INVEST_AWARD];
inline bool npt_greet_invest_award::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_greet_invest_award::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_greet_invest_award::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_greet_invest_award::clear_type() {
  type_ = 71;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_greet_invest_award::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_greet_invest_award::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 reserved = 2;
inline bool npt_greet_invest_award::has_reserved() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_greet_invest_award::set_has_reserved() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_greet_invest_award::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_greet_invest_award::clear_reserved() {
  reserved_ = 0;
  clear_has_reserved();
}
inline ::google::protobuf::int32 npt_greet_invest_award::reserved() const {
  return reserved_;
}
inline void npt_greet_invest_award::set_reserved(::google::protobuf::int32 value) {
  set_has_reserved();
  reserved_ = value;
}

// optional .PB.npt_greet_invest_award.AWARD_TYPE award_type = 3;
inline bool npt_greet_invest_award::has_award_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_greet_invest_award::set_has_award_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_greet_invest_award::clear_has_award_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_greet_invest_award::clear_award_type() {
  award_type_ = 1;
  clear_has_award_type();
}
inline ::PB::npt_greet_invest_award_AWARD_TYPE npt_greet_invest_award::award_type() const {
  return static_cast< ::PB::npt_greet_invest_award_AWARD_TYPE >(award_type_);
}
inline void npt_greet_invest_award::set_award_type(::PB::npt_greet_invest_award_AWARD_TYPE value) {
  assert(::PB::npt_greet_invest_award_AWARD_TYPE_IsValid(value));
  set_has_award_type();
  award_type_ = value;
}

// -------------------------------------------------------------------

// npt_wine_game_operate

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WINE_GAME_OPERATE];
inline bool npt_wine_game_operate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_wine_game_operate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_wine_game_operate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_wine_game_operate::clear_type() {
  type_ = 73;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_wine_game_operate::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_wine_game_operate::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.npt_wine_game_operate.OPER_TYPE oper_type = 2;
inline bool npt_wine_game_operate::has_oper_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_wine_game_operate::set_has_oper_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_wine_game_operate::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_wine_game_operate::clear_oper_type() {
  oper_type_ = 1;
  clear_has_oper_type();
}
inline ::PB::npt_wine_game_operate_OPER_TYPE npt_wine_game_operate::oper_type() const {
  return static_cast< ::PB::npt_wine_game_operate_OPER_TYPE >(oper_type_);
}
inline void npt_wine_game_operate::set_oper_type(::PB::npt_wine_game_operate_OPER_TYPE value) {
  assert(::PB::npt_wine_game_operate_OPER_TYPE_IsValid(value));
  set_has_oper_type();
  oper_type_ = value;
}

// optional int32 oper_param1 = 3;
inline bool npt_wine_game_operate::has_oper_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_wine_game_operate::set_has_oper_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_wine_game_operate::clear_has_oper_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_wine_game_operate::clear_oper_param1() {
  oper_param1_ = 0;
  clear_has_oper_param1();
}
inline ::google::protobuf::int32 npt_wine_game_operate::oper_param1() const {
  return oper_param1_;
}
inline void npt_wine_game_operate::set_oper_param1(::google::protobuf::int32 value) {
  set_has_oper_param1();
  oper_param1_ = value;
}

// optional int32 oper_param2 = 4;
inline bool npt_wine_game_operate::has_oper_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_wine_game_operate::set_has_oper_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_wine_game_operate::clear_has_oper_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_wine_game_operate::clear_oper_param2() {
  oper_param2_ = 0;
  clear_has_oper_param2();
}
inline ::google::protobuf::int32 npt_wine_game_operate::oper_param2() const {
  return oper_param2_;
}
inline void npt_wine_game_operate::set_oper_param2(::google::protobuf::int32 value) {
  set_has_oper_param2();
  oper_param2_ = value;
}

// -------------------------------------------------------------------

// npt_wine_game_sync_data

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WINE_GAME_SYNC_DATA];
inline bool npt_wine_game_sync_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_wine_game_sync_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_wine_game_sync_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_wine_game_sync_data::clear_type() {
  type_ = 74;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_wine_game_sync_data::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_wine_game_sync_data::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.player_id_name peer_info = 2;
inline bool npt_wine_game_sync_data::has_peer_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_wine_game_sync_data::set_has_peer_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_wine_game_sync_data::clear_has_peer_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_wine_game_sync_data::clear_peer_info() {
  if (peer_info_ != NULL) peer_info_->::PB::player_id_name::Clear();
  clear_has_peer_info();
}
inline const ::PB::player_id_name& npt_wine_game_sync_data::peer_info() const {
  return peer_info_ != NULL ? *peer_info_ : *default_instance_->peer_info_;
}
inline ::PB::player_id_name* npt_wine_game_sync_data::mutable_peer_info() {
  set_has_peer_info();
  if (peer_info_ == NULL) peer_info_ = new ::PB::player_id_name;
  return peer_info_;
}
inline ::PB::player_id_name* npt_wine_game_sync_data::release_peer_info() {
  clear_has_peer_info();
  ::PB::player_id_name* temp = peer_info_;
  peer_info_ = NULL;
  return temp;
}
inline void npt_wine_game_sync_data::set_allocated_peer_info(::PB::player_id_name* peer_info) {
  delete peer_info_;
  peer_info_ = peer_info;
  if (peer_info) {
    set_has_peer_info();
  } else {
    clear_has_peer_info();
  }
}

// optional int32 mine_status = 3;
inline bool npt_wine_game_sync_data::has_mine_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_wine_game_sync_data::set_has_mine_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_wine_game_sync_data::clear_has_mine_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_wine_game_sync_data::clear_mine_status() {
  mine_status_ = 0;
  clear_has_mine_status();
}
inline ::google::protobuf::int32 npt_wine_game_sync_data::mine_status() const {
  return mine_status_;
}
inline void npt_wine_game_sync_data::set_mine_status(::google::protobuf::int32 value) {
  set_has_mine_status();
  mine_status_ = value;
}

// optional int32 peer_status = 4;
inline bool npt_wine_game_sync_data::has_peer_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_wine_game_sync_data::set_has_peer_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_wine_game_sync_data::clear_has_peer_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_wine_game_sync_data::clear_peer_status() {
  peer_status_ = 0;
  clear_has_peer_status();
}
inline ::google::protobuf::int32 npt_wine_game_sync_data::peer_status() const {
  return peer_status_;
}
inline void npt_wine_game_sync_data::set_peer_status(::google::protobuf::int32 value) {
  set_has_peer_status();
  peer_status_ = value;
}

// optional int32 game_status = 5;
inline bool npt_wine_game_sync_data::has_game_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_wine_game_sync_data::set_has_game_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_wine_game_sync_data::clear_has_game_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_wine_game_sync_data::clear_game_status() {
  game_status_ = 0;
  clear_has_game_status();
}
inline ::google::protobuf::int32 npt_wine_game_sync_data::game_status() const {
  return game_status_;
}
inline void npt_wine_game_sync_data::set_game_status(::google::protobuf::int32 value) {
  set_has_game_status();
  game_status_ = value;
}

// optional int32 peer_professional = 6;
inline bool npt_wine_game_sync_data::has_peer_professional() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_wine_game_sync_data::set_has_peer_professional() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_wine_game_sync_data::clear_has_peer_professional() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_wine_game_sync_data::clear_peer_professional() {
  peer_professional_ = 0;
  clear_has_peer_professional();
}
inline ::google::protobuf::int32 npt_wine_game_sync_data::peer_professional() const {
  return peer_professional_;
}
inline void npt_wine_game_sync_data::set_peer_professional(::google::protobuf::int32 value) {
  set_has_peer_professional();
  peer_professional_ = value;
}

// optional int32 peer_gender = 7;
inline bool npt_wine_game_sync_data::has_peer_gender() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_wine_game_sync_data::set_has_peer_gender() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_wine_game_sync_data::clear_has_peer_gender() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_wine_game_sync_data::clear_peer_gender() {
  peer_gender_ = 0;
  clear_has_peer_gender();
}
inline ::google::protobuf::int32 npt_wine_game_sync_data::peer_gender() const {
  return peer_gender_;
}
inline void npt_wine_game_sync_data::set_peer_gender(::google::protobuf::int32 value) {
  set_has_peer_gender();
  peer_gender_ = value;
}

// optional int32 param = 8;
inline bool npt_wine_game_sync_data::has_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_wine_game_sync_data::set_has_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_wine_game_sync_data::clear_has_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_wine_game_sync_data::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 npt_wine_game_sync_data::param() const {
  return param_;
}
inline void npt_wine_game_sync_data::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// npt_wine_game_history

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WINE_GAME_HISTORY];
inline bool npt_wine_game_history::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_wine_game_history::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_wine_game_history::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_wine_game_history::clear_type() {
  type_ = 75;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_wine_game_history::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_wine_game_history::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// npt_wine_game_history_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WINE_GAME_HISTORY_RE];
inline bool npt_wine_game_history_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_wine_game_history_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_wine_game_history_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_wine_game_history_re::clear_type() {
  type_ = 76;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_wine_game_history_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_wine_game_history_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.wine_game_history historys = 2;
inline int npt_wine_game_history_re::historys_size() const {
  return historys_.size();
}
inline void npt_wine_game_history_re::clear_historys() {
  historys_.Clear();
}
inline const ::PB::wine_game_history& npt_wine_game_history_re::historys(int index) const {
  return historys_.Get(index);
}
inline ::PB::wine_game_history* npt_wine_game_history_re::mutable_historys(int index) {
  return historys_.Mutable(index);
}
inline ::PB::wine_game_history* npt_wine_game_history_re::add_historys() {
  return historys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::wine_game_history >&
npt_wine_game_history_re::historys() const {
  return historys_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::wine_game_history >*
npt_wine_game_history_re::mutable_historys() {
  return &historys_;
}

// required int32 play_count = 3;
inline bool npt_wine_game_history_re::has_play_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_wine_game_history_re::set_has_play_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_wine_game_history_re::clear_has_play_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_wine_game_history_re::clear_play_count() {
  play_count_ = 0;
  clear_has_play_count();
}
inline ::google::protobuf::int32 npt_wine_game_history_re::play_count() const {
  return play_count_;
}
inline void npt_wine_game_history_re::set_play_count(::google::protobuf::int32 value) {
  set_has_play_count();
  play_count_ = value;
}

// required int32 peer_change_count = 4;
inline bool npt_wine_game_history_re::has_peer_change_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_wine_game_history_re::set_has_peer_change_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_wine_game_history_re::clear_has_peer_change_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_wine_game_history_re::clear_peer_change_count() {
  peer_change_count_ = 0;
  clear_has_peer_change_count();
}
inline ::google::protobuf::int32 npt_wine_game_history_re::peer_change_count() const {
  return peer_change_count_;
}
inline void npt_wine_game_history_re::set_peer_change_count(::google::protobuf::int32 value) {
  set_has_peer_change_count();
  peer_change_count_ = value;
}

// -------------------------------------------------------------------

// region_history

// optional int32 event_time = 1;
inline bool region_history::has_event_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void region_history::set_has_event_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void region_history::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void region_history::clear_event_time() {
  event_time_ = 0;
  clear_has_event_time();
}
inline ::google::protobuf::int32 region_history::event_time() const {
  return event_time_;
}
inline void region_history::set_event_time(::google::protobuf::int32 value) {
  set_has_event_time();
  event_time_ = value;
}

// optional int32 event_type = 2;
inline bool region_history::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void region_history::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void region_history::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void region_history::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::google::protobuf::int32 region_history::event_type() const {
  return event_type_;
}
inline void region_history::set_event_type(::google::protobuf::int32 value) {
  set_has_event_type();
  event_type_ = value;
}

// optional bytes event_msg1 = 3;
inline bool region_history::has_event_msg1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void region_history::set_has_event_msg1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void region_history::clear_has_event_msg1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void region_history::clear_event_msg1() {
  if (event_msg1_ != &::google::protobuf::internal::kEmptyString) {
    event_msg1_->clear();
  }
  clear_has_event_msg1();
}
inline const ::std::string& region_history::event_msg1() const {
  return *event_msg1_;
}
inline void region_history::set_event_msg1(const ::std::string& value) {
  set_has_event_msg1();
  if (event_msg1_ == &::google::protobuf::internal::kEmptyString) {
    event_msg1_ = new ::std::string;
  }
  event_msg1_->assign(value);
}
inline void region_history::set_event_msg1(const char* value) {
  set_has_event_msg1();
  if (event_msg1_ == &::google::protobuf::internal::kEmptyString) {
    event_msg1_ = new ::std::string;
  }
  event_msg1_->assign(value);
}
inline void region_history::set_event_msg1(const void* value, size_t size) {
  set_has_event_msg1();
  if (event_msg1_ == &::google::protobuf::internal::kEmptyString) {
    event_msg1_ = new ::std::string;
  }
  event_msg1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* region_history::mutable_event_msg1() {
  set_has_event_msg1();
  if (event_msg1_ == &::google::protobuf::internal::kEmptyString) {
    event_msg1_ = new ::std::string;
  }
  return event_msg1_;
}
inline ::std::string* region_history::release_event_msg1() {
  clear_has_event_msg1();
  if (event_msg1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_msg1_;
    event_msg1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void region_history::set_allocated_event_msg1(::std::string* event_msg1) {
  if (event_msg1_ != &::google::protobuf::internal::kEmptyString) {
    delete event_msg1_;
  }
  if (event_msg1) {
    set_has_event_msg1();
    event_msg1_ = event_msg1;
  } else {
    clear_has_event_msg1();
    event_msg1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes event_msg2 = 4;
inline bool region_history::has_event_msg2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void region_history::set_has_event_msg2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void region_history::clear_has_event_msg2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void region_history::clear_event_msg2() {
  if (event_msg2_ != &::google::protobuf::internal::kEmptyString) {
    event_msg2_->clear();
  }
  clear_has_event_msg2();
}
inline const ::std::string& region_history::event_msg2() const {
  return *event_msg2_;
}
inline void region_history::set_event_msg2(const ::std::string& value) {
  set_has_event_msg2();
  if (event_msg2_ == &::google::protobuf::internal::kEmptyString) {
    event_msg2_ = new ::std::string;
  }
  event_msg2_->assign(value);
}
inline void region_history::set_event_msg2(const char* value) {
  set_has_event_msg2();
  if (event_msg2_ == &::google::protobuf::internal::kEmptyString) {
    event_msg2_ = new ::std::string;
  }
  event_msg2_->assign(value);
}
inline void region_history::set_event_msg2(const void* value, size_t size) {
  set_has_event_msg2();
  if (event_msg2_ == &::google::protobuf::internal::kEmptyString) {
    event_msg2_ = new ::std::string;
  }
  event_msg2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* region_history::mutable_event_msg2() {
  set_has_event_msg2();
  if (event_msg2_ == &::google::protobuf::internal::kEmptyString) {
    event_msg2_ = new ::std::string;
  }
  return event_msg2_;
}
inline ::std::string* region_history::release_event_msg2() {
  clear_has_event_msg2();
  if (event_msg2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_msg2_;
    event_msg2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void region_history::set_allocated_event_msg2(::std::string* event_msg2) {
  if (event_msg2_ != &::google::protobuf::internal::kEmptyString) {
    delete event_msg2_;
  }
  if (event_msg2) {
    set_has_event_msg2();
    event_msg2_ = event_msg2;
  } else {
    clear_has_event_msg2();
    event_msg2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// region_info_t

// optional int32 region_id = 1;
inline bool region_info_t::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void region_info_t::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void region_info_t::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void region_info_t::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 region_info_t::region_id() const {
  return region_id_;
}
inline void region_info_t::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// optional int32 region_status = 2;
inline bool region_info_t::has_region_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void region_info_t::set_has_region_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void region_info_t::clear_has_region_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void region_info_t::clear_region_status() {
  region_status_ = 0;
  clear_has_region_status();
}
inline ::google::protobuf::int32 region_info_t::region_status() const {
  return region_status_;
}
inline void region_info_t::set_region_status(::google::protobuf::int32 value) {
  set_has_region_status();
  region_status_ = value;
}

// optional int64 region_owner = 3;
inline bool region_info_t::has_region_owner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void region_info_t::set_has_region_owner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void region_info_t::clear_has_region_owner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void region_info_t::clear_region_owner() {
  region_owner_ = GOOGLE_LONGLONG(0);
  clear_has_region_owner();
}
inline ::google::protobuf::int64 region_info_t::region_owner() const {
  return region_owner_;
}
inline void region_info_t::set_region_owner(::google::protobuf::int64 value) {
  set_has_region_owner();
  region_owner_ = value;
}

// optional int32 region_owner_nation = 4;
inline bool region_info_t::has_region_owner_nation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void region_info_t::set_has_region_owner_nation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void region_info_t::clear_has_region_owner_nation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void region_info_t::clear_region_owner_nation() {
  region_owner_nation_ = 0;
  clear_has_region_owner_nation();
}
inline ::google::protobuf::int32 region_info_t::region_owner_nation() const {
  return region_owner_nation_;
}
inline void region_info_t::set_region_owner_nation(::google::protobuf::int32 value) {
  set_has_region_owner_nation();
  region_owner_nation_ = value;
}

// optional bytes region_owner_name = 5;
inline bool region_info_t::has_region_owner_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void region_info_t::set_has_region_owner_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void region_info_t::clear_has_region_owner_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void region_info_t::clear_region_owner_name() {
  if (region_owner_name_ != &::google::protobuf::internal::kEmptyString) {
    region_owner_name_->clear();
  }
  clear_has_region_owner_name();
}
inline const ::std::string& region_info_t::region_owner_name() const {
  return *region_owner_name_;
}
inline void region_info_t::set_region_owner_name(const ::std::string& value) {
  set_has_region_owner_name();
  if (region_owner_name_ == &::google::protobuf::internal::kEmptyString) {
    region_owner_name_ = new ::std::string;
  }
  region_owner_name_->assign(value);
}
inline void region_info_t::set_region_owner_name(const char* value) {
  set_has_region_owner_name();
  if (region_owner_name_ == &::google::protobuf::internal::kEmptyString) {
    region_owner_name_ = new ::std::string;
  }
  region_owner_name_->assign(value);
}
inline void region_info_t::set_region_owner_name(const void* value, size_t size) {
  set_has_region_owner_name();
  if (region_owner_name_ == &::google::protobuf::internal::kEmptyString) {
    region_owner_name_ = new ::std::string;
  }
  region_owner_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* region_info_t::mutable_region_owner_name() {
  set_has_region_owner_name();
  if (region_owner_name_ == &::google::protobuf::internal::kEmptyString) {
    region_owner_name_ = new ::std::string;
  }
  return region_owner_name_;
}
inline ::std::string* region_info_t::release_region_owner_name() {
  clear_has_region_owner_name();
  if (region_owner_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = region_owner_name_;
    region_owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void region_info_t::set_allocated_region_owner_name(::std::string* region_owner_name) {
  if (region_owner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete region_owner_name_;
  }
  if (region_owner_name) {
    set_has_region_owner_name();
    region_owner_name_ = region_owner_name;
  } else {
    clear_has_region_owner_name();
    region_owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .PB.region_history historys = 6;
inline int region_info_t::historys_size() const {
  return historys_.size();
}
inline void region_info_t::clear_historys() {
  historys_.Clear();
}
inline const ::PB::region_history& region_info_t::historys(int index) const {
  return historys_.Get(index);
}
inline ::PB::region_history* region_info_t::mutable_historys(int index) {
  return historys_.Mutable(index);
}
inline ::PB::region_history* region_info_t::add_historys() {
  return historys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::region_history >&
region_info_t::historys() const {
  return historys_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::region_history >*
region_info_t::mutable_historys() {
  return &historys_;
}

// -------------------------------------------------------------------

// region_war_t

// optional int32 war_id = 1;
inline bool region_war_t::has_war_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void region_war_t::set_has_war_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void region_war_t::clear_has_war_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void region_war_t::clear_war_id() {
  war_id_ = 0;
  clear_has_war_id();
}
inline ::google::protobuf::int32 region_war_t::war_id() const {
  return war_id_;
}
inline void region_war_t::set_war_id(::google::protobuf::int32 value) {
  set_has_war_id();
  war_id_ = value;
}

// optional int32 war_status = 2;
inline bool region_war_t::has_war_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void region_war_t::set_has_war_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void region_war_t::clear_has_war_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void region_war_t::clear_war_status() {
  war_status_ = 0;
  clear_has_war_status();
}
inline ::google::protobuf::int32 region_war_t::war_status() const {
  return war_status_;
}
inline void region_war_t::set_war_status(::google::protobuf::int32 value) {
  set_has_war_status();
  war_status_ = value;
}

// optional int32 war_time = 3;
inline bool region_war_t::has_war_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void region_war_t::set_has_war_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void region_war_t::clear_has_war_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void region_war_t::clear_war_time() {
  war_time_ = 0;
  clear_has_war_time();
}
inline ::google::protobuf::int32 region_war_t::war_time() const {
  return war_time_;
}
inline void region_war_t::set_war_time(::google::protobuf::int32 value) {
  set_has_war_time();
  war_time_ = value;
}

// optional int32 war_region_id = 4;
inline bool region_war_t::has_war_region_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void region_war_t::set_has_war_region_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void region_war_t::clear_has_war_region_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void region_war_t::clear_war_region_id() {
  war_region_id_ = 0;
  clear_has_war_region_id();
}
inline ::google::protobuf::int32 region_war_t::war_region_id() const {
  return war_region_id_;
}
inline void region_war_t::set_war_region_id(::google::protobuf::int32 value) {
  set_has_war_region_id();
  war_region_id_ = value;
}

// optional int64 war_cost = 5;
inline bool region_war_t::has_war_cost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void region_war_t::set_has_war_cost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void region_war_t::clear_has_war_cost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void region_war_t::clear_war_cost() {
  war_cost_ = GOOGLE_LONGLONG(0);
  clear_has_war_cost();
}
inline ::google::protobuf::int64 region_war_t::war_cost() const {
  return war_cost_;
}
inline void region_war_t::set_war_cost(::google::protobuf::int64 value) {
  set_has_war_cost();
  war_cost_ = value;
}

// optional int64 war_attacker = 6;
inline bool region_war_t::has_war_attacker() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void region_war_t::set_has_war_attacker() {
  _has_bits_[0] |= 0x00000020u;
}
inline void region_war_t::clear_has_war_attacker() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void region_war_t::clear_war_attacker() {
  war_attacker_ = GOOGLE_LONGLONG(0);
  clear_has_war_attacker();
}
inline ::google::protobuf::int64 region_war_t::war_attacker() const {
  return war_attacker_;
}
inline void region_war_t::set_war_attacker(::google::protobuf::int64 value) {
  set_has_war_attacker();
  war_attacker_ = value;
}

// optional bytes attacker_name = 7;
inline bool region_war_t::has_attacker_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void region_war_t::set_has_attacker_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void region_war_t::clear_has_attacker_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void region_war_t::clear_attacker_name() {
  if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
    attacker_name_->clear();
  }
  clear_has_attacker_name();
}
inline const ::std::string& region_war_t::attacker_name() const {
  return *attacker_name_;
}
inline void region_war_t::set_attacker_name(const ::std::string& value) {
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  attacker_name_->assign(value);
}
inline void region_war_t::set_attacker_name(const char* value) {
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  attacker_name_->assign(value);
}
inline void region_war_t::set_attacker_name(const void* value, size_t size) {
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  attacker_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* region_war_t::mutable_attacker_name() {
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  return attacker_name_;
}
inline ::std::string* region_war_t::release_attacker_name() {
  clear_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attacker_name_;
    attacker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void region_war_t::set_allocated_attacker_name(::std::string* attacker_name) {
  if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
    delete attacker_name_;
  }
  if (attacker_name) {
    set_has_attacker_name();
    attacker_name_ = attacker_name;
  } else {
    clear_has_attacker_name();
    attacker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 war_defender = 8;
inline bool region_war_t::has_war_defender() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void region_war_t::set_has_war_defender() {
  _has_bits_[0] |= 0x00000080u;
}
inline void region_war_t::clear_has_war_defender() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void region_war_t::clear_war_defender() {
  war_defender_ = GOOGLE_LONGLONG(0);
  clear_has_war_defender();
}
inline ::google::protobuf::int64 region_war_t::war_defender() const {
  return war_defender_;
}
inline void region_war_t::set_war_defender(::google::protobuf::int64 value) {
  set_has_war_defender();
  war_defender_ = value;
}

// optional bytes defender_name = 9;
inline bool region_war_t::has_defender_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void region_war_t::set_has_defender_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void region_war_t::clear_has_defender_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void region_war_t::clear_defender_name() {
  if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
    defender_name_->clear();
  }
  clear_has_defender_name();
}
inline const ::std::string& region_war_t::defender_name() const {
  return *defender_name_;
}
inline void region_war_t::set_defender_name(const ::std::string& value) {
  set_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    defender_name_ = new ::std::string;
  }
  defender_name_->assign(value);
}
inline void region_war_t::set_defender_name(const char* value) {
  set_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    defender_name_ = new ::std::string;
  }
  defender_name_->assign(value);
}
inline void region_war_t::set_defender_name(const void* value, size_t size) {
  set_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    defender_name_ = new ::std::string;
  }
  defender_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* region_war_t::mutable_defender_name() {
  set_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    defender_name_ = new ::std::string;
  }
  return defender_name_;
}
inline ::std::string* region_war_t::release_defender_name() {
  clear_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = defender_name_;
    defender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void region_war_t::set_allocated_defender_name(::std::string* defender_name) {
  if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete defender_name_;
  }
  if (defender_name) {
    set_has_defender_name();
    defender_name_ = defender_name;
  } else {
    clear_has_defender_name();
    defender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 bless_value_attack = 10;
inline bool region_war_t::has_bless_value_attack() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void region_war_t::set_has_bless_value_attack() {
  _has_bits_[0] |= 0x00000200u;
}
inline void region_war_t::clear_has_bless_value_attack() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void region_war_t::clear_bless_value_attack() {
  bless_value_attack_ = GOOGLE_LONGLONG(0);
  clear_has_bless_value_attack();
}
inline ::google::protobuf::int64 region_war_t::bless_value_attack() const {
  return bless_value_attack_;
}
inline void region_war_t::set_bless_value_attack(::google::protobuf::int64 value) {
  set_has_bless_value_attack();
  bless_value_attack_ = value;
}

// optional int64 bless_value_defend = 11;
inline bool region_war_t::has_bless_value_defend() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void region_war_t::set_has_bless_value_defend() {
  _has_bits_[0] |= 0x00000400u;
}
inline void region_war_t::clear_has_bless_value_defend() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void region_war_t::clear_bless_value_defend() {
  bless_value_defend_ = GOOGLE_LONGLONG(0);
  clear_has_bless_value_defend();
}
inline ::google::protobuf::int64 region_war_t::bless_value_defend() const {
  return bless_value_defend_;
}
inline void region_war_t::set_bless_value_defend(::google::protobuf::int64 value) {
  set_has_bless_value_defend();
  bless_value_defend_ = value;
}

// optional int64 defender_war_cost = 12;
inline bool region_war_t::has_defender_war_cost() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void region_war_t::set_has_defender_war_cost() {
  _has_bits_[0] |= 0x00000800u;
}
inline void region_war_t::clear_has_defender_war_cost() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void region_war_t::clear_defender_war_cost() {
  defender_war_cost_ = GOOGLE_LONGLONG(0);
  clear_has_defender_war_cost();
}
inline ::google::protobuf::int64 region_war_t::defender_war_cost() const {
  return defender_war_cost_;
}
inline void region_war_t::set_defender_war_cost(::google::protobuf::int64 value) {
  set_has_defender_war_cost();
  defender_war_cost_ = value;
}

// -------------------------------------------------------------------

// region_bid_t_bid_t

// optional int64 bider_id = 1;
inline bool region_bid_t_bid_t::has_bider_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void region_bid_t_bid_t::set_has_bider_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void region_bid_t_bid_t::clear_has_bider_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void region_bid_t_bid_t::clear_bider_id() {
  bider_id_ = GOOGLE_LONGLONG(0);
  clear_has_bider_id();
}
inline ::google::protobuf::int64 region_bid_t_bid_t::bider_id() const {
  return bider_id_;
}
inline void region_bid_t_bid_t::set_bider_id(::google::protobuf::int64 value) {
  set_has_bider_id();
  bider_id_ = value;
}

// optional int32 bidder_nation = 2;
inline bool region_bid_t_bid_t::has_bidder_nation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void region_bid_t_bid_t::set_has_bidder_nation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void region_bid_t_bid_t::clear_has_bidder_nation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void region_bid_t_bid_t::clear_bidder_nation() {
  bidder_nation_ = 0;
  clear_has_bidder_nation();
}
inline ::google::protobuf::int32 region_bid_t_bid_t::bidder_nation() const {
  return bidder_nation_;
}
inline void region_bid_t_bid_t::set_bidder_nation(::google::protobuf::int32 value) {
  set_has_bidder_nation();
  bidder_nation_ = value;
}

// optional bytes bidder_name = 3;
inline bool region_bid_t_bid_t::has_bidder_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void region_bid_t_bid_t::set_has_bidder_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void region_bid_t_bid_t::clear_has_bidder_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void region_bid_t_bid_t::clear_bidder_name() {
  if (bidder_name_ != &::google::protobuf::internal::kEmptyString) {
    bidder_name_->clear();
  }
  clear_has_bidder_name();
}
inline const ::std::string& region_bid_t_bid_t::bidder_name() const {
  return *bidder_name_;
}
inline void region_bid_t_bid_t::set_bidder_name(const ::std::string& value) {
  set_has_bidder_name();
  if (bidder_name_ == &::google::protobuf::internal::kEmptyString) {
    bidder_name_ = new ::std::string;
  }
  bidder_name_->assign(value);
}
inline void region_bid_t_bid_t::set_bidder_name(const char* value) {
  set_has_bidder_name();
  if (bidder_name_ == &::google::protobuf::internal::kEmptyString) {
    bidder_name_ = new ::std::string;
  }
  bidder_name_->assign(value);
}
inline void region_bid_t_bid_t::set_bidder_name(const void* value, size_t size) {
  set_has_bidder_name();
  if (bidder_name_ == &::google::protobuf::internal::kEmptyString) {
    bidder_name_ = new ::std::string;
  }
  bidder_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* region_bid_t_bid_t::mutable_bidder_name() {
  set_has_bidder_name();
  if (bidder_name_ == &::google::protobuf::internal::kEmptyString) {
    bidder_name_ = new ::std::string;
  }
  return bidder_name_;
}
inline ::std::string* region_bid_t_bid_t::release_bidder_name() {
  clear_has_bidder_name();
  if (bidder_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bidder_name_;
    bidder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void region_bid_t_bid_t::set_allocated_bidder_name(::std::string* bidder_name) {
  if (bidder_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bidder_name_;
  }
  if (bidder_name) {
    set_has_bidder_name();
    bidder_name_ = bidder_name;
  } else {
    clear_has_bidder_name();
    bidder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 bid_money = 4;
inline bool region_bid_t_bid_t::has_bid_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void region_bid_t_bid_t::set_has_bid_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void region_bid_t_bid_t::clear_has_bid_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void region_bid_t_bid_t::clear_bid_money() {
  bid_money_ = GOOGLE_LONGLONG(0);
  clear_has_bid_money();
}
inline ::google::protobuf::int64 region_bid_t_bid_t::bid_money() const {
  return bid_money_;
}
inline void region_bid_t_bid_t::set_bid_money(::google::protobuf::int64 value) {
  set_has_bid_money();
  bid_money_ = value;
}

// optional int64 bid_diamond = 5;
inline bool region_bid_t_bid_t::has_bid_diamond() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void region_bid_t_bid_t::set_has_bid_diamond() {
  _has_bits_[0] |= 0x00000010u;
}
inline void region_bid_t_bid_t::clear_has_bid_diamond() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void region_bid_t_bid_t::clear_bid_diamond() {
  bid_diamond_ = GOOGLE_LONGLONG(0);
  clear_has_bid_diamond();
}
inline ::google::protobuf::int64 region_bid_t_bid_t::bid_diamond() const {
  return bid_diamond_;
}
inline void region_bid_t_bid_t::set_bid_diamond(::google::protobuf::int64 value) {
  set_has_bid_diamond();
  bid_diamond_ = value;
}

// optional int64 total_bid_money = 6;
inline bool region_bid_t_bid_t::has_total_bid_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void region_bid_t_bid_t::set_has_total_bid_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void region_bid_t_bid_t::clear_has_total_bid_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void region_bid_t_bid_t::clear_total_bid_money() {
  total_bid_money_ = GOOGLE_LONGLONG(0);
  clear_has_total_bid_money();
}
inline ::google::protobuf::int64 region_bid_t_bid_t::total_bid_money() const {
  return total_bid_money_;
}
inline void region_bid_t_bid_t::set_total_bid_money(::google::protobuf::int64 value) {
  set_has_total_bid_money();
  total_bid_money_ = value;
}

// optional int64 total_bid_diamond = 7;
inline bool region_bid_t_bid_t::has_total_bid_diamond() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void region_bid_t_bid_t::set_has_total_bid_diamond() {
  _has_bits_[0] |= 0x00000040u;
}
inline void region_bid_t_bid_t::clear_has_total_bid_diamond() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void region_bid_t_bid_t::clear_total_bid_diamond() {
  total_bid_diamond_ = GOOGLE_LONGLONG(0);
  clear_has_total_bid_diamond();
}
inline ::google::protobuf::int64 region_bid_t_bid_t::total_bid_diamond() const {
  return total_bid_diamond_;
}
inline void region_bid_t_bid_t::set_total_bid_diamond(::google::protobuf::int64 value) {
  set_has_total_bid_diamond();
  total_bid_diamond_ = value;
}

// -------------------------------------------------------------------

// region_bid_t

// optional int32 region_id = 1;
inline bool region_bid_t::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void region_bid_t::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void region_bid_t::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void region_bid_t::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 region_bid_t::region_id() const {
  return region_id_;
}
inline void region_bid_t::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// repeated .PB.region_bid_t.bid_t bid_list = 2;
inline int region_bid_t::bid_list_size() const {
  return bid_list_.size();
}
inline void region_bid_t::clear_bid_list() {
  bid_list_.Clear();
}
inline const ::PB::region_bid_t_bid_t& region_bid_t::bid_list(int index) const {
  return bid_list_.Get(index);
}
inline ::PB::region_bid_t_bid_t* region_bid_t::mutable_bid_list(int index) {
  return bid_list_.Mutable(index);
}
inline ::PB::region_bid_t_bid_t* region_bid_t::add_bid_list() {
  return bid_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t_bid_t >&
region_bid_t::bid_list() const {
  return bid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t_bid_t >*
region_bid_t::mutable_bid_list() {
  return &bid_list_;
}

// -------------------------------------------------------------------

// region_war_data

// optional int32 game_status = 1;
inline bool region_war_data::has_game_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void region_war_data::set_has_game_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void region_war_data::clear_has_game_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void region_war_data::clear_game_status() {
  game_status_ = 0;
  clear_has_game_status();
}
inline ::google::protobuf::int32 region_war_data::game_status() const {
  return game_status_;
}
inline void region_war_data::set_game_status(::google::protobuf::int32 value) {
  set_has_game_status();
  game_status_ = value;
}

// optional int32 game_open_time = 2;
inline bool region_war_data::has_game_open_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void region_war_data::set_has_game_open_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void region_war_data::clear_has_game_open_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void region_war_data::clear_game_open_time() {
  game_open_time_ = 0;
  clear_has_game_open_time();
}
inline ::google::protobuf::int32 region_war_data::game_open_time() const {
  return game_open_time_;
}
inline void region_war_data::set_game_open_time(::google::protobuf::int32 value) {
  set_has_game_open_time();
  game_open_time_ = value;
}

// optional int32 next_war_id = 3;
inline bool region_war_data::has_next_war_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void region_war_data::set_has_next_war_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void region_war_data::clear_has_next_war_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void region_war_data::clear_next_war_id() {
  next_war_id_ = 0;
  clear_has_next_war_id();
}
inline ::google::protobuf::int32 region_war_data::next_war_id() const {
  return next_war_id_;
}
inline void region_war_data::set_next_war_id(::google::protobuf::int32 value) {
  set_has_next_war_id();
  next_war_id_ = value;
}

// optional int32 update_timestamp = 4;
inline bool region_war_data::has_update_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void region_war_data::set_has_update_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void region_war_data::clear_has_update_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void region_war_data::clear_update_timestamp() {
  update_timestamp_ = 0;
  clear_has_update_timestamp();
}
inline ::google::protobuf::int32 region_war_data::update_timestamp() const {
  return update_timestamp_;
}
inline void region_war_data::set_update_timestamp(::google::protobuf::int32 value) {
  set_has_update_timestamp();
  update_timestamp_ = value;
}

// repeated .PB.region_info_t region_list = 5;
inline int region_war_data::region_list_size() const {
  return region_list_.size();
}
inline void region_war_data::clear_region_list() {
  region_list_.Clear();
}
inline const ::PB::region_info_t& region_war_data::region_list(int index) const {
  return region_list_.Get(index);
}
inline ::PB::region_info_t* region_war_data::mutable_region_list(int index) {
  return region_list_.Mutable(index);
}
inline ::PB::region_info_t* region_war_data::add_region_list() {
  return region_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::region_info_t >&
region_war_data::region_list() const {
  return region_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::region_info_t >*
region_war_data::mutable_region_list() {
  return &region_list_;
}

// repeated .PB.region_war_t war_list = 6;
inline int region_war_data::war_list_size() const {
  return war_list_.size();
}
inline void region_war_data::clear_war_list() {
  war_list_.Clear();
}
inline const ::PB::region_war_t& region_war_data::war_list(int index) const {
  return war_list_.Get(index);
}
inline ::PB::region_war_t* region_war_data::mutable_war_list(int index) {
  return war_list_.Mutable(index);
}
inline ::PB::region_war_t* region_war_data::add_war_list() {
  return war_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::region_war_t >&
region_war_data::war_list() const {
  return war_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::region_war_t >*
region_war_data::mutable_war_list() {
  return &war_list_;
}

// repeated .PB.region_bid_t bid_list = 7;
inline int region_war_data::bid_list_size() const {
  return bid_list_.size();
}
inline void region_war_data::clear_bid_list() {
  bid_list_.Clear();
}
inline const ::PB::region_bid_t& region_war_data::bid_list(int index) const {
  return bid_list_.Get(index);
}
inline ::PB::region_bid_t* region_war_data::mutable_bid_list(int index) {
  return bid_list_.Mutable(index);
}
inline ::PB::region_bid_t* region_war_data::add_bid_list() {
  return bid_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t >&
region_war_data::bid_list() const {
  return bid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t >*
region_war_data::mutable_bid_list() {
  return &bid_list_;
}

// repeated int64 daily_bonus_roles = 8;
inline int region_war_data::daily_bonus_roles_size() const {
  return daily_bonus_roles_.size();
}
inline void region_war_data::clear_daily_bonus_roles() {
  daily_bonus_roles_.Clear();
}
inline ::google::protobuf::int64 region_war_data::daily_bonus_roles(int index) const {
  return daily_bonus_roles_.Get(index);
}
inline void region_war_data::set_daily_bonus_roles(int index, ::google::protobuf::int64 value) {
  daily_bonus_roles_.Set(index, value);
}
inline void region_war_data::add_daily_bonus_roles(::google::protobuf::int64 value) {
  daily_bonus_roles_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
region_war_data::daily_bonus_roles() const {
  return daily_bonus_roles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
region_war_data::mutable_daily_bonus_roles() {
  return &daily_bonus_roles_;
}

// -------------------------------------------------------------------

// int32_pair

// optional int32 first = 1;
inline bool int32_pair::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void int32_pair::set_has_first() {
  _has_bits_[0] |= 0x00000001u;
}
inline void int32_pair::clear_has_first() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void int32_pair::clear_first() {
  first_ = 0;
  clear_has_first();
}
inline ::google::protobuf::int32 int32_pair::first() const {
  return first_;
}
inline void int32_pair::set_first(::google::protobuf::int32 value) {
  set_has_first();
  first_ = value;
}

// optional int32 second = 2;
inline bool int32_pair::has_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void int32_pair::set_has_second() {
  _has_bits_[0] |= 0x00000002u;
}
inline void int32_pair::clear_has_second() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void int32_pair::clear_second() {
  second_ = 0;
  clear_has_second();
}
inline ::google::protobuf::int32 int32_pair::second() const {
  return second_;
}
inline void int32_pair::set_second(::google::protobuf::int32 value) {
  set_has_second();
  second_ = value;
}

// -------------------------------------------------------------------

// npt_region_war_operate

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REGION_WAR_OPERATE];
inline bool npt_region_war_operate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_region_war_operate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_region_war_operate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_region_war_operate::clear_type() {
  type_ = 77;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_region_war_operate::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_region_war_operate::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.npt_region_war_operate.OPER_TYPE oper_type = 2;
inline bool npt_region_war_operate::has_oper_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_region_war_operate::set_has_oper_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_region_war_operate::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_region_war_operate::clear_oper_type() {
  oper_type_ = 1;
  clear_has_oper_type();
}
inline ::PB::npt_region_war_operate_OPER_TYPE npt_region_war_operate::oper_type() const {
  return static_cast< ::PB::npt_region_war_operate_OPER_TYPE >(oper_type_);
}
inline void npt_region_war_operate::set_oper_type(::PB::npt_region_war_operate_OPER_TYPE value) {
  assert(::PB::npt_region_war_operate_OPER_TYPE_IsValid(value));
  set_has_oper_type();
  oper_type_ = value;
}

// optional int64 oper_param1 = 3;
inline bool npt_region_war_operate::has_oper_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_region_war_operate::set_has_oper_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_region_war_operate::clear_has_oper_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_region_war_operate::clear_oper_param1() {
  oper_param1_ = GOOGLE_LONGLONG(0);
  clear_has_oper_param1();
}
inline ::google::protobuf::int64 npt_region_war_operate::oper_param1() const {
  return oper_param1_;
}
inline void npt_region_war_operate::set_oper_param1(::google::protobuf::int64 value) {
  set_has_oper_param1();
  oper_param1_ = value;
}

// optional int64 oper_param2 = 4;
inline bool npt_region_war_operate::has_oper_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_region_war_operate::set_has_oper_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_region_war_operate::clear_has_oper_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_region_war_operate::clear_oper_param2() {
  oper_param2_ = GOOGLE_LONGLONG(0);
  clear_has_oper_param2();
}
inline ::google::protobuf::int64 npt_region_war_operate::oper_param2() const {
  return oper_param2_;
}
inline void npt_region_war_operate::set_oper_param2(::google::protobuf::int64 value) {
  set_has_oper_param2();
  oper_param2_ = value;
}

// optional int64 oper_param3 = 5;
inline bool npt_region_war_operate::has_oper_param3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_region_war_operate::set_has_oper_param3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_region_war_operate::clear_has_oper_param3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_region_war_operate::clear_oper_param3() {
  oper_param3_ = GOOGLE_LONGLONG(0);
  clear_has_oper_param3();
}
inline ::google::protobuf::int64 npt_region_war_operate::oper_param3() const {
  return oper_param3_;
}
inline void npt_region_war_operate::set_oper_param3(::google::protobuf::int64 value) {
  set_has_oper_param3();
  oper_param3_ = value;
}

// -------------------------------------------------------------------

// npt_region_war_get_info_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REGION_WAR_GET_INFO_RE];
inline bool npt_region_war_get_info_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_region_war_get_info_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_region_war_get_info_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_region_war_get_info_re::clear_type() {
  type_ = 78;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_region_war_get_info_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_region_war_get_info_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.npt_region_war_get_info_re.OPER_TYPE oper_type = 2;
inline bool npt_region_war_get_info_re::has_oper_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_region_war_get_info_re::set_has_oper_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_region_war_get_info_re::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_region_war_get_info_re::clear_oper_type() {
  oper_type_ = 1;
  clear_has_oper_type();
}
inline ::PB::npt_region_war_get_info_re_OPER_TYPE npt_region_war_get_info_re::oper_type() const {
  return static_cast< ::PB::npt_region_war_get_info_re_OPER_TYPE >(oper_type_);
}
inline void npt_region_war_get_info_re::set_oper_type(::PB::npt_region_war_get_info_re_OPER_TYPE value) {
  assert(::PB::npt_region_war_get_info_re_OPER_TYPE_IsValid(value));
  set_has_oper_type();
  oper_type_ = value;
}

// repeated .PB.region_info_t region_list = 3;
inline int npt_region_war_get_info_re::region_list_size() const {
  return region_list_.size();
}
inline void npt_region_war_get_info_re::clear_region_list() {
  region_list_.Clear();
}
inline const ::PB::region_info_t& npt_region_war_get_info_re::region_list(int index) const {
  return region_list_.Get(index);
}
inline ::PB::region_info_t* npt_region_war_get_info_re::mutable_region_list(int index) {
  return region_list_.Mutable(index);
}
inline ::PB::region_info_t* npt_region_war_get_info_re::add_region_list() {
  return region_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::region_info_t >&
npt_region_war_get_info_re::region_list() const {
  return region_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::region_info_t >*
npt_region_war_get_info_re::mutable_region_list() {
  return &region_list_;
}

// repeated .PB.region_bid_t bid_list = 4;
inline int npt_region_war_get_info_re::bid_list_size() const {
  return bid_list_.size();
}
inline void npt_region_war_get_info_re::clear_bid_list() {
  bid_list_.Clear();
}
inline const ::PB::region_bid_t& npt_region_war_get_info_re::bid_list(int index) const {
  return bid_list_.Get(index);
}
inline ::PB::region_bid_t* npt_region_war_get_info_re::mutable_bid_list(int index) {
  return bid_list_.Mutable(index);
}
inline ::PB::region_bid_t* npt_region_war_get_info_re::add_bid_list() {
  return bid_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t >&
npt_region_war_get_info_re::bid_list() const {
  return bid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::region_bid_t >*
npt_region_war_get_info_re::mutable_bid_list() {
  return &bid_list_;
}

// repeated .PB.region_war_t war_list = 5;
inline int npt_region_war_get_info_re::war_list_size() const {
  return war_list_.size();
}
inline void npt_region_war_get_info_re::clear_war_list() {
  war_list_.Clear();
}
inline const ::PB::region_war_t& npt_region_war_get_info_re::war_list(int index) const {
  return war_list_.Get(index);
}
inline ::PB::region_war_t* npt_region_war_get_info_re::mutable_war_list(int index) {
  return war_list_.Mutable(index);
}
inline ::PB::region_war_t* npt_region_war_get_info_re::add_war_list() {
  return war_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::region_war_t >&
npt_region_war_get_info_re::war_list() const {
  return war_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::region_war_t >*
npt_region_war_get_info_re::mutable_war_list() {
  return &war_list_;
}

// -------------------------------------------------------------------

// npt_region_war_operate_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REGION_WAR_OPERATE_RE];
inline bool npt_region_war_operate_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_region_war_operate_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_region_war_operate_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_region_war_operate_re::clear_type() {
  type_ = 85;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_region_war_operate_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_region_war_operate_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.npt_region_war_operate_re.OPER_TYPE oper_type = 2;
inline bool npt_region_war_operate_re::has_oper_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_region_war_operate_re::set_has_oper_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_region_war_operate_re::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_region_war_operate_re::clear_oper_type() {
  oper_type_ = 1;
  clear_has_oper_type();
}
inline ::PB::npt_region_war_operate_re_OPER_TYPE npt_region_war_operate_re::oper_type() const {
  return static_cast< ::PB::npt_region_war_operate_re_OPER_TYPE >(oper_type_);
}
inline void npt_region_war_operate_re::set_oper_type(::PB::npt_region_war_operate_re_OPER_TYPE value) {
  assert(::PB::npt_region_war_operate_re_OPER_TYPE_IsValid(value));
  set_has_oper_type();
  oper_type_ = value;
}

// optional int32 oper_result = 3;
inline bool npt_region_war_operate_re::has_oper_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_region_war_operate_re::set_has_oper_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_region_war_operate_re::clear_has_oper_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_region_war_operate_re::clear_oper_result() {
  oper_result_ = 0;
  clear_has_oper_result();
}
inline ::google::protobuf::int32 npt_region_war_operate_re::oper_result() const {
  return oper_result_;
}
inline void npt_region_war_operate_re::set_oper_result(::google::protobuf::int32 value) {
  set_has_oper_result();
  oper_result_ = value;
}

// repeated .PB.int32_pair int_list = 4;
inline int npt_region_war_operate_re::int_list_size() const {
  return int_list_.size();
}
inline void npt_region_war_operate_re::clear_int_list() {
  int_list_.Clear();
}
inline const ::PB::int32_pair& npt_region_war_operate_re::int_list(int index) const {
  return int_list_.Get(index);
}
inline ::PB::int32_pair* npt_region_war_operate_re::mutable_int_list(int index) {
  return int_list_.Mutable(index);
}
inline ::PB::int32_pair* npt_region_war_operate_re::add_int_list() {
  return int_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::int32_pair >&
npt_region_war_operate_re::int_list() const {
  return int_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::int32_pair >*
npt_region_war_operate_re::mutable_int_list() {
  return &int_list_;
}

// -------------------------------------------------------------------

// npt_region_war_begin_notify

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REGION_WAR_BEGIN_NOTIFY];
inline bool npt_region_war_begin_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_region_war_begin_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_region_war_begin_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_region_war_begin_notify::clear_type() {
  type_ = 86;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_region_war_begin_notify::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_region_war_begin_notify::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 attacker = 2;
inline bool npt_region_war_begin_notify::has_attacker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_region_war_begin_notify::set_has_attacker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_region_war_begin_notify::clear_has_attacker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_region_war_begin_notify::clear_attacker() {
  attacker_ = GOOGLE_LONGLONG(0);
  clear_has_attacker();
}
inline ::google::protobuf::int64 npt_region_war_begin_notify::attacker() const {
  return attacker_;
}
inline void npt_region_war_begin_notify::set_attacker(::google::protobuf::int64 value) {
  set_has_attacker();
  attacker_ = value;
}

// optional int64 defender = 3;
inline bool npt_region_war_begin_notify::has_defender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_region_war_begin_notify::set_has_defender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_region_war_begin_notify::clear_has_defender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_region_war_begin_notify::clear_defender() {
  defender_ = GOOGLE_LONGLONG(0);
  clear_has_defender();
}
inline ::google::protobuf::int64 npt_region_war_begin_notify::defender() const {
  return defender_;
}
inline void npt_region_war_begin_notify::set_defender(::google::protobuf::int64 value) {
  set_has_defender();
  defender_ = value;
}

// -------------------------------------------------------------------

// gmshutdownserver_notify

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GM_SHUT_DOWN_SERVER];
inline bool gmshutdownserver_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gmshutdownserver_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gmshutdownserver_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gmshutdownserver_notify::clear_type() {
  type_ = 79;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE gmshutdownserver_notify::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void gmshutdownserver_notify::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 zoneid = 2;
inline bool gmshutdownserver_notify::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gmshutdownserver_notify::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gmshutdownserver_notify::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gmshutdownserver_notify::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 gmshutdownserver_notify::zoneid() const {
  return zoneid_;
}
inline void gmshutdownserver_notify::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// optional int64 timestamp = 3;
inline bool gmshutdownserver_notify::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gmshutdownserver_notify::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gmshutdownserver_notify::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gmshutdownserver_notify::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 gmshutdownserver_notify::timestamp() const {
  return timestamp_;
}
inline void gmshutdownserver_notify::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional int32 speakid = 4;
inline bool gmshutdownserver_notify::has_speakid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gmshutdownserver_notify::set_has_speakid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gmshutdownserver_notify::clear_has_speakid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gmshutdownserver_notify::clear_speakid() {
  speakid_ = 0;
  clear_has_speakid();
}
inline ::google::protobuf::int32 gmshutdownserver_notify::speakid() const {
  return speakid_;
}
inline void gmshutdownserver_notify::set_speakid(::google::protobuf::int32 value) {
  set_has_speakid();
  speakid_ = value;
}

// -------------------------------------------------------------------

// npt_notify_regionwar_deltatime

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NOTIFY_REGIONWAR_DELTATIME];
inline bool npt_notify_regionwar_deltatime::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_notify_regionwar_deltatime::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_notify_regionwar_deltatime::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_notify_regionwar_deltatime::clear_type() {
  type_ = 80;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_notify_regionwar_deltatime::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_notify_regionwar_deltatime::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 delta_time = 2;
inline bool npt_notify_regionwar_deltatime::has_delta_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_notify_regionwar_deltatime::set_has_delta_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_notify_regionwar_deltatime::clear_has_delta_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_notify_regionwar_deltatime::clear_delta_time() {
  delta_time_ = 0;
  clear_has_delta_time();
}
inline ::google::protobuf::int32 npt_notify_regionwar_deltatime::delta_time() const {
  return delta_time_;
}
inline void npt_notify_regionwar_deltatime::set_delta_time(::google::protobuf::int32 value) {
  set_has_delta_time();
  delta_time_ = value;
}

// optional int32 server_open_time = 3;
inline bool npt_notify_regionwar_deltatime::has_server_open_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_notify_regionwar_deltatime::set_has_server_open_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_notify_regionwar_deltatime::clear_has_server_open_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_notify_regionwar_deltatime::clear_server_open_time() {
  server_open_time_ = 0;
  clear_has_server_open_time();
}
inline ::google::protobuf::int32 npt_notify_regionwar_deltatime::server_open_time() const {
  return server_open_time_;
}
inline void npt_notify_regionwar_deltatime::set_server_open_time(::google::protobuf::int32 value) {
  set_has_server_open_time();
  server_open_time_ = value;
}

// -------------------------------------------------------------------

// npt_notify_regionwar_dailybonus

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NOTIFY_REGIONWAR_DAILYBONUS];
inline bool npt_notify_regionwar_dailybonus::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_notify_regionwar_dailybonus::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_notify_regionwar_dailybonus::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_notify_regionwar_dailybonus::clear_type() {
  type_ = 81;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_notify_regionwar_dailybonus::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_notify_regionwar_dailybonus::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 has_bonus = 2;
inline bool npt_notify_regionwar_dailybonus::has_has_bonus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_notify_regionwar_dailybonus::set_has_has_bonus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_notify_regionwar_dailybonus::clear_has_has_bonus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_notify_regionwar_dailybonus::clear_has_bonus() {
  has_bonus_ = 0;
  clear_has_has_bonus();
}
inline ::google::protobuf::int32 npt_notify_regionwar_dailybonus::has_bonus() const {
  return has_bonus_;
}
inline void npt_notify_regionwar_dailybonus::set_has_bonus(::google::protobuf::int32 value) {
  set_has_has_bonus();
  has_bonus_ = value;
}

// -------------------------------------------------------------------

// npt_get_corps_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_CORPS_INFO];
inline bool npt_get_corps_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_get_corps_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_get_corps_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_get_corps_info::clear_type() {
  type_ = 82;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_get_corps_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_get_corps_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 corps_id = 2;
inline bool npt_get_corps_info::has_corps_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_get_corps_info::set_has_corps_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_get_corps_info::clear_has_corps_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_get_corps_info::clear_corps_id() {
  corps_id_ = 0;
  clear_has_corps_id();
}
inline ::google::protobuf::int32 npt_get_corps_info::corps_id() const {
  return corps_id_;
}
inline void npt_get_corps_info::set_corps_id(::google::protobuf::int32 value) {
  set_has_corps_id();
  corps_id_ = value;
}

// optional int32 corps_level = 3;
inline bool npt_get_corps_info::has_corps_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_get_corps_info::set_has_corps_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_get_corps_info::clear_has_corps_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_get_corps_info::clear_corps_level() {
  corps_level_ = 0;
  clear_has_corps_level();
}
inline ::google::protobuf::int32 npt_get_corps_info::corps_level() const {
  return corps_level_;
}
inline void npt_get_corps_info::set_corps_level(::google::protobuf::int32 value) {
  set_has_corps_level();
  corps_level_ = value;
}

// optional int32 corps_members = 4;
inline bool npt_get_corps_info::has_corps_members() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_get_corps_info::set_has_corps_members() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_get_corps_info::clear_has_corps_members() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_get_corps_info::clear_corps_members() {
  corps_members_ = 0;
  clear_has_corps_members();
}
inline ::google::protobuf::int32 npt_get_corps_info::corps_members() const {
  return corps_members_;
}
inline void npt_get_corps_info::set_corps_members(::google::protobuf::int32 value) {
  set_has_corps_members();
  corps_members_ = value;
}

// optional int32 corps_nation = 5;
inline bool npt_get_corps_info::has_corps_nation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_get_corps_info::set_has_corps_nation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_get_corps_info::clear_has_corps_nation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_get_corps_info::clear_corps_nation() {
  corps_nation_ = 0;
  clear_has_corps_nation();
}
inline ::google::protobuf::int32 npt_get_corps_info::corps_nation() const {
  return corps_nation_;
}
inline void npt_get_corps_info::set_corps_nation(::google::protobuf::int32 value) {
  set_has_corps_nation();
  corps_nation_ = value;
}

// optional int64 corps_master_id = 6;
inline bool npt_get_corps_info::has_corps_master_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_get_corps_info::set_has_corps_master_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_get_corps_info::clear_has_corps_master_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_get_corps_info::clear_corps_master_id() {
  corps_master_id_ = GOOGLE_LONGLONG(0);
  clear_has_corps_master_id();
}
inline ::google::protobuf::int64 npt_get_corps_info::corps_master_id() const {
  return corps_master_id_;
}
inline void npt_get_corps_info::set_corps_master_id(::google::protobuf::int64 value) {
  set_has_corps_master_id();
  corps_master_id_ = value;
}

// optional bytes corps_master_name = 7;
inline bool npt_get_corps_info::has_corps_master_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_get_corps_info::set_has_corps_master_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_get_corps_info::clear_has_corps_master_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_get_corps_info::clear_corps_master_name() {
  if (corps_master_name_ != &::google::protobuf::internal::kEmptyString) {
    corps_master_name_->clear();
  }
  clear_has_corps_master_name();
}
inline const ::std::string& npt_get_corps_info::corps_master_name() const {
  return *corps_master_name_;
}
inline void npt_get_corps_info::set_corps_master_name(const ::std::string& value) {
  set_has_corps_master_name();
  if (corps_master_name_ == &::google::protobuf::internal::kEmptyString) {
    corps_master_name_ = new ::std::string;
  }
  corps_master_name_->assign(value);
}
inline void npt_get_corps_info::set_corps_master_name(const char* value) {
  set_has_corps_master_name();
  if (corps_master_name_ == &::google::protobuf::internal::kEmptyString) {
    corps_master_name_ = new ::std::string;
  }
  corps_master_name_->assign(value);
}
inline void npt_get_corps_info::set_corps_master_name(const void* value, size_t size) {
  set_has_corps_master_name();
  if (corps_master_name_ == &::google::protobuf::internal::kEmptyString) {
    corps_master_name_ = new ::std::string;
  }
  corps_master_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_get_corps_info::mutable_corps_master_name() {
  set_has_corps_master_name();
  if (corps_master_name_ == &::google::protobuf::internal::kEmptyString) {
    corps_master_name_ = new ::std::string;
  }
  return corps_master_name_;
}
inline ::std::string* npt_get_corps_info::release_corps_master_name() {
  clear_has_corps_master_name();
  if (corps_master_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = corps_master_name_;
    corps_master_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_get_corps_info::set_allocated_corps_master_name(::std::string* corps_master_name) {
  if (corps_master_name_ != &::google::protobuf::internal::kEmptyString) {
    delete corps_master_name_;
  }
  if (corps_master_name) {
    set_has_corps_master_name();
    corps_master_name_ = corps_master_name;
  } else {
    clear_has_corps_master_name();
    corps_master_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 region_id = 8;
inline bool npt_get_corps_info::has_region_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_get_corps_info::set_has_region_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_get_corps_info::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_get_corps_info::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 npt_get_corps_info::region_id() const {
  return region_id_;
}
inline void npt_get_corps_info::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// -------------------------------------------------------------------

// npt_get_region_cheer_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_REGION_CHEER_INFO];
inline bool npt_get_region_cheer_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_get_region_cheer_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_get_region_cheer_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_get_region_cheer_info::clear_type() {
  type_ = 83;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_get_region_cheer_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_get_region_cheer_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 region_id = 2;
inline bool npt_get_region_cheer_info::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_get_region_cheer_info::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_get_region_cheer_info::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_get_region_cheer_info::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 npt_get_region_cheer_info::region_id() const {
  return region_id_;
}
inline void npt_get_region_cheer_info::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// -------------------------------------------------------------------

// npt_get_region_cheer_info_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_REGION_CHEER_INFO_RE];
inline bool npt_get_region_cheer_info_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_get_region_cheer_info_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_get_region_cheer_info_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_get_region_cheer_info_re::clear_type() {
  type_ = 84;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_get_region_cheer_info_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_get_region_cheer_info_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 region_id = 2;
inline bool npt_get_region_cheer_info_re::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_get_region_cheer_info_re::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_get_region_cheer_info_re::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_get_region_cheer_info_re::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 npt_get_region_cheer_info_re::region_id() const {
  return region_id_;
}
inline void npt_get_region_cheer_info_re::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// optional int32 attack_value = 3;
inline bool npt_get_region_cheer_info_re::has_attack_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_get_region_cheer_info_re::set_has_attack_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_get_region_cheer_info_re::clear_has_attack_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_get_region_cheer_info_re::clear_attack_value() {
  attack_value_ = 0;
  clear_has_attack_value();
}
inline ::google::protobuf::int32 npt_get_region_cheer_info_re::attack_value() const {
  return attack_value_;
}
inline void npt_get_region_cheer_info_re::set_attack_value(::google::protobuf::int32 value) {
  set_has_attack_value();
  attack_value_ = value;
}

// optional int32 defend_value = 4;
inline bool npt_get_region_cheer_info_re::has_defend_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_get_region_cheer_info_re::set_has_defend_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_get_region_cheer_info_re::clear_has_defend_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_get_region_cheer_info_re::clear_defend_value() {
  defend_value_ = 0;
  clear_has_defend_value();
}
inline ::google::protobuf::int32 npt_get_region_cheer_info_re::defend_value() const {
  return defend_value_;
}
inline void npt_get_region_cheer_info_re::set_defend_value(::google::protobuf::int32 value) {
  set_has_defend_value();
  defend_value_ = value;
}

// -------------------------------------------------------------------

// item_data

// optional .PB.GPS_TYPE type = 1 [default = GUT_ITEM_DATA];
inline bool item_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_data::clear_type() {
  type_ = 29;
  clear_has_type();
}
inline ::PB::GPS_TYPE item_data::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void item_data::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool item_data::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item_data::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item_data::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item_data::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 item_data::id() const {
  return id_;
}
inline void item_data::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 pos = 3;
inline bool item_data::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void item_data::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void item_data::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void item_data::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 item_data::pos() const {
  return pos_;
}
inline void item_data::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 count_normal = 4;
inline bool item_data::has_count_normal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void item_data::set_has_count_normal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void item_data::clear_has_count_normal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void item_data::clear_count_normal() {
  count_normal_ = 0;
  clear_has_count_normal();
}
inline ::google::protobuf::int32 item_data::count_normal() const {
  return count_normal_;
}
inline void item_data::set_count_normal(::google::protobuf::int32 value) {
  set_has_count_normal();
  count_normal_ = value;
}

// optional int32 count_bind = 5;
inline bool item_data::has_count_bind() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void item_data::set_has_count_bind() {
  _has_bits_[0] |= 0x00000010u;
}
inline void item_data::clear_has_count_bind() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void item_data::clear_count_bind() {
  count_bind_ = 0;
  clear_has_count_bind();
}
inline ::google::protobuf::int32 item_data::count_bind() const {
  return count_bind_;
}
inline void item_data::set_count_bind(::google::protobuf::int32 value) {
  set_has_count_bind();
  count_bind_ = value;
}

// optional int32 state = 6;
inline bool item_data::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void item_data::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void item_data::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void item_data::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 item_data::state() const {
  return state_;
}
inline void item_data::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 expire_date = 7;
inline bool item_data::has_expire_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void item_data::set_has_expire_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void item_data::clear_has_expire_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void item_data::clear_expire_date() {
  expire_date_ = 0;
  clear_has_expire_date();
}
inline ::google::protobuf::int32 item_data::expire_date() const {
  return expire_date_;
}
inline void item_data::set_expire_date(::google::protobuf::int32 value) {
  set_has_expire_date();
  expire_date_ = value;
}

// optional bytes content = 8;
inline bool item_data::has_content() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void item_data::set_has_content() {
  _has_bits_[0] |= 0x00000080u;
}
inline void item_data::clear_has_content() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void item_data::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& item_data::content() const {
  return *content_;
}
inline void item_data::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void item_data::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void item_data::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* item_data::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* item_data::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void item_data::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// item_list_data

// optional .PB.GPS_TYPE type = 1 [default = GUT_ITEM_LIST_DATA];
inline bool item_list_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_list_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_list_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_list_data::clear_type() {
  type_ = 30;
  clear_has_type();
}
inline ::PB::GPS_TYPE item_list_data::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void item_list_data::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.item_data item_list = 2;
inline int item_list_data::item_list_size() const {
  return item_list_.size();
}
inline void item_list_data::clear_item_list() {
  item_list_.Clear();
}
inline const ::PB::item_data& item_list_data::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::PB::item_data* item_list_data::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::PB::item_data* item_list_data::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::item_data >&
item_list_data::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::item_data >*
item_list_data::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// xiulian_data

// optional .PB.item_list_data items = 2;
inline bool xiulian_data::has_items() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void xiulian_data::set_has_items() {
  _has_bits_[0] |= 0x00000001u;
}
inline void xiulian_data::clear_has_items() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void xiulian_data::clear_items() {
  if (items_ != NULL) items_->::PB::item_list_data::Clear();
  clear_has_items();
}
inline const ::PB::item_list_data& xiulian_data::items() const {
  return items_ != NULL ? *items_ : *default_instance_->items_;
}
inline ::PB::item_list_data* xiulian_data::mutable_items() {
  set_has_items();
  if (items_ == NULL) items_ = new ::PB::item_list_data;
  return items_;
}
inline ::PB::item_list_data* xiulian_data::release_items() {
  clear_has_items();
  ::PB::item_list_data* temp = items_;
  items_ = NULL;
  return temp;
}
inline void xiulian_data::set_allocated_items(::PB::item_list_data* items) {
  delete items_;
  items_ = items;
  if (items) {
    set_has_items();
  } else {
    clear_has_items();
  }
}

// -------------------------------------------------------------------

// pet_data

// optional .PB.GPS_TYPE type = 1 [default = GUT_PET_DATA];
inline bool pet_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_data::clear_type() {
  type_ = 27;
  clear_has_type();
}
inline ::PB::GPS_TYPE pet_data::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void pet_data::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 tid = 2;
inline bool pet_data::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_data::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_data::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_data::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 pet_data::tid() const {
  return tid_;
}
inline void pet_data::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 level = 3;
inline bool pet_data::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_data::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_data::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_data::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 pet_data::level() const {
  return level_;
}
inline void pet_data::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int64 exp = 4;
inline bool pet_data::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_data::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_data::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_data::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 pet_data::exp() const {
  return exp_;
}
inline void pet_data::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 quality_color = 5;
inline bool pet_data::has_quality_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pet_data::set_has_quality_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pet_data::clear_has_quality_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pet_data::clear_quality_color() {
  quality_color_ = 0;
  clear_has_quality_color();
}
inline ::google::protobuf::int32 pet_data::quality_color() const {
  return quality_color_;
}
inline void pet_data::set_quality_color(::google::protobuf::int32 value) {
  set_has_quality_color();
  quality_color_ = value;
}

// optional int32 quality_star = 6;
inline bool pet_data::has_quality_star() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pet_data::set_has_quality_star() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pet_data::clear_has_quality_star() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pet_data::clear_quality_star() {
  quality_star_ = 0;
  clear_has_quality_star();
}
inline ::google::protobuf::int32 pet_data::quality_star() const {
  return quality_star_;
}
inline void pet_data::set_quality_star(::google::protobuf::int32 value) {
  set_has_quality_star();
  quality_star_ = value;
}

// optional float talent = 7;
inline bool pet_data::has_talent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pet_data::set_has_talent() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pet_data::clear_has_talent() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pet_data::clear_talent() {
  talent_ = 0;
  clear_has_talent();
}
inline float pet_data::talent() const {
  return talent_;
}
inline void pet_data::set_talent(float value) {
  set_has_talent();
  talent_ = value;
}

// optional .PB.item_list_data equipment = 8;
inline bool pet_data::has_equipment() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pet_data::set_has_equipment() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pet_data::clear_has_equipment() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pet_data::clear_equipment() {
  if (equipment_ != NULL) equipment_->::PB::item_list_data::Clear();
  clear_has_equipment();
}
inline const ::PB::item_list_data& pet_data::equipment() const {
  return equipment_ != NULL ? *equipment_ : *default_instance_->equipment_;
}
inline ::PB::item_list_data* pet_data::mutable_equipment() {
  set_has_equipment();
  if (equipment_ == NULL) equipment_ = new ::PB::item_list_data;
  return equipment_;
}
inline ::PB::item_list_data* pet_data::release_equipment() {
  clear_has_equipment();
  ::PB::item_list_data* temp = equipment_;
  equipment_ = NULL;
  return temp;
}
inline void pet_data::set_allocated_equipment(::PB::item_list_data* equipment) {
  delete equipment_;
  equipment_ = equipment;
  if (equipment) {
    set_has_equipment();
  } else {
    clear_has_equipment();
  }
}

// optional bytes prop_data = 9;
inline bool pet_data::has_prop_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pet_data::set_has_prop_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pet_data::clear_has_prop_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pet_data::clear_prop_data() {
  if (prop_data_ != &::google::protobuf::internal::kEmptyString) {
    prop_data_->clear();
  }
  clear_has_prop_data();
}
inline const ::std::string& pet_data::prop_data() const {
  return *prop_data_;
}
inline void pet_data::set_prop_data(const ::std::string& value) {
  set_has_prop_data();
  if (prop_data_ == &::google::protobuf::internal::kEmptyString) {
    prop_data_ = new ::std::string;
  }
  prop_data_->assign(value);
}
inline void pet_data::set_prop_data(const char* value) {
  set_has_prop_data();
  if (prop_data_ == &::google::protobuf::internal::kEmptyString) {
    prop_data_ = new ::std::string;
  }
  prop_data_->assign(value);
}
inline void pet_data::set_prop_data(const void* value, size_t size) {
  set_has_prop_data();
  if (prop_data_ == &::google::protobuf::internal::kEmptyString) {
    prop_data_ = new ::std::string;
  }
  prop_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pet_data::mutable_prop_data() {
  set_has_prop_data();
  if (prop_data_ == &::google::protobuf::internal::kEmptyString) {
    prop_data_ = new ::std::string;
  }
  return prop_data_;
}
inline ::std::string* pet_data::release_prop_data() {
  clear_has_prop_data();
  if (prop_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prop_data_;
    prop_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pet_data::set_allocated_prop_data(::std::string* prop_data) {
  if (prop_data_ != &::google::protobuf::internal::kEmptyString) {
    delete prop_data_;
  }
  if (prop_data) {
    set_has_prop_data();
    prop_data_ = prop_data;
  } else {
    clear_has_prop_data();
    prop_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 skill_addon = 10;
inline int pet_data::skill_addon_size() const {
  return skill_addon_.size();
}
inline void pet_data::clear_skill_addon() {
  skill_addon_.Clear();
}
inline ::google::protobuf::int32 pet_data::skill_addon(int index) const {
  return skill_addon_.Get(index);
}
inline void pet_data::set_skill_addon(int index, ::google::protobuf::int32 value) {
  skill_addon_.Set(index, value);
}
inline void pet_data::add_skill_addon(::google::protobuf::int32 value) {
  skill_addon_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pet_data::skill_addon() const {
  return skill_addon_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pet_data::mutable_skill_addon() {
  return &skill_addon_;
}

// optional int32 pos_index = 11;
inline bool pet_data::has_pos_index() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pet_data::set_has_pos_index() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pet_data::clear_has_pos_index() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pet_data::clear_pos_index() {
  pos_index_ = 0;
  clear_has_pos_index();
}
inline ::google::protobuf::int32 pet_data::pos_index() const {
  return pos_index_;
}
inline void pet_data::set_pos_index(::google::protobuf::int32 value) {
  set_has_pos_index();
  pos_index_ = value;
}

// optional .PB.pet_data.PET_STATE fight_state = 12;
inline bool pet_data::has_fight_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pet_data::set_has_fight_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pet_data::clear_has_fight_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pet_data::clear_fight_state() {
  fight_state_ = 0;
  clear_has_fight_state();
}
inline ::PB::pet_data_PET_STATE pet_data::fight_state() const {
  return static_cast< ::PB::pet_data_PET_STATE >(fight_state_);
}
inline void pet_data::set_fight_state(::PB::pet_data_PET_STATE value) {
  assert(::PB::pet_data_PET_STATE_IsValid(value));
  set_has_fight_state();
  fight_state_ = value;
}

// optional int32 star_bless_value = 13;
inline bool pet_data::has_star_bless_value() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pet_data::set_has_star_bless_value() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pet_data::clear_has_star_bless_value() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pet_data::clear_star_bless_value() {
  star_bless_value_ = 0;
  clear_has_star_bless_value();
}
inline ::google::protobuf::int32 pet_data::star_bless_value() const {
  return star_bless_value_;
}
inline void pet_data::set_star_bless_value(::google::protobuf::int32 value) {
  set_has_star_bless_value();
  star_bless_value_ = value;
}

// optional int32 star_bless_stamp = 14;
inline bool pet_data::has_star_bless_stamp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void pet_data::set_has_star_bless_stamp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void pet_data::clear_has_star_bless_stamp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void pet_data::clear_star_bless_stamp() {
  star_bless_stamp_ = 0;
  clear_has_star_bless_stamp();
}
inline ::google::protobuf::int32 pet_data::star_bless_stamp() const {
  return star_bless_stamp_;
}
inline void pet_data::set_star_bless_stamp(::google::protobuf::int32 value) {
  set_has_star_bless_stamp();
  star_bless_stamp_ = value;
}

// optional int32 special_prop_1 = 15;
inline bool pet_data::has_special_prop_1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void pet_data::set_has_special_prop_1() {
  _has_bits_[0] |= 0x00004000u;
}
inline void pet_data::clear_has_special_prop_1() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void pet_data::clear_special_prop_1() {
  special_prop_1_ = 0;
  clear_has_special_prop_1();
}
inline ::google::protobuf::int32 pet_data::special_prop_1() const {
  return special_prop_1_;
}
inline void pet_data::set_special_prop_1(::google::protobuf::int32 value) {
  set_has_special_prop_1();
  special_prop_1_ = value;
}

// optional int32 special_prop_2 = 16;
inline bool pet_data::has_special_prop_2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void pet_data::set_has_special_prop_2() {
  _has_bits_[0] |= 0x00008000u;
}
inline void pet_data::clear_has_special_prop_2() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void pet_data::clear_special_prop_2() {
  special_prop_2_ = 0;
  clear_has_special_prop_2();
}
inline ::google::protobuf::int32 pet_data::special_prop_2() const {
  return special_prop_2_;
}
inline void pet_data::set_special_prop_2(::google::protobuf::int32 value) {
  set_has_special_prop_2();
  special_prop_2_ = value;
}

// optional int32 skill_unlock = 17;
inline bool pet_data::has_skill_unlock() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void pet_data::set_has_skill_unlock() {
  _has_bits_[0] |= 0x00010000u;
}
inline void pet_data::clear_has_skill_unlock() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void pet_data::clear_skill_unlock() {
  skill_unlock_ = 0;
  clear_has_skill_unlock();
}
inline ::google::protobuf::int32 pet_data::skill_unlock() const {
  return skill_unlock_;
}
inline void pet_data::set_skill_unlock(::google::protobuf::int32 value) {
  set_has_skill_unlock();
  skill_unlock_ = value;
}

// optional int32 base_ratio = 18;
inline bool pet_data::has_base_ratio() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void pet_data::set_has_base_ratio() {
  _has_bits_[0] |= 0x00020000u;
}
inline void pet_data::clear_has_base_ratio() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void pet_data::clear_base_ratio() {
  base_ratio_ = 0;
  clear_has_base_ratio();
}
inline ::google::protobuf::int32 pet_data::base_ratio() const {
  return base_ratio_;
}
inline void pet_data::set_base_ratio(::google::protobuf::int32 value) {
  set_has_base_ratio();
  base_ratio_ = value;
}

// repeated int32 base_prop_ratio = 19;
inline int pet_data::base_prop_ratio_size() const {
  return base_prop_ratio_.size();
}
inline void pet_data::clear_base_prop_ratio() {
  base_prop_ratio_.Clear();
}
inline ::google::protobuf::int32 pet_data::base_prop_ratio(int index) const {
  return base_prop_ratio_.Get(index);
}
inline void pet_data::set_base_prop_ratio(int index, ::google::protobuf::int32 value) {
  base_prop_ratio_.Set(index, value);
}
inline void pet_data::add_base_prop_ratio(::google::protobuf::int32 value) {
  base_prop_ratio_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pet_data::base_prop_ratio() const {
  return base_prop_ratio_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pet_data::mutable_base_prop_ratio() {
  return &base_prop_ratio_;
}

// -------------------------------------------------------------------

// pet_list_data

// optional .PB.GPS_TYPE type = 1 [default = GUT_PET_LIST_DATA];
inline bool pet_list_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_list_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_list_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_list_data::clear_type() {
  type_ = 28;
  clear_has_type();
}
inline ::PB::GPS_TYPE pet_list_data::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void pet_list_data::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 list_capacity = 2;
inline bool pet_list_data::has_list_capacity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_list_data::set_has_list_capacity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_list_data::clear_has_list_capacity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_list_data::clear_list_capacity() {
  list_capacity_ = 0;
  clear_has_list_capacity();
}
inline ::google::protobuf::int32 pet_list_data::list_capacity() const {
  return list_capacity_;
}
inline void pet_list_data::set_list_capacity(::google::protobuf::int32 value) {
  set_has_list_capacity();
  list_capacity_ = value;
}

// repeated .PB.pet_data pet_list = 3;
inline int pet_list_data::pet_list_size() const {
  return pet_list_.size();
}
inline void pet_list_data::clear_pet_list() {
  pet_list_.Clear();
}
inline const ::PB::pet_data& pet_list_data::pet_list(int index) const {
  return pet_list_.Get(index);
}
inline ::PB::pet_data* pet_list_data::mutable_pet_list(int index) {
  return pet_list_.Mutable(index);
}
inline ::PB::pet_data* pet_list_data::add_pet_list() {
  return pet_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::pet_data >&
pet_list_data::pet_list() const {
  return pet_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::pet_data >*
pet_list_data::mutable_pet_list() {
  return &pet_list_;
}

// -------------------------------------------------------------------

// gp_pet_list_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_pet_list_info];
inline bool gp_pet_list_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_pet_list_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_pet_list_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_pet_list_info::clear_type() {
  type_ = 607;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_pet_list_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_pet_list_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.pet_list_data pet_list = 2;
inline bool gp_pet_list_info::has_pet_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_pet_list_info::set_has_pet_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_pet_list_info::clear_has_pet_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_pet_list_info::clear_pet_list() {
  if (pet_list_ != NULL) pet_list_->::PB::pet_list_data::Clear();
  clear_has_pet_list();
}
inline const ::PB::pet_list_data& gp_pet_list_info::pet_list() const {
  return pet_list_ != NULL ? *pet_list_ : *default_instance_->pet_list_;
}
inline ::PB::pet_list_data* gp_pet_list_info::mutable_pet_list() {
  set_has_pet_list();
  if (pet_list_ == NULL) pet_list_ = new ::PB::pet_list_data;
  return pet_list_;
}
inline ::PB::pet_list_data* gp_pet_list_info::release_pet_list() {
  clear_has_pet_list();
  ::PB::pet_list_data* temp = pet_list_;
  pet_list_ = NULL;
  return temp;
}
inline void gp_pet_list_info::set_allocated_pet_list(::PB::pet_list_data* pet_list) {
  delete pet_list_;
  pet_list_ = pet_list;
  if (pet_list) {
    set_has_pet_list();
  } else {
    clear_has_pet_list();
  }
}

// -------------------------------------------------------------------

// gp_pet_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_pet_info];
inline bool gp_pet_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_pet_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_pet_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_pet_info::clear_type() {
  type_ = 608;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_pet_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_pet_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 list_pos = 2;
inline bool gp_pet_info::has_list_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_pet_info::set_has_list_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_pet_info::clear_has_list_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_pet_info::clear_list_pos() {
  list_pos_ = 0;
  clear_has_list_pos();
}
inline ::google::protobuf::int32 gp_pet_info::list_pos() const {
  return list_pos_;
}
inline void gp_pet_info::set_list_pos(::google::protobuf::int32 value) {
  set_has_list_pos();
  list_pos_ = value;
}

// optional .PB.pet_data pet_info = 3;
inline bool gp_pet_info::has_pet_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_pet_info::set_has_pet_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_pet_info::clear_has_pet_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_pet_info::clear_pet_info() {
  if (pet_info_ != NULL) pet_info_->::PB::pet_data::Clear();
  clear_has_pet_info();
}
inline const ::PB::pet_data& gp_pet_info::pet_info() const {
  return pet_info_ != NULL ? *pet_info_ : *default_instance_->pet_info_;
}
inline ::PB::pet_data* gp_pet_info::mutable_pet_info() {
  set_has_pet_info();
  if (pet_info_ == NULL) pet_info_ = new ::PB::pet_data;
  return pet_info_;
}
inline ::PB::pet_data* gp_pet_info::release_pet_info() {
  clear_has_pet_info();
  ::PB::pet_data* temp = pet_info_;
  pet_info_ = NULL;
  return temp;
}
inline void gp_pet_info::set_allocated_pet_info(::PB::pet_data* pet_info) {
  delete pet_info_;
  pet_info_ = pet_info;
  if (pet_info) {
    set_has_pet_info();
  } else {
    clear_has_pet_info();
  }
}

// optional int32 has_equip = 4;
inline bool gp_pet_info::has_has_equip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_pet_info::set_has_has_equip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_pet_info::clear_has_has_equip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_pet_info::clear_has_equip() {
  has_equip_ = 0;
  clear_has_has_equip();
}
inline ::google::protobuf::int32 gp_pet_info::has_equip() const {
  return has_equip_;
}
inline void gp_pet_info::set_has_equip(::google::protobuf::int32 value) {
  set_has_has_equip();
  has_equip_ = value;
}

// -------------------------------------------------------------------

// gp_pet_operate_re

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_pet_operate_re];
inline bool gp_pet_operate_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_pet_operate_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_pet_operate_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_pet_operate_re::clear_type() {
  type_ = 609;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_pet_operate_re::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_pet_operate_re::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 oper_type = 2;
inline bool gp_pet_operate_re::has_oper_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_pet_operate_re::set_has_oper_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_pet_operate_re::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_pet_operate_re::clear_oper_type() {
  oper_type_ = 0;
  clear_has_oper_type();
}
inline ::google::protobuf::int32 gp_pet_operate_re::oper_type() const {
  return oper_type_;
}
inline void gp_pet_operate_re::set_oper_type(::google::protobuf::int32 value) {
  set_has_oper_type();
  oper_type_ = value;
}

// optional int32 oper_retcode = 3;
inline bool gp_pet_operate_re::has_oper_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_pet_operate_re::set_has_oper_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_pet_operate_re::clear_has_oper_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_pet_operate_re::clear_oper_retcode() {
  oper_retcode_ = 0;
  clear_has_oper_retcode();
}
inline ::google::protobuf::int32 gp_pet_operate_re::oper_retcode() const {
  return oper_retcode_;
}
inline void gp_pet_operate_re::set_oper_retcode(::google::protobuf::int32 value) {
  set_has_oper_retcode();
  oper_retcode_ = value;
}

// optional int32 result_param1 = 4;
inline bool gp_pet_operate_re::has_result_param1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_pet_operate_re::set_has_result_param1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_pet_operate_re::clear_has_result_param1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_pet_operate_re::clear_result_param1() {
  result_param1_ = 0;
  clear_has_result_param1();
}
inline ::google::protobuf::int32 gp_pet_operate_re::result_param1() const {
  return result_param1_;
}
inline void gp_pet_operate_re::set_result_param1(::google::protobuf::int32 value) {
  set_has_result_param1();
  result_param1_ = value;
}

// optional int32 result_param2 = 5;
inline bool gp_pet_operate_re::has_result_param2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_pet_operate_re::set_has_result_param2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_pet_operate_re::clear_has_result_param2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_pet_operate_re::clear_result_param2() {
  result_param2_ = 0;
  clear_has_result_param2();
}
inline ::google::protobuf::int32 gp_pet_operate_re::result_param2() const {
  return result_param2_;
}
inline void gp_pet_operate_re::set_result_param2(::google::protobuf::int32 value) {
  set_has_result_param2();
  result_param2_ = value;
}

// -------------------------------------------------------------------

// gp_level_extern_info

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_level_extern_info];
inline bool gp_level_extern_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_level_extern_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_level_extern_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_level_extern_info::clear_type() {
  type_ = 610;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_level_extern_info::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_level_extern_info::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.instance_extend_info info = 2;
inline bool gp_level_extern_info::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_level_extern_info::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_level_extern_info::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_level_extern_info::clear_info() {
  if (info_ != NULL) info_->::PB::instance_extend_info::Clear();
  clear_has_info();
}
inline const ::PB::instance_extend_info& gp_level_extern_info::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PB::instance_extend_info* gp_level_extern_info::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PB::instance_extend_info;
  return info_;
}
inline ::PB::instance_extend_info* gp_level_extern_info::release_info() {
  clear_has_info();
  ::PB::instance_extend_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void gp_level_extern_info::set_allocated_info(::PB::instance_extend_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// gp_buff_broken

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_def_buff_broken];
inline bool gp_buff_broken::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_buff_broken::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_buff_broken::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_buff_broken::clear_type() {
  type_ = 611;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_buff_broken::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_buff_broken::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 roleid = 2;
inline bool gp_buff_broken::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_buff_broken::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_buff_broken::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_buff_broken::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 gp_buff_broken::roleid() const {
  return roleid_;
}
inline void gp_buff_broken::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 skillid = 3;
inline bool gp_buff_broken::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_buff_broken::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_buff_broken::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_buff_broken::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 gp_buff_broken::skillid() const {
  return skillid_;
}
inline void gp_buff_broken::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional int32 buffid = 4;
inline bool gp_buff_broken::has_buffid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_buff_broken::set_has_buffid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_buff_broken::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_buff_broken::clear_buffid() {
  buffid_ = 0;
  clear_has_buffid();
}
inline ::google::protobuf::int32 gp_buff_broken::buffid() const {
  return buffid_;
}
inline void gp_buff_broken::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
}

// optional int32 effectid = 5;
inline bool gp_buff_broken::has_effectid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_buff_broken::set_has_effectid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_buff_broken::clear_has_effectid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_buff_broken::clear_effectid() {
  effectid_ = 0;
  clear_has_effectid();
}
inline ::google::protobuf::int32 gp_buff_broken::effectid() const {
  return effectid_;
}
inline void gp_buff_broken::set_effectid(::google::protobuf::int32 value) {
  set_has_effectid();
  effectid_ = value;
}

// -------------------------------------------------------------------

// npt_pixiu_buy_records

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RESET_DOUBLERECHAGE];
inline bool npt_pixiu_buy_records::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_pixiu_buy_records::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_pixiu_buy_records::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_pixiu_buy_records::clear_type() {
  type_ = 116;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_pixiu_buy_records::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_pixiu_buy_records::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 roleid = 2;
inline bool npt_pixiu_buy_records::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_pixiu_buy_records::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_pixiu_buy_records::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_pixiu_buy_records::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_pixiu_buy_records::roleid() const {
  return roleid_;
}
inline void npt_pixiu_buy_records::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// repeated .PB.pixiu_service_buy_record record = 3;
inline int npt_pixiu_buy_records::record_size() const {
  return record_.size();
}
inline void npt_pixiu_buy_records::clear_record() {
  record_.Clear();
}
inline const ::PB::pixiu_service_buy_record& npt_pixiu_buy_records::record(int index) const {
  return record_.Get(index);
}
inline ::PB::pixiu_service_buy_record* npt_pixiu_buy_records::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::PB::pixiu_service_buy_record* npt_pixiu_buy_records::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::pixiu_service_buy_record >&
npt_pixiu_buy_records::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::pixiu_service_buy_record >*
npt_pixiu_buy_records::mutable_record() {
  return &record_;
}

// optional int64 firstbuy_sn = 4 [default = 0];
inline bool npt_pixiu_buy_records::has_firstbuy_sn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_pixiu_buy_records::set_has_firstbuy_sn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_pixiu_buy_records::clear_has_firstbuy_sn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_pixiu_buy_records::clear_firstbuy_sn() {
  firstbuy_sn_ = GOOGLE_LONGLONG(0);
  clear_has_firstbuy_sn();
}
inline ::google::protobuf::int64 npt_pixiu_buy_records::firstbuy_sn() const {
  return firstbuy_sn_;
}
inline void npt_pixiu_buy_records::set_firstbuy_sn(::google::protobuf::int64 value) {
  set_has_firstbuy_sn();
  firstbuy_sn_ = value;
}

// optional int64 system_firstbuy_sn = 5 [default = 0];
inline bool npt_pixiu_buy_records::has_system_firstbuy_sn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_pixiu_buy_records::set_has_system_firstbuy_sn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_pixiu_buy_records::clear_has_system_firstbuy_sn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_pixiu_buy_records::clear_system_firstbuy_sn() {
  system_firstbuy_sn_ = GOOGLE_LONGLONG(0);
  clear_has_system_firstbuy_sn();
}
inline ::google::protobuf::int64 npt_pixiu_buy_records::system_firstbuy_sn() const {
  return system_firstbuy_sn_;
}
inline void npt_pixiu_buy_records::set_system_firstbuy_sn(::google::protobuf::int64 value) {
  set_has_system_firstbuy_sn();
  system_firstbuy_sn_ = value;
}

// optional bool reset_doublecharge = 6 [default = false];
inline bool npt_pixiu_buy_records::has_reset_doublecharge() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_pixiu_buy_records::set_has_reset_doublecharge() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_pixiu_buy_records::clear_has_reset_doublecharge() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_pixiu_buy_records::clear_reset_doublecharge() {
  reset_doublecharge_ = false;
  clear_has_reset_doublecharge();
}
inline bool npt_pixiu_buy_records::reset_doublecharge() const {
  return reset_doublecharge_;
}
inline void npt_pixiu_buy_records::set_reset_doublecharge(bool value) {
  set_has_reset_doublecharge();
  reset_doublecharge_ = value;
}

// -------------------------------------------------------------------

// gp_pet_object_fight

// optional .PB.S2C_GS_PROTOC_TYPE type = 1 [default = type_gp_pet_object_fight];
inline bool gp_pet_object_fight::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_pet_object_fight::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_pet_object_fight::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_pet_object_fight::clear_type() {
  type_ = 613;
  clear_has_type();
}
inline ::PB::S2C_GS_PROTOC_TYPE gp_pet_object_fight::type() const {
  return static_cast< ::PB::S2C_GS_PROTOC_TYPE >(type_);
}
inline void gp_pet_object_fight::set_type(::PB::S2C_GS_PROTOC_TYPE value) {
  assert(::PB::S2C_GS_PROTOC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 roleid = 2;
inline bool gp_pet_object_fight::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_pet_object_fight::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_pet_object_fight::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_pet_object_fight::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 gp_pet_object_fight::roleid() const {
  return roleid_;
}
inline void gp_pet_object_fight::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional uint64 object_state = 3;
inline bool gp_pet_object_fight::has_object_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gp_pet_object_fight::set_has_object_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gp_pet_object_fight::clear_has_object_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gp_pet_object_fight::clear_object_state() {
  object_state_ = GOOGLE_ULONGLONG(0);
  clear_has_object_state();
}
inline ::google::protobuf::uint64 gp_pet_object_fight::object_state() const {
  return object_state_;
}
inline void gp_pet_object_fight::set_object_state(::google::protobuf::uint64 value) {
  set_has_object_state();
  object_state_ = value;
}

// optional int32 pet_tid = 4;
inline bool gp_pet_object_fight::has_pet_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gp_pet_object_fight::set_has_pet_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gp_pet_object_fight::clear_has_pet_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gp_pet_object_fight::clear_pet_tid() {
  pet_tid_ = 0;
  clear_has_pet_tid();
}
inline ::google::protobuf::int32 gp_pet_object_fight::pet_tid() const {
  return pet_tid_;
}
inline void gp_pet_object_fight::set_pet_tid(::google::protobuf::int32 value) {
  set_has_pet_tid();
  pet_tid_ = value;
}

// optional int32 pet_star = 5;
inline bool gp_pet_object_fight::has_pet_star() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gp_pet_object_fight::set_has_pet_star() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gp_pet_object_fight::clear_has_pet_star() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gp_pet_object_fight::clear_pet_star() {
  pet_star_ = 0;
  clear_has_pet_star();
}
inline ::google::protobuf::int32 gp_pet_object_fight::pet_star() const {
  return pet_star_;
}
inline void gp_pet_object_fight::set_pet_star(::google::protobuf::int32 value) {
  set_has_pet_star();
  pet_star_ = value;
}

// optional int32 pet_level = 6;
inline bool gp_pet_object_fight::has_pet_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gp_pet_object_fight::set_has_pet_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gp_pet_object_fight::clear_has_pet_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gp_pet_object_fight::clear_pet_level() {
  pet_level_ = 0;
  clear_has_pet_level();
}
inline ::google::protobuf::int32 gp_pet_object_fight::pet_level() const {
  return pet_level_;
}
inline void gp_pet_object_fight::set_pet_level(::google::protobuf::int32 value) {
  set_has_pet_level();
  pet_level_ = value;
}

// -------------------------------------------------------------------

// gp_zone_sn

// optional int32 zoneid = 1;
inline bool gp_zone_sn::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_zone_sn::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_zone_sn::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_zone_sn::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 gp_zone_sn::zoneid() const {
  return zoneid_;
}
inline void gp_zone_sn::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// optional int64 game_sn = 2;
inline bool gp_zone_sn::has_game_sn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gp_zone_sn::set_has_game_sn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gp_zone_sn::clear_has_game_sn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gp_zone_sn::clear_game_sn() {
  game_sn_ = GOOGLE_LONGLONG(0);
  clear_has_game_sn();
}
inline ::google::protobuf::int64 gp_zone_sn::game_sn() const {
  return game_sn_;
}
inline void gp_zone_sn::set_game_sn(::google::protobuf::int64 value) {
  set_has_game_sn();
  game_sn_ = value;
}

// -------------------------------------------------------------------

// gp_zonelist

// optional .PB.GPS_TYPE type = 1 [default = GUT_ZONELIST];
inline bool gp_zonelist::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gp_zonelist::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gp_zonelist::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gp_zonelist::clear_type() {
  type_ = 31;
  clear_has_type();
}
inline ::PB::GPS_TYPE gp_zonelist::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void gp_zonelist::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.gp_zone_sn zones = 2;
inline int gp_zonelist::zones_size() const {
  return zones_.size();
}
inline void gp_zonelist::clear_zones() {
  zones_.Clear();
}
inline const ::PB::gp_zone_sn& gp_zonelist::zones(int index) const {
  return zones_.Get(index);
}
inline ::PB::gp_zone_sn* gp_zonelist::mutable_zones(int index) {
  return zones_.Mutable(index);
}
inline ::PB::gp_zone_sn* gp_zonelist::add_zones() {
  return zones_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::gp_zone_sn >&
gp_zonelist::zones() const {
  return zones_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::gp_zone_sn >*
gp_zonelist::mutable_zones() {
  return &zones_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::zhaojiling_info_ZHAOJI_TYPE>() {
  return ::PB::zhaojiling_info_ZHAOJI_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::greeting_info_GREETING_TYPE>() {
  return ::PB::greeting_info_GREETING_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::ask_help_info_relation_type>() {
  return ::PB::ask_help_info_relation_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_corps_appoint_CORPS_APPOINT_OP>() {
  return ::PB::npt_corps_appoint_CORPS_APPOINT_OP_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_sync_mirror_info_MIRROR_STATE_MASK>() {
  return ::PB::npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_get_player_profile_GET_PROFILE_MASK>() {
  return ::PB::npt_get_player_profile_GET_PROFILE_MASK_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_nationwar_event_NNE_TYPE>() {
  return ::PB::npt_nationwar_event_NNE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_request_info_INFO_TYPE>() {
  return ::PB::npt_request_info_INFO_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_nation_shutup_reply_RESULT_TYPE>() {
  return ::PB::npt_nation_shutup_reply_RESULT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_greeting_info_sync_SYNC_TYPE>() {
  return ::PB::npt_greeting_info_sync_SYNC_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_team_recruit_operate_OPERATE_TYPE>() {
  return ::PB::npt_team_recruit_operate_OPERATE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_team_recruit_operate_reply_RESULT>() {
  return ::PB::npt_team_recruit_operate_reply_RESULT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_battle_auto_match_OP_TYPE>() {
  return ::PB::npt_battle_auto_match_OP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_nest_common_operation_NEST_OP>() {
  return ::PB::npt_nest_common_operation_NEST_OP_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_card_operate_OP_TYPE>() {
  return ::PB::gp_card_operate_OP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_auto_reward_op_OP_TYPE>() {
  return ::PB::gp_auto_reward_op_OP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_mount_operation_OP_TYPE>() {
  return ::PB::gp_mount_operation_OP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_vip_operation_OP_TYPE>() {
  return ::PB::gp_vip_operation_OP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_vip_operation_LOGOUT_EXP_TYPE>() {
  return ::PB::gp_vip_operation_LOGOUT_EXP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_black_shop_command_BS_CMD_TYPE>() {
  return ::PB::gp_black_shop_command_BS_CMD_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_climbtower_shop_command_BS_CMD_TYPE>() {
  return ::PB::gp_climbtower_shop_command_BS_CMD_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_duke_command_DUKE_CMD_TYPE>() {
  return ::PB::gp_duke_command_DUKE_CMD_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_hero_trial_command_CMD_TYPE>() {
  return ::PB::gp_hero_trial_command_CMD_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_corp_farm_op_FARM_OP>() {
  return ::PB::gp_corp_farm_op_FARM_OP_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_climb_tower_op_CLIMB_OP>() {
  return ::PB::gp_climb_tower_op_CLIMB_OP_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_plant_PLANT_OP>() {
  return ::PB::gp_plant_PLANT_OP_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_common_operation_COMMON_OP>() {
  return ::PB::gp_common_operation_COMMON_OP_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_upgrade_chariot_UPGRADE_TYPE>() {
  return ::PB::gp_upgrade_chariot_UPGRADE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE>() {
  return ::PB::gp_wuhun_upgrade_WUHUN_UPGRADE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_lantern_LANTERN_TYPE>() {
  return ::PB::gp_lantern_LANTERN_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_exchange_activity_EXCHANGE_TYPE>() {
  return ::PB::gp_exchange_activity_EXCHANGE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_pet_operate_OPERATE_TYPE>() {
  return ::PB::gp_pet_operate_OPERATE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_general_soul_op_soul_operation>() {
  return ::PB::gp_general_soul_op_soul_operation_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_general_soul_equip_op_soul_operation>() {
  return ::PB::gp_general_soul_equip_op_soul_operation_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_broadcast_value_change_VALUE_TYPE>() {
  return ::PB::gp_broadcast_value_change_VALUE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_bingfa_info_BINGFA_INFO_TYPE>() {
  return ::PB::gp_bingfa_info_BINGFA_INFO_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_wuhun_info_WUHUN_INFO_TYPE>() {
  return ::PB::gp_wuhun_info_WUHUN_INFO_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_wuhun_info_WUHUN_UPGRADE_STATE>() {
  return ::PB::gp_wuhun_info_WUHUN_UPGRADE_STATE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_hero_incre_info_CMD_TYPE>() {
  return ::PB::gp_hero_incre_info_CMD_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_operation_result_OPER_TYPE>() {
  return ::PB::gp_operation_result_OPER_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_operation_result_OPER_RESULT>() {
  return ::PB::gp_operation_result_OPER_RESULT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_card_data_notify_N_TYPE>() {
  return ::PB::gp_card_data_notify_N_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_magicshop_notify_NOTIFY_TYPE>() {
  return ::PB::gp_magicshop_notify_NOTIFY_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_blackshop_notify_NOTIFY_TYPE>() {
  return ::PB::gp_blackshop_notify_NOTIFY_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_duke_notify_NOTIFY_TYPE>() {
  return ::PB::gp_duke_notify_NOTIFY_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::gp_notify_cash_change_CC_TYPE>() {
  return ::PB::gp_notify_cash_change_CC_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_send_tlog_info_TLOG_TYPE>() {
  return ::PB::npt_send_tlog_info_TLOG_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_greet_invest_award_AWARD_TYPE>() {
  return ::PB::npt_greet_invest_award_AWARD_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_wine_game_operate_OPER_TYPE>() {
  return ::PB::npt_wine_game_operate_OPER_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::region_history_EVNET_TYPE>() {
  return ::PB::region_history_EVNET_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_region_war_operate_OPER_TYPE>() {
  return ::PB::npt_region_war_operate_OPER_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_region_war_get_info_re_OPER_TYPE>() {
  return ::PB::npt_region_war_get_info_re_OPER_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_region_war_operate_re_OPER_TYPE>() {
  return ::PB::npt_region_war_operate_re_OPER_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::pet_data_PET_STATE>() {
  return ::PB::pet_data_PET_STATE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::GPS_TYPE>() {
  return ::PB::GPS_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::CORPS_POSITION>() {
  return ::PB::CORPS_POSITION_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::MIRROR_STATE>() {
  return ::PB::MIRROR_STATE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::ask_help_info_type>() {
  return ::PB::ask_help_info_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::NET_PROTOCBUF_TYPE>() {
  return ::PB::NET_PROTOCBUF_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::C2S_GS_PROTOC_TYPE>() {
  return ::PB::C2S_GS_PROTOC_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::use_money_type>() {
  return ::PB::use_money_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::STUNT_CONFIG_TYPE>() {
  return ::PB::STUNT_CONFIG_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::S2C_GS_PROTOC_TYPE>() {
  return ::PB::S2C_GS_PROTOC_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PB_2fnet_5fcommon_2eproto__INCLUDED
