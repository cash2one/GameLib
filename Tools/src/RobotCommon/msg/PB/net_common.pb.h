// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PB/net_common.proto

#ifndef PROTOBUF_PB_2fnet_5fcommon_2eproto__INCLUDED
#define PROTOBUF_PB_2fnet_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

class a3d_pos;
class player_id_name;
class general_list;
class general_list_item_data;
class simple_list;
class test_data;
class other_player_profile_from_gs;
class corp_chariot;
class corp_chariot_chariot_info;
class corp_repu;
class ipt_mirror_info;
class zhaojiling_info;
class corps_member;
class corps_apply_t;
class corp_attribute;
class corp_attribute_corp_skill_room;
class corps_struct;
class facebook_str;
class face_book;
class idip_role_info;
class role_list_custom;
class gs_role_mutable_data;
class nation_war_history;
class blessing_info;
class card_info;
class greeting_info;
class ask_help_info;
class roam_match_info;
class db_roam_record_info;
class db_roam_record_data;
class instance_extend_info;
class corp_farmland;
class enter_instance_config;
class enter_instance_config_client_config;
class enter_instance_config_server_config;
class player_corps_attr_config;
class player_corps_attr_config_rent_chariot_info;
class player_stune_config;
class player_stune_config_player_rune_prop_config;
class player_stune_config_player_rune_config;
class player_stune_config_config_set;
class black_shop_info;
class black_shop_info_black_shop_goods_info;
class climbtower_magic_shop_info;
class climbtower_magic_shop_info_magic_shop_goods_info;
class db_hero_trial_config;
class level_shopid;
class db_strategy_info;
class db_strategy_vectors;
class db_surface_soul;
class db_wing_refine_soul;
class db_refine_surfaces;
class db_equip_soul;
class db_equip_fixed_data;
class db_magic_weapon;
class db_magic_weapon_property;
class db_magic_weapon_refine_group;
class db_magic_weapon_refine_group_refine;
class db_magic_weapons;
class db_general_soul;
class db_general_souls;
class wine_game_history;
class pixiu_service_buy_record;
class npt_test;
class npt_response;
class npt_corps_appoint;
class npt_apply_corps;
class npt_corps_data;
class name_ruid;
class npt_common_search;
class npt_common_search_search_corps_key;
class npt_common_search_search_player_key;
class npt_zhaojiling;
class npt_sync_mirror_info;
class npt_sync_nation_war_info;
class npt_sync_nation_war_info_nwar_npc_info;
class npt_get_corp_name;
class npt_nation_war_operate;
class npt_nation_war_operate_info;
class npt_nation_war_operate_info_re;
class npt_team_invite;
class npt_friend_invite;
class npt_team_info;
class npt_team_info_team_info;
class other_player_profile;
class npt_get_player_profile;
class npt_blessing_info;
class npt_nationwar_event;
class npt_nation_shutup;
class npt_nation_shutup_info;
class npt_nation_commander_appoint;
class npt_nation_commander_notify;
class npt_nation_war_history;
class npt_request_info;
class npt_nation_shutup_reply;
class npt_greeting_info_sync;
class npt_greeting_reply;
class npt_ask_help;
class npt_send_server_midas_info;
class npt_send_tencent_secure_info;
class npt_send_client_midas_info;
class npt_send_midas_bad_token;
class npt_officer_gift_get;
class npt_officer_gift_notify;
class npt_weak_nation_gift_get;
class npt_weak_nation_gift_notify;
class npt_server_info_notify;
class npt_team_recruit_operate;
class recruit_info;
class npt_team_recruit_operate_reply;
class npt_update_grc_info;
class npt_grc_get_friend_info;
class npt_grc_send_gift;
class npt_grc_rcv_gift;
class grc_friend_info;
class npt_grc_friend_list;
class grc_gift_info;
class grc_user_gift_info;
class npt_grc_gift_list;
class npt_grc_send_gift_re;
class npt_grc_rcv_gift_re;

enum zhaojiling_info_ZHAOJI_TYPE {
  zhaojiling_info_ZHAOJI_TYPE_ZT_ITEM = 0,
  zhaojiling_info_ZHAOJI_TYPE_ZT_NATION_WAR_START = 1,
  zhaojiling_info_ZHAOJI_TYPE_ZT_NATION_WAR_ROLE = 2,
  zhaojiling_info_ZHAOJI_TYPE_ZT_SUCCOR = 3
};
bool zhaojiling_info_ZHAOJI_TYPE_IsValid(int value);
const zhaojiling_info_ZHAOJI_TYPE zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_MIN = zhaojiling_info_ZHAOJI_TYPE_ZT_ITEM;
const zhaojiling_info_ZHAOJI_TYPE zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_MAX = zhaojiling_info_ZHAOJI_TYPE_ZT_SUCCOR;
const int zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_ARRAYSIZE = zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* zhaojiling_info_ZHAOJI_TYPE_descriptor();
inline const ::std::string& zhaojiling_info_ZHAOJI_TYPE_Name(zhaojiling_info_ZHAOJI_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    zhaojiling_info_ZHAOJI_TYPE_descriptor(), value);
}
inline bool zhaojiling_info_ZHAOJI_TYPE_Parse(
    const ::std::string& name, zhaojiling_info_ZHAOJI_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<zhaojiling_info_ZHAOJI_TYPE>(
    zhaojiling_info_ZHAOJI_TYPE_descriptor(), name, value);
}
enum greeting_info_GREETING_TYPE {
  greeting_info_GREETING_TYPE_GREETING_INVITE = 1,
  greeting_info_GREETING_TYPE_GREETING_GRANT = 2,
  greeting_info_GREETING_TYPE_GREETING_THANKS = 3
};
bool greeting_info_GREETING_TYPE_IsValid(int value);
const greeting_info_GREETING_TYPE greeting_info_GREETING_TYPE_GREETING_TYPE_MIN = greeting_info_GREETING_TYPE_GREETING_INVITE;
const greeting_info_GREETING_TYPE greeting_info_GREETING_TYPE_GREETING_TYPE_MAX = greeting_info_GREETING_TYPE_GREETING_THANKS;
const int greeting_info_GREETING_TYPE_GREETING_TYPE_ARRAYSIZE = greeting_info_GREETING_TYPE_GREETING_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* greeting_info_GREETING_TYPE_descriptor();
inline const ::std::string& greeting_info_GREETING_TYPE_Name(greeting_info_GREETING_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    greeting_info_GREETING_TYPE_descriptor(), value);
}
inline bool greeting_info_GREETING_TYPE_Parse(
    const ::std::string& name, greeting_info_GREETING_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<greeting_info_GREETING_TYPE>(
    greeting_info_GREETING_TYPE_descriptor(), name, value);
}
enum ask_help_info_relation_type {
  ask_help_info_relation_type_RT_STRANGER = 0,
  ask_help_info_relation_type_RT_CORP = 1,
  ask_help_info_relation_type_RT_NATION = 2
};
bool ask_help_info_relation_type_IsValid(int value);
const ask_help_info_relation_type ask_help_info_relation_type_relation_type_MIN = ask_help_info_relation_type_RT_STRANGER;
const ask_help_info_relation_type ask_help_info_relation_type_relation_type_MAX = ask_help_info_relation_type_RT_NATION;
const int ask_help_info_relation_type_relation_type_ARRAYSIZE = ask_help_info_relation_type_relation_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ask_help_info_relation_type_descriptor();
inline const ::std::string& ask_help_info_relation_type_Name(ask_help_info_relation_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ask_help_info_relation_type_descriptor(), value);
}
inline bool ask_help_info_relation_type_Parse(
    const ::std::string& name, ask_help_info_relation_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ask_help_info_relation_type>(
    ask_help_info_relation_type_descriptor(), name, value);
}
enum npt_corps_appoint_CORPS_APPOINT_OP {
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ADD = 1,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_DEL = 2,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT = 3,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_DISMISS = 4,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_QUIT = 5,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ANNOUNCE = 6,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE = 7,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ABDICATE = 8,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ACTIVITY = 9,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_INVITE = 10,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_REJECT = 11,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_AGREE = 12,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_GETDATA = 13,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_BRIEF = 14,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_CONTRI = 15,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE_SKILL = 16,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE_SHOP = 17,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE_SKILL2 = 18,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ATTR = 19,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_SUMMON = 20,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_FIRE = 21,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_CHARIOT = 22,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UP_CHA = 23,
  npt_corps_appoint_CORPS_APPOINT_OP_CORPS_RECL_CHA = 24
};
bool npt_corps_appoint_CORPS_APPOINT_OP_IsValid(int value);
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_MIN = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ADD;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_MAX = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_RECL_CHA;
const int npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_ARRAYSIZE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_corps_appoint_CORPS_APPOINT_OP_descriptor();
inline const ::std::string& npt_corps_appoint_CORPS_APPOINT_OP_Name(npt_corps_appoint_CORPS_APPOINT_OP value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_corps_appoint_CORPS_APPOINT_OP_descriptor(), value);
}
inline bool npt_corps_appoint_CORPS_APPOINT_OP_Parse(
    const ::std::string& name, npt_corps_appoint_CORPS_APPOINT_OP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_corps_appoint_CORPS_APPOINT_OP>(
    npt_corps_appoint_CORPS_APPOINT_OP_descriptor(), name, value);
}
enum npt_sync_mirror_info_MIRROR_STATE_MASK {
  npt_sync_mirror_info_MIRROR_STATE_MASK_MS_FORBIT_MIRROR_STATE = 1,
  npt_sync_mirror_info_MIRROR_STATE_MASK_MS_IN_NATION_WAR = 2
};
bool npt_sync_mirror_info_MIRROR_STATE_MASK_IsValid(int value);
const npt_sync_mirror_info_MIRROR_STATE_MASK npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_MIN = npt_sync_mirror_info_MIRROR_STATE_MASK_MS_FORBIT_MIRROR_STATE;
const npt_sync_mirror_info_MIRROR_STATE_MASK npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_MAX = npt_sync_mirror_info_MIRROR_STATE_MASK_MS_IN_NATION_WAR;
const int npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_ARRAYSIZE = npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor();
inline const ::std::string& npt_sync_mirror_info_MIRROR_STATE_MASK_Name(npt_sync_mirror_info_MIRROR_STATE_MASK value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor(), value);
}
inline bool npt_sync_mirror_info_MIRROR_STATE_MASK_Parse(
    const ::std::string& name, npt_sync_mirror_info_MIRROR_STATE_MASK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_sync_mirror_info_MIRROR_STATE_MASK>(
    npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor(), name, value);
}
enum npt_get_player_profile_GET_PROFILE_MASK {
  npt_get_player_profile_GET_PROFILE_MASK_GET_ALL_PROFILE = 0,
  npt_get_player_profile_GET_PROFILE_MASK_GET_SNS = 1,
  npt_get_player_profile_GET_PROFILE_MASK_GET_EQUIP = 2,
  npt_get_player_profile_GET_PROFILE_MASK_GET_PROPERTY = 4
};
bool npt_get_player_profile_GET_PROFILE_MASK_IsValid(int value);
const npt_get_player_profile_GET_PROFILE_MASK npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_MIN = npt_get_player_profile_GET_PROFILE_MASK_GET_ALL_PROFILE;
const npt_get_player_profile_GET_PROFILE_MASK npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_MAX = npt_get_player_profile_GET_PROFILE_MASK_GET_PROPERTY;
const int npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_ARRAYSIZE = npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_get_player_profile_GET_PROFILE_MASK_descriptor();
inline const ::std::string& npt_get_player_profile_GET_PROFILE_MASK_Name(npt_get_player_profile_GET_PROFILE_MASK value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_get_player_profile_GET_PROFILE_MASK_descriptor(), value);
}
inline bool npt_get_player_profile_GET_PROFILE_MASK_Parse(
    const ::std::string& name, npt_get_player_profile_GET_PROFILE_MASK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_get_player_profile_GET_PROFILE_MASK>(
    npt_get_player_profile_GET_PROFILE_MASK_descriptor(), name, value);
}
enum npt_nationwar_event_NNE_TYPE {
  npt_nationwar_event_NNE_TYPE_NATION_WAR_KILL_COUNT = 1,
  npt_nationwar_event_NNE_TYPE_NATION_WAR_JIHUO = 2,
  npt_nationwar_event_NNE_TYPE_NATION_WAR_JIHUO_COOLDOWN = 3
};
bool npt_nationwar_event_NNE_TYPE_IsValid(int value);
const npt_nationwar_event_NNE_TYPE npt_nationwar_event_NNE_TYPE_NNE_TYPE_MIN = npt_nationwar_event_NNE_TYPE_NATION_WAR_KILL_COUNT;
const npt_nationwar_event_NNE_TYPE npt_nationwar_event_NNE_TYPE_NNE_TYPE_MAX = npt_nationwar_event_NNE_TYPE_NATION_WAR_JIHUO_COOLDOWN;
const int npt_nationwar_event_NNE_TYPE_NNE_TYPE_ARRAYSIZE = npt_nationwar_event_NNE_TYPE_NNE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_nationwar_event_NNE_TYPE_descriptor();
inline const ::std::string& npt_nationwar_event_NNE_TYPE_Name(npt_nationwar_event_NNE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_nationwar_event_NNE_TYPE_descriptor(), value);
}
inline bool npt_nationwar_event_NNE_TYPE_Parse(
    const ::std::string& name, npt_nationwar_event_NNE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_nationwar_event_NNE_TYPE>(
    npt_nationwar_event_NNE_TYPE_descriptor(), name, value);
}
enum npt_request_info_INFO_TYPE {
  npt_request_info_INFO_TYPE_NATION_WAR_HISTORY = 1
};
bool npt_request_info_INFO_TYPE_IsValid(int value);
const npt_request_info_INFO_TYPE npt_request_info_INFO_TYPE_INFO_TYPE_MIN = npt_request_info_INFO_TYPE_NATION_WAR_HISTORY;
const npt_request_info_INFO_TYPE npt_request_info_INFO_TYPE_INFO_TYPE_MAX = npt_request_info_INFO_TYPE_NATION_WAR_HISTORY;
const int npt_request_info_INFO_TYPE_INFO_TYPE_ARRAYSIZE = npt_request_info_INFO_TYPE_INFO_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_request_info_INFO_TYPE_descriptor();
inline const ::std::string& npt_request_info_INFO_TYPE_Name(npt_request_info_INFO_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_request_info_INFO_TYPE_descriptor(), value);
}
inline bool npt_request_info_INFO_TYPE_Parse(
    const ::std::string& name, npt_request_info_INFO_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_request_info_INFO_TYPE>(
    npt_request_info_INFO_TYPE_descriptor(), name, value);
}
enum npt_nation_shutup_reply_RESULT_TYPE {
  npt_nation_shutup_reply_RESULT_TYPE_RESULT_SUCCEED = 1,
  npt_nation_shutup_reply_RESULT_TYPE_RESULT_OFFLINE = 2,
  npt_nation_shutup_reply_RESULT_TYPE_RESULT_ALREADY_SHUTUP = 3
};
bool npt_nation_shutup_reply_RESULT_TYPE_IsValid(int value);
const npt_nation_shutup_reply_RESULT_TYPE npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_MIN = npt_nation_shutup_reply_RESULT_TYPE_RESULT_SUCCEED;
const npt_nation_shutup_reply_RESULT_TYPE npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_MAX = npt_nation_shutup_reply_RESULT_TYPE_RESULT_ALREADY_SHUTUP;
const int npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_ARRAYSIZE = npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_nation_shutup_reply_RESULT_TYPE_descriptor();
inline const ::std::string& npt_nation_shutup_reply_RESULT_TYPE_Name(npt_nation_shutup_reply_RESULT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_nation_shutup_reply_RESULT_TYPE_descriptor(), value);
}
inline bool npt_nation_shutup_reply_RESULT_TYPE_Parse(
    const ::std::string& name, npt_nation_shutup_reply_RESULT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_nation_shutup_reply_RESULT_TYPE>(
    npt_nation_shutup_reply_RESULT_TYPE_descriptor(), name, value);
}
enum npt_greeting_info_sync_SYNC_TYPE {
  npt_greeting_info_sync_SYNC_TYPE_SYNC_ALL = 1,
  npt_greeting_info_sync_SYNC_TYPE_SYNC_ADD = 2,
  npt_greeting_info_sync_SYNC_TYPE_SYNC_DEL = 3
};
bool npt_greeting_info_sync_SYNC_TYPE_IsValid(int value);
const npt_greeting_info_sync_SYNC_TYPE npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_MIN = npt_greeting_info_sync_SYNC_TYPE_SYNC_ALL;
const npt_greeting_info_sync_SYNC_TYPE npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_MAX = npt_greeting_info_sync_SYNC_TYPE_SYNC_DEL;
const int npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_ARRAYSIZE = npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_greeting_info_sync_SYNC_TYPE_descriptor();
inline const ::std::string& npt_greeting_info_sync_SYNC_TYPE_Name(npt_greeting_info_sync_SYNC_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_greeting_info_sync_SYNC_TYPE_descriptor(), value);
}
inline bool npt_greeting_info_sync_SYNC_TYPE_Parse(
    const ::std::string& name, npt_greeting_info_sync_SYNC_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_greeting_info_sync_SYNC_TYPE>(
    npt_greeting_info_sync_SYNC_TYPE_descriptor(), name, value);
}
enum npt_team_recruit_operate_OPERATE_TYPE {
  npt_team_recruit_operate_OPERATE_TYPE_CREATE = 1,
  npt_team_recruit_operate_OPERATE_TYPE_LIST = 2,
  npt_team_recruit_operate_OPERATE_TYPE_PUBLISH = 3,
  npt_team_recruit_operate_OPERATE_TYPE_CANCEL = 4,
  npt_team_recruit_operate_OPERATE_TYPE_REQ_COOLDOWN = 5,
  npt_team_recruit_operate_OPERATE_TYPE_MODIFY = 6,
  npt_team_recruit_operate_OPERATE_TYPE_REQ_LEADER_POS = 7,
  npt_team_recruit_operate_OPERATE_TYPE_GATHER = 8
};
bool npt_team_recruit_operate_OPERATE_TYPE_IsValid(int value);
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_MIN = npt_team_recruit_operate_OPERATE_TYPE_CREATE;
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_MAX = npt_team_recruit_operate_OPERATE_TYPE_GATHER;
const int npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_ARRAYSIZE = npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_team_recruit_operate_OPERATE_TYPE_descriptor();
inline const ::std::string& npt_team_recruit_operate_OPERATE_TYPE_Name(npt_team_recruit_operate_OPERATE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_team_recruit_operate_OPERATE_TYPE_descriptor(), value);
}
inline bool npt_team_recruit_operate_OPERATE_TYPE_Parse(
    const ::std::string& name, npt_team_recruit_operate_OPERATE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_team_recruit_operate_OPERATE_TYPE>(
    npt_team_recruit_operate_OPERATE_TYPE_descriptor(), name, value);
}
enum npt_team_recruit_operate_reply_RESULT {
  npt_team_recruit_operate_reply_RESULT_SUCCEED = 0,
  npt_team_recruit_operate_reply_RESULT_MAX_SIZE = 1,
  npt_team_recruit_operate_reply_RESULT_MIN_LEVEL = 2,
  npt_team_recruit_operate_reply_RESULT_COOLDOWN = 3,
  npt_team_recruit_operate_reply_RESULT_TIME_OUT = 4,
  npt_team_recruit_operate_reply_RESULT_IN_INSTANCE = 5
};
bool npt_team_recruit_operate_reply_RESULT_IsValid(int value);
const npt_team_recruit_operate_reply_RESULT npt_team_recruit_operate_reply_RESULT_RESULT_MIN = npt_team_recruit_operate_reply_RESULT_SUCCEED;
const npt_team_recruit_operate_reply_RESULT npt_team_recruit_operate_reply_RESULT_RESULT_MAX = npt_team_recruit_operate_reply_RESULT_IN_INSTANCE;
const int npt_team_recruit_operate_reply_RESULT_RESULT_ARRAYSIZE = npt_team_recruit_operate_reply_RESULT_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* npt_team_recruit_operate_reply_RESULT_descriptor();
inline const ::std::string& npt_team_recruit_operate_reply_RESULT_Name(npt_team_recruit_operate_reply_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    npt_team_recruit_operate_reply_RESULT_descriptor(), value);
}
inline bool npt_team_recruit_operate_reply_RESULT_Parse(
    const ::std::string& name, npt_team_recruit_operate_reply_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<npt_team_recruit_operate_reply_RESULT>(
    npt_team_recruit_operate_reply_RESULT_descriptor(), name, value);
}
enum GPS_TYPE {
  GUT_UNDEFIED = 0,
  GUT_TEST_DATA = 1,
  GUT_CORPS_STRUCT = 2,
  GUT_CORPS_MEMBER = 3,
  GUT_FACEBOOK = 4,
  GUT_PLAYER_MEMSSAGE = 5,
  GUT_DB_TABLE = 6,
  GUT_NATION = 7,
  GUT_NATION_WAR = 8,
  GUT_ROLE_PBINFO = 9,
  GUT_HERO_PBINFOS = 10,
  GUT_GREETING_DATA = 11,
  GUT_PLAYER_MISC = 12,
  GUT_CARD_DATA = 13,
  GUT_BLACK_SHOP_DATA = 14,
  GUT_DUKE_DATA = 15,
  GUT_CLIMBTOWER_SHOP_DATA = 16,
  GUT_ACCOUNT_DS_DATA = 17,
  GUT_ACCOUNT_GS_DATA = 18,
  GUT_MIDAS_USER_FAIL = 19,
  GUT_MIDAS_MULTI_FAIL = 20,
  GUT_MIDAS_PIXIU = 21,
  GUT_SECURE_IDIP = 22,
  GUT_TOP_REWARD = 23,
  GUT_DS_SAVE_PLAYER_DATA = 24,
  GUT_STRATEGIES = 25,
  GUT_WING_REFINE_SOUL = 26,
  GUT_PET_DATA = 27,
  GUT_PET_LIST_DATA = 28,
  GUT_ITEM_DATA = 29,
  GUT_ITEM_LIST_DATA = 30,
  GUT_ZONELIST = 31,
  GUT_RICHMAN_DATA = 32,
  GUT_ROAM_RECORD = 33
};
bool GPS_TYPE_IsValid(int value);
const GPS_TYPE GPS_TYPE_MIN = GUT_UNDEFIED;
const GPS_TYPE GPS_TYPE_MAX = GUT_ROAM_RECORD;
const int GPS_TYPE_ARRAYSIZE = GPS_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GPS_TYPE_descriptor();
inline const ::std::string& GPS_TYPE_Name(GPS_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GPS_TYPE_descriptor(), value);
}
inline bool GPS_TYPE_Parse(
    const ::std::string& name, GPS_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GPS_TYPE>(
    GPS_TYPE_descriptor(), name, value);
}
enum CORPS_POSITION {
  CP_NORMAL = 0,
  CP_MASTER = 1,
  CP_VICE_MASTER = 2,
  CP_ZHANGLAO1 = 3,
  CP_ZHANGLAO2 = 4
};
bool CORPS_POSITION_IsValid(int value);
const CORPS_POSITION CORPS_POSITION_MIN = CP_NORMAL;
const CORPS_POSITION CORPS_POSITION_MAX = CP_ZHANGLAO2;
const int CORPS_POSITION_ARRAYSIZE = CORPS_POSITION_MAX + 1;

const ::google::protobuf::EnumDescriptor* CORPS_POSITION_descriptor();
inline const ::std::string& CORPS_POSITION_Name(CORPS_POSITION value) {
  return ::google::protobuf::internal::NameOfEnum(
    CORPS_POSITION_descriptor(), value);
}
inline bool CORPS_POSITION_Parse(
    const ::std::string& name, CORPS_POSITION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CORPS_POSITION>(
    CORPS_POSITION_descriptor(), name, value);
}
enum MIRROR_STATE {
  MIRROR_S_CREATING = 1,
  MIRROR_S_OK = 2,
  MIRROR_S_CLOSING = 3,
  MIRROR_S_CLOSED = 4
};
bool MIRROR_STATE_IsValid(int value);
const MIRROR_STATE MIRROR_STATE_MIN = MIRROR_S_CREATING;
const MIRROR_STATE MIRROR_STATE_MAX = MIRROR_S_CLOSED;
const int MIRROR_STATE_ARRAYSIZE = MIRROR_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MIRROR_STATE_descriptor();
inline const ::std::string& MIRROR_STATE_Name(MIRROR_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MIRROR_STATE_descriptor(), value);
}
inline bool MIRROR_STATE_Parse(
    const ::std::string& name, MIRROR_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MIRROR_STATE>(
    MIRROR_STATE_descriptor(), name, value);
}
enum ask_help_info_type {
  AT_ASK_HELP = 0
};
bool ask_help_info_type_IsValid(int value);
const ask_help_info_type ask_help_info_type_MIN = AT_ASK_HELP;
const ask_help_info_type ask_help_info_type_MAX = AT_ASK_HELP;
const int ask_help_info_type_ARRAYSIZE = ask_help_info_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ask_help_info_type_descriptor();
inline const ::std::string& ask_help_info_type_Name(ask_help_info_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ask_help_info_type_descriptor(), value);
}
inline bool ask_help_info_type_Parse(
    const ::std::string& name, ask_help_info_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ask_help_info_type>(
    ask_help_info_type_descriptor(), name, value);
}
enum NET_PROTOCBUF_TYPE {
  NPT_TEST = 1,
  NPT_CORPS_APPOINT = 2,
  NPT_RESPONSE = 3,
  NPT_APPLY_CORPS = 4,
  NPT_CORPS_DATA = 5,
  NPT_COMMON_SEARCH = 6,
  NPT_ZHAOJILING = 7,
  NPT_SYNC_MIRROR_INFO = 8,
  NPT_SYNC_NATION_WAR_INFO = 9,
  NPT_NATION_WAR_OPERATE = 10,
  NPT_GET_CORP_NAME = 11,
  NPT_NATION_WAR_OPERATE_INFO = 12,
  NPT_NATION_WAR_OPERATE_INFO_RE = 13,
  NPT_TEAM_INVITE = 14,
  NPT_TEAM_INFO = 15,
  NPT_FRIEND_INVITE = 16,
  NPT_GET_PLAYER_PROFILE = 18,
  NPT_GREETING_INFO_SYNC = 19,
  NPT_GREETING_REPLY = 20,
  NPT_BLESSING_INFO = 21,
  NPT_NATIONWAR_EVENT = 22,
  NPT_NATION_SHUTUP = 23,
  NPT_NATION_SHUTUP_INFO = 24,
  NPT_NATION_SHUTUP_REPLY = 25,
  NPT_NATION_COMMANDER_APPOINT = 26,
  NPT_NATION_COMMANDER_NOTIFY = 27,
  NPT_NATION_WAR_HISTORY = 28,
  NPT_REQUEST_INFO = 29,
  NPT_ASK_HELP = 30,
  NPT_SEND_SERVER_MIDAS_INFO = 31,
  NPT_SEND_CLIENT_MIDAS_INFO = 32,
  NPT_SEND_TENCENT_SECURE_INFO = 33,
  NPT_OFFICER_GIFT_GET = 34,
  NPT_OFFICER_GIFT_NOTIFY = 35,
  NPT_SEND_MIDAS_BAD_TOKEN = 36,
  NPT_TEAM_RECRUIT_OPERATE = 37,
  NPT_TEAM_RECRUIT_OPERATE_REPLY = 38,
  NPT_UPDATE_GRC_INFO = 39,
  NPT_GRC_GET_FRIEND_INFO = 40,
  NPT_GRC_SEND_GIFT = 41,
  NPT_GRC_RCV_GIFT = 42,
  NPT_GRC_FRIEND_LIST = 43,
  NPT_GRC_GIFT_LIST = 44,
  NPT_GRC_SEND_GIFT_RE = 45,
  NPT_GRC_RCV_GIFT_RE = 46,
  NPT_MIDAS_ACTIVITY_GET = 47,
  NPT_MIDAS_ACTIVITY_GET_RE = 48,
  NPT_WEAK_NATION_GIFT_NOTIFY = 49,
  NPT_WEAK_NATION_GIFT_GET = 50,
  NPT_SERVER_INFO_NOTIFY = 51,
  NPT_GET_QQGROUP_OPENID = 52,
  NPT_RESP_QQGROUP_OPENID = 53,
  NPT_GRC_TURN_ON_OFF = 54,
  NPT_GRC_TURN_ON_OFF_RE = 55,
  NPT_DIE_ELITE_TID = 56,
  NPT_GET_DIE_ELITE_TID = 57,
  NPT_GRC_EXCEED_FRIEND_LIST = 58,
  NPT_GET_HTTP_REQ = 59,
  NPT_GET_HTTP_RESP = 60,
  NPT_SEND_TLOG_INFO = 61,
  NPT_UNBIND_QQGROUP_REQ = 63,
  NPT_UNBIND_QQGROUP_RESP = 64,
  NPT_RECHARGE_PLAT_VIP = 65,
  NPT_QQGROUP_JOINKEY_REQ = 66,
  NPT_QQGROUP_JOINKEY_RESP = 67,
  NPT_TOP_REWARD = 68,
  NPT_GRC_GET_SELF_PLAT_VIP_INFO = 69,
  NPT_GREET_INVEST_INFO = 70,
  NPT_GREET_INVEST_AWARD = 71,
  NPT_SEND_LEVEL_SORTED_INFO = 72,
  NPT_WINE_GAME_OPERATE = 73,
  NPT_WINE_GAME_SYNC_DATA = 74,
  NPT_WINE_GAME_HISTORY = 75,
  NPT_WINE_GAME_HISTORY_RE = 76,
  NPT_REGION_WAR_OPERATE = 77,
  NPT_REGION_WAR_GET_INFO_RE = 78,
  NPT_GM_SHUT_DOWN_SERVER = 79,
  NPT_NOTIFY_REGIONWAR_DELTATIME = 80,
  NPT_NOTIFY_REGIONWAR_DAILYBONUS = 81,
  NPT_GET_CORPS_INFO = 82,
  NPT_GET_REGION_CHEER_INFO = 83,
  NPT_GET_REGION_CHEER_INFO_RE = 84,
  NPT_REGION_WAR_OPERATE_RE = 85,
  NPT_REGION_WAR_BEGIN_NOTIFY = 86,
  NPT_NEST_COMMON_OPERATION = 87,
  NPT_NATION_REPUTATION = 88,
  NPT_NATION_REPUTATION_RE = 89,
  NPT_NATION_LANTERN_INFO = 90,
  NPT_NATION_LANTERN_INFO_RE = 91,
  NPT_NATION_REPUTATION_CHANGE = 92,
  NPT_RECEIVE_NATION_GIFT = 93,
  NPT_NOTIFY_ZONE_LIST = 94,
  NPT_NOTIFY_ROAM_MATCH_INFO = 95,
  NPT_BATTLE_AUTO_MATCH = 96,
  NPT_EXCHANGE_ACTIVITY = 97,
  NPT_EXCHANGE_ACTIVITY_RE = 98,
  NPT_EXCHANGE_AWARD = 99,
  NPT_BATTLE_MATCH_RESULT = 100,
  NPT_BATTLE_MATCH_PREPARE = 101,
  NPT_GET_BATTLE_MATCH_RANK = 102,
  NPT_CHANGE_ZONE_RESPONSE = 103,
  NPT_ROAM_ZHAOJI = 104,
  NPT_ROAM_ZHAOJI_INFO = 105,
  NPT_ROAM_INST_RESULT = 106,
  NPT_REQ_BACKFLOW_DATA = 107,
  NPT_REQ_BACKFLOW_DATA_RE = 108,
  NPT_SHARE_BACKFLOW_CODE = 109,
  NPT_RECE_INVITE_AWARD = 110,
  NPT_RECE_INVITE_AWARD_RE = 111,
  NPT_RECE_CONVENE_AWARD = 112,
  NPT_RECE_CONVENE_AWARD_RE = 113,
  NPT_RECE_BACKFLOW_AWARD = 114,
  NPT_RECE_BACKFLOW_AWARD_RE = 115,
  NPT_RESET_DOUBLERECHAGE = 116,
  NPT_SHARE_BACKFLOW_CODE_RE = 117
};
bool NET_PROTOCBUF_TYPE_IsValid(int value);
const NET_PROTOCBUF_TYPE NET_PROTOCBUF_TYPE_MIN = NPT_TEST;
const NET_PROTOCBUF_TYPE NET_PROTOCBUF_TYPE_MAX = NPT_SHARE_BACKFLOW_CODE_RE;
const int NET_PROTOCBUF_TYPE_ARRAYSIZE = NET_PROTOCBUF_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* NET_PROTOCBUF_TYPE_descriptor();
inline const ::std::string& NET_PROTOCBUF_TYPE_Name(NET_PROTOCBUF_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    NET_PROTOCBUF_TYPE_descriptor(), value);
}
inline bool NET_PROTOCBUF_TYPE_Parse(
    const ::std::string& name, NET_PROTOCBUF_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NET_PROTOCBUF_TYPE>(
    NET_PROTOCBUF_TYPE_descriptor(), name, value);
}
// ===================================================================

class a3d_pos : public ::google::protobuf::Message {
 public:
  a3d_pos();
  virtual ~a3d_pos();

  a3d_pos(const a3d_pos& from);

  inline a3d_pos& operator=(const a3d_pos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const a3d_pos& default_instance();

  void Swap(a3d_pos* other);

  // implements Message ----------------------------------------------

  a3d_pos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const a3d_pos& from);
  void MergeFrom(const a3d_pos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float z = 2;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 2;
  inline float z() const;
  inline void set_z(float value);

  // optional float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:PB.a3d_pos)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float z_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static a3d_pos* default_instance_;
};
// -------------------------------------------------------------------

class player_id_name : public ::google::protobuf::Message {
 public:
  player_id_name();
  virtual ~player_id_name();

  player_id_name(const player_id_name& from);

  inline player_id_name& operator=(const player_id_name& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_id_name& default_instance();

  void Swap(player_id_name* other);

  // implements Message ----------------------------------------------

  player_id_name* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_id_name& from);
  void MergeFrom(const player_id_name& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PB.player_id_name)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_id_name* default_instance_;
};
// -------------------------------------------------------------------

class general_list_item_data : public ::google::protobuf::Message {
 public:
  general_list_item_data();
  virtual ~general_list_item_data();

  general_list_item_data(const general_list_item_data& from);

  inline general_list_item_data& operator=(const general_list_item_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const general_list_item_data& default_instance();

  void Swap(general_list_item_data* other);

  // implements Message ----------------------------------------------

  general_list_item_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const general_list_item_data& from);
  void MergeFrom(const general_list_item_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional bool locked = 3;
  inline bool has_locked() const;
  inline void clear_locked();
  static const int kLockedFieldNumber = 3;
  inline bool locked() const;
  inline void set_locked(bool value);

  // @@protoc_insertion_point(class_scope:PB.general_list.item_data)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_locked();
  inline void clear_has_locked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 star_;
  bool locked_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static general_list_item_data* default_instance_;
};
// -------------------------------------------------------------------

class general_list : public ::google::protobuf::Message {
 public:
  general_list();
  virtual ~general_list();

  general_list(const general_list& from);

  inline general_list& operator=(const general_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const general_list& default_instance();

  void Swap(general_list* other);

  // implements Message ----------------------------------------------

  general_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const general_list& from);
  void MergeFrom(const general_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef general_list_item_data item_data;

  // accessors -------------------------------------------------------

  // repeated .PB.general_list.item_data item_list = 1;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 1;
  inline const ::PB::general_list_item_data& item_list(int index) const;
  inline ::PB::general_list_item_data* mutable_item_list(int index);
  inline ::PB::general_list_item_data* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::general_list_item_data >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::general_list_item_data >*
      mutable_item_list();

  // @@protoc_insertion_point(class_scope:PB.general_list)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::general_list_item_data > item_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static general_list* default_instance_;
};
// -------------------------------------------------------------------

class simple_list : public ::google::protobuf::Message {
 public:
  simple_list();
  virtual ~simple_list();

  simple_list(const simple_list& from);

  inline simple_list& operator=(const simple_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const simple_list& default_instance();

  void Swap(simple_list* other);

  // implements Message ----------------------------------------------

  simple_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const simple_list& from);
  void MergeFrom(const simple_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int64 key() const;
  inline void set_key(::google::protobuf::int64 value);

  // optional int64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PB.simple_list)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 key_;
  ::google::protobuf::int64 value_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static simple_list* default_instance_;
};
// -------------------------------------------------------------------

class test_data : public ::google::protobuf::Message {
 public:
  test_data();
  virtual ~test_data();

  test_data(const test_data& from);

  inline test_data& operator=(const test_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const test_data& default_instance();

  void Swap(test_data* other);

  // implements Message ----------------------------------------------

  test_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const test_data& from);
  void MergeFrom(const test_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_TEST_DATA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // repeated int64 params = 2;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 2;
  inline ::google::protobuf::int64 params(int index) const;
  inline void set_params(int index, ::google::protobuf::int64 value);
  inline void add_params(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      params() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_params();

  // optional int32 param2 = 3;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 3;
  inline ::google::protobuf::int32 param2() const;
  inline void set_param2(::google::protobuf::int32 value);

  // optional bytes info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const void* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:PB.test_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > params_;
  int type_;
  ::google::protobuf::int32 param2_;
  ::std::string* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static test_data* default_instance_;
};
// -------------------------------------------------------------------

class other_player_profile_from_gs : public ::google::protobuf::Message {
 public:
  other_player_profile_from_gs();
  virtual ~other_player_profile_from_gs();

  other_player_profile_from_gs(const other_player_profile_from_gs& from);

  inline other_player_profile_from_gs& operator=(const other_player_profile_from_gs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const other_player_profile_from_gs& default_instance();

  void Swap(other_player_profile_from_gs* other);

  // implements Message ----------------------------------------------

  other_player_profile_from_gs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const other_player_profile_from_gs& from);
  void MergeFrom(const other_player_profile_from_gs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 achievement_grade = 1;
  inline bool has_achievement_grade() const;
  inline void clear_achievement_grade();
  static const int kAchievementGradeFieldNumber = 1;
  inline ::google::protobuf::uint32 achievement_grade() const;
  inline void set_achievement_grade(::google::protobuf::uint32 value);

  // optional uint32 achievement_count = 2;
  inline bool has_achievement_count() const;
  inline void clear_achievement_count();
  static const int kAchievementCountFieldNumber = 2;
  inline ::google::protobuf::uint32 achievement_count() const;
  inline void set_achievement_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.other_player_profile_from_gs)
 private:
  inline void set_has_achievement_grade();
  inline void clear_has_achievement_grade();
  inline void set_has_achievement_count();
  inline void clear_has_achievement_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 achievement_grade_;
  ::google::protobuf::uint32 achievement_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static other_player_profile_from_gs* default_instance_;
};
// -------------------------------------------------------------------

class corp_chariot_chariot_info : public ::google::protobuf::Message {
 public:
  corp_chariot_chariot_info();
  virtual ~corp_chariot_chariot_info();

  corp_chariot_chariot_info(const corp_chariot_chariot_info& from);

  inline corp_chariot_chariot_info& operator=(const corp_chariot_chariot_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corp_chariot_chariot_info& default_instance();

  void Swap(corp_chariot_chariot_info* other);

  // implements Message ----------------------------------------------

  corp_chariot_chariot_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corp_chariot_chariot_info& from);
  void MergeFrom(const corp_chariot_chariot_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 exp = 1;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional .PB.player_id_name driver = 2;
  inline bool has_driver() const;
  inline void clear_driver();
  static const int kDriverFieldNumber = 2;
  inline const ::PB::player_id_name& driver() const;
  inline ::PB::player_id_name* mutable_driver();
  inline ::PB::player_id_name* release_driver();
  inline void set_allocated_driver(::PB::player_id_name* driver);

  // optional int32 rent_timestamp = 3;
  inline bool has_rent_timestamp() const;
  inline void clear_rent_timestamp();
  static const int kRentTimestampFieldNumber = 3;
  inline ::google::protobuf::int32 rent_timestamp() const;
  inline void set_rent_timestamp(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 tid = 5;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 5;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional bool is_upgrade = 7;
  inline bool has_is_upgrade() const;
  inline void clear_is_upgrade();
  static const int kIsUpgradeFieldNumber = 7;
  inline bool is_upgrade() const;
  inline void set_is_upgrade(bool value);

  // @@protoc_insertion_point(class_scope:PB.corp_chariot.chariot_info)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_driver();
  inline void clear_has_driver();
  inline void set_has_rent_timestamp();
  inline void clear_has_rent_timestamp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_is_upgrade();
  inline void clear_has_is_upgrade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 exp_;
  ::PB::player_id_name* driver_;
  ::google::protobuf::int32 rent_timestamp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 tid_;
  bool is_upgrade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corp_chariot_chariot_info* default_instance_;
};
// -------------------------------------------------------------------

class corp_chariot : public ::google::protobuf::Message {
 public:
  corp_chariot();
  virtual ~corp_chariot();

  corp_chariot(const corp_chariot& from);

  inline corp_chariot& operator=(const corp_chariot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corp_chariot& default_instance();

  void Swap(corp_chariot* other);

  // implements Message ----------------------------------------------

  corp_chariot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corp_chariot& from);
  void MergeFrom(const corp_chariot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef corp_chariot_chariot_info chariot_info;

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated .PB.corp_chariot.chariot_info chariots = 2;
  inline int chariots_size() const;
  inline void clear_chariots();
  static const int kChariotsFieldNumber = 2;
  inline const ::PB::corp_chariot_chariot_info& chariots(int index) const;
  inline ::PB::corp_chariot_chariot_info* mutable_chariots(int index);
  inline ::PB::corp_chariot_chariot_info* add_chariots();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_chariot_chariot_info >&
      chariots() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::corp_chariot_chariot_info >*
      mutable_chariots();

  // @@protoc_insertion_point(class_scope:PB.corp_chariot)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::corp_chariot_chariot_info > chariots_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corp_chariot* default_instance_;
};
// -------------------------------------------------------------------

class corp_repu : public ::google::protobuf::Message {
 public:
  corp_repu();
  virtual ~corp_repu();

  corp_repu(const corp_repu& from);

  inline corp_repu& operator=(const corp_repu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corp_repu& default_instance();

  void Swap(corp_repu* other);

  // implements Message ----------------------------------------------

  corp_repu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corp_repu& from);
  void MergeFrom(const corp_repu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int64 key() const;
  inline void set_key(::google::protobuf::int64 value);

  // optional int64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // optional int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.corp_repu)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 key_;
  ::google::protobuf::int64 value_;
  ::google::protobuf::int64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corp_repu* default_instance_;
};
// -------------------------------------------------------------------

class ipt_mirror_info : public ::google::protobuf::Message {
 public:
  ipt_mirror_info();
  virtual ~ipt_mirror_info();

  ipt_mirror_info(const ipt_mirror_info& from);

  inline ipt_mirror_info& operator=(const ipt_mirror_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ipt_mirror_info& default_instance();

  void Swap(ipt_mirror_info* other);

  // implements Message ----------------------------------------------

  ipt_mirror_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ipt_mirror_info& from);
  void MergeFrom(const ipt_mirror_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mirrorid = 1;
  inline bool has_mirrorid() const;
  inline void clear_mirrorid();
  static const int kMirroridFieldNumber = 1;
  inline ::google::protobuf::uint32 mirrorid() const;
  inline void set_mirrorid(::google::protobuf::uint32 value);

  // required .PB.MIRROR_STATE state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::PB::MIRROR_STATE state() const;
  inline void set_state(::PB::MIRROR_STATE value);

  // optional uint32 create_time = 3;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.ipt_mirror_info)
 private:
  inline void set_has_mirrorid();
  inline void clear_has_mirrorid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_create_time();
  inline void clear_has_create_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mirrorid_;
  int state_;
  ::google::protobuf::uint32 create_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static ipt_mirror_info* default_instance_;
};
// -------------------------------------------------------------------

class zhaojiling_info : public ::google::protobuf::Message {
 public:
  zhaojiling_info();
  virtual ~zhaojiling_info();

  zhaojiling_info(const zhaojiling_info& from);

  inline zhaojiling_info& operator=(const zhaojiling_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const zhaojiling_info& default_instance();

  void Swap(zhaojiling_info* other);

  // implements Message ----------------------------------------------

  zhaojiling_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const zhaojiling_info& from);
  void MergeFrom(const zhaojiling_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef zhaojiling_info_ZHAOJI_TYPE ZHAOJI_TYPE;
  static const ZHAOJI_TYPE ZT_ITEM = zhaojiling_info_ZHAOJI_TYPE_ZT_ITEM;
  static const ZHAOJI_TYPE ZT_NATION_WAR_START = zhaojiling_info_ZHAOJI_TYPE_ZT_NATION_WAR_START;
  static const ZHAOJI_TYPE ZT_NATION_WAR_ROLE = zhaojiling_info_ZHAOJI_TYPE_ZT_NATION_WAR_ROLE;
  static const ZHAOJI_TYPE ZT_SUCCOR = zhaojiling_info_ZHAOJI_TYPE_ZT_SUCCOR;
  static inline bool ZHAOJI_TYPE_IsValid(int value) {
    return zhaojiling_info_ZHAOJI_TYPE_IsValid(value);
  }
  static const ZHAOJI_TYPE ZHAOJI_TYPE_MIN =
    zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_MIN;
  static const ZHAOJI_TYPE ZHAOJI_TYPE_MAX =
    zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_MAX;
  static const int ZHAOJI_TYPE_ARRAYSIZE =
    zhaojiling_info_ZHAOJI_TYPE_ZHAOJI_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ZHAOJI_TYPE_descriptor() {
    return zhaojiling_info_ZHAOJI_TYPE_descriptor();
  }
  static inline const ::std::string& ZHAOJI_TYPE_Name(ZHAOJI_TYPE value) {
    return zhaojiling_info_ZHAOJI_TYPE_Name(value);
  }
  static inline bool ZHAOJI_TYPE_Parse(const ::std::string& name,
      ZHAOJI_TYPE* value) {
    return zhaojiling_info_ZHAOJI_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline ::google::protobuf::uint64 src() const;
  inline void set_src(::google::protobuf::uint64 value);

  // optional bytes src_name = 2;
  inline bool has_src_name() const;
  inline void clear_src_name();
  static const int kSrcNameFieldNumber = 2;
  inline const ::std::string& src_name() const;
  inline void set_src_name(const ::std::string& value);
  inline void set_src_name(const char* value);
  inline void set_src_name(const void* value, size_t size);
  inline ::std::string* mutable_src_name();
  inline ::std::string* release_src_name();
  inline void set_allocated_src_name(::std::string* src_name);

  // optional bytes reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const void* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional int32 delay_time = 4;
  inline bool has_delay_time() const;
  inline void clear_delay_time();
  static const int kDelayTimeFieldNumber = 4;
  inline ::google::protobuf::int32 delay_time() const;
  inline void set_delay_time(::google::protobuf::int32 value);

  // required int32 scene_tag = 5;
  inline bool has_scene_tag() const;
  inline void clear_scene_tag();
  static const int kSceneTagFieldNumber = 5;
  inline ::google::protobuf::int32 scene_tag() const;
  inline void set_scene_tag(::google::protobuf::int32 value);

  // required .PB.a3d_pos pos = 6;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 6;
  inline const ::PB::a3d_pos& pos() const;
  inline ::PB::a3d_pos* mutable_pos();
  inline ::PB::a3d_pos* release_pos();
  inline void set_allocated_pos(::PB::a3d_pos* pos);

  // optional int32 random_radius = 7;
  inline bool has_random_radius() const;
  inline void clear_random_radius();
  static const int kRandomRadiusFieldNumber = 7;
  inline ::google::protobuf::int32 random_radius() const;
  inline void set_random_radius(::google::protobuf::int32 value);

  // optional int32 zhaojiling_id = 8;
  inline bool has_zhaojiling_id() const;
  inline void clear_zhaojiling_id();
  static const int kZhaojilingIdFieldNumber = 8;
  inline ::google::protobuf::int32 zhaojiling_id() const;
  inline void set_zhaojiling_id(::google::protobuf::int32 value);

  // optional int32 src_corp_position = 9;
  inline bool has_src_corp_position() const;
  inline void clear_src_corp_position();
  static const int kSrcCorpPositionFieldNumber = 9;
  inline ::google::protobuf::int32 src_corp_position() const;
  inline void set_src_corp_position(::google::protobuf::int32 value);

  // optional int32 src_nation_position = 10;
  inline bool has_src_nation_position() const;
  inline void clear_src_nation_position();
  static const int kSrcNationPositionFieldNumber = 10;
  inline ::google::protobuf::int32 src_nation_position() const;
  inline void set_src_nation_position(::google::protobuf::int32 value);

  // optional int32 mirror_id = 11;
  inline bool has_mirror_id() const;
  inline void clear_mirror_id();
  static const int kMirrorIdFieldNumber = 11;
  inline ::google::protobuf::int32 mirror_id() const;
  inline void set_mirror_id(::google::protobuf::int32 value);

  // optional .PB.zhaojiling_info.ZHAOJI_TYPE type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::PB::zhaojiling_info_ZHAOJI_TYPE type() const;
  inline void set_type(::PB::zhaojiling_info_ZHAOJI_TYPE value);

  // optional int32 param1 = 13;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 13;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // optional int32 inst_tid = 14;
  inline bool has_inst_tid() const;
  inline void clear_inst_tid();
  static const int kInstTidFieldNumber = 14;
  inline ::google::protobuf::int32 inst_tid() const;
  inline void set_inst_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.zhaojiling_info)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_src_name();
  inline void clear_has_src_name();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_delay_time();
  inline void clear_has_delay_time();
  inline void set_has_scene_tag();
  inline void clear_has_scene_tag();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_random_radius();
  inline void clear_has_random_radius();
  inline void set_has_zhaojiling_id();
  inline void clear_has_zhaojiling_id();
  inline void set_has_src_corp_position();
  inline void clear_has_src_corp_position();
  inline void set_has_src_nation_position();
  inline void clear_has_src_nation_position();
  inline void set_has_mirror_id();
  inline void clear_has_mirror_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_inst_tid();
  inline void clear_has_inst_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 src_;
  ::std::string* src_name_;
  ::std::string* reason_;
  ::google::protobuf::int32 delay_time_;
  ::google::protobuf::int32 scene_tag_;
  ::PB::a3d_pos* pos_;
  ::google::protobuf::int32 random_radius_;
  ::google::protobuf::int32 zhaojiling_id_;
  ::google::protobuf::int32 src_corp_position_;
  ::google::protobuf::int32 src_nation_position_;
  ::google::protobuf::int32 mirror_id_;
  int type_;
  ::google::protobuf::int32 param1_;
  ::google::protobuf::int32 inst_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static zhaojiling_info* default_instance_;
};
// -------------------------------------------------------------------

class corps_member : public ::google::protobuf::Message {
 public:
  corps_member();
  virtual ~corps_member();

  corps_member(const corps_member& from);

  inline corps_member& operator=(const corps_member& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corps_member& default_instance();

  void Swap(corps_member* other);

  // implements Message ----------------------------------------------

  corps_member* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corps_member& from);
  void MergeFrom(const corps_member& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_MEMBER];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required int32 pos = 3 [default = 0];
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 join_time = 5;
  inline bool has_join_time() const;
  inline void clear_join_time();
  static const int kJoinTimeFieldNumber = 5;
  inline ::google::protobuf::int32 join_time() const;
  inline void set_join_time(::google::protobuf::int32 value);

  // required int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 idphoto = 7;
  inline bool has_idphoto() const;
  inline void clear_idphoto();
  static const int kIdphotoFieldNumber = 7;
  inline ::google::protobuf::int32 idphoto() const;
  inline void set_idphoto(::google::protobuf::int32 value);

  // optional int64 contri = 10;
  inline bool has_contri() const;
  inline void clear_contri();
  static const int kContriFieldNumber = 10;
  inline ::google::protobuf::int64 contri() const;
  inline void set_contri(::google::protobuf::int64 value);

  // optional int64 contri_cumulate = 11;
  inline bool has_contri_cumulate() const;
  inline void clear_contri_cumulate();
  static const int kContriCumulateFieldNumber = 11;
  inline ::google::protobuf::int64 contri_cumulate() const;
  inline void set_contri_cumulate(::google::protobuf::int64 value);

  // optional int32 leave_time = 12;
  inline bool has_leave_time() const;
  inline void clear_leave_time();
  static const int kLeaveTimeFieldNumber = 12;
  inline ::google::protobuf::int32 leave_time() const;
  inline void set_leave_time(::google::protobuf::int32 value);

  // required int32 prof = 13;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 13;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 online_time_today = 14;
  inline bool has_online_time_today() const;
  inline void clear_online_time_today();
  static const int kOnlineTimeTodayFieldNumber = 14;
  inline ::google::protobuf::int32 online_time_today() const;
  inline void set_online_time_today(::google::protobuf::int32 value);

  // repeated int32 boss_feed_reward = 15;
  inline int boss_feed_reward_size() const;
  inline void clear_boss_feed_reward();
  static const int kBossFeedRewardFieldNumber = 15;
  inline ::google::protobuf::int32 boss_feed_reward(int index) const;
  inline void set_boss_feed_reward(int index, ::google::protobuf::int32 value);
  inline void add_boss_feed_reward(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      boss_feed_reward() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_boss_feed_reward();

  // repeated int32 elixir = 16;
  inline int elixir_size() const;
  inline void clear_elixir();
  static const int kElixirFieldNumber = 16;
  inline ::google::protobuf::int32 elixir(int index) const;
  inline void set_elixir(int index, ::google::protobuf::int32 value);
  inline void add_elixir(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      elixir() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_elixir();

  // optional int64 fightcapacity = 17;
  inline bool has_fightcapacity() const;
  inline void clear_fightcapacity();
  static const int kFightcapacityFieldNumber = 17;
  inline ::google::protobuf::int64 fightcapacity() const;
  inline void set_fightcapacity(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.corps_member)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_join_time();
  inline void clear_has_join_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_idphoto();
  inline void clear_has_idphoto();
  inline void set_has_contri();
  inline void clear_has_contri();
  inline void set_has_contri_cumulate();
  inline void clear_has_contri_cumulate();
  inline void set_has_leave_time();
  inline void clear_has_leave_time();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_online_time_today();
  inline void clear_has_online_time_today();
  inline void set_has_fightcapacity();
  inline void clear_has_fightcapacity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::int32 pos_;
  ::std::string* name_;
  ::google::protobuf::int32 join_time_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int64 contri_;
  ::google::protobuf::int32 idphoto_;
  ::google::protobuf::int32 leave_time_;
  ::google::protobuf::int64 contri_cumulate_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 online_time_today_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > boss_feed_reward_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > elixir_;
  ::google::protobuf::int64 fightcapacity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corps_member* default_instance_;
};
// -------------------------------------------------------------------

class corps_apply_t : public ::google::protobuf::Message {
 public:
  corps_apply_t();
  virtual ~corps_apply_t();

  corps_apply_t(const corps_apply_t& from);

  inline corps_apply_t& operator=(const corps_apply_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corps_apply_t& default_instance();

  void Swap(corps_apply_t* other);

  // implements Message ----------------------------------------------

  corps_apply_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corps_apply_t& from);
  void MergeFrom(const corps_apply_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int64 apply_time = 3;
  inline bool has_apply_time() const;
  inline void clear_apply_time();
  static const int kApplyTimeFieldNumber = 3;
  inline ::google::protobuf::int64 apply_time() const;
  inline void set_apply_time(::google::protobuf::int64 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 prof = 5;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 5;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.corps_apply_t)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_apply_time();
  inline void clear_has_apply_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_prof();
  inline void clear_has_prof();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  ::std::string* name_;
  ::google::protobuf::int64 apply_time_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 prof_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corps_apply_t* default_instance_;
};
// -------------------------------------------------------------------

class corp_attribute_corp_skill_room : public ::google::protobuf::Message {
 public:
  corp_attribute_corp_skill_room();
  virtual ~corp_attribute_corp_skill_room();

  corp_attribute_corp_skill_room(const corp_attribute_corp_skill_room& from);

  inline corp_attribute_corp_skill_room& operator=(const corp_attribute_corp_skill_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corp_attribute_corp_skill_room& default_instance();

  void Swap(corp_attribute_corp_skill_room* other);

  // implements Message ----------------------------------------------

  corp_attribute_corp_skill_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corp_attribute_corp_skill_room& from);
  void MergeFrom(const corp_attribute_corp_skill_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 addon_level = 1;
  inline int addon_level_size() const;
  inline void clear_addon_level();
  static const int kAddonLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 addon_level(int index) const;
  inline void set_addon_level(int index, ::google::protobuf::uint32 value);
  inline void add_addon_level(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      addon_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_addon_level();

  // @@protoc_insertion_point(class_scope:PB.corp_attribute.corp_skill_room)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > addon_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corp_attribute_corp_skill_room* default_instance_;
};
// -------------------------------------------------------------------

class corp_attribute : public ::google::protobuf::Message {
 public:
  corp_attribute();
  virtual ~corp_attribute();

  corp_attribute(const corp_attribute& from);

  inline corp_attribute& operator=(const corp_attribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corp_attribute& default_instance();

  void Swap(corp_attribute* other);

  // implements Message ----------------------------------------------

  corp_attribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corp_attribute& from);
  void MergeFrom(const corp_attribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef corp_attribute_corp_skill_room corp_skill_room;

  // accessors -------------------------------------------------------

  // repeated .PB.corp_attribute.corp_skill_room skill_room = 1;
  inline int skill_room_size() const;
  inline void clear_skill_room();
  static const int kSkillRoomFieldNumber = 1;
  inline const ::PB::corp_attribute_corp_skill_room& skill_room(int index) const;
  inline ::PB::corp_attribute_corp_skill_room* mutable_skill_room(int index);
  inline ::PB::corp_attribute_corp_skill_room* add_skill_room();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_attribute_corp_skill_room >&
      skill_room() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::corp_attribute_corp_skill_room >*
      mutable_skill_room();

  // optional uint32 shop_level = 2 [default = 0];
  inline bool has_shop_level() const;
  inline void clear_shop_level();
  static const int kShopLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 shop_level() const;
  inline void set_shop_level(::google::protobuf::uint32 value);

  // repeated .PB.corp_repu corp_repu = 3;
  inline int corp_repu_size() const;
  inline void clear_corp_repu();
  static const int kCorpRepuFieldNumber = 3;
  inline const ::PB::corp_repu& corp_repu(int index) const;
  inline ::PB::corp_repu* mutable_corp_repu(int index);
  inline ::PB::corp_repu* add_corp_repu();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_repu >&
      corp_repu() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::corp_repu >*
      mutable_corp_repu();

  // repeated .PB.simple_list boss_feed_toplist = 4;
  inline int boss_feed_toplist_size() const;
  inline void clear_boss_feed_toplist();
  static const int kBossFeedToplistFieldNumber = 4;
  inline const ::PB::simple_list& boss_feed_toplist(int index) const;
  inline ::PB::simple_list* mutable_boss_feed_toplist(int index);
  inline ::PB::simple_list* add_boss_feed_toplist();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::simple_list >&
      boss_feed_toplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::simple_list >*
      mutable_boss_feed_toplist();

  // optional .PB.corp_chariot chariot = 5;
  inline bool has_chariot() const;
  inline void clear_chariot();
  static const int kChariotFieldNumber = 5;
  inline const ::PB::corp_chariot& chariot() const;
  inline ::PB::corp_chariot* mutable_chariot();
  inline ::PB::corp_chariot* release_chariot();
  inline void set_allocated_chariot(::PB::corp_chariot* chariot);

  // @@protoc_insertion_point(class_scope:PB.corp_attribute)
 private:
  inline void set_has_shop_level();
  inline void clear_has_shop_level();
  inline void set_has_chariot();
  inline void clear_has_chariot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::corp_attribute_corp_skill_room > skill_room_;
  ::google::protobuf::RepeatedPtrField< ::PB::corp_repu > corp_repu_;
  ::google::protobuf::RepeatedPtrField< ::PB::simple_list > boss_feed_toplist_;
  ::PB::corp_chariot* chariot_;
  ::google::protobuf::uint32 shop_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corp_attribute* default_instance_;
};
// -------------------------------------------------------------------

class corps_struct : public ::google::protobuf::Message {
 public:
  corps_struct();
  virtual ~corps_struct();

  corps_struct(const corps_struct& from);

  inline corps_struct& operator=(const corps_struct& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corps_struct& default_instance();

  void Swap(corps_struct* other);

  // implements Message ----------------------------------------------

  corps_struct* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corps_struct& from);
  void MergeFrom(const corps_struct& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_STRUCT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 create_time = 5;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  inline ::google::protobuf::int32 create_time() const;
  inline void set_create_time(::google::protobuf::int32 value);

  // required int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required uint64 status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::google::protobuf::uint64 status() const;
  inline void set_status(::google::protobuf::uint64 value);

  // optional bytes announce = 8;
  inline bool has_announce() const;
  inline void clear_announce();
  static const int kAnnounceFieldNumber = 8;
  inline const ::std::string& announce() const;
  inline void set_announce(const ::std::string& value);
  inline void set_announce(const char* value);
  inline void set_announce(const void* value, size_t size);
  inline ::std::string* mutable_announce();
  inline ::std::string* release_announce();
  inline void set_allocated_announce(::std::string* announce);

  // optional int64 announce_time = 9 [default = 0];
  inline bool has_announce_time() const;
  inline void clear_announce_time();
  static const int kAnnounceTimeFieldNumber = 9;
  inline ::google::protobuf::int64 announce_time() const;
  inline void set_announce_time(::google::protobuf::int64 value);

  // optional int64 contri = 10 [default = 0];
  inline bool has_contri() const;
  inline void clear_contri();
  static const int kContriFieldNumber = 10;
  inline ::google::protobuf::int64 contri() const;
  inline void set_contri(::google::protobuf::int64 value);

  // optional int64 contri_cumulate = 11 [default = 0];
  inline bool has_contri_cumulate() const;
  inline void clear_contri_cumulate();
  static const int kContriCumulateFieldNumber = 11;
  inline ::google::protobuf::int64 contri_cumulate() const;
  inline void set_contri_cumulate(::google::protobuf::int64 value);

  // optional int64 money = 12 [default = 0];
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 12;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // repeated .PB.corps_apply_t apply = 13;
  inline int apply_size() const;
  inline void clear_apply();
  static const int kApplyFieldNumber = 13;
  inline const ::PB::corps_apply_t& apply(int index) const;
  inline ::PB::corps_apply_t* mutable_apply(int index);
  inline ::PB::corps_apply_t* add_apply();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::corps_apply_t >&
      apply() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::corps_apply_t >*
      mutable_apply();

  // required int32 nation = 14;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 14;
  inline ::google::protobuf::int32 nation() const;
  inline void set_nation(::google::protobuf::int32 value);

  // optional int64 last_resume_time = 15;
  inline bool has_last_resume_time() const;
  inline void clear_last_resume_time();
  static const int kLastResumeTimeFieldNumber = 15;
  inline ::google::protobuf::int64 last_resume_time() const;
  inline void set_last_resume_time(::google::protobuf::int64 value);

  // optional .PB.corp_attribute attr = 16;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 16;
  inline const ::PB::corp_attribute& attr() const;
  inline ::PB::corp_attribute* mutable_attr();
  inline ::PB::corp_attribute* release_attr();
  inline void set_allocated_attr(::PB::corp_attribute* attr);

  // optional float corp_power = 17;
  inline bool has_corp_power() const;
  inline void clear_corp_power();
  static const int kCorpPowerFieldNumber = 17;
  inline float corp_power() const;
  inline void set_corp_power(float value);

  // optional bytes qqgroup_openid = 18;
  inline bool has_qqgroup_openid() const;
  inline void clear_qqgroup_openid();
  static const int kQqgroupOpenidFieldNumber = 18;
  inline const ::std::string& qqgroup_openid() const;
  inline void set_qqgroup_openid(const ::std::string& value);
  inline void set_qqgroup_openid(const char* value);
  inline void set_qqgroup_openid(const void* value, size_t size);
  inline ::std::string* mutable_qqgroup_openid();
  inline ::std::string* release_qqgroup_openid();
  inline void set_allocated_qqgroup_openid(::std::string* qqgroup_openid);

  // optional bytes qqgroup_name = 19;
  inline bool has_qqgroup_name() const;
  inline void clear_qqgroup_name();
  static const int kQqgroupNameFieldNumber = 19;
  inline const ::std::string& qqgroup_name() const;
  inline void set_qqgroup_name(const ::std::string& value);
  inline void set_qqgroup_name(const char* value);
  inline void set_qqgroup_name(const void* value, size_t size);
  inline ::std::string* mutable_qqgroup_name();
  inline ::std::string* release_qqgroup_name();
  inline void set_allocated_qqgroup_name(::std::string* qqgroup_name);

  // optional bytes qqgroup_joinkey = 20;
  inline bool has_qqgroup_joinkey() const;
  inline void clear_qqgroup_joinkey();
  static const int kQqgroupJoinkeyFieldNumber = 20;
  inline const ::std::string& qqgroup_joinkey() const;
  inline void set_qqgroup_joinkey(const ::std::string& value);
  inline void set_qqgroup_joinkey(const char* value);
  inline void set_qqgroup_joinkey(const void* value, size_t size);
  inline ::std::string* mutable_qqgroup_joinkey();
  inline ::std::string* release_qqgroup_joinkey();
  inline void set_allocated_qqgroup_joinkey(::std::string* qqgroup_joinkey);

  // optional int32 login_time = 21;
  inline bool has_login_time() const;
  inline void clear_login_time();
  static const int kLoginTimeFieldNumber = 21;
  inline ::google::protobuf::int32 login_time() const;
  inline void set_login_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.corps_struct)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_announce();
  inline void clear_has_announce();
  inline void set_has_announce_time();
  inline void clear_has_announce_time();
  inline void set_has_contri();
  inline void clear_has_contri();
  inline void set_has_contri_cumulate();
  inline void clear_has_contri_cumulate();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_last_resume_time();
  inline void clear_has_last_resume_time();
  inline void set_has_attr();
  inline void clear_has_attr();
  inline void set_has_corp_power();
  inline void clear_has_corp_power();
  inline void set_has_qqgroup_openid();
  inline void clear_has_qqgroup_openid();
  inline void set_has_qqgroup_name();
  inline void clear_has_qqgroup_name();
  inline void set_has_qqgroup_joinkey();
  inline void clear_has_qqgroup_joinkey();
  inline void set_has_login_time();
  inline void clear_has_login_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 id_;
  ::std::string* name_;
  ::google::protobuf::int32 create_time_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint64 status_;
  ::std::string* announce_;
  ::google::protobuf::int64 announce_time_;
  ::google::protobuf::int64 contri_;
  ::google::protobuf::int64 contri_cumulate_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::RepeatedPtrField< ::PB::corps_apply_t > apply_;
  ::google::protobuf::int64 last_resume_time_;
  ::google::protobuf::int32 nation_;
  float corp_power_;
  ::PB::corp_attribute* attr_;
  ::std::string* qqgroup_openid_;
  ::std::string* qqgroup_name_;
  ::std::string* qqgroup_joinkey_;
  ::google::protobuf::int32 login_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corps_struct* default_instance_;
};
// -------------------------------------------------------------------

class facebook_str : public ::google::protobuf::Message {
 public:
  facebook_str();
  virtual ~facebook_str();

  facebook_str(const facebook_str& from);

  inline facebook_str& operator=(const facebook_str& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const facebook_str& default_instance();

  void Swap(facebook_str* other);

  // implements Message ----------------------------------------------

  facebook_str* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const facebook_str& from);
  void MergeFrom(const facebook_str& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int64 param = 3;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline ::google::protobuf::int64 param() const;
  inline void set_param(::google::protobuf::int64 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes name2 = 5;
  inline bool has_name2() const;
  inline void clear_name2();
  static const int kName2FieldNumber = 5;
  inline const ::std::string& name2() const;
  inline void set_name2(const ::std::string& value);
  inline void set_name2(const char* value);
  inline void set_name2(const void* value, size_t size);
  inline ::std::string* mutable_name2();
  inline ::std::string* release_name2();
  inline void set_allocated_name2(::std::string* name2);

  // optional int32 leave_corps_time = 6;
  inline bool has_leave_corps_time() const;
  inline void clear_leave_corps_time();
  static const int kLeaveCorpsTimeFieldNumber = 6;
  inline ::google::protobuf::int32 leave_corps_time() const;
  inline void set_leave_corps_time(::google::protobuf::int32 value);

  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.facebook_str)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_name2();
  inline void clear_has_name2();
  inline void set_has_leave_corps_time();
  inline void clear_has_leave_corps_time();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 param_;
  ::std::string* name_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 leave_corps_time_;
  ::std::string* name2_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static facebook_str* default_instance_;
};
// -------------------------------------------------------------------

class face_book : public ::google::protobuf::Message {
 public:
  face_book();
  virtual ~face_book();

  face_book(const face_book& from);

  inline face_book& operator=(const face_book& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const face_book& default_instance();

  void Swap(face_book* other);

  // implements Message ----------------------------------------------

  face_book* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const face_book& from);
  void MergeFrom(const face_book& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_FACEBOOK];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // optional .PB.facebook_str corps = 2;
  inline bool has_corps() const;
  inline void clear_corps();
  static const int kCorpsFieldNumber = 2;
  inline const ::PB::facebook_str& corps() const;
  inline ::PB::facebook_str* mutable_corps();
  inline ::PB::facebook_str* release_corps();
  inline void set_allocated_corps(::PB::facebook_str* corps);

  // @@protoc_insertion_point(class_scope:PB.face_book)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_corps();
  inline void clear_has_corps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::facebook_str* corps_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static face_book* default_instance_;
};
// -------------------------------------------------------------------

class idip_role_info : public ::google::protobuf::Message {
 public:
  idip_role_info();
  virtual ~idip_role_info();

  idip_role_info(const idip_role_info& from);

  inline idip_role_info& operator=(const idip_role_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const idip_role_info& default_instance();

  void Swap(idip_role_info* other);

  // implements Message ----------------------------------------------

  idip_role_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const idip_role_info& from);
  void MergeFrom(const idip_role_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 money = 1;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // optional int64 vip_exp = 2;
  inline bool has_vip_exp() const;
  inline void clear_vip_exp();
  static const int kVipExpFieldNumber = 2;
  inline ::google::protobuf::int64 vip_exp() const;
  inline void set_vip_exp(::google::protobuf::int64 value);

  // optional int32 vip_level = 3;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 3;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // optional int64 role_exp = 4;
  inline bool has_role_exp() const;
  inline void clear_role_exp();
  static const int kRoleExpFieldNumber = 4;
  inline ::google::protobuf::int64 role_exp() const;
  inline void set_role_exp(::google::protobuf::int64 value);

  // optional int64 ride_exp = 5;
  inline bool has_ride_exp() const;
  inline void clear_ride_exp();
  static const int kRideExpFieldNumber = 5;
  inline ::google::protobuf::int64 ride_exp() const;
  inline void set_ride_exp(::google::protobuf::int64 value);

  // optional int32 ride_level = 6;
  inline bool has_ride_level() const;
  inline void clear_ride_level();
  static const int kRideLevelFieldNumber = 6;
  inline ::google::protobuf::int32 ride_level() const;
  inline void set_ride_level(::google::protobuf::int32 value);

  // optional int32 pk_value = 7;
  inline bool has_pk_value() const;
  inline void clear_pk_value();
  static const int kPkValueFieldNumber = 7;
  inline ::google::protobuf::int32 pk_value() const;
  inline void set_pk_value(::google::protobuf::int32 value);

  // optional int32 online_time = 8;
  inline bool has_online_time() const;
  inline void clear_online_time();
  static const int kOnlineTimeFieldNumber = 8;
  inline ::google::protobuf::int32 online_time() const;
  inline void set_online_time(::google::protobuf::int32 value);

  // optional int32 friends_count = 9;
  inline bool has_friends_count() const;
  inline void clear_friends_count();
  static const int kFriendsCountFieldNumber = 9;
  inline ::google::protobuf::int32 friends_count() const;
  inline void set_friends_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.idip_role_info)
 private:
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_vip_exp();
  inline void clear_has_vip_exp();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_role_exp();
  inline void clear_has_role_exp();
  inline void set_has_ride_exp();
  inline void clear_has_ride_exp();
  inline void set_has_ride_level();
  inline void clear_has_ride_level();
  inline void set_has_pk_value();
  inline void clear_has_pk_value();
  inline void set_has_online_time();
  inline void clear_has_online_time();
  inline void set_has_friends_count();
  inline void clear_has_friends_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 money_;
  ::google::protobuf::int64 vip_exp_;
  ::google::protobuf::int64 role_exp_;
  ::google::protobuf::int32 vip_level_;
  ::google::protobuf::int32 ride_level_;
  ::google::protobuf::int64 ride_exp_;
  ::google::protobuf::int32 pk_value_;
  ::google::protobuf::int32 online_time_;
  ::google::protobuf::int32 friends_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static idip_role_info* default_instance_;
};
// -------------------------------------------------------------------

class role_list_custom : public ::google::protobuf::Message {
 public:
  role_list_custom();
  virtual ~role_list_custom();

  role_list_custom(const role_list_custom& from);

  inline role_list_custom& operator=(const role_list_custom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_list_custom& default_instance();

  void Swap(role_list_custom* other);

  // implements Message ----------------------------------------------

  role_list_custom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_list_custom& from);
  void MergeFrom(const role_list_custom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool fashion = 1;
  inline bool has_fashion() const;
  inline void clear_fashion();
  static const int kFashionFieldNumber = 1;
  inline bool fashion() const;
  inline void set_fashion(bool value);

  // optional uint32 magic_weapon_tid = 2;
  inline bool has_magic_weapon_tid() const;
  inline void clear_magic_weapon_tid();
  static const int kMagicWeaponTidFieldNumber = 2;
  inline ::google::protobuf::uint32 magic_weapon_tid() const;
  inline void set_magic_weapon_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.role_list_custom)
 private:
  inline void set_has_fashion();
  inline void clear_has_fashion();
  inline void set_has_magic_weapon_tid();
  inline void clear_has_magic_weapon_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool fashion_;
  ::google::protobuf::uint32 magic_weapon_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static role_list_custom* default_instance_;
};
// -------------------------------------------------------------------

class gs_role_mutable_data : public ::google::protobuf::Message {
 public:
  gs_role_mutable_data();
  virtual ~gs_role_mutable_data();

  gs_role_mutable_data(const gs_role_mutable_data& from);

  inline gs_role_mutable_data& operator=(const gs_role_mutable_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_role_mutable_data& default_instance();

  void Swap(gs_role_mutable_data* other);

  // implements Message ----------------------------------------------

  gs_role_mutable_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_role_mutable_data& from);
  void MergeFrom(const gs_role_mutable_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_ROLE_PBINFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // optional uint32 vip_level = 2;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // optional uint32 fightcapacity = 3;
  inline bool has_fightcapacity() const;
  inline void clear_fightcapacity();
  static const int kFightcapacityFieldNumber = 3;
  inline ::google::protobuf::uint32 fightcapacity() const;
  inline void set_fightcapacity(::google::protobuf::uint32 value);

  // optional bytes show_property = 4;
  inline bool has_show_property() const;
  inline void clear_show_property();
  static const int kShowPropertyFieldNumber = 4;
  inline const ::std::string& show_property() const;
  inline void set_show_property(const ::std::string& value);
  inline void set_show_property(const char* value);
  inline void set_show_property(const void* value, size_t size);
  inline ::std::string* mutable_show_property();
  inline ::std::string* release_show_property();
  inline void set_allocated_show_property(::std::string* show_property);

  // optional .PB.other_player_profile_from_gs pro = 8;
  inline bool has_pro() const;
  inline void clear_pro();
  static const int kProFieldNumber = 8;
  inline const ::PB::other_player_profile_from_gs& pro() const;
  inline ::PB::other_player_profile_from_gs* mutable_pro();
  inline ::PB::other_player_profile_from_gs* release_pro();
  inline void set_allocated_pro(::PB::other_player_profile_from_gs* pro);

  // optional .PB.idip_role_info idip_info = 9;
  inline bool has_idip_info() const;
  inline void clear_idip_info();
  static const int kIdipInfoFieldNumber = 9;
  inline const ::PB::idip_role_info& idip_info() const;
  inline ::PB::idip_role_info* mutable_idip_info();
  inline ::PB::idip_role_info* release_idip_info();
  inline void set_allocated_idip_info(::PB::idip_role_info* idip_info);

  // optional .PB.role_list_custom custom = 10;
  inline bool has_custom() const;
  inline void clear_custom();
  static const int kCustomFieldNumber = 10;
  inline const ::PB::role_list_custom& custom() const;
  inline ::PB::role_list_custom* mutable_custom();
  inline ::PB::role_list_custom* release_custom();
  inline void set_allocated_custom(::PB::role_list_custom* custom);

  // @@protoc_insertion_point(class_scope:PB.gs_role_mutable_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_fightcapacity();
  inline void clear_has_fightcapacity();
  inline void set_has_show_property();
  inline void clear_has_show_property();
  inline void set_has_pro();
  inline void clear_has_pro();
  inline void set_has_idip_info();
  inline void clear_has_idip_info();
  inline void set_has_custom();
  inline void clear_has_custom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 vip_level_;
  ::std::string* show_property_;
  ::PB::other_player_profile_from_gs* pro_;
  ::PB::idip_role_info* idip_info_;
  ::PB::role_list_custom* custom_;
  ::google::protobuf::uint32 fightcapacity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gs_role_mutable_data* default_instance_;
};
// -------------------------------------------------------------------

class nation_war_history : public ::google::protobuf::Message {
 public:
  nation_war_history();
  virtual ~nation_war_history();

  nation_war_history(const nation_war_history& from);

  inline nation_war_history& operator=(const nation_war_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nation_war_history& default_instance();

  void Swap(nation_war_history* other);

  // implements Message ----------------------------------------------

  nation_war_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nation_war_history& from);
  void MergeFrom(const nation_war_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 finish_time = 1;
  inline bool has_finish_time() const;
  inline void clear_finish_time();
  static const int kFinishTimeFieldNumber = 1;
  inline ::google::protobuf::int32 finish_time() const;
  inline void set_finish_time(::google::protobuf::int32 value);

  // required int32 nation_attack = 2;
  inline bool has_nation_attack() const;
  inline void clear_nation_attack();
  static const int kNationAttackFieldNumber = 2;
  inline ::google::protobuf::int32 nation_attack() const;
  inline void set_nation_attack(::google::protobuf::int32 value);

  // required int32 nation_defend = 3;
  inline bool has_nation_defend() const;
  inline void clear_nation_defend();
  static const int kNationDefendFieldNumber = 3;
  inline ::google::protobuf::int32 nation_defend() const;
  inline void set_nation_defend(::google::protobuf::int32 value);

  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.nation_war_history)
 private:
  inline void set_has_finish_time();
  inline void clear_has_finish_time();
  inline void set_has_nation_attack();
  inline void clear_has_nation_attack();
  inline void set_has_nation_defend();
  inline void clear_has_nation_defend();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 finish_time_;
  ::google::protobuf::int32 nation_attack_;
  ::google::protobuf::int32 nation_defend_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static nation_war_history* default_instance_;
};
// -------------------------------------------------------------------

class blessing_info : public ::google::protobuf::Message {
 public:
  blessing_info();
  virtual ~blessing_info();

  blessing_info(const blessing_info& from);

  inline blessing_info& operator=(const blessing_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blessing_info& default_instance();

  void Swap(blessing_info* other);

  // implements Message ----------------------------------------------

  blessing_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blessing_info& from);
  void MergeFrom(const blessing_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes padding = 1;
  inline bool has_padding() const;
  inline void clear_padding();
  static const int kPaddingFieldNumber = 1;
  inline const ::std::string& padding() const;
  inline void set_padding(const ::std::string& value);
  inline void set_padding(const char* value);
  inline void set_padding(const void* value, size_t size);
  inline ::std::string* mutable_padding();
  inline ::std::string* release_padding();
  inline void set_allocated_padding(::std::string* padding);

  // optional uint64 src = 2;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 2;
  inline ::google::protobuf::uint64 src() const;
  inline void set_src(::google::protobuf::uint64 value);

  // optional bytes src_name = 3;
  inline bool has_src_name() const;
  inline void clear_src_name();
  static const int kSrcNameFieldNumber = 3;
  inline const ::std::string& src_name() const;
  inline void set_src_name(const ::std::string& value);
  inline void set_src_name(const char* value);
  inline void set_src_name(const void* value, size_t size);
  inline ::std::string* mutable_src_name();
  inline ::std::string* release_src_name();
  inline void set_allocated_src_name(::std::string* src_name);

  // optional uint64 dst = 4;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 4;
  inline ::google::protobuf::uint64 dst() const;
  inline void set_dst(::google::protobuf::uint64 value);

  // optional bytes dst_name = 5;
  inline bool has_dst_name() const;
  inline void clear_dst_name();
  static const int kDstNameFieldNumber = 5;
  inline const ::std::string& dst_name() const;
  inline void set_dst_name(const ::std::string& value);
  inline void set_dst_name(const char* value);
  inline void set_dst_name(const void* value, size_t size);
  inline ::std::string* mutable_dst_name();
  inline ::std::string* release_dst_name();
  inline void set_allocated_dst_name(::std::string* dst_name);

  // optional uint32 repu_id = 6;
  inline bool has_repu_id() const;
  inline void clear_repu_id();
  static const int kRepuIdFieldNumber = 6;
  inline ::google::protobuf::uint32 repu_id() const;
  inline void set_repu_id(::google::protobuf::uint32 value);

  // optional uint32 repu_count = 7;
  inline bool has_repu_count() const;
  inline void clear_repu_count();
  static const int kRepuCountFieldNumber = 7;
  inline ::google::protobuf::uint32 repu_count() const;
  inline void set_repu_count(::google::protobuf::uint32 value);

  // optional uint32 item_tid = 8;
  inline bool has_item_tid() const;
  inline void clear_item_tid();
  static const int kItemTidFieldNumber = 8;
  inline ::google::protobuf::uint32 item_tid() const;
  inline void set_item_tid(::google::protobuf::uint32 value);

  // optional uint32 item_count = 9;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 9;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);

  // optional uint32 txnid = 10;
  inline bool has_txnid() const;
  inline void clear_txnid();
  static const int kTxnidFieldNumber = 10;
  inline ::google::protobuf::uint32 txnid() const;
  inline void set_txnid(::google::protobuf::uint32 value);

  // optional int32 result = 11;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 11;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.blessing_info)
 private:
  inline void set_has_padding();
  inline void clear_has_padding();
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_src_name();
  inline void clear_has_src_name();
  inline void set_has_dst();
  inline void clear_has_dst();
  inline void set_has_dst_name();
  inline void clear_has_dst_name();
  inline void set_has_repu_id();
  inline void clear_has_repu_id();
  inline void set_has_repu_count();
  inline void clear_has_repu_count();
  inline void set_has_item_tid();
  inline void clear_has_item_tid();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_txnid();
  inline void clear_has_txnid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* padding_;
  ::google::protobuf::uint64 src_;
  ::std::string* src_name_;
  ::google::protobuf::uint64 dst_;
  ::std::string* dst_name_;
  ::google::protobuf::uint32 repu_id_;
  ::google::protobuf::uint32 repu_count_;
  ::google::protobuf::uint32 item_tid_;
  ::google::protobuf::uint32 item_count_;
  ::google::protobuf::uint32 txnid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static blessing_info* default_instance_;
};
// -------------------------------------------------------------------

class card_info : public ::google::protobuf::Message {
 public:
  card_info();
  virtual ~card_info();

  card_info(const card_info& from);

  inline card_info& operator=(const card_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const card_info& default_instance();

  void Swap(card_info* other);

  // implements Message ----------------------------------------------

  card_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const card_info& from);
  void MergeFrom(const card_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 card_id = 1;
  inline bool has_card_id() const;
  inline void clear_card_id();
  static const int kCardIdFieldNumber = 1;
  inline ::google::protobuf::int32 card_id() const;
  inline void set_card_id(::google::protobuf::int32 value);

  // required int32 card_count = 2;
  inline bool has_card_count() const;
  inline void clear_card_count();
  static const int kCardCountFieldNumber = 2;
  inline ::google::protobuf::int32 card_count() const;
  inline void set_card_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.card_info)
 private:
  inline void set_has_card_id();
  inline void clear_has_card_id();
  inline void set_has_card_count();
  inline void clear_has_card_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_id_;
  ::google::protobuf::int32 card_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static card_info* default_instance_;
};
// -------------------------------------------------------------------

class greeting_info : public ::google::protobuf::Message {
 public:
  greeting_info();
  virtual ~greeting_info();

  greeting_info(const greeting_info& from);

  inline greeting_info& operator=(const greeting_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const greeting_info& default_instance();

  void Swap(greeting_info* other);

  // implements Message ----------------------------------------------

  greeting_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const greeting_info& from);
  void MergeFrom(const greeting_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef greeting_info_GREETING_TYPE GREETING_TYPE;
  static const GREETING_TYPE GREETING_INVITE = greeting_info_GREETING_TYPE_GREETING_INVITE;
  static const GREETING_TYPE GREETING_GRANT = greeting_info_GREETING_TYPE_GREETING_GRANT;
  static const GREETING_TYPE GREETING_THANKS = greeting_info_GREETING_TYPE_GREETING_THANKS;
  static inline bool GREETING_TYPE_IsValid(int value) {
    return greeting_info_GREETING_TYPE_IsValid(value);
  }
  static const GREETING_TYPE GREETING_TYPE_MIN =
    greeting_info_GREETING_TYPE_GREETING_TYPE_MIN;
  static const GREETING_TYPE GREETING_TYPE_MAX =
    greeting_info_GREETING_TYPE_GREETING_TYPE_MAX;
  static const int GREETING_TYPE_ARRAYSIZE =
    greeting_info_GREETING_TYPE_GREETING_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GREETING_TYPE_descriptor() {
    return greeting_info_GREETING_TYPE_descriptor();
  }
  static inline const ::std::string& GREETING_TYPE_Name(GREETING_TYPE value) {
    return greeting_info_GREETING_TYPE_Name(value);
  }
  static inline bool GREETING_TYPE_Parse(const ::std::string& name,
      GREETING_TYPE* value) {
    return greeting_info_GREETING_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.greeting_info.GREETING_TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::greeting_info_GREETING_TYPE type() const;
  inline void set_type(::PB::greeting_info_GREETING_TYPE value);

  // optional int32 info_seq = 2 [default = 0];
  inline bool has_info_seq() const;
  inline void clear_info_seq();
  static const int kInfoSeqFieldNumber = 2;
  inline ::google::protobuf::int32 info_seq() const;
  inline void set_info_seq(::google::protobuf::int32 value);

  // optional int64 roleid = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 3;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 param_1 = 5;
  inline bool has_param_1() const;
  inline void clear_param_1();
  static const int kParam1FieldNumber = 5;
  inline ::google::protobuf::int32 param_1() const;
  inline void set_param_1(::google::protobuf::int32 value);

  // optional int32 param_2 = 6;
  inline bool has_param_2() const;
  inline void clear_param_2();
  static const int kParam2FieldNumber = 6;
  inline ::google::protobuf::int32 param_2() const;
  inline void set_param_2(::google::protobuf::int32 value);

  // optional int32 param_3 = 7;
  inline bool has_param_3() const;
  inline void clear_param_3();
  static const int kParam3FieldNumber = 7;
  inline ::google::protobuf::int32 param_3() const;
  inline void set_param_3(::google::protobuf::int32 value);

  // optional int32 greet_tid = 8;
  inline bool has_greet_tid() const;
  inline void clear_greet_tid();
  static const int kGreetTidFieldNumber = 8;
  inline ::google::protobuf::int32 greet_tid() const;
  inline void set_greet_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.greeting_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info_seq();
  inline void clear_has_info_seq();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_param_1();
  inline void clear_has_param_1();
  inline void set_has_param_2();
  inline void clear_has_param_2();
  inline void set_has_param_3();
  inline void clear_has_param_3();
  inline void set_has_greet_tid();
  inline void clear_has_greet_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 info_seq_;
  ::google::protobuf::int64 roleid_;
  ::std::string* name_;
  ::google::protobuf::int32 param_1_;
  ::google::protobuf::int32 param_2_;
  ::google::protobuf::int32 param_3_;
  ::google::protobuf::int32 greet_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static greeting_info* default_instance_;
};
// -------------------------------------------------------------------

class ask_help_info : public ::google::protobuf::Message {
 public:
  ask_help_info();
  virtual ~ask_help_info();

  ask_help_info(const ask_help_info& from);

  inline ask_help_info& operator=(const ask_help_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ask_help_info& default_instance();

  void Swap(ask_help_info* other);

  // implements Message ----------------------------------------------

  ask_help_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ask_help_info& from);
  void MergeFrom(const ask_help_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ask_help_info_relation_type relation_type;
  static const relation_type RT_STRANGER = ask_help_info_relation_type_RT_STRANGER;
  static const relation_type RT_CORP = ask_help_info_relation_type_RT_CORP;
  static const relation_type RT_NATION = ask_help_info_relation_type_RT_NATION;
  static inline bool relation_type_IsValid(int value) {
    return ask_help_info_relation_type_IsValid(value);
  }
  static const relation_type relation_type_MIN =
    ask_help_info_relation_type_relation_type_MIN;
  static const relation_type relation_type_MAX =
    ask_help_info_relation_type_relation_type_MAX;
  static const int relation_type_ARRAYSIZE =
    ask_help_info_relation_type_relation_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  relation_type_descriptor() {
    return ask_help_info_relation_type_descriptor();
  }
  static inline const ::std::string& relation_type_Name(relation_type value) {
    return ask_help_info_relation_type_Name(value);
  }
  static inline bool relation_type_Parse(const ::std::string& name,
      relation_type* value) {
    return ask_help_info_relation_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline ::google::protobuf::uint64 src() const;
  inline void set_src(::google::protobuf::uint64 value);

  // optional bytes src_name = 2;
  inline bool has_src_name() const;
  inline void clear_src_name();
  static const int kSrcNameFieldNumber = 2;
  inline const ::std::string& src_name() const;
  inline void set_src_name(const ::std::string& value);
  inline void set_src_name(const char* value);
  inline void set_src_name(const void* value, size_t size);
  inline ::std::string* mutable_src_name();
  inline ::std::string* release_src_name();
  inline void set_allocated_src_name(::std::string* src_name);

  // required int32 scene_tag = 3;
  inline bool has_scene_tag() const;
  inline void clear_scene_tag();
  static const int kSceneTagFieldNumber = 3;
  inline ::google::protobuf::int32 scene_tag() const;
  inline void set_scene_tag(::google::protobuf::int32 value);

  // optional int32 mirror_id = 4;
  inline bool has_mirror_id() const;
  inline void clear_mirror_id();
  static const int kMirrorIdFieldNumber = 4;
  inline ::google::protobuf::int32 mirror_id() const;
  inline void set_mirror_id(::google::protobuf::int32 value);

  // required .PB.a3d_pos pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::PB::a3d_pos& pos() const;
  inline ::PB::a3d_pos* mutable_pos();
  inline ::PB::a3d_pos* release_pos();
  inline void set_allocated_pos(::PB::a3d_pos* pos);

  // optional int32 end_timestamp = 6;
  inline bool has_end_timestamp() const;
  inline void clear_end_timestamp();
  static const int kEndTimestampFieldNumber = 6;
  inline ::google::protobuf::int32 end_timestamp() const;
  inline void set_end_timestamp(::google::protobuf::int32 value);

  // optional .PB.ask_help_info_type info_type = 7;
  inline bool has_info_type() const;
  inline void clear_info_type();
  static const int kInfoTypeFieldNumber = 7;
  inline ::PB::ask_help_info_type info_type() const;
  inline void set_info_type(::PB::ask_help_info_type value);

  // optional .PB.ask_help_info.relation_type relation = 8;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 8;
  inline ::PB::ask_help_info_relation_type relation() const;
  inline void set_relation(::PB::ask_help_info_relation_type value);

  // optional sint32 certificate = 9;
  inline bool has_certificate() const;
  inline void clear_certificate();
  static const int kCertificateFieldNumber = 9;
  inline ::google::protobuf::int32 certificate() const;
  inline void set_certificate(::google::protobuf::int32 value);

  // optional int32 src_nation = 10;
  inline bool has_src_nation() const;
  inline void clear_src_nation();
  static const int kSrcNationFieldNumber = 10;
  inline ::google::protobuf::int32 src_nation() const;
  inline void set_src_nation(::google::protobuf::int32 value);

  // optional int32 corp_id = 11;
  inline bool has_corp_id() const;
  inline void clear_corp_id();
  static const int kCorpIdFieldNumber = 11;
  inline ::google::protobuf::int32 corp_id() const;
  inline void set_corp_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.ask_help_info)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_src_name();
  inline void clear_has_src_name();
  inline void set_has_scene_tag();
  inline void clear_has_scene_tag();
  inline void set_has_mirror_id();
  inline void clear_has_mirror_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_end_timestamp();
  inline void clear_has_end_timestamp();
  inline void set_has_info_type();
  inline void clear_has_info_type();
  inline void set_has_relation();
  inline void clear_has_relation();
  inline void set_has_certificate();
  inline void clear_has_certificate();
  inline void set_has_src_nation();
  inline void clear_has_src_nation();
  inline void set_has_corp_id();
  inline void clear_has_corp_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 src_;
  ::std::string* src_name_;
  ::google::protobuf::int32 scene_tag_;
  ::google::protobuf::int32 mirror_id_;
  ::PB::a3d_pos* pos_;
  ::google::protobuf::int32 end_timestamp_;
  int info_type_;
  int relation_;
  ::google::protobuf::int32 certificate_;
  ::google::protobuf::int32 src_nation_;
  ::google::protobuf::int32 corp_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static ask_help_info* default_instance_;
};
// -------------------------------------------------------------------

class roam_match_info : public ::google::protobuf::Message {
 public:
  roam_match_info();
  virtual ~roam_match_info();

  roam_match_info(const roam_match_info& from);

  inline roam_match_info& operator=(const roam_match_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const roam_match_info& default_instance();

  void Swap(roam_match_info* other);

  // implements Message ----------------------------------------------

  roam_match_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const roam_match_info& from);
  void MergeFrom(const roam_match_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // optional int32 nationid = 2;
  inline bool has_nationid() const;
  inline void clear_nationid();
  static const int kNationidFieldNumber = 2;
  inline ::google::protobuf::int32 nationid() const;
  inline void set_nationid(::google::protobuf::int32 value);

  // optional int32 league_id = 3;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 3;
  inline ::google::protobuf::int32 league_id() const;
  inline void set_league_id(::google::protobuf::int32 value);

  // optional int32 war_id = 4;
  inline bool has_war_id() const;
  inline void clear_war_id();
  static const int kWarIdFieldNumber = 4;
  inline ::google::protobuf::int32 war_id() const;
  inline void set_war_id(::google::protobuf::int32 value);

  // optional int32 camp_id = 5;
  inline bool has_camp_id() const;
  inline void clear_camp_id();
  static const int kCampIdFieldNumber = 5;
  inline ::google::protobuf::int32 camp_id() const;
  inline void set_camp_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.roam_match_info)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_nationid();
  inline void clear_has_nationid();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_war_id();
  inline void clear_has_war_id();
  inline void set_has_camp_id();
  inline void clear_has_camp_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 zoneid_;
  ::google::protobuf::int32 nationid_;
  ::google::protobuf::int32 league_id_;
  ::google::protobuf::int32 war_id_;
  ::google::protobuf::int32 camp_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static roam_match_info* default_instance_;
};
// -------------------------------------------------------------------

class db_roam_record_info : public ::google::protobuf::Message {
 public:
  db_roam_record_info();
  virtual ~db_roam_record_info();

  db_roam_record_info(const db_roam_record_info& from);

  inline db_roam_record_info& operator=(const db_roam_record_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_roam_record_info& default_instance();

  void Swap(db_roam_record_info* other);

  // implements Message ----------------------------------------------

  db_roam_record_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_roam_record_info& from);
  void MergeFrom(const db_roam_record_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // optional int32 nation = 2;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 2;
  inline ::google::protobuf::int32 nation() const;
  inline void set_nation(::google::protobuf::int32 value);

  // optional int32 leagueid = 3;
  inline bool has_leagueid() const;
  inline void clear_leagueid();
  static const int kLeagueidFieldNumber = 3;
  inline ::google::protobuf::int32 leagueid() const;
  inline void set_leagueid(::google::protobuf::int32 value);

  // optional int32 campid = 4;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 4;
  inline ::google::protobuf::int32 campid() const;
  inline void set_campid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_roam_record_info)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_leagueid();
  inline void clear_has_leagueid();
  inline void set_has_campid();
  inline void clear_has_campid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 zoneid_;
  ::google::protobuf::int32 nation_;
  ::google::protobuf::int32 leagueid_;
  ::google::protobuf::int32 campid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_roam_record_info* default_instance_;
};
// -------------------------------------------------------------------

class db_roam_record_data : public ::google::protobuf::Message {
 public:
  db_roam_record_data();
  virtual ~db_roam_record_data();

  db_roam_record_data(const db_roam_record_data& from);

  inline db_roam_record_data& operator=(const db_roam_record_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_roam_record_data& default_instance();

  void Swap(db_roam_record_data* other);

  // implements Message ----------------------------------------------

  db_roam_record_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_roam_record_data& from);
  void MergeFrom(const db_roam_record_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 instid = 1;
  inline bool has_instid() const;
  inline void clear_instid();
  static const int kInstidFieldNumber = 1;
  inline ::google::protobuf::int32 instid() const;
  inline void set_instid(::google::protobuf::int32 value);

  // optional int32 win_campid = 2;
  inline bool has_win_campid() const;
  inline void clear_win_campid();
  static const int kWinCampidFieldNumber = 2;
  inline ::google::protobuf::int32 win_campid() const;
  inline void set_win_campid(::google::protobuf::int32 value);

  // optional int32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // repeated .PB.db_roam_record_info info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::PB::db_roam_record_info& info(int index) const;
  inline ::PB::db_roam_record_info* mutable_info(int index);
  inline ::PB::db_roam_record_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:PB.db_roam_record_data)
 private:
  inline void set_has_instid();
  inline void clear_has_instid();
  inline void set_has_win_campid();
  inline void clear_has_win_campid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 instid_;
  ::google::protobuf::int32 win_campid_;
  ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_info > info_;
  ::google::protobuf::int32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_roam_record_data* default_instance_;
};
// -------------------------------------------------------------------

class instance_extend_info : public ::google::protobuf::Message {
 public:
  instance_extend_info();
  virtual ~instance_extend_info();

  instance_extend_info(const instance_extend_info& from);

  inline instance_extend_info& operator=(const instance_extend_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const instance_extend_info& default_instance();

  void Swap(instance_extend_info* other);

  // implements Message ----------------------------------------------

  instance_extend_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const instance_extend_info& from);
  void MergeFrom(const instance_extend_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 param1 = 1;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 1;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // repeated int64 param2 = 2;
  inline int param2_size() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 2;
  inline ::google::protobuf::int64 param2(int index) const;
  inline void set_param2(int index, ::google::protobuf::int64 value);
  inline void add_param2(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      param2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_param2();

  // @@protoc_insertion_point(class_scope:PB.instance_extend_info)
 private:
  inline void set_has_param1();
  inline void clear_has_param1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > param2_;
  ::google::protobuf::int32 param1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static instance_extend_info* default_instance_;
};
// -------------------------------------------------------------------

class corp_farmland : public ::google::protobuf::Message {
 public:
  corp_farmland();
  virtual ~corp_farmland();

  corp_farmland(const corp_farmland& from);

  inline corp_farmland& operator=(const corp_farmland& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const corp_farmland& default_instance();

  void Swap(corp_farmland* other);

  // implements Message ----------------------------------------------

  corp_farmland* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const corp_farmland& from);
  void MergeFrom(const corp_farmland& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cur_planting_tid = 3;
  inline bool has_cur_planting_tid() const;
  inline void clear_cur_planting_tid();
  static const int kCurPlantingTidFieldNumber = 3;
  inline ::google::protobuf::int32 cur_planting_tid() const;
  inline void set_cur_planting_tid(::google::protobuf::int32 value);

  // optional int32 start_time = 4;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  inline ::google::protobuf::int32 start_time() const;
  inline void set_start_time(::google::protobuf::int32 value);

  // optional int32 harvest_time = 5;
  inline bool has_harvest_time() const;
  inline void clear_harvest_time();
  static const int kHarvestTimeFieldNumber = 5;
  inline ::google::protobuf::int32 harvest_time() const;
  inline void set_harvest_time(::google::protobuf::int32 value);

  // optional bool can_speed = 6;
  inline bool has_can_speed() const;
  inline void clear_can_speed();
  static const int kCanSpeedFieldNumber = 6;
  inline bool can_speed() const;
  inline void set_can_speed(bool value);

  // @@protoc_insertion_point(class_scope:PB.corp_farmland)
 private:
  inline void set_has_cur_planting_tid();
  inline void clear_has_cur_planting_tid();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_harvest_time();
  inline void clear_has_harvest_time();
  inline void set_has_can_speed();
  inline void clear_has_can_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cur_planting_tid_;
  ::google::protobuf::int32 start_time_;
  ::google::protobuf::int32 harvest_time_;
  bool can_speed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static corp_farmland* default_instance_;
};
// -------------------------------------------------------------------

class enter_instance_config_client_config : public ::google::protobuf::Message {
 public:
  enter_instance_config_client_config();
  virtual ~enter_instance_config_client_config();

  enter_instance_config_client_config(const enter_instance_config_client_config& from);

  inline enter_instance_config_client_config& operator=(const enter_instance_config_client_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_instance_config_client_config& default_instance();

  void Swap(enter_instance_config_client_config* other);

  // implements Message ----------------------------------------------

  enter_instance_config_client_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_instance_config_client_config& from);
  void MergeFrom(const enter_instance_config_client_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mafia_id = 1;
  inline bool has_mafia_id() const;
  inline void clear_mafia_id();
  static const int kMafiaIdFieldNumber = 1;
  inline ::google::protobuf::int32 mafia_id() const;
  inline void set_mafia_id(::google::protobuf::int32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional .PB.instance_extend_info info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::PB::instance_extend_info& info() const;
  inline ::PB::instance_extend_info* mutable_info();
  inline ::PB::instance_extend_info* release_info();
  inline void set_allocated_info(::PB::instance_extend_info* info);

  // @@protoc_insertion_point(class_scope:PB.enter_instance_config.client_config)
 private:
  inline void set_has_mafia_id();
  inline void clear_has_mafia_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* password_;
  ::PB::instance_extend_info* info_;
  ::google::protobuf::int32 mafia_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static enter_instance_config_client_config* default_instance_;
};
// -------------------------------------------------------------------

class enter_instance_config_server_config : public ::google::protobuf::Message {
 public:
  enter_instance_config_server_config();
  virtual ~enter_instance_config_server_config();

  enter_instance_config_server_config(const enter_instance_config_server_config& from);

  inline enter_instance_config_server_config& operator=(const enter_instance_config_server_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_instance_config_server_config& default_instance();

  void Swap(enter_instance_config_server_config* other);

  // implements Message ----------------------------------------------

  enter_instance_config_server_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_instance_config_server_config& from);
  void MergeFrom(const enter_instance_config_server_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 param1 = 1;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 1;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // optional int32 param2 = 2;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 2;
  inline ::google::protobuf::int32 param2() const;
  inline void set_param2(::google::protobuf::int32 value);

  // optional .PB.a3d_pos pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::PB::a3d_pos& pos() const;
  inline ::PB::a3d_pos* mutable_pos();
  inline ::PB::a3d_pos* release_pos();
  inline void set_allocated_pos(::PB::a3d_pos* pos);

  // @@protoc_insertion_point(class_scope:PB.enter_instance_config.server_config)
 private:
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 param1_;
  ::google::protobuf::int32 param2_;
  ::PB::a3d_pos* pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static enter_instance_config_server_config* default_instance_;
};
// -------------------------------------------------------------------

class enter_instance_config : public ::google::protobuf::Message {
 public:
  enter_instance_config();
  virtual ~enter_instance_config();

  enter_instance_config(const enter_instance_config& from);

  inline enter_instance_config& operator=(const enter_instance_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_instance_config& default_instance();

  void Swap(enter_instance_config* other);

  // implements Message ----------------------------------------------

  enter_instance_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_instance_config& from);
  void MergeFrom(const enter_instance_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef enter_instance_config_client_config client_config;
  typedef enter_instance_config_server_config server_config;

  // accessors -------------------------------------------------------

  // optional .PB.enter_instance_config.client_config client = 1;
  inline bool has_client() const;
  inline void clear_client();
  static const int kClientFieldNumber = 1;
  inline const ::PB::enter_instance_config_client_config& client() const;
  inline ::PB::enter_instance_config_client_config* mutable_client();
  inline ::PB::enter_instance_config_client_config* release_client();
  inline void set_allocated_client(::PB::enter_instance_config_client_config* client);

  // optional .PB.enter_instance_config.server_config server = 2;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 2;
  inline const ::PB::enter_instance_config_server_config& server() const;
  inline ::PB::enter_instance_config_server_config* mutable_server();
  inline ::PB::enter_instance_config_server_config* release_server();
  inline void set_allocated_server(::PB::enter_instance_config_server_config* server);

  // @@protoc_insertion_point(class_scope:PB.enter_instance_config)
 private:
  inline void set_has_client();
  inline void clear_has_client();
  inline void set_has_server();
  inline void clear_has_server();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::enter_instance_config_client_config* client_;
  ::PB::enter_instance_config_server_config* server_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static enter_instance_config* default_instance_;
};
// -------------------------------------------------------------------

class player_corps_attr_config_rent_chariot_info : public ::google::protobuf::Message {
 public:
  player_corps_attr_config_rent_chariot_info();
  virtual ~player_corps_attr_config_rent_chariot_info();

  player_corps_attr_config_rent_chariot_info(const player_corps_attr_config_rent_chariot_info& from);

  inline player_corps_attr_config_rent_chariot_info& operator=(const player_corps_attr_config_rent_chariot_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_corps_attr_config_rent_chariot_info& default_instance();

  void Swap(player_corps_attr_config_rent_chariot_info* other);

  // implements Message ----------------------------------------------

  player_corps_attr_config_rent_chariot_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_corps_attr_config_rent_chariot_info& from);
  void MergeFrom(const player_corps_attr_config_rent_chariot_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chariot_hp = 3;
  inline bool has_chariot_hp() const;
  inline void clear_chariot_hp();
  static const int kChariotHpFieldNumber = 3;
  inline ::google::protobuf::int32 chariot_hp() const;
  inline void set_chariot_hp(::google::protobuf::int32 value);

  // optional int32 chariot_tid = 4;
  inline bool has_chariot_tid() const;
  inline void clear_chariot_tid();
  static const int kChariotTidFieldNumber = 4;
  inline ::google::protobuf::int32 chariot_tid() const;
  inline void set_chariot_tid(::google::protobuf::int32 value);

  // optional int32 chariot_level = 5;
  inline bool has_chariot_level() const;
  inline void clear_chariot_level();
  static const int kChariotLevelFieldNumber = 5;
  inline ::google::protobuf::int32 chariot_level() const;
  inline void set_chariot_level(::google::protobuf::int32 value);

  // optional int32 chariot_rent_timestamp = 6;
  inline bool has_chariot_rent_timestamp() const;
  inline void clear_chariot_rent_timestamp();
  static const int kChariotRentTimestampFieldNumber = 6;
  inline ::google::protobuf::int32 chariot_rent_timestamp() const;
  inline void set_chariot_rent_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.player_corps_attr_config.rent_chariot_info)
 private:
  inline void set_has_chariot_hp();
  inline void clear_has_chariot_hp();
  inline void set_has_chariot_tid();
  inline void clear_has_chariot_tid();
  inline void set_has_chariot_level();
  inline void clear_has_chariot_level();
  inline void set_has_chariot_rent_timestamp();
  inline void clear_has_chariot_rent_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chariot_hp_;
  ::google::protobuf::int32 chariot_tid_;
  ::google::protobuf::int32 chariot_level_;
  ::google::protobuf::int32 chariot_rent_timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_corps_attr_config_rent_chariot_info* default_instance_;
};
// -------------------------------------------------------------------

class player_corps_attr_config : public ::google::protobuf::Message {
 public:
  player_corps_attr_config();
  virtual ~player_corps_attr_config();

  player_corps_attr_config(const player_corps_attr_config& from);

  inline player_corps_attr_config& operator=(const player_corps_attr_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_corps_attr_config& default_instance();

  void Swap(player_corps_attr_config* other);

  // implements Message ----------------------------------------------

  player_corps_attr_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_corps_attr_config& from);
  void MergeFrom(const player_corps_attr_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef player_corps_attr_config_rent_chariot_info rent_chariot_info;

  // accessors -------------------------------------------------------

  // optional int32 active_level = 1 [default = -1];
  inline bool has_active_level() const;
  inline void clear_active_level();
  static const int kActiveLevelFieldNumber = 1;
  inline ::google::protobuf::int32 active_level() const;
  inline void set_active_level(::google::protobuf::int32 value);

  // optional int32 active_index = 2 [default = -1];
  inline bool has_active_index() const;
  inline void clear_active_index();
  static const int kActiveIndexFieldNumber = 2;
  inline ::google::protobuf::int32 active_index() const;
  inline void set_active_index(::google::protobuf::int32 value);

  // optional .PB.player_corps_attr_config.rent_chariot_info chariot_info = 4;
  inline bool has_chariot_info() const;
  inline void clear_chariot_info();
  static const int kChariotInfoFieldNumber = 4;
  inline const ::PB::player_corps_attr_config_rent_chariot_info& chariot_info() const;
  inline ::PB::player_corps_attr_config_rent_chariot_info* mutable_chariot_info();
  inline ::PB::player_corps_attr_config_rent_chariot_info* release_chariot_info();
  inline void set_allocated_chariot_info(::PB::player_corps_attr_config_rent_chariot_info* chariot_info);

  // @@protoc_insertion_point(class_scope:PB.player_corps_attr_config)
 private:
  inline void set_has_active_level();
  inline void clear_has_active_level();
  inline void set_has_active_index();
  inline void clear_has_active_index();
  inline void set_has_chariot_info();
  inline void clear_has_chariot_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 active_level_;
  ::google::protobuf::int32 active_index_;
  ::PB::player_corps_attr_config_rent_chariot_info* chariot_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_corps_attr_config* default_instance_;
};
// -------------------------------------------------------------------

class player_stune_config_player_rune_prop_config : public ::google::protobuf::Message {
 public:
  player_stune_config_player_rune_prop_config();
  virtual ~player_stune_config_player_rune_prop_config();

  player_stune_config_player_rune_prop_config(const player_stune_config_player_rune_prop_config& from);

  inline player_stune_config_player_rune_prop_config& operator=(const player_stune_config_player_rune_prop_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_stune_config_player_rune_prop_config& default_instance();

  void Swap(player_stune_config_player_rune_prop_config* other);

  // implements Message ----------------------------------------------

  player_stune_config_player_rune_prop_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_stune_config_player_rune_prop_config& from);
  void MergeFrom(const player_stune_config_player_rune_prop_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 master_skill_id = 1;
  inline bool has_master_skill_id() const;
  inline void clear_master_skill_id();
  static const int kMasterSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 master_skill_id() const;
  inline void set_master_skill_id(::google::protobuf::int32 value);

  // repeated int32 rune_skill_level = 2;
  inline int rune_skill_level_size() const;
  inline void clear_rune_skill_level();
  static const int kRuneSkillLevelFieldNumber = 2;
  inline ::google::protobuf::int32 rune_skill_level(int index) const;
  inline void set_rune_skill_level(int index, ::google::protobuf::int32 value);
  inline void add_rune_skill_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rune_skill_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rune_skill_level();

  // @@protoc_insertion_point(class_scope:PB.player_stune_config.player_rune_prop_config)
 private:
  inline void set_has_master_skill_id();
  inline void clear_has_master_skill_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rune_skill_level_;
  ::google::protobuf::int32 master_skill_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_stune_config_player_rune_prop_config* default_instance_;
};
// -------------------------------------------------------------------

class player_stune_config_player_rune_config : public ::google::protobuf::Message {
 public:
  player_stune_config_player_rune_config();
  virtual ~player_stune_config_player_rune_config();

  player_stune_config_player_rune_config(const player_stune_config_player_rune_config& from);

  inline player_stune_config_player_rune_config& operator=(const player_stune_config_player_rune_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_stune_config_player_rune_config& default_instance();

  void Swap(player_stune_config_player_rune_config* other);

  // implements Message ----------------------------------------------

  player_stune_config_player_rune_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_stune_config_player_rune_config& from);
  void MergeFrom(const player_stune_config_player_rune_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 master_skill_id = 1;
  inline bool has_master_skill_id() const;
  inline void clear_master_skill_id();
  static const int kMasterSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 master_skill_id() const;
  inline void set_master_skill_id(::google::protobuf::int32 value);

  // required int32 active_index = 2;
  inline bool has_active_index() const;
  inline void clear_active_index();
  static const int kActiveIndexFieldNumber = 2;
  inline ::google::protobuf::int32 active_index() const;
  inline void set_active_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.player_stune_config.player_rune_config)
 private:
  inline void set_has_master_skill_id();
  inline void clear_has_master_skill_id();
  inline void set_has_active_index();
  inline void clear_has_active_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 master_skill_id_;
  ::google::protobuf::int32 active_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_stune_config_player_rune_config* default_instance_;
};
// -------------------------------------------------------------------

class player_stune_config_config_set : public ::google::protobuf::Message {
 public:
  player_stune_config_config_set();
  virtual ~player_stune_config_config_set();

  player_stune_config_config_set(const player_stune_config_config_set& from);

  inline player_stune_config_config_set& operator=(const player_stune_config_config_set& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_stune_config_config_set& default_instance();

  void Swap(player_stune_config_config_set* other);

  // implements Message ----------------------------------------------

  player_stune_config_config_set* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_stune_config_config_set& from);
  void MergeFrom(const player_stune_config_config_set& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 set_index = 1;
  inline bool has_set_index() const;
  inline void clear_set_index();
  static const int kSetIndexFieldNumber = 1;
  inline ::google::protobuf::int32 set_index() const;
  inline void set_set_index(::google::protobuf::int32 value);

  // repeated .PB.player_stune_config.player_rune_config configs = 2;
  inline int configs_size() const;
  inline void clear_configs();
  static const int kConfigsFieldNumber = 2;
  inline const ::PB::player_stune_config_player_rune_config& configs(int index) const;
  inline ::PB::player_stune_config_player_rune_config* mutable_configs(int index);
  inline ::PB::player_stune_config_player_rune_config* add_configs();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_config >&
      configs() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_config >*
      mutable_configs();

  // @@protoc_insertion_point(class_scope:PB.player_stune_config.config_set)
 private:
  inline void set_has_set_index();
  inline void clear_has_set_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_config > configs_;
  ::google::protobuf::int32 set_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_stune_config_config_set* default_instance_;
};
// -------------------------------------------------------------------

class player_stune_config : public ::google::protobuf::Message {
 public:
  player_stune_config();
  virtual ~player_stune_config();

  player_stune_config(const player_stune_config& from);

  inline player_stune_config& operator=(const player_stune_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_stune_config& default_instance();

  void Swap(player_stune_config* other);

  // implements Message ----------------------------------------------

  player_stune_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_stune_config& from);
  void MergeFrom(const player_stune_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef player_stune_config_player_rune_prop_config player_rune_prop_config;
  typedef player_stune_config_player_rune_config player_rune_config;
  typedef player_stune_config_config_set config_set;

  // accessors -------------------------------------------------------

  // optional int32 rune_level = 1;
  inline bool has_rune_level() const;
  inline void clear_rune_level();
  static const int kRuneLevelFieldNumber = 1;
  inline ::google::protobuf::int32 rune_level() const;
  inline void set_rune_level(::google::protobuf::int32 value);

  // optional int32 rune_point = 2;
  inline bool has_rune_point() const;
  inline void clear_rune_point();
  static const int kRunePointFieldNumber = 2;
  inline ::google::protobuf::int32 rune_point() const;
  inline void set_rune_point(::google::protobuf::int32 value);

  // repeated .PB.player_stune_config.player_rune_prop_config rune_config = 3;
  inline int rune_config_size() const;
  inline void clear_rune_config();
  static const int kRuneConfigFieldNumber = 3;
  inline const ::PB::player_stune_config_player_rune_prop_config& rune_config(int index) const;
  inline ::PB::player_stune_config_player_rune_prop_config* mutable_rune_config(int index);
  inline ::PB::player_stune_config_player_rune_prop_config* add_rune_config();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_prop_config >&
      rune_config() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_prop_config >*
      mutable_rune_config();

  // repeated .PB.player_stune_config.config_set all_config_set = 4;
  inline int all_config_set_size() const;
  inline void clear_all_config_set();
  static const int kAllConfigSetFieldNumber = 4;
  inline const ::PB::player_stune_config_config_set& all_config_set(int index) const;
  inline ::PB::player_stune_config_config_set* mutable_all_config_set(int index);
  inline ::PB::player_stune_config_config_set* add_all_config_set();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_config_set >&
      all_config_set() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_config_set >*
      mutable_all_config_set();

  // optional int32 cur_active_set = 5;
  inline bool has_cur_active_set() const;
  inline void clear_cur_active_set();
  static const int kCurActiveSetFieldNumber = 5;
  inline ::google::protobuf::int32 cur_active_set() const;
  inline void set_cur_active_set(::google::protobuf::int32 value);

  // optional int32 total_rune_point = 6;
  inline bool has_total_rune_point() const;
  inline void clear_total_rune_point();
  static const int kTotalRunePointFieldNumber = 6;
  inline ::google::protobuf::int32 total_rune_point() const;
  inline void set_total_rune_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.player_stune_config)
 private:
  inline void set_has_rune_level();
  inline void clear_has_rune_level();
  inline void set_has_rune_point();
  inline void clear_has_rune_point();
  inline void set_has_cur_active_set();
  inline void clear_has_cur_active_set();
  inline void set_has_total_rune_point();
  inline void clear_has_total_rune_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rune_level_;
  ::google::protobuf::int32 rune_point_;
  ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_prop_config > rune_config_;
  ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_config_set > all_config_set_;
  ::google::protobuf::int32 cur_active_set_;
  ::google::protobuf::int32 total_rune_point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static player_stune_config* default_instance_;
};
// -------------------------------------------------------------------

class black_shop_info_black_shop_goods_info : public ::google::protobuf::Message {
 public:
  black_shop_info_black_shop_goods_info();
  virtual ~black_shop_info_black_shop_goods_info();

  black_shop_info_black_shop_goods_info(const black_shop_info_black_shop_goods_info& from);

  inline black_shop_info_black_shop_goods_info& operator=(const black_shop_info_black_shop_goods_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const black_shop_info_black_shop_goods_info& default_instance();

  void Swap(black_shop_info_black_shop_goods_info* other);

  // implements Message ----------------------------------------------

  black_shop_info_black_shop_goods_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const black_shop_info_black_shop_goods_info& from);
  void MergeFrom(const black_shop_info_black_shop_goods_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 store_id = 1;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 1;
  inline ::google::protobuf::int32 store_id() const;
  inline void set_store_id(::google::protobuf::int32 value);

  // required int32 goods_id = 2;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 2;
  inline ::google::protobuf::int32 goods_id() const;
  inline void set_goods_id(::google::protobuf::int32 value);

  // required int32 is_selled = 3;
  inline bool has_is_selled() const;
  inline void clear_is_selled();
  static const int kIsSelledFieldNumber = 3;
  inline ::google::protobuf::int32 is_selled() const;
  inline void set_is_selled(::google::protobuf::int32 value);

  // required int32 goods_pos = 4;
  inline bool has_goods_pos() const;
  inline void clear_goods_pos();
  static const int kGoodsPosFieldNumber = 4;
  inline ::google::protobuf::int32 goods_pos() const;
  inline void set_goods_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.black_shop_info.black_shop_goods_info)
 private:
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_is_selled();
  inline void clear_has_is_selled();
  inline void set_has_goods_pos();
  inline void clear_has_goods_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 store_id_;
  ::google::protobuf::int32 goods_id_;
  ::google::protobuf::int32 is_selled_;
  ::google::protobuf::int32 goods_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static black_shop_info_black_shop_goods_info* default_instance_;
};
// -------------------------------------------------------------------

class black_shop_info : public ::google::protobuf::Message {
 public:
  black_shop_info();
  virtual ~black_shop_info();

  black_shop_info(const black_shop_info& from);

  inline black_shop_info& operator=(const black_shop_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const black_shop_info& default_instance();

  void Swap(black_shop_info* other);

  // implements Message ----------------------------------------------

  black_shop_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const black_shop_info& from);
  void MergeFrom(const black_shop_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef black_shop_info_black_shop_goods_info black_shop_goods_info;

  // accessors -------------------------------------------------------

  // required int32 shop_id = 1;
  inline bool has_shop_id() const;
  inline void clear_shop_id();
  static const int kShopIdFieldNumber = 1;
  inline ::google::protobuf::int32 shop_id() const;
  inline void set_shop_id(::google::protobuf::int32 value);

  // required int32 next_refresh_time = 2;
  inline bool has_next_refresh_time() const;
  inline void clear_next_refresh_time();
  static const int kNextRefreshTimeFieldNumber = 2;
  inline ::google::protobuf::int32 next_refresh_time() const;
  inline void set_next_refresh_time(::google::protobuf::int32 value);

  // repeated .PB.black_shop_info.black_shop_goods_info goods = 3;
  inline int goods_size() const;
  inline void clear_goods();
  static const int kGoodsFieldNumber = 3;
  inline const ::PB::black_shop_info_black_shop_goods_info& goods(int index) const;
  inline ::PB::black_shop_info_black_shop_goods_info* mutable_goods(int index);
  inline ::PB::black_shop_info_black_shop_goods_info* add_goods();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info_black_shop_goods_info >&
      goods() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info_black_shop_goods_info >*
      mutable_goods();

  // @@protoc_insertion_point(class_scope:PB.black_shop_info)
 private:
  inline void set_has_shop_id();
  inline void clear_has_shop_id();
  inline void set_has_next_refresh_time();
  inline void clear_has_next_refresh_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 shop_id_;
  ::google::protobuf::int32 next_refresh_time_;
  ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info_black_shop_goods_info > goods_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static black_shop_info* default_instance_;
};
// -------------------------------------------------------------------

class climbtower_magic_shop_info_magic_shop_goods_info : public ::google::protobuf::Message {
 public:
  climbtower_magic_shop_info_magic_shop_goods_info();
  virtual ~climbtower_magic_shop_info_magic_shop_goods_info();

  climbtower_magic_shop_info_magic_shop_goods_info(const climbtower_magic_shop_info_magic_shop_goods_info& from);

  inline climbtower_magic_shop_info_magic_shop_goods_info& operator=(const climbtower_magic_shop_info_magic_shop_goods_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const climbtower_magic_shop_info_magic_shop_goods_info& default_instance();

  void Swap(climbtower_magic_shop_info_magic_shop_goods_info* other);

  // implements Message ----------------------------------------------

  climbtower_magic_shop_info_magic_shop_goods_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const climbtower_magic_shop_info_magic_shop_goods_info& from);
  void MergeFrom(const climbtower_magic_shop_info_magic_shop_goods_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 store_id = 1;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 1;
  inline ::google::protobuf::int32 store_id() const;
  inline void set_store_id(::google::protobuf::int32 value);

  // required int32 goods_id = 2;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 2;
  inline ::google::protobuf::int32 goods_id() const;
  inline void set_goods_id(::google::protobuf::int32 value);

  // required int32 is_selled = 3;
  inline bool has_is_selled() const;
  inline void clear_is_selled();
  static const int kIsSelledFieldNumber = 3;
  inline ::google::protobuf::int32 is_selled() const;
  inline void set_is_selled(::google::protobuf::int32 value);

  // required int32 goods_pos = 4;
  inline bool has_goods_pos() const;
  inline void clear_goods_pos();
  static const int kGoodsPosFieldNumber = 4;
  inline ::google::protobuf::int32 goods_pos() const;
  inline void set_goods_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.climbtower_magic_shop_info.magic_shop_goods_info)
 private:
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_is_selled();
  inline void clear_has_is_selled();
  inline void set_has_goods_pos();
  inline void clear_has_goods_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 store_id_;
  ::google::protobuf::int32 goods_id_;
  ::google::protobuf::int32 is_selled_;
  ::google::protobuf::int32 goods_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static climbtower_magic_shop_info_magic_shop_goods_info* default_instance_;
};
// -------------------------------------------------------------------

class climbtower_magic_shop_info : public ::google::protobuf::Message {
 public:
  climbtower_magic_shop_info();
  virtual ~climbtower_magic_shop_info();

  climbtower_magic_shop_info(const climbtower_magic_shop_info& from);

  inline climbtower_magic_shop_info& operator=(const climbtower_magic_shop_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const climbtower_magic_shop_info& default_instance();

  void Swap(climbtower_magic_shop_info* other);

  // implements Message ----------------------------------------------

  climbtower_magic_shop_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const climbtower_magic_shop_info& from);
  void MergeFrom(const climbtower_magic_shop_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef climbtower_magic_shop_info_magic_shop_goods_info magic_shop_goods_info;

  // accessors -------------------------------------------------------

  // required int32 shop_id = 1;
  inline bool has_shop_id() const;
  inline void clear_shop_id();
  static const int kShopIdFieldNumber = 1;
  inline ::google::protobuf::int32 shop_id() const;
  inline void set_shop_id(::google::protobuf::int32 value);

  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated .PB.climbtower_magic_shop_info.magic_shop_goods_info goods = 3;
  inline int goods_size() const;
  inline void clear_goods();
  static const int kGoodsFieldNumber = 3;
  inline const ::PB::climbtower_magic_shop_info_magic_shop_goods_info& goods(int index) const;
  inline ::PB::climbtower_magic_shop_info_magic_shop_goods_info* mutable_goods(int index);
  inline ::PB::climbtower_magic_shop_info_magic_shop_goods_info* add_goods();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info_magic_shop_goods_info >&
      goods() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info_magic_shop_goods_info >*
      mutable_goods();

  // @@protoc_insertion_point(class_scope:PB.climbtower_magic_shop_info)
 private:
  inline void set_has_shop_id();
  inline void clear_has_shop_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 shop_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info_magic_shop_goods_info > goods_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static climbtower_magic_shop_info* default_instance_;
};
// -------------------------------------------------------------------

class db_hero_trial_config : public ::google::protobuf::Message {
 public:
  db_hero_trial_config();
  virtual ~db_hero_trial_config();

  db_hero_trial_config(const db_hero_trial_config& from);

  inline db_hero_trial_config& operator=(const db_hero_trial_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_hero_trial_config& default_instance();

  void Swap(db_hero_trial_config* other);

  // implements Message ----------------------------------------------

  db_hero_trial_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_hero_trial_config& from);
  void MergeFrom(const db_hero_trial_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 free_refresh_times = 1;
  inline bool has_free_refresh_times() const;
  inline void clear_free_refresh_times();
  static const int kFreeRefreshTimesFieldNumber = 1;
  inline ::google::protobuf::int32 free_refresh_times() const;
  inline void set_free_refresh_times(::google::protobuf::int32 value);

  // optional int32 pay_refresh_times = 2;
  inline bool has_pay_refresh_times() const;
  inline void clear_pay_refresh_times();
  static const int kPayRefreshTimesFieldNumber = 2;
  inline ::google::protobuf::int32 pay_refresh_times() const;
  inline void set_pay_refresh_times(::google::protobuf::int32 value);

  // optional int32 cur_hero_tid = 3;
  inline bool has_cur_hero_tid() const;
  inline void clear_cur_hero_tid();
  static const int kCurHeroTidFieldNumber = 3;
  inline ::google::protobuf::int32 cur_hero_tid() const;
  inline void set_cur_hero_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_hero_trial_config)
 private:
  inline void set_has_free_refresh_times();
  inline void clear_has_free_refresh_times();
  inline void set_has_pay_refresh_times();
  inline void clear_has_pay_refresh_times();
  inline void set_has_cur_hero_tid();
  inline void clear_has_cur_hero_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 free_refresh_times_;
  ::google::protobuf::int32 pay_refresh_times_;
  ::google::protobuf::int32 cur_hero_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_hero_trial_config* default_instance_;
};
// -------------------------------------------------------------------

class level_shopid : public ::google::protobuf::Message {
 public:
  level_shopid();
  virtual ~level_shopid();

  level_shopid(const level_shopid& from);

  inline level_shopid& operator=(const level_shopid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const level_shopid& default_instance();

  void Swap(level_shopid* other);

  // implements Message ----------------------------------------------

  level_shopid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const level_shopid& from);
  void MergeFrom(const level_shopid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 shop_id = 2;
  inline bool has_shop_id() const;
  inline void clear_shop_id();
  static const int kShopIdFieldNumber = 2;
  inline ::google::protobuf::int32 shop_id() const;
  inline void set_shop_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.level_shopid)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_shop_id();
  inline void clear_has_shop_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 shop_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static level_shopid* default_instance_;
};
// -------------------------------------------------------------------

class db_strategy_info : public ::google::protobuf::Message {
 public:
  db_strategy_info();
  virtual ~db_strategy_info();

  db_strategy_info(const db_strategy_info& from);

  inline db_strategy_info& operator=(const db_strategy_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_strategy_info& default_instance();

  void Swap(db_strategy_info* other);

  // implements Message ----------------------------------------------

  db_strategy_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_strategy_info& from);
  void MergeFrom(const db_strategy_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 strategy_tid = 1;
  inline bool has_strategy_tid() const;
  inline void clear_strategy_tid();
  static const int kStrategyTidFieldNumber = 1;
  inline ::google::protobuf::int32 strategy_tid() const;
  inline void set_strategy_tid(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 chip_count = 3;
  inline bool has_chip_count() const;
  inline void clear_chip_count();
  static const int kChipCountFieldNumber = 3;
  inline ::google::protobuf::int32 chip_count() const;
  inline void set_chip_count(::google::protobuf::int32 value);

  // optional int32 star_level = 4;
  inline bool has_star_level() const;
  inline void clear_star_level();
  static const int kStarLevelFieldNumber = 4;
  inline ::google::protobuf::int32 star_level() const;
  inline void set_star_level(::google::protobuf::int32 value);

  // optional int32 blessing_num = 5;
  inline bool has_blessing_num() const;
  inline void clear_blessing_num();
  static const int kBlessingNumFieldNumber = 5;
  inline ::google::protobuf::int32 blessing_num() const;
  inline void set_blessing_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_strategy_info)
 private:
  inline void set_has_strategy_tid();
  inline void clear_has_strategy_tid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_chip_count();
  inline void clear_has_chip_count();
  inline void set_has_star_level();
  inline void clear_has_star_level();
  inline void set_has_blessing_num();
  inline void clear_has_blessing_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 strategy_tid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 chip_count_;
  ::google::protobuf::int32 star_level_;
  ::google::protobuf::int32 blessing_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_strategy_info* default_instance_;
};
// -------------------------------------------------------------------

class db_strategy_vectors : public ::google::protobuf::Message {
 public:
  db_strategy_vectors();
  virtual ~db_strategy_vectors();

  db_strategy_vectors(const db_strategy_vectors& from);

  inline db_strategy_vectors& operator=(const db_strategy_vectors& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_strategy_vectors& default_instance();

  void Swap(db_strategy_vectors* other);

  // implements Message ----------------------------------------------

  db_strategy_vectors* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_strategy_vectors& from);
  void MergeFrom(const db_strategy_vectors& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_STRATEGIES];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // repeated .PB.db_strategy_info strategies = 2;
  inline int strategies_size() const;
  inline void clear_strategies();
  static const int kStrategiesFieldNumber = 2;
  inline const ::PB::db_strategy_info& strategies(int index) const;
  inline ::PB::db_strategy_info* mutable_strategies(int index);
  inline ::PB::db_strategy_info* add_strategies();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_strategy_info >&
      strategies() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_strategy_info >*
      mutable_strategies();

  // @@protoc_insertion_point(class_scope:PB.db_strategy_vectors)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::db_strategy_info > strategies_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_strategy_vectors* default_instance_;
};
// -------------------------------------------------------------------

class db_surface_soul : public ::google::protobuf::Message {
 public:
  db_surface_soul();
  virtual ~db_surface_soul();

  db_surface_soul(const db_surface_soul& from);

  inline db_surface_soul& operator=(const db_surface_soul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_surface_soul& default_instance();

  void Swap(db_surface_soul* other);

  // implements Message ----------------------------------------------

  db_surface_soul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_surface_soul& from);
  void MergeFrom(const db_surface_soul& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 soul_tid = 1;
  inline bool has_soul_tid() const;
  inline void clear_soul_tid();
  static const int kSoulTidFieldNumber = 1;
  inline ::google::protobuf::int32 soul_tid() const;
  inline void set_soul_tid(::google::protobuf::int32 value);

  // optional int32 train_value = 2;
  inline bool has_train_value() const;
  inline void clear_train_value();
  static const int kTrainValueFieldNumber = 2;
  inline ::google::protobuf::int32 train_value() const;
  inline void set_train_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_surface_soul)
 private:
  inline void set_has_soul_tid();
  inline void clear_has_soul_tid();
  inline void set_has_train_value();
  inline void clear_has_train_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 soul_tid_;
  ::google::protobuf::int32 train_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_surface_soul* default_instance_;
};
// -------------------------------------------------------------------

class db_wing_refine_soul : public ::google::protobuf::Message {
 public:
  db_wing_refine_soul();
  virtual ~db_wing_refine_soul();

  db_wing_refine_soul(const db_wing_refine_soul& from);

  inline db_wing_refine_soul& operator=(const db_wing_refine_soul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_wing_refine_soul& default_instance();

  void Swap(db_wing_refine_soul* other);

  // implements Message ----------------------------------------------

  db_wing_refine_soul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_wing_refine_soul& from);
  void MergeFrom(const db_wing_refine_soul& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 surface_tid = 1;
  inline bool has_surface_tid() const;
  inline void clear_surface_tid();
  static const int kSurfaceTidFieldNumber = 1;
  inline ::google::protobuf::int32 surface_tid() const;
  inline void set_surface_tid(::google::protobuf::int32 value);

  // optional int32 train_level = 2;
  inline bool has_train_level() const;
  inline void clear_train_level();
  static const int kTrainLevelFieldNumber = 2;
  inline ::google::protobuf::int32 train_level() const;
  inline void set_train_level(::google::protobuf::int32 value);

  // repeated .PB.db_surface_soul souls = 3;
  inline int souls_size() const;
  inline void clear_souls();
  static const int kSoulsFieldNumber = 3;
  inline const ::PB::db_surface_soul& souls(int index) const;
  inline ::PB::db_surface_soul* mutable_souls(int index);
  inline ::PB::db_surface_soul* add_souls();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul >&
      souls() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul >*
      mutable_souls();

  // @@protoc_insertion_point(class_scope:PB.db_wing_refine_soul)
 private:
  inline void set_has_surface_tid();
  inline void clear_has_surface_tid();
  inline void set_has_train_level();
  inline void clear_has_train_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 surface_tid_;
  ::google::protobuf::int32 train_level_;
  ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul > souls_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_wing_refine_soul* default_instance_;
};
// -------------------------------------------------------------------

class db_refine_surfaces : public ::google::protobuf::Message {
 public:
  db_refine_surfaces();
  virtual ~db_refine_surfaces();

  db_refine_surfaces(const db_refine_surfaces& from);

  inline db_refine_surfaces& operator=(const db_refine_surfaces& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_refine_surfaces& default_instance();

  void Swap(db_refine_surfaces* other);

  // implements Message ----------------------------------------------

  db_refine_surfaces* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_refine_surfaces& from);
  void MergeFrom(const db_refine_surfaces& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GPS_TYPE type = 1 [default = GUT_WING_REFINE_SOUL];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::GPS_TYPE type() const;
  inline void set_type(::PB::GPS_TYPE value);

  // repeated .PB.db_wing_refine_soul surfaces = 2;
  inline int surfaces_size() const;
  inline void clear_surfaces();
  static const int kSurfacesFieldNumber = 2;
  inline const ::PB::db_wing_refine_soul& surfaces(int index) const;
  inline ::PB::db_wing_refine_soul* mutable_surfaces(int index);
  inline ::PB::db_wing_refine_soul* add_surfaces();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_wing_refine_soul >&
      surfaces() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_wing_refine_soul >*
      mutable_surfaces();

  // @@protoc_insertion_point(class_scope:PB.db_refine_surfaces)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::db_wing_refine_soul > surfaces_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_refine_surfaces* default_instance_;
};
// -------------------------------------------------------------------

class db_equip_soul : public ::google::protobuf::Message {
 public:
  db_equip_soul();
  virtual ~db_equip_soul();

  db_equip_soul(const db_equip_soul& from);

  inline db_equip_soul& operator=(const db_equip_soul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_equip_soul& default_instance();

  void Swap(db_equip_soul* other);

  // implements Message ----------------------------------------------

  db_equip_soul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_equip_soul& from);
  void MergeFrom(const db_equip_soul& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 property_tid = 1;
  inline bool has_property_tid() const;
  inline void clear_property_tid();
  static const int kPropertyTidFieldNumber = 1;
  inline ::google::protobuf::int32 property_tid() const;
  inline void set_property_tid(::google::protobuf::int32 value);

  // optional int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_equip_soul)
 private:
  inline void set_has_property_tid();
  inline void clear_has_property_tid();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 property_tid_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_equip_soul* default_instance_;
};
// -------------------------------------------------------------------

class db_equip_fixed_data : public ::google::protobuf::Message {
 public:
  db_equip_fixed_data();
  virtual ~db_equip_fixed_data();

  db_equip_fixed_data(const db_equip_fixed_data& from);

  inline db_equip_fixed_data& operator=(const db_equip_fixed_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_equip_fixed_data& default_instance();

  void Swap(db_equip_fixed_data* other);

  // implements Message ----------------------------------------------

  db_equip_fixed_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_equip_fixed_data& from);
  void MergeFrom(const db_equip_fixed_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // repeated int32 mingwens = 2;
  inline int mingwens_size() const;
  inline void clear_mingwens();
  static const int kMingwensFieldNumber = 2;
  inline ::google::protobuf::int32 mingwens(int index) const;
  inline void set_mingwens(int index, ::google::protobuf::int32 value);
  inline void add_mingwens(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mingwens() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mingwens();

  // repeated .PB.db_equip_soul souls = 3;
  inline int souls_size() const;
  inline void clear_souls();
  static const int kSoulsFieldNumber = 3;
  inline const ::PB::db_equip_soul& souls(int index) const;
  inline ::PB::db_equip_soul* mutable_souls(int index);
  inline ::PB::db_equip_soul* add_souls();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_equip_soul >&
      souls() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_equip_soul >*
      mutable_souls();

  // @@protoc_insertion_point(class_scope:PB.db_equip_fixed_data)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mingwens_;
  ::google::protobuf::RepeatedPtrField< ::PB::db_equip_soul > souls_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_equip_fixed_data* default_instance_;
};
// -------------------------------------------------------------------

class db_magic_weapon_property : public ::google::protobuf::Message {
 public:
  db_magic_weapon_property();
  virtual ~db_magic_weapon_property();

  db_magic_weapon_property(const db_magic_weapon_property& from);

  inline db_magic_weapon_property& operator=(const db_magic_weapon_property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_magic_weapon_property& default_instance();

  void Swap(db_magic_weapon_property* other);

  // implements Message ----------------------------------------------

  db_magic_weapon_property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_magic_weapon_property& from);
  void MergeFrom(const db_magic_weapon_property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 property_tid = 1;
  inline bool has_property_tid() const;
  inline void clear_property_tid();
  static const int kPropertyTidFieldNumber = 1;
  inline ::google::protobuf::int32 property_tid() const;
  inline void set_property_tid(::google::protobuf::int32 value);

  // optional int32 exp_value = 2;
  inline bool has_exp_value() const;
  inline void clear_exp_value();
  static const int kExpValueFieldNumber = 2;
  inline ::google::protobuf::int32 exp_value() const;
  inline void set_exp_value(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::int32 end_time() const;
  inline void set_end_time(::google::protobuf::int32 value);

  // optional int32 multime = 5;
  inline bool has_multime() const;
  inline void clear_multime();
  static const int kMultimeFieldNumber = 5;
  inline ::google::protobuf::int32 multime() const;
  inline void set_multime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_magic_weapon.property)
 private:
  inline void set_has_property_tid();
  inline void clear_has_property_tid();
  inline void set_has_exp_value();
  inline void clear_has_exp_value();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_multime();
  inline void clear_has_multime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 property_tid_;
  ::google::protobuf::int32 exp_value_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 end_time_;
  ::google::protobuf::int32 multime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_magic_weapon_property* default_instance_;
};
// -------------------------------------------------------------------

class db_magic_weapon_refine_group_refine : public ::google::protobuf::Message {
 public:
  db_magic_weapon_refine_group_refine();
  virtual ~db_magic_weapon_refine_group_refine();

  db_magic_weapon_refine_group_refine(const db_magic_weapon_refine_group_refine& from);

  inline db_magic_weapon_refine_group_refine& operator=(const db_magic_weapon_refine_group_refine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_magic_weapon_refine_group_refine& default_instance();

  void Swap(db_magic_weapon_refine_group_refine* other);

  // implements Message ----------------------------------------------

  db_magic_weapon_refine_group_refine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_magic_weapon_refine_group_refine& from);
  void MergeFrom(const db_magic_weapon_refine_group_refine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 train_level = 1;
  inline bool has_train_level() const;
  inline void clear_train_level();
  static const int kTrainLevelFieldNumber = 1;
  inline ::google::protobuf::int32 train_level() const;
  inline void set_train_level(::google::protobuf::int32 value);

  // optional int32 blessing_value = 2;
  inline bool has_blessing_value() const;
  inline void clear_blessing_value();
  static const int kBlessingValueFieldNumber = 2;
  inline ::google::protobuf::int32 blessing_value() const;
  inline void set_blessing_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_magic_weapon.refine_group.refine)
 private:
  inline void set_has_train_level();
  inline void clear_has_train_level();
  inline void set_has_blessing_value();
  inline void clear_has_blessing_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 train_level_;
  ::google::protobuf::int32 blessing_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_magic_weapon_refine_group_refine* default_instance_;
};
// -------------------------------------------------------------------

class db_magic_weapon_refine_group : public ::google::protobuf::Message {
 public:
  db_magic_weapon_refine_group();
  virtual ~db_magic_weapon_refine_group();

  db_magic_weapon_refine_group(const db_magic_weapon_refine_group& from);

  inline db_magic_weapon_refine_group& operator=(const db_magic_weapon_refine_group& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_magic_weapon_refine_group& default_instance();

  void Swap(db_magic_weapon_refine_group* other);

  // implements Message ----------------------------------------------

  db_magic_weapon_refine_group* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_magic_weapon_refine_group& from);
  void MergeFrom(const db_magic_weapon_refine_group& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef db_magic_weapon_refine_group_refine refine;

  // accessors -------------------------------------------------------

  // repeated .PB.db_magic_weapon.refine_group.refine refines = 1;
  inline int refines_size() const;
  inline void clear_refines();
  static const int kRefinesFieldNumber = 1;
  inline const ::PB::db_magic_weapon_refine_group_refine& refines(int index) const;
  inline ::PB::db_magic_weapon_refine_group_refine* mutable_refines(int index);
  inline ::PB::db_magic_weapon_refine_group_refine* add_refines();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group_refine >&
      refines() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group_refine >*
      mutable_refines();

  // @@protoc_insertion_point(class_scope:PB.db_magic_weapon.refine_group)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group_refine > refines_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_magic_weapon_refine_group* default_instance_;
};
// -------------------------------------------------------------------

class db_magic_weapon : public ::google::protobuf::Message {
 public:
  db_magic_weapon();
  virtual ~db_magic_weapon();

  db_magic_weapon(const db_magic_weapon& from);

  inline db_magic_weapon& operator=(const db_magic_weapon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_magic_weapon& default_instance();

  void Swap(db_magic_weapon* other);

  // implements Message ----------------------------------------------

  db_magic_weapon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_magic_weapon& from);
  void MergeFrom(const db_magic_weapon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef db_magic_weapon_property property;
  typedef db_magic_weapon_refine_group refine_group;

  // accessors -------------------------------------------------------

  // optional int32 magic_tid = 1;
  inline bool has_magic_tid() const;
  inline void clear_magic_tid();
  static const int kMagicTidFieldNumber = 1;
  inline ::google::protobuf::int32 magic_tid() const;
  inline void set_magic_tid(::google::protobuf::int32 value);

  // optional bool active = 2;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 2;
  inline bool active() const;
  inline void set_active(bool value);

  // repeated .PB.db_magic_weapon.property properties = 3;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 3;
  inline const ::PB::db_magic_weapon_property& properties(int index) const;
  inline ::PB::db_magic_weapon_property* mutable_properties(int index);
  inline ::PB::db_magic_weapon_property* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_property >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_property >*
      mutable_properties();

  // repeated .PB.db_magic_weapon.refine_group refine_groups = 4;
  inline int refine_groups_size() const;
  inline void clear_refine_groups();
  static const int kRefineGroupsFieldNumber = 4;
  inline const ::PB::db_magic_weapon_refine_group& refine_groups(int index) const;
  inline ::PB::db_magic_weapon_refine_group* mutable_refine_groups(int index);
  inline ::PB::db_magic_weapon_refine_group* add_refine_groups();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group >&
      refine_groups() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group >*
      mutable_refine_groups();

  // @@protoc_insertion_point(class_scope:PB.db_magic_weapon)
 private:
  inline void set_has_magic_tid();
  inline void clear_has_magic_tid();
  inline void set_has_active();
  inline void clear_has_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 magic_tid_;
  bool active_;
  ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_property > properties_;
  ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group > refine_groups_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_magic_weapon* default_instance_;
};
// -------------------------------------------------------------------

class db_magic_weapons : public ::google::protobuf::Message {
 public:
  db_magic_weapons();
  virtual ~db_magic_weapons();

  db_magic_weapons(const db_magic_weapons& from);

  inline db_magic_weapons& operator=(const db_magic_weapons& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_magic_weapons& default_instance();

  void Swap(db_magic_weapons* other);

  // implements Message ----------------------------------------------

  db_magic_weapons* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_magic_weapons& from);
  void MergeFrom(const db_magic_weapons& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.db_magic_weapon weapons = 1;
  inline int weapons_size() const;
  inline void clear_weapons();
  static const int kWeaponsFieldNumber = 1;
  inline const ::PB::db_magic_weapon& weapons(int index) const;
  inline ::PB::db_magic_weapon* mutable_weapons(int index);
  inline ::PB::db_magic_weapon* add_weapons();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon >&
      weapons() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon >*
      mutable_weapons();

  // optional int32 summoned_weapon_tid = 2;
  inline bool has_summoned_weapon_tid() const;
  inline void clear_summoned_weapon_tid();
  static const int kSummonedWeaponTidFieldNumber = 2;
  inline ::google::protobuf::int32 summoned_weapon_tid() const;
  inline void set_summoned_weapon_tid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.db_magic_weapons)
 private:
  inline void set_has_summoned_weapon_tid();
  inline void clear_has_summoned_weapon_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon > weapons_;
  ::google::protobuf::int32 summoned_weapon_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_magic_weapons* default_instance_;
};
// -------------------------------------------------------------------

class db_general_soul : public ::google::protobuf::Message {
 public:
  db_general_soul();
  virtual ~db_general_soul();

  db_general_soul(const db_general_soul& from);

  inline db_general_soul& operator=(const db_general_soul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_general_soul& default_instance();

  void Swap(db_general_soul* other);

  // implements Message ----------------------------------------------

  db_general_soul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_general_soul& from);
  void MergeFrom(const db_general_soul& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 general_tid = 1;
  inline bool has_general_tid() const;
  inline void clear_general_tid();
  static const int kGeneralTidFieldNumber = 1;
  inline ::google::protobuf::int32 general_tid() const;
  inline void set_general_tid(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 experience = 3;
  inline bool has_experience() const;
  inline void clear_experience();
  static const int kExperienceFieldNumber = 3;
  inline ::google::protobuf::int32 experience() const;
  inline void set_experience(::google::protobuf::int32 value);

  // optional .PB.general_list inventory = 4;
  inline bool has_inventory() const;
  inline void clear_inventory();
  static const int kInventoryFieldNumber = 4;
  inline const ::PB::general_list& inventory() const;
  inline ::PB::general_list* mutable_inventory();
  inline ::PB::general_list* release_inventory();
  inline void set_allocated_inventory(::PB::general_list* inventory);

  // optional .PB.general_list soul_holes = 5;
  inline bool has_soul_holes() const;
  inline void clear_soul_holes();
  static const int kSoulHolesFieldNumber = 5;
  inline const ::PB::general_list& soul_holes() const;
  inline ::PB::general_list* mutable_soul_holes();
  inline ::PB::general_list* release_soul_holes();
  inline void set_allocated_soul_holes(::PB::general_list* soul_holes);

  // @@protoc_insertion_point(class_scope:PB.db_general_soul)
 private:
  inline void set_has_general_tid();
  inline void clear_has_general_tid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_experience();
  inline void clear_has_experience();
  inline void set_has_inventory();
  inline void clear_has_inventory();
  inline void set_has_soul_holes();
  inline void clear_has_soul_holes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 general_tid_;
  ::google::protobuf::int32 level_;
  ::PB::general_list* inventory_;
  ::PB::general_list* soul_holes_;
  ::google::protobuf::int32 experience_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_general_soul* default_instance_;
};
// -------------------------------------------------------------------

class db_general_souls : public ::google::protobuf::Message {
 public:
  db_general_souls();
  virtual ~db_general_souls();

  db_general_souls(const db_general_souls& from);

  inline db_general_souls& operator=(const db_general_souls& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_general_souls& default_instance();

  void Swap(db_general_souls* other);

  // implements Message ----------------------------------------------

  db_general_souls* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_general_souls& from);
  void MergeFrom(const db_general_souls& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.db_general_soul generals = 1;
  inline int generals_size() const;
  inline void clear_generals();
  static const int kGeneralsFieldNumber = 1;
  inline const ::PB::db_general_soul& generals(int index) const;
  inline ::PB::db_general_soul* mutable_generals(int index);
  inline ::PB::db_general_soul* add_generals();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::db_general_soul >&
      generals() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::db_general_soul >*
      mutable_generals();

  // @@protoc_insertion_point(class_scope:PB.db_general_souls)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::db_general_soul > generals_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static db_general_souls* default_instance_;
};
// -------------------------------------------------------------------

class wine_game_history : public ::google::protobuf::Message {
 public:
  wine_game_history();
  virtual ~wine_game_history();

  wine_game_history(const wine_game_history& from);

  inline wine_game_history& operator=(const wine_game_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wine_game_history& default_instance();

  void Swap(wine_game_history* other);

  // implements Message ----------------------------------------------

  wine_game_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wine_game_history& from);
  void MergeFrom(const wine_game_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 game_time = 1;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 1;
  inline ::google::protobuf::int32 game_time() const;
  inline void set_game_time(::google::protobuf::int32 value);

  // optional int32 mine_status = 2;
  inline bool has_mine_status() const;
  inline void clear_mine_status();
  static const int kMineStatusFieldNumber = 2;
  inline ::google::protobuf::int32 mine_status() const;
  inline void set_mine_status(::google::protobuf::int32 value);

  // optional int32 peer_status = 3;
  inline bool has_peer_status() const;
  inline void clear_peer_status();
  static const int kPeerStatusFieldNumber = 3;
  inline ::google::protobuf::int32 peer_status() const;
  inline void set_peer_status(::google::protobuf::int32 value);

  // optional int32 game_result = 4;
  inline bool has_game_result() const;
  inline void clear_game_result();
  static const int kGameResultFieldNumber = 4;
  inline ::google::protobuf::int32 game_result() const;
  inline void set_game_result(::google::protobuf::int32 value);

  // optional .PB.player_id_name peer_info = 5;
  inline bool has_peer_info() const;
  inline void clear_peer_info();
  static const int kPeerInfoFieldNumber = 5;
  inline const ::PB::player_id_name& peer_info() const;
  inline ::PB::player_id_name* mutable_peer_info();
  inline ::PB::player_id_name* release_peer_info();
  inline void set_allocated_peer_info(::PB::player_id_name* peer_info);

  // @@protoc_insertion_point(class_scope:PB.wine_game_history)
 private:
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_mine_status();
  inline void clear_has_mine_status();
  inline void set_has_peer_status();
  inline void clear_has_peer_status();
  inline void set_has_game_result();
  inline void clear_has_game_result();
  inline void set_has_peer_info();
  inline void clear_has_peer_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 game_time_;
  ::google::protobuf::int32 mine_status_;
  ::google::protobuf::int32 peer_status_;
  ::google::protobuf::int32 game_result_;
  ::PB::player_id_name* peer_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static wine_game_history* default_instance_;
};
// -------------------------------------------------------------------

class pixiu_service_buy_record : public ::google::protobuf::Message {
 public:
  pixiu_service_buy_record();
  virtual ~pixiu_service_buy_record();

  pixiu_service_buy_record(const pixiu_service_buy_record& from);

  inline pixiu_service_buy_record& operator=(const pixiu_service_buy_record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pixiu_service_buy_record& default_instance();

  void Swap(pixiu_service_buy_record* other);

  // implements Message ----------------------------------------------

  pixiu_service_buy_record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pixiu_service_buy_record& from);
  void MergeFrom(const pixiu_service_buy_record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes product_id = 1;
  inline bool has_product_id() const;
  inline void clear_product_id();
  static const int kProductIdFieldNumber = 1;
  inline const ::std::string& product_id() const;
  inline void set_product_id(const ::std::string& value);
  inline void set_product_id(const char* value);
  inline void set_product_id(const void* value, size_t size);
  inline ::std::string* mutable_product_id();
  inline ::std::string* release_product_id();
  inline void set_allocated_product_id(::std::string* product_id);

  // optional int32 counts = 2;
  inline bool has_counts() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 2;
  inline ::google::protobuf::int32 counts() const;
  inline void set_counts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.pixiu_service_buy_record)
 private:
  inline void set_has_product_id();
  inline void clear_has_product_id();
  inline void set_has_counts();
  inline void clear_has_counts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* product_id_;
  ::google::protobuf::int32 counts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static pixiu_service_buy_record* default_instance_;
};
// -------------------------------------------------------------------

class npt_test : public ::google::protobuf::Message {
 public:
  npt_test();
  virtual ~npt_test();

  npt_test(const npt_test& from);

  inline npt_test& operator=(const npt_test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_test& default_instance();

  void Swap(npt_test* other);

  // implements Message ----------------------------------------------

  npt_test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_test& from);
  void MergeFrom(const npt_test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEST];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.npt_test)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_test* default_instance_;
};
// -------------------------------------------------------------------

class npt_response : public ::google::protobuf::Message {
 public:
  npt_response();
  virtual ~npt_response();

  npt_response(const npt_response& from);

  inline npt_response& operator=(const npt_response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_response& default_instance();

  void Swap(npt_response* other);

  // implements Message ----------------------------------------------

  npt_response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_response& from);
  void MergeFrom(const npt_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RESPONSE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 retcode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional int32 request_type = 3;
  inline bool has_request_type() const;
  inline void clear_request_type();
  static const int kRequestTypeFieldNumber = 3;
  inline ::google::protobuf::int32 request_type() const;
  inline void set_request_type(::google::protobuf::int32 value);

  // optional int32 param1 = 4;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 4;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_response)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_request_type();
  inline void clear_has_request_type();
  inline void set_has_param1();
  inline void clear_has_param1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 request_type_;
  ::google::protobuf::int32 param1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_response* default_instance_;
};
// -------------------------------------------------------------------

class npt_corps_appoint : public ::google::protobuf::Message {
 public:
  npt_corps_appoint();
  virtual ~npt_corps_appoint();

  npt_corps_appoint(const npt_corps_appoint& from);

  inline npt_corps_appoint& operator=(const npt_corps_appoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_corps_appoint& default_instance();

  void Swap(npt_corps_appoint* other);

  // implements Message ----------------------------------------------

  npt_corps_appoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_corps_appoint& from);
  void MergeFrom(const npt_corps_appoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_corps_appoint_CORPS_APPOINT_OP CORPS_APPOINT_OP;
  static const CORPS_APPOINT_OP CORPS_ADD = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ADD;
  static const CORPS_APPOINT_OP CORPS_DEL = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_DEL;
  static const CORPS_APPOINT_OP CORPS_APPOINT = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT;
  static const CORPS_APPOINT_OP CORPS_DISMISS = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_DISMISS;
  static const CORPS_APPOINT_OP CORPS_QUIT = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_QUIT;
  static const CORPS_APPOINT_OP CORPS_ANNOUNCE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ANNOUNCE;
  static const CORPS_APPOINT_OP CORPS_UPGRADE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE;
  static const CORPS_APPOINT_OP CORPS_ABDICATE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ABDICATE;
  static const CORPS_APPOINT_OP CORPS_ACTIVITY = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ACTIVITY;
  static const CORPS_APPOINT_OP CORPS_INVITE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_INVITE;
  static const CORPS_APPOINT_OP CORPS_REJECT = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_REJECT;
  static const CORPS_APPOINT_OP CORPS_AGREE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_AGREE;
  static const CORPS_APPOINT_OP CORPS_GETDATA = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_GETDATA;
  static const CORPS_APPOINT_OP CORPS_BRIEF = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_BRIEF;
  static const CORPS_APPOINT_OP CORPS_CONTRI = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_CONTRI;
  static const CORPS_APPOINT_OP CORPS_UPGRADE_SKILL = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE_SKILL;
  static const CORPS_APPOINT_OP CORPS_UPGRADE_SHOP = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE_SHOP;
  static const CORPS_APPOINT_OP CORPS_UPGRADE_SKILL2 = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UPGRADE_SKILL2;
  static const CORPS_APPOINT_OP CORPS_ATTR = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_ATTR;
  static const CORPS_APPOINT_OP CORPS_SUMMON = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_SUMMON;
  static const CORPS_APPOINT_OP CORPS_FIRE = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_FIRE;
  static const CORPS_APPOINT_OP CORPS_CHARIOT = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_CHARIOT;
  static const CORPS_APPOINT_OP CORPS_UP_CHA = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_UP_CHA;
  static const CORPS_APPOINT_OP CORPS_RECL_CHA = npt_corps_appoint_CORPS_APPOINT_OP_CORPS_RECL_CHA;
  static inline bool CORPS_APPOINT_OP_IsValid(int value) {
    return npt_corps_appoint_CORPS_APPOINT_OP_IsValid(value);
  }
  static const CORPS_APPOINT_OP CORPS_APPOINT_OP_MIN =
    npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_MIN;
  static const CORPS_APPOINT_OP CORPS_APPOINT_OP_MAX =
    npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_MAX;
  static const int CORPS_APPOINT_OP_ARRAYSIZE =
    npt_corps_appoint_CORPS_APPOINT_OP_CORPS_APPOINT_OP_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CORPS_APPOINT_OP_descriptor() {
    return npt_corps_appoint_CORPS_APPOINT_OP_descriptor();
  }
  static inline const ::std::string& CORPS_APPOINT_OP_Name(CORPS_APPOINT_OP value) {
    return npt_corps_appoint_CORPS_APPOINT_OP_Name(value);
  }
  static inline bool CORPS_APPOINT_OP_Parse(const ::std::string& name,
      CORPS_APPOINT_OP* value) {
    return npt_corps_appoint_CORPS_APPOINT_OP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_APPOINT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline ::google::protobuf::int64 dst() const;
  inline void set_dst(::google::protobuf::int64 value);

  // required .PB.npt_corps_appoint.CORPS_APPOINT_OP op = 3;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 3;
  inline ::PB::npt_corps_appoint_CORPS_APPOINT_OP op() const;
  inline void set_op(::PB::npt_corps_appoint_CORPS_APPOINT_OP value);

  // optional int32 pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional bytes announce = 5;
  inline bool has_announce() const;
  inline void clear_announce();
  static const int kAnnounceFieldNumber = 5;
  inline const ::std::string& announce() const;
  inline void set_announce(const ::std::string& value);
  inline void set_announce(const char* value);
  inline void set_announce(const void* value, size_t size);
  inline ::std::string* mutable_announce();
  inline ::std::string* release_announce();
  inline void set_allocated_announce(::std::string* announce);

  // optional bytes srcname = 6;
  inline bool has_srcname() const;
  inline void clear_srcname();
  static const int kSrcnameFieldNumber = 6;
  inline const ::std::string& srcname() const;
  inline void set_srcname(const ::std::string& value);
  inline void set_srcname(const char* value);
  inline void set_srcname(const void* value, size_t size);
  inline ::std::string* mutable_srcname();
  inline ::std::string* release_srcname();
  inline void set_allocated_srcname(::std::string* srcname);

  // optional bytes dstname = 7;
  inline bool has_dstname() const;
  inline void clear_dstname();
  static const int kDstnameFieldNumber = 7;
  inline const ::std::string& dstname() const;
  inline void set_dstname(const ::std::string& value);
  inline void set_dstname(const char* value);
  inline void set_dstname(const void* value, size_t size);
  inline ::std::string* mutable_dstname();
  inline ::std::string* release_dstname();
  inline void set_allocated_dstname(::std::string* dstname);

  // optional int64 src = 8;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 8;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // optional bytes corpsname = 9;
  inline bool has_corpsname() const;
  inline void clear_corpsname();
  static const int kCorpsnameFieldNumber = 9;
  inline const ::std::string& corpsname() const;
  inline void set_corpsname(const ::std::string& value);
  inline void set_corpsname(const char* value);
  inline void set_corpsname(const void* value, size_t size);
  inline ::std::string* mutable_corpsname();
  inline ::std::string* release_corpsname();
  inline void set_allocated_corpsname(::std::string* corpsname);

  // optional .PB.corps_member member = 10;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 10;
  inline const ::PB::corps_member& member() const;
  inline ::PB::corps_member* mutable_member();
  inline ::PB::corps_member* release_member();
  inline void set_allocated_member(::PB::corps_member* member);

  // optional int64 contri_money = 11;
  inline bool has_contri_money() const;
  inline void clear_contri_money();
  static const int kContriMoneyFieldNumber = 11;
  inline ::google::protobuf::int64 contri_money() const;
  inline void set_contri_money(::google::protobuf::int64 value);

  // optional int64 cur_money = 12;
  inline bool has_cur_money() const;
  inline void clear_cur_money();
  static const int kCurMoneyFieldNumber = 12;
  inline ::google::protobuf::int64 cur_money() const;
  inline void set_cur_money(::google::protobuf::int64 value);

  // optional uint32 skill_level = 13;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 13;
  inline ::google::protobuf::uint32 skill_level() const;
  inline void set_skill_level(::google::protobuf::uint32 value);

  // optional uint32 skill_index = 14;
  inline bool has_skill_index() const;
  inline void clear_skill_index();
  static const int kSkillIndexFieldNumber = 14;
  inline ::google::protobuf::uint32 skill_index() const;
  inline void set_skill_index(::google::protobuf::uint32 value);

  // optional uint32 corps_id = 15;
  inline bool has_corps_id() const;
  inline void clear_corps_id();
  static const int kCorpsIdFieldNumber = 15;
  inline ::google::protobuf::uint32 corps_id() const;
  inline void set_corps_id(::google::protobuf::uint32 value);

  // optional .PB.corp_attribute attr = 16;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 16;
  inline const ::PB::corp_attribute& attr() const;
  inline ::PB::corp_attribute* mutable_attr();
  inline ::PB::corp_attribute* release_attr();
  inline void set_allocated_attr(::PB::corp_attribute* attr);

  // optional int32 tid = 17;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 17;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 index = 18;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 18;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int64 money = 19;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 19;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.npt_corps_appoint)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dst();
  inline void clear_has_dst();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_announce();
  inline void clear_has_announce();
  inline void set_has_srcname();
  inline void clear_has_srcname();
  inline void set_has_dstname();
  inline void clear_has_dstname();
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_corpsname();
  inline void clear_has_corpsname();
  inline void set_has_member();
  inline void clear_has_member();
  inline void set_has_contri_money();
  inline void clear_has_contri_money();
  inline void set_has_cur_money();
  inline void clear_has_cur_money();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_skill_index();
  inline void clear_has_skill_index();
  inline void set_has_corps_id();
  inline void clear_has_corps_id();
  inline void set_has_attr();
  inline void clear_has_attr();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dst_;
  int type_;
  int op_;
  ::std::string* announce_;
  ::std::string* srcname_;
  ::std::string* dstname_;
  ::google::protobuf::int64 src_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::uint32 skill_level_;
  ::std::string* corpsname_;
  ::PB::corps_member* member_;
  ::google::protobuf::int64 contri_money_;
  ::google::protobuf::int64 cur_money_;
  ::google::protobuf::uint32 skill_index_;
  ::google::protobuf::uint32 corps_id_;
  ::PB::corp_attribute* attr_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int64 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_corps_appoint* default_instance_;
};
// -------------------------------------------------------------------

class npt_apply_corps : public ::google::protobuf::Message {
 public:
  npt_apply_corps();
  virtual ~npt_apply_corps();

  npt_apply_corps(const npt_apply_corps& from);

  inline npt_apply_corps& operator=(const npt_apply_corps& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_apply_corps& default_instance();

  void Swap(npt_apply_corps* other);

  // implements Message ----------------------------------------------

  npt_apply_corps* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_apply_corps& from);
  void MergeFrom(const npt_apply_corps& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_APPLY_CORPS];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .PB.corps_apply_t apply = 3;
  inline bool has_apply() const;
  inline void clear_apply();
  static const int kApplyFieldNumber = 3;
  inline const ::PB::corps_apply_t& apply() const;
  inline ::PB::corps_apply_t* mutable_apply();
  inline ::PB::corps_apply_t* release_apply();
  inline void set_allocated_apply(::PB::corps_apply_t* apply);

  // @@protoc_insertion_point(class_scope:PB.npt_apply_corps)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_apply();
  inline void clear_has_apply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 id_;
  ::PB::corps_apply_t* apply_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_apply_corps* default_instance_;
};
// -------------------------------------------------------------------

class npt_corps_data : public ::google::protobuf::Message {
 public:
  npt_corps_data();
  virtual ~npt_corps_data();

  npt_corps_data(const npt_corps_data& from);

  inline npt_corps_data& operator=(const npt_corps_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_corps_data& default_instance();

  void Swap(npt_corps_data* other);

  // implements Message ----------------------------------------------

  npt_corps_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_corps_data& from);
  void MergeFrom(const npt_corps_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_DATA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required .PB.corps_struct data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::PB::corps_struct& data() const;
  inline ::PB::corps_struct* mutable_data();
  inline ::PB::corps_struct* release_data();
  inline void set_allocated_data(::PB::corps_struct* data);

  // repeated .PB.corps_member members = 3;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 3;
  inline const ::PB::corps_member& members(int index) const;
  inline ::PB::corps_member* mutable_members(int index);
  inline ::PB::corps_member* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::corps_member >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::corps_member >*
      mutable_members();

  // optional int32 members_count = 4;
  inline bool has_members_count() const;
  inline void clear_members_count();
  static const int kMembersCountFieldNumber = 4;
  inline ::google::protobuf::int32 members_count() const;
  inline void set_members_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_corps_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_members_count();
  inline void clear_has_members_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::corps_struct* data_;
  int type_;
  ::google::protobuf::int32 members_count_;
  ::google::protobuf::RepeatedPtrField< ::PB::corps_member > members_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_corps_data* default_instance_;
};
// -------------------------------------------------------------------

class name_ruid : public ::google::protobuf::Message {
 public:
  name_ruid();
  virtual ~name_ruid();

  name_ruid(const name_ruid& from);

  inline name_ruid& operator=(const name_ruid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const name_ruid& default_instance();

  void Swap(name_ruid* other);

  // implements Message ----------------------------------------------

  name_ruid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const name_ruid& from);
  void MergeFrom(const name_ruid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PB.name_ruid)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static name_ruid* default_instance_;
};
// -------------------------------------------------------------------

class npt_common_search_search_corps_key : public ::google::protobuf::Message {
 public:
  npt_common_search_search_corps_key();
  virtual ~npt_common_search_search_corps_key();

  npt_common_search_search_corps_key(const npt_common_search_search_corps_key& from);

  inline npt_common_search_search_corps_key& operator=(const npt_common_search_search_corps_key& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_common_search_search_corps_key& default_instance();

  void Swap(npt_common_search_search_corps_key* other);

  // implements Message ----------------------------------------------

  npt_common_search_search_corps_key* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_common_search_search_corps_key& from);
  void MergeFrom(const npt_common_search_search_corps_key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool has_value = 1 [default = false];
  inline bool has_has_value() const;
  inline void clear_has_value();
  static const int kHasValueFieldNumber = 1;
  inline bool has_value() const;
  inline void set_has_value(bool value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 nation = 3;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 3;
  inline ::google::protobuf::int32 nation() const;
  inline void set_nation(::google::protobuf::int32 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PB.npt_common_search.search_corps_key)
 private:
  inline void set_has_has_value();
  inline void clear_has_has_value();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool has_value_;
  ::google::protobuf::int32 level_;
  ::std::string* name_;
  ::google::protobuf::int32 nation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_common_search_search_corps_key* default_instance_;
};
// -------------------------------------------------------------------

class npt_common_search_search_player_key : public ::google::protobuf::Message {
 public:
  npt_common_search_search_player_key();
  virtual ~npt_common_search_search_player_key();

  npt_common_search_search_player_key(const npt_common_search_search_player_key& from);

  inline npt_common_search_search_player_key& operator=(const npt_common_search_search_player_key& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_common_search_search_player_key& default_instance();

  void Swap(npt_common_search_search_player_key* other);

  // implements Message ----------------------------------------------

  npt_common_search_search_player_key* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_common_search_search_player_key& from);
  void MergeFrom(const npt_common_search_search_player_key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 nation = 2;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 2;
  inline ::google::protobuf::int32 nation() const;
  inline void set_nation(::google::protobuf::int32 value);

  // optional bool is_online = 3;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 3;
  inline bool is_online() const;
  inline void set_is_online(bool value);

  // @@protoc_insertion_point(class_scope:PB.npt_common_search.search_player_key)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_is_online();
  inline void clear_has_is_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 nation_;
  bool is_online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_common_search_search_player_key* default_instance_;
};
// -------------------------------------------------------------------

class npt_common_search : public ::google::protobuf::Message {
 public:
  npt_common_search();
  virtual ~npt_common_search();

  npt_common_search(const npt_common_search& from);

  inline npt_common_search& operator=(const npt_common_search& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_common_search& default_instance();

  void Swap(npt_common_search* other);

  // implements Message ----------------------------------------------

  npt_common_search* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_common_search& from);
  void MergeFrom(const npt_common_search& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_common_search_search_corps_key search_corps_key;
  typedef npt_common_search_search_player_key search_player_key;

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_COMMON_SEARCH];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // required uint32 len = 4;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 4;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // optional .PB.npt_common_search.search_corps_key corps_key = 5;
  inline bool has_corps_key() const;
  inline void clear_corps_key();
  static const int kCorpsKeyFieldNumber = 5;
  inline const ::PB::npt_common_search_search_corps_key& corps_key() const;
  inline ::PB::npt_common_search_search_corps_key* mutable_corps_key();
  inline ::PB::npt_common_search_search_corps_key* release_corps_key();
  inline void set_allocated_corps_key(::PB::npt_common_search_search_corps_key* corps_key);

  // optional int32 retcode = 6;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 6;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional int32 total_count = 7;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 7;
  inline ::google::protobuf::int32 total_count() const;
  inline void set_total_count(::google::protobuf::int32 value);

  // repeated .PB.npt_corps_data corps = 8;
  inline int corps_size() const;
  inline void clear_corps();
  static const int kCorpsFieldNumber = 8;
  inline const ::PB::npt_corps_data& corps(int index) const;
  inline ::PB::npt_corps_data* mutable_corps(int index);
  inline ::PB::npt_corps_data* add_corps();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_corps_data >&
      corps() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::npt_corps_data >*
      mutable_corps();

  // optional .PB.npt_common_search.search_player_key player_key = 9;
  inline bool has_player_key() const;
  inline void clear_player_key();
  static const int kPlayerKeyFieldNumber = 9;
  inline const ::PB::npt_common_search_search_player_key& player_key() const;
  inline ::PB::npt_common_search_search_player_key* mutable_player_key();
  inline ::PB::npt_common_search_search_player_key* release_player_key();
  inline void set_allocated_player_key(::PB::npt_common_search_search_player_key* player_key);

  // repeated .PB.name_ruid players = 10;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 10;
  inline const ::PB::name_ruid& players(int index) const;
  inline ::PB::name_ruid* mutable_players(int index);
  inline ::PB::name_ruid* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::name_ruid >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::name_ruid >*
      mutable_players();

  // optional int32 search_time = 11;
  inline bool has_search_time() const;
  inline void clear_search_time();
  static const int kSearchTimeFieldNumber = 11;
  inline ::google::protobuf::int32 search_time() const;
  inline void set_search_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_common_search)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_corps_key();
  inline void clear_has_corps_key();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_total_count();
  inline void clear_has_total_count();
  inline void set_has_player_key();
  inline void clear_has_player_key();
  inline void set_has_search_time();
  inline void clear_has_search_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 pos_;
  ::PB::npt_common_search_search_corps_key* corps_key_;
  ::google::protobuf::uint32 len_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::RepeatedPtrField< ::PB::npt_corps_data > corps_;
  ::PB::npt_common_search_search_player_key* player_key_;
  ::google::protobuf::int32 total_count_;
  ::google::protobuf::int32 search_time_;
  ::google::protobuf::RepeatedPtrField< ::PB::name_ruid > players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_common_search* default_instance_;
};
// -------------------------------------------------------------------

class npt_zhaojiling : public ::google::protobuf::Message {
 public:
  npt_zhaojiling();
  virtual ~npt_zhaojiling();

  npt_zhaojiling(const npt_zhaojiling& from);

  inline npt_zhaojiling& operator=(const npt_zhaojiling& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_zhaojiling& default_instance();

  void Swap(npt_zhaojiling* other);

  // implements Message ----------------------------------------------

  npt_zhaojiling* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_zhaojiling& from);
  void MergeFrom(const npt_zhaojiling& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ZHAOJILING];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.zhaojiling_info baseinfo = 2;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 2;
  inline const ::PB::zhaojiling_info& baseinfo() const;
  inline ::PB::zhaojiling_info* mutable_baseinfo();
  inline ::PB::zhaojiling_info* release_baseinfo();
  inline void set_allocated_baseinfo(::PB::zhaojiling_info* baseinfo);

  // @@protoc_insertion_point(class_scope:PB.npt_zhaojiling)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::zhaojiling_info* baseinfo_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_zhaojiling* default_instance_;
};
// -------------------------------------------------------------------

class npt_sync_mirror_info : public ::google::protobuf::Message {
 public:
  npt_sync_mirror_info();
  virtual ~npt_sync_mirror_info();

  npt_sync_mirror_info(const npt_sync_mirror_info& from);

  inline npt_sync_mirror_info& operator=(const npt_sync_mirror_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_sync_mirror_info& default_instance();

  void Swap(npt_sync_mirror_info* other);

  // implements Message ----------------------------------------------

  npt_sync_mirror_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_sync_mirror_info& from);
  void MergeFrom(const npt_sync_mirror_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_sync_mirror_info_MIRROR_STATE_MASK MIRROR_STATE_MASK;
  static const MIRROR_STATE_MASK MS_FORBIT_MIRROR_STATE = npt_sync_mirror_info_MIRROR_STATE_MASK_MS_FORBIT_MIRROR_STATE;
  static const MIRROR_STATE_MASK MS_IN_NATION_WAR = npt_sync_mirror_info_MIRROR_STATE_MASK_MS_IN_NATION_WAR;
  static inline bool MIRROR_STATE_MASK_IsValid(int value) {
    return npt_sync_mirror_info_MIRROR_STATE_MASK_IsValid(value);
  }
  static const MIRROR_STATE_MASK MIRROR_STATE_MASK_MIN =
    npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_MIN;
  static const MIRROR_STATE_MASK MIRROR_STATE_MASK_MAX =
    npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_MAX;
  static const int MIRROR_STATE_MASK_ARRAYSIZE =
    npt_sync_mirror_info_MIRROR_STATE_MASK_MIRROR_STATE_MASK_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MIRROR_STATE_MASK_descriptor() {
    return npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor();
  }
  static inline const ::std::string& MIRROR_STATE_MASK_Name(MIRROR_STATE_MASK value) {
    return npt_sync_mirror_info_MIRROR_STATE_MASK_Name(value);
  }
  static inline bool MIRROR_STATE_MASK_Parse(const ::std::string& name,
      MIRROR_STATE_MASK* value) {
    return npt_sync_mirror_info_MIRROR_STATE_MASK_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_MIRROR_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.ipt_mirror_info infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::PB::ipt_mirror_info& infos(int index) const;
  inline ::PB::ipt_mirror_info* mutable_infos(int index);
  inline ::PB::ipt_mirror_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ipt_mirror_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ipt_mirror_info >*
      mutable_infos();

  // optional uint32 state_mask = 3;
  inline bool has_state_mask() const;
  inline void clear_state_mask();
  static const int kStateMaskFieldNumber = 3;
  inline ::google::protobuf::uint32 state_mask() const;
  inline void set_state_mask(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_sync_mirror_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_state_mask();
  inline void clear_has_state_mask();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ipt_mirror_info > infos_;
  int type_;
  ::google::protobuf::uint32 state_mask_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_sync_mirror_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_sync_nation_war_info_nwar_npc_info : public ::google::protobuf::Message {
 public:
  npt_sync_nation_war_info_nwar_npc_info();
  virtual ~npt_sync_nation_war_info_nwar_npc_info();

  npt_sync_nation_war_info_nwar_npc_info(const npt_sync_nation_war_info_nwar_npc_info& from);

  inline npt_sync_nation_war_info_nwar_npc_info& operator=(const npt_sync_nation_war_info_nwar_npc_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_sync_nation_war_info_nwar_npc_info& default_instance();

  void Swap(npt_sync_nation_war_info_nwar_npc_info* other);

  // implements Message ----------------------------------------------

  npt_sync_nation_war_info_nwar_npc_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_sync_nation_war_info_nwar_npc_info& from);
  void MergeFrom(const npt_sync_nation_war_info_nwar_npc_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 npc_tid = 1;
  inline bool has_npc_tid() const;
  inline void clear_npc_tid();
  static const int kNpcTidFieldNumber = 1;
  inline ::google::protobuf::uint32 npc_tid() const;
  inline void set_npc_tid(::google::protobuf::uint32 value);

  // required uint32 npc_nation = 2;
  inline bool has_npc_nation() const;
  inline void clear_npc_nation();
  static const int kNpcNationFieldNumber = 2;
  inline ::google::protobuf::uint32 npc_nation() const;
  inline void set_npc_nation(::google::protobuf::uint32 value);

  // required uint32 npc_hp = 3;
  inline bool has_npc_hp() const;
  inline void clear_npc_hp();
  static const int kNpcHpFieldNumber = 3;
  inline ::google::protobuf::uint32 npc_hp() const;
  inline void set_npc_hp(::google::protobuf::uint32 value);

  // required uint32 npc_born = 4;
  inline bool has_npc_born() const;
  inline void clear_npc_born();
  static const int kNpcBornFieldNumber = 4;
  inline ::google::protobuf::uint32 npc_born() const;
  inline void set_npc_born(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_sync_nation_war_info.nwar_npc_info)
 private:
  inline void set_has_npc_tid();
  inline void clear_has_npc_tid();
  inline void set_has_npc_nation();
  inline void clear_has_npc_nation();
  inline void set_has_npc_hp();
  inline void clear_has_npc_hp();
  inline void set_has_npc_born();
  inline void clear_has_npc_born();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 npc_tid_;
  ::google::protobuf::uint32 npc_nation_;
  ::google::protobuf::uint32 npc_hp_;
  ::google::protobuf::uint32 npc_born_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_sync_nation_war_info_nwar_npc_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_sync_nation_war_info : public ::google::protobuf::Message {
 public:
  npt_sync_nation_war_info();
  virtual ~npt_sync_nation_war_info();

  npt_sync_nation_war_info(const npt_sync_nation_war_info& from);

  inline npt_sync_nation_war_info& operator=(const npt_sync_nation_war_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_sync_nation_war_info& default_instance();

  void Swap(npt_sync_nation_war_info* other);

  // implements Message ----------------------------------------------

  npt_sync_nation_war_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_sync_nation_war_info& from);
  void MergeFrom(const npt_sync_nation_war_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_sync_nation_war_info_nwar_npc_info nwar_npc_info;

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_NATION_WAR_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required uint32 war_end_time = 2;
  inline bool has_war_end_time() const;
  inline void clear_war_end_time();
  static const int kWarEndTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 war_end_time() const;
  inline void set_war_end_time(::google::protobuf::uint32 value);

  // repeated .PB.npt_sync_nation_war_info.nwar_npc_info npc_info = 3;
  inline int npc_info_size() const;
  inline void clear_npc_info();
  static const int kNpcInfoFieldNumber = 3;
  inline const ::PB::npt_sync_nation_war_info_nwar_npc_info& npc_info(int index) const;
  inline ::PB::npt_sync_nation_war_info_nwar_npc_info* mutable_npc_info(int index);
  inline ::PB::npt_sync_nation_war_info_nwar_npc_info* add_npc_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_sync_nation_war_info_nwar_npc_info >&
      npc_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::npt_sync_nation_war_info_nwar_npc_info >*
      mutable_npc_info();

  // optional uint32 wangcheng_revive_faction = 4;
  inline bool has_wangcheng_revive_faction() const;
  inline void clear_wangcheng_revive_faction();
  static const int kWangchengReviveFactionFieldNumber = 4;
  inline ::google::protobuf::uint32 wangcheng_revive_faction() const;
  inline void set_wangcheng_revive_faction(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_sync_nation_war_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_war_end_time();
  inline void clear_has_war_end_time();
  inline void set_has_wangcheng_revive_faction();
  inline void clear_has_wangcheng_revive_faction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 war_end_time_;
  ::google::protobuf::RepeatedPtrField< ::PB::npt_sync_nation_war_info_nwar_npc_info > npc_info_;
  ::google::protobuf::uint32 wangcheng_revive_faction_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_sync_nation_war_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_get_corp_name : public ::google::protobuf::Message {
 public:
  npt_get_corp_name();
  virtual ~npt_get_corp_name();

  npt_get_corp_name(const npt_get_corp_name& from);

  inline npt_get_corp_name& operator=(const npt_get_corp_name& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_get_corp_name& default_instance();

  void Swap(npt_get_corp_name* other);

  // implements Message ----------------------------------------------

  npt_get_corp_name* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_get_corp_name& from);
  void MergeFrom(const npt_get_corp_name& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_CORP_NAME];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required uint32 corp_id = 2;
  inline bool has_corp_id() const;
  inline void clear_corp_id();
  static const int kCorpIdFieldNumber = 2;
  inline ::google::protobuf::uint32 corp_id() const;
  inline void set_corp_id(::google::protobuf::uint32 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PB.npt_get_corp_name)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_corp_id();
  inline void clear_has_corp_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 corp_id_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_get_corp_name* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_war_operate : public ::google::protobuf::Message {
 public:
  npt_nation_war_operate();
  virtual ~npt_nation_war_operate();

  npt_nation_war_operate(const npt_nation_war_operate& from);

  inline npt_nation_war_operate& operator=(const npt_nation_war_operate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_war_operate& default_instance();

  void Swap(npt_nation_war_operate* other);

  // implements Message ----------------------------------------------

  npt_nation_war_operate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_war_operate& from);
  void MergeFrom(const npt_nation_war_operate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required uint32 oper_type = 2;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 oper_type() const;
  inline void set_oper_type(::google::protobuf::uint32 value);

  // required uint32 oper_param1 = 3;
  inline bool has_oper_param1() const;
  inline void clear_oper_param1();
  static const int kOperParam1FieldNumber = 3;
  inline ::google::protobuf::uint32 oper_param1() const;
  inline void set_oper_param1(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_war_operate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_oper_param1();
  inline void clear_has_oper_param1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 oper_type_;
  ::google::protobuf::uint32 oper_param1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_war_operate* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_war_operate_info : public ::google::protobuf::Message {
 public:
  npt_nation_war_operate_info();
  virtual ~npt_nation_war_operate_info();

  npt_nation_war_operate_info(const npt_nation_war_operate_info& from);

  inline npt_nation_war_operate_info& operator=(const npt_nation_war_operate_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_war_operate_info& default_instance();

  void Swap(npt_nation_war_operate_info* other);

  // implements Message ----------------------------------------------

  npt_nation_war_operate_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_war_operate_info& from);
  void MergeFrom(const npt_nation_war_operate_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required uint32 war_id = 2;
  inline bool has_war_id() const;
  inline void clear_war_id();
  static const int kWarIdFieldNumber = 2;
  inline ::google::protobuf::uint32 war_id() const;
  inline void set_war_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_war_operate_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_war_id();
  inline void clear_has_war_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 war_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_war_operate_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_war_operate_info_re : public ::google::protobuf::Message {
 public:
  npt_nation_war_operate_info_re();
  virtual ~npt_nation_war_operate_info_re();

  npt_nation_war_operate_info_re(const npt_nation_war_operate_info_re& from);

  inline npt_nation_war_operate_info_re& operator=(const npt_nation_war_operate_info_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_war_operate_info_re& default_instance();

  void Swap(npt_nation_war_operate_info_re* other);

  // implements Message ----------------------------------------------

  npt_nation_war_operate_info_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_war_operate_info_re& from);
  void MergeFrom(const npt_nation_war_operate_info_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required uint32 attack_zhaoji = 2;
  inline bool has_attack_zhaoji() const;
  inline void clear_attack_zhaoji();
  static const int kAttackZhaojiFieldNumber = 2;
  inline ::google::protobuf::uint32 attack_zhaoji() const;
  inline void set_attack_zhaoji(::google::protobuf::uint32 value);

  // required uint32 defend_zhaoji = 3;
  inline bool has_defend_zhaoji() const;
  inline void clear_defend_zhaoji();
  static const int kDefendZhaojiFieldNumber = 3;
  inline ::google::protobuf::uint32 defend_zhaoji() const;
  inline void set_defend_zhaoji(::google::protobuf::uint32 value);

  // required uint32 attack_yanshi = 4;
  inline bool has_attack_yanshi() const;
  inline void clear_attack_yanshi();
  static const int kAttackYanshiFieldNumber = 4;
  inline ::google::protobuf::uint32 attack_yanshi() const;
  inline void set_attack_yanshi(::google::protobuf::uint32 value);

  // required uint32 defend_jiaxue = 5;
  inline bool has_defend_jiaxue() const;
  inline void clear_defend_jiaxue();
  static const int kDefendJiaxueFieldNumber = 5;
  inline ::google::protobuf::uint32 defend_jiaxue() const;
  inline void set_defend_jiaxue(::google::protobuf::uint32 value);

  // required uint32 attack_jihuo = 6;
  inline bool has_attack_jihuo() const;
  inline void clear_attack_jihuo();
  static const int kAttackJihuoFieldNumber = 6;
  inline ::google::protobuf::uint32 attack_jihuo() const;
  inline void set_attack_jihuo(::google::protobuf::uint32 value);

  // required uint32 defend_jihuo = 7;
  inline bool has_defend_jihuo() const;
  inline void clear_defend_jihuo();
  static const int kDefendJihuoFieldNumber = 7;
  inline ::google::protobuf::uint32 defend_jihuo() const;
  inline void set_defend_jihuo(::google::protobuf::uint32 value);

  // required uint32 quick_transfer = 8;
  inline bool has_quick_transfer() const;
  inline void clear_quick_transfer();
  static const int kQuickTransferFieldNumber = 8;
  inline ::google::protobuf::uint32 quick_transfer() const;
  inline void set_quick_transfer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_war_operate_info_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_attack_zhaoji();
  inline void clear_has_attack_zhaoji();
  inline void set_has_defend_zhaoji();
  inline void clear_has_defend_zhaoji();
  inline void set_has_attack_yanshi();
  inline void clear_has_attack_yanshi();
  inline void set_has_defend_jiaxue();
  inline void clear_has_defend_jiaxue();
  inline void set_has_attack_jihuo();
  inline void clear_has_attack_jihuo();
  inline void set_has_defend_jihuo();
  inline void clear_has_defend_jihuo();
  inline void set_has_quick_transfer();
  inline void clear_has_quick_transfer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 attack_zhaoji_;
  ::google::protobuf::uint32 defend_zhaoji_;
  ::google::protobuf::uint32 attack_yanshi_;
  ::google::protobuf::uint32 defend_jiaxue_;
  ::google::protobuf::uint32 attack_jihuo_;
  ::google::protobuf::uint32 defend_jihuo_;
  ::google::protobuf::uint32 quick_transfer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_war_operate_info_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_team_invite : public ::google::protobuf::Message {
 public:
  npt_team_invite();
  virtual ~npt_team_invite();

  npt_team_invite(const npt_team_invite& from);

  inline npt_team_invite& operator=(const npt_team_invite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_team_invite& default_instance();

  void Swap(npt_team_invite* other);

  // implements Message ----------------------------------------------

  npt_team_invite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_team_invite& from);
  void MergeFrom(const npt_team_invite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INVITE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 assign_rule = 3;
  inline bool has_assign_rule() const;
  inline void clear_assign_rule();
  static const int kAssignRuleFieldNumber = 3;
  inline ::google::protobuf::int32 assign_rule() const;
  inline void set_assign_rule(::google::protobuf::int32 value);

  // optional int32 auto_admit = 4;
  inline bool has_auto_admit() const;
  inline void clear_auto_admit();
  static const int kAutoAdmitFieldNumber = 4;
  inline ::google::protobuf::int32 auto_admit() const;
  inline void set_auto_admit(::google::protobuf::int32 value);

  // optional int32 open_invite = 5;
  inline bool has_open_invite() const;
  inline void clear_open_invite();
  static const int kOpenInviteFieldNumber = 5;
  inline ::google::protobuf::int32 open_invite() const;
  inline void set_open_invite(::google::protobuf::int32 value);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 profession = 7;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 7;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 lineid = 8;
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineidFieldNumber = 8;
  inline ::google::protobuf::int32 lineid() const;
  inline void set_lineid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_team_invite)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_assign_rule();
  inline void clear_has_assign_rule();
  inline void set_has_auto_admit();
  inline void clear_has_auto_admit();
  inline void set_has_open_invite();
  inline void clear_has_open_invite();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_lineid();
  inline void clear_has_lineid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;
  ::google::protobuf::int32 assign_rule_;
  ::google::protobuf::int32 auto_admit_;
  ::google::protobuf::int32 open_invite_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 lineid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_team_invite* default_instance_;
};
// -------------------------------------------------------------------

class npt_friend_invite : public ::google::protobuf::Message {
 public:
  npt_friend_invite();
  virtual ~npt_friend_invite();

  npt_friend_invite(const npt_friend_invite& from);

  inline npt_friend_invite& operator=(const npt_friend_invite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_friend_invite& default_instance();

  void Swap(npt_friend_invite* other);

  // implements Message ----------------------------------------------

  npt_friend_invite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_friend_invite& from);
  void MergeFrom(const npt_friend_invite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_FRIEND_INVITE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 profession = 4;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 4;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 group = 5;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_friend_invite)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_group();
  inline void clear_has_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_friend_invite* default_instance_;
};
// -------------------------------------------------------------------

class npt_team_info_team_info : public ::google::protobuf::Message {
 public:
  npt_team_info_team_info();
  virtual ~npt_team_info_team_info();

  npt_team_info_team_info(const npt_team_info_team_info& from);

  inline npt_team_info_team_info& operator=(const npt_team_info_team_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_team_info_team_info& default_instance();

  void Swap(npt_team_info_team_info* other);

  // implements Message ----------------------------------------------

  npt_team_info_team_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_team_info_team_info& from);
  void MergeFrom(const npt_team_info_team_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 teamid = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 1;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // required int64 leader = 2;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 2;
  inline ::google::protobuf::int64 leader() const;
  inline void set_leader(::google::protobuf::int64 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 capacity = 5;
  inline bool has_capacity() const;
  inline void clear_capacity();
  static const int kCapacityFieldNumber = 5;
  inline ::google::protobuf::int32 capacity() const;
  inline void set_capacity(::google::protobuf::int32 value);

  // optional int32 prof = 6;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 6;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // required int32 members = 7;
  inline bool has_members() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 7;
  inline ::google::protobuf::int32 members() const;
  inline void set_members(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_team_info.team_info)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_leader();
  inline void clear_has_leader();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_capacity();
  inline void clear_has_capacity();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_members();
  inline void clear_has_members();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 leader_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 level_;
  ::std::string* name_;
  ::google::protobuf::int32 capacity_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 members_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_team_info_team_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_team_info : public ::google::protobuf::Message {
 public:
  npt_team_info();
  virtual ~npt_team_info();

  npt_team_info(const npt_team_info& from);

  inline npt_team_info& operator=(const npt_team_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_team_info& default_instance();

  void Swap(npt_team_info* other);

  // implements Message ----------------------------------------------

  npt_team_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_team_info& from);
  void MergeFrom(const npt_team_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_team_info_team_info team_info;

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated int32 teamids = 2;
  inline int teamids_size() const;
  inline void clear_teamids();
  static const int kTeamidsFieldNumber = 2;
  inline ::google::protobuf::int32 teamids(int index) const;
  inline void set_teamids(int index, ::google::protobuf::int32 value);
  inline void add_teamids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      teamids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_teamids();

  // repeated .PB.npt_team_info.team_info teams = 3;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 3;
  inline const ::PB::npt_team_info_team_info& teams(int index) const;
  inline ::PB::npt_team_info_team_info* mutable_teams(int index);
  inline ::PB::npt_team_info_team_info* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_team_info_team_info >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::npt_team_info_team_info >*
      mutable_teams();

  // @@protoc_insertion_point(class_scope:PB.npt_team_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > teamids_;
  ::google::protobuf::RepeatedPtrField< ::PB::npt_team_info_team_info > teams_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_team_info* default_instance_;
};
// -------------------------------------------------------------------

class other_player_profile : public ::google::protobuf::Message {
 public:
  other_player_profile();
  virtual ~other_player_profile();

  other_player_profile(const other_player_profile& from);

  inline other_player_profile& operator=(const other_player_profile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const other_player_profile& default_instance();

  void Swap(other_player_profile* other);

  // implements Message ----------------------------------------------

  other_player_profile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const other_player_profile& from);
  void MergeFrom(const other_player_profile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.face_book pb_facebook = 1;
  inline bool has_pb_facebook() const;
  inline void clear_pb_facebook();
  static const int kPbFacebookFieldNumber = 1;
  inline const ::PB::face_book& pb_facebook() const;
  inline ::PB::face_book* mutable_pb_facebook();
  inline ::PB::face_book* release_pb_facebook();
  inline void set_allocated_pb_facebook(::PB::face_book* pb_facebook);

  // optional uint32 nation = 2;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 2;
  inline ::google::protobuf::uint32 nation() const;
  inline void set_nation(::google::protobuf::uint32 value);

  // optional uint32 nation_pos = 3;
  inline bool has_nation_pos() const;
  inline void clear_nation_pos();
  static const int kNationPosFieldNumber = 3;
  inline ::google::protobuf::uint32 nation_pos() const;
  inline void set_nation_pos(::google::protobuf::uint32 value);

  // optional uint32 duke_level = 4;
  inline bool has_duke_level() const;
  inline void clear_duke_level();
  static const int kDukeLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 duke_level() const;
  inline void set_duke_level(::google::protobuf::uint32 value);

  // optional bool fashion = 5;
  inline bool has_fashion() const;
  inline void clear_fashion();
  static const int kFashionFieldNumber = 5;
  inline bool fashion() const;
  inline void set_fashion(bool value);

  // optional uint32 magic_weapon_tid = 6;
  inline bool has_magic_weapon_tid() const;
  inline void clear_magic_weapon_tid();
  static const int kMagicWeaponTidFieldNumber = 6;
  inline ::google::protobuf::uint32 magic_weapon_tid() const;
  inline void set_magic_weapon_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.other_player_profile)
 private:
  inline void set_has_pb_facebook();
  inline void clear_has_pb_facebook();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_nation_pos();
  inline void clear_has_nation_pos();
  inline void set_has_duke_level();
  inline void clear_has_duke_level();
  inline void set_has_fashion();
  inline void clear_has_fashion();
  inline void set_has_magic_weapon_tid();
  inline void clear_has_magic_weapon_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::face_book* pb_facebook_;
  ::google::protobuf::uint32 nation_;
  ::google::protobuf::uint32 nation_pos_;
  ::google::protobuf::uint32 duke_level_;
  bool fashion_;
  ::google::protobuf::uint32 magic_weapon_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static other_player_profile* default_instance_;
};
// -------------------------------------------------------------------

class npt_get_player_profile : public ::google::protobuf::Message {
 public:
  npt_get_player_profile();
  virtual ~npt_get_player_profile();

  npt_get_player_profile(const npt_get_player_profile& from);

  inline npt_get_player_profile& operator=(const npt_get_player_profile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_get_player_profile& default_instance();

  void Swap(npt_get_player_profile* other);

  // implements Message ----------------------------------------------

  npt_get_player_profile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_get_player_profile& from);
  void MergeFrom(const npt_get_player_profile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_get_player_profile_GET_PROFILE_MASK GET_PROFILE_MASK;
  static const GET_PROFILE_MASK GET_ALL_PROFILE = npt_get_player_profile_GET_PROFILE_MASK_GET_ALL_PROFILE;
  static const GET_PROFILE_MASK GET_SNS = npt_get_player_profile_GET_PROFILE_MASK_GET_SNS;
  static const GET_PROFILE_MASK GET_EQUIP = npt_get_player_profile_GET_PROFILE_MASK_GET_EQUIP;
  static const GET_PROFILE_MASK GET_PROPERTY = npt_get_player_profile_GET_PROFILE_MASK_GET_PROPERTY;
  static inline bool GET_PROFILE_MASK_IsValid(int value) {
    return npt_get_player_profile_GET_PROFILE_MASK_IsValid(value);
  }
  static const GET_PROFILE_MASK GET_PROFILE_MASK_MIN =
    npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_MIN;
  static const GET_PROFILE_MASK GET_PROFILE_MASK_MAX =
    npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_MAX;
  static const int GET_PROFILE_MASK_ARRAYSIZE =
    npt_get_player_profile_GET_PROFILE_MASK_GET_PROFILE_MASK_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GET_PROFILE_MASK_descriptor() {
    return npt_get_player_profile_GET_PROFILE_MASK_descriptor();
  }
  static inline const ::std::string& GET_PROFILE_MASK_Name(GET_PROFILE_MASK value) {
    return npt_get_player_profile_GET_PROFILE_MASK_Name(value);
  }
  static inline bool GET_PROFILE_MASK_Parse(const ::std::string& name,
      GET_PROFILE_MASK* value) {
    return npt_get_player_profile_GET_PROFILE_MASK_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_PLAYER_PROFILE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional uint32 get_profile_mask = 3 [default = 0];
  inline bool has_get_profile_mask() const;
  inline void clear_get_profile_mask();
  static const int kGetProfileMaskFieldNumber = 3;
  inline ::google::protobuf::uint32 get_profile_mask() const;
  inline void set_get_profile_mask(::google::protobuf::uint32 value);

  // optional bytes snsinfo = 4;
  inline bool has_snsinfo() const;
  inline void clear_snsinfo();
  static const int kSnsinfoFieldNumber = 4;
  inline const ::std::string& snsinfo() const;
  inline void set_snsinfo(const ::std::string& value);
  inline void set_snsinfo(const char* value);
  inline void set_snsinfo(const void* value, size_t size);
  inline ::std::string* mutable_snsinfo();
  inline ::std::string* release_snsinfo();
  inline void set_allocated_snsinfo(::std::string* snsinfo);

  // optional .PB.gs_role_mutable_data property = 5;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 5;
  inline const ::PB::gs_role_mutable_data& property() const;
  inline ::PB::gs_role_mutable_data* mutable_property();
  inline ::PB::gs_role_mutable_data* release_property();
  inline void set_allocated_property(::PB::gs_role_mutable_data* property);

  // optional bytes equipments = 6;
  inline bool has_equipments() const;
  inline void clear_equipments();
  static const int kEquipmentsFieldNumber = 6;
  inline const ::std::string& equipments() const;
  inline void set_equipments(const ::std::string& value);
  inline void set_equipments(const char* value);
  inline void set_equipments(const void* value, size_t size);
  inline ::std::string* mutable_equipments();
  inline ::std::string* release_equipments();
  inline void set_allocated_equipments(::std::string* equipments);

  // optional .PB.other_player_profile others = 7;
  inline bool has_others() const;
  inline void clear_others();
  static const int kOthersFieldNumber = 7;
  inline const ::PB::other_player_profile& others() const;
  inline ::PB::other_player_profile* mutable_others();
  inline ::PB::other_player_profile* release_others();
  inline void set_allocated_others(::PB::other_player_profile* others);

  // @@protoc_insertion_point(class_scope:PB.npt_get_player_profile)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_get_profile_mask();
  inline void clear_has_get_profile_mask();
  inline void set_has_snsinfo();
  inline void clear_has_snsinfo();
  inline void set_has_property();
  inline void clear_has_property();
  inline void set_has_equipments();
  inline void clear_has_equipments();
  inline void set_has_others();
  inline void clear_has_others();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  int type_;
  ::google::protobuf::uint32 get_profile_mask_;
  ::std::string* snsinfo_;
  ::PB::gs_role_mutable_data* property_;
  ::std::string* equipments_;
  ::PB::other_player_profile* others_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_get_player_profile* default_instance_;
};
// -------------------------------------------------------------------

class npt_blessing_info : public ::google::protobuf::Message {
 public:
  npt_blessing_info();
  virtual ~npt_blessing_info();

  npt_blessing_info(const npt_blessing_info& from);

  inline npt_blessing_info& operator=(const npt_blessing_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_blessing_info& default_instance();

  void Swap(npt_blessing_info* other);

  // implements Message ----------------------------------------------

  npt_blessing_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_blessing_info& from);
  void MergeFrom(const npt_blessing_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BLESSING_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.blessing_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PB::blessing_info& info() const;
  inline ::PB::blessing_info* mutable_info();
  inline ::PB::blessing_info* release_info();
  inline void set_allocated_info(::PB::blessing_info* info);

  // optional bool tanksgiver = 3;
  inline bool has_tanksgiver() const;
  inline void clear_tanksgiver();
  static const int kTanksgiverFieldNumber = 3;
  inline bool tanksgiver() const;
  inline void set_tanksgiver(bool value);

  // @@protoc_insertion_point(class_scope:PB.npt_blessing_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_tanksgiver();
  inline void clear_has_tanksgiver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::blessing_info* info_;
  int type_;
  bool tanksgiver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_blessing_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_nationwar_event : public ::google::protobuf::Message {
 public:
  npt_nationwar_event();
  virtual ~npt_nationwar_event();

  npt_nationwar_event(const npt_nationwar_event& from);

  inline npt_nationwar_event& operator=(const npt_nationwar_event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nationwar_event& default_instance();

  void Swap(npt_nationwar_event* other);

  // implements Message ----------------------------------------------

  npt_nationwar_event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nationwar_event& from);
  void MergeFrom(const npt_nationwar_event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_nationwar_event_NNE_TYPE NNE_TYPE;
  static const NNE_TYPE NATION_WAR_KILL_COUNT = npt_nationwar_event_NNE_TYPE_NATION_WAR_KILL_COUNT;
  static const NNE_TYPE NATION_WAR_JIHUO = npt_nationwar_event_NNE_TYPE_NATION_WAR_JIHUO;
  static const NNE_TYPE NATION_WAR_JIHUO_COOLDOWN = npt_nationwar_event_NNE_TYPE_NATION_WAR_JIHUO_COOLDOWN;
  static inline bool NNE_TYPE_IsValid(int value) {
    return npt_nationwar_event_NNE_TYPE_IsValid(value);
  }
  static const NNE_TYPE NNE_TYPE_MIN =
    npt_nationwar_event_NNE_TYPE_NNE_TYPE_MIN;
  static const NNE_TYPE NNE_TYPE_MAX =
    npt_nationwar_event_NNE_TYPE_NNE_TYPE_MAX;
  static const int NNE_TYPE_ARRAYSIZE =
    npt_nationwar_event_NNE_TYPE_NNE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NNE_TYPE_descriptor() {
    return npt_nationwar_event_NNE_TYPE_descriptor();
  }
  static inline const ::std::string& NNE_TYPE_Name(NNE_TYPE value) {
    return npt_nationwar_event_NNE_TYPE_Name(value);
  }
  static inline bool NNE_TYPE_Parse(const ::std::string& name,
      NNE_TYPE* value) {
    return npt_nationwar_event_NNE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATIONWAR_EVENT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.npt_nationwar_event.NNE_TYPE event_type = 2;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  inline ::PB::npt_nationwar_event_NNE_TYPE event_type() const;
  inline void set_event_type(::PB::npt_nationwar_event_NNE_TYPE value);

  // optional int32 event_param = 3;
  inline bool has_event_param() const;
  inline void clear_event_param();
  static const int kEventParamFieldNumber = 3;
  inline ::google::protobuf::int32 event_param() const;
  inline void set_event_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nationwar_event)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_event_param();
  inline void clear_has_event_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int event_type_;
  ::google::protobuf::int32 event_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nationwar_event* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_shutup : public ::google::protobuf::Message {
 public:
  npt_nation_shutup();
  virtual ~npt_nation_shutup();

  npt_nation_shutup(const npt_nation_shutup& from);

  inline npt_nation_shutup& operator=(const npt_nation_shutup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_shutup& default_instance();

  void Swap(npt_nation_shutup* other);

  // implements Message ----------------------------------------------

  npt_nation_shutup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_shutup& from);
  void MergeFrom(const npt_nation_shutup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 dst_roleid = 2;
  inline bool has_dst_roleid() const;
  inline void clear_dst_roleid();
  static const int kDstRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 dst_roleid() const;
  inline void set_dst_roleid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_shutup)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dst_roleid();
  inline void clear_has_dst_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dst_roleid_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_shutup* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_shutup_info : public ::google::protobuf::Message {
 public:
  npt_nation_shutup_info();
  virtual ~npt_nation_shutup_info();

  npt_nation_shutup_info(const npt_nation_shutup_info& from);

  inline npt_nation_shutup_info& operator=(const npt_nation_shutup_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_shutup_info& default_instance();

  void Swap(npt_nation_shutup_info* other);

  // implements Message ----------------------------------------------

  npt_nation_shutup_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_shutup_info& from);
  void MergeFrom(const npt_nation_shutup_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 use_times = 2;
  inline bool has_use_times() const;
  inline void clear_use_times();
  static const int kUseTimesFieldNumber = 2;
  inline ::google::protobuf::int32 use_times() const;
  inline void set_use_times(::google::protobuf::int32 value);

  // required int32 remain_times = 3;
  inline bool has_remain_times() const;
  inline void clear_remain_times();
  static const int kRemainTimesFieldNumber = 3;
  inline ::google::protobuf::int32 remain_times() const;
  inline void set_remain_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_shutup_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_use_times();
  inline void clear_has_use_times();
  inline void set_has_remain_times();
  inline void clear_has_remain_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 use_times_;
  ::google::protobuf::int32 remain_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_shutup_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_commander_appoint : public ::google::protobuf::Message {
 public:
  npt_nation_commander_appoint();
  virtual ~npt_nation_commander_appoint();

  npt_nation_commander_appoint(const npt_nation_commander_appoint& from);

  inline npt_nation_commander_appoint& operator=(const npt_nation_commander_appoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_commander_appoint& default_instance();

  void Swap(npt_nation_commander_appoint* other);

  // implements Message ----------------------------------------------

  npt_nation_commander_appoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_commander_appoint& from);
  void MergeFrom(const npt_nation_commander_appoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_APPOINT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 dst_roleid = 2;
  inline bool has_dst_roleid() const;
  inline void clear_dst_roleid();
  static const int kDstRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 dst_roleid() const;
  inline void set_dst_roleid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_commander_appoint)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dst_roleid();
  inline void clear_has_dst_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dst_roleid_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_commander_appoint* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_commander_notify : public ::google::protobuf::Message {
 public:
  npt_nation_commander_notify();
  virtual ~npt_nation_commander_notify();

  npt_nation_commander_notify(const npt_nation_commander_notify& from);

  inline npt_nation_commander_notify& operator=(const npt_nation_commander_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_commander_notify& default_instance();

  void Swap(npt_nation_commander_notify* other);

  // implements Message ----------------------------------------------

  npt_nation_commander_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_commander_notify& from);
  void MergeFrom(const npt_nation_commander_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_NOTIFY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional bytes dst_name = 2;
  inline bool has_dst_name() const;
  inline void clear_dst_name();
  static const int kDstNameFieldNumber = 2;
  inline const ::std::string& dst_name() const;
  inline void set_dst_name(const ::std::string& value);
  inline void set_dst_name(const char* value);
  inline void set_dst_name(const void* value, size_t size);
  inline ::std::string* mutable_dst_name();
  inline ::std::string* release_dst_name();
  inline void set_allocated_dst_name(::std::string* dst_name);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_commander_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dst_name();
  inline void clear_has_dst_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dst_name_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_commander_notify* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_war_history : public ::google::protobuf::Message {
 public:
  npt_nation_war_history();
  virtual ~npt_nation_war_history();

  npt_nation_war_history(const npt_nation_war_history& from);

  inline npt_nation_war_history& operator=(const npt_nation_war_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_war_history& default_instance();

  void Swap(npt_nation_war_history* other);

  // implements Message ----------------------------------------------

  npt_nation_war_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_war_history& from);
  void MergeFrom(const npt_nation_war_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_HISTORY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.nation_war_history historys = 2;
  inline int historys_size() const;
  inline void clear_historys();
  static const int kHistorysFieldNumber = 2;
  inline const ::PB::nation_war_history& historys(int index) const;
  inline ::PB::nation_war_history* mutable_historys(int index);
  inline ::PB::nation_war_history* add_historys();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::nation_war_history >&
      historys() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::nation_war_history >*
      mutable_historys();

  // @@protoc_insertion_point(class_scope:PB.npt_nation_war_history)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::nation_war_history > historys_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_war_history* default_instance_;
};
// -------------------------------------------------------------------

class npt_request_info : public ::google::protobuf::Message {
 public:
  npt_request_info();
  virtual ~npt_request_info();

  npt_request_info(const npt_request_info& from);

  inline npt_request_info& operator=(const npt_request_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_request_info& default_instance();

  void Swap(npt_request_info* other);

  // implements Message ----------------------------------------------

  npt_request_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_request_info& from);
  void MergeFrom(const npt_request_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_request_info_INFO_TYPE INFO_TYPE;
  static const INFO_TYPE NATION_WAR_HISTORY = npt_request_info_INFO_TYPE_NATION_WAR_HISTORY;
  static inline bool INFO_TYPE_IsValid(int value) {
    return npt_request_info_INFO_TYPE_IsValid(value);
  }
  static const INFO_TYPE INFO_TYPE_MIN =
    npt_request_info_INFO_TYPE_INFO_TYPE_MIN;
  static const INFO_TYPE INFO_TYPE_MAX =
    npt_request_info_INFO_TYPE_INFO_TYPE_MAX;
  static const int INFO_TYPE_ARRAYSIZE =
    npt_request_info_INFO_TYPE_INFO_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  INFO_TYPE_descriptor() {
    return npt_request_info_INFO_TYPE_descriptor();
  }
  static inline const ::std::string& INFO_TYPE_Name(INFO_TYPE value) {
    return npt_request_info_INFO_TYPE_Name(value);
  }
  static inline bool INFO_TYPE_Parse(const ::std::string& name,
      INFO_TYPE* value) {
    return npt_request_info_INFO_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REQUEST_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required .PB.npt_request_info.INFO_TYPE request_type = 2;
  inline bool has_request_type() const;
  inline void clear_request_type();
  static const int kRequestTypeFieldNumber = 2;
  inline ::PB::npt_request_info_INFO_TYPE request_type() const;
  inline void set_request_type(::PB::npt_request_info_INFO_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.npt_request_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_request_type();
  inline void clear_has_request_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int request_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_request_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_nation_shutup_reply : public ::google::protobuf::Message {
 public:
  npt_nation_shutup_reply();
  virtual ~npt_nation_shutup_reply();

  npt_nation_shutup_reply(const npt_nation_shutup_reply& from);

  inline npt_nation_shutup_reply& operator=(const npt_nation_shutup_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_nation_shutup_reply& default_instance();

  void Swap(npt_nation_shutup_reply* other);

  // implements Message ----------------------------------------------

  npt_nation_shutup_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_nation_shutup_reply& from);
  void MergeFrom(const npt_nation_shutup_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_nation_shutup_reply_RESULT_TYPE RESULT_TYPE;
  static const RESULT_TYPE RESULT_SUCCEED = npt_nation_shutup_reply_RESULT_TYPE_RESULT_SUCCEED;
  static const RESULT_TYPE RESULT_OFFLINE = npt_nation_shutup_reply_RESULT_TYPE_RESULT_OFFLINE;
  static const RESULT_TYPE RESULT_ALREADY_SHUTUP = npt_nation_shutup_reply_RESULT_TYPE_RESULT_ALREADY_SHUTUP;
  static inline bool RESULT_TYPE_IsValid(int value) {
    return npt_nation_shutup_reply_RESULT_TYPE_IsValid(value);
  }
  static const RESULT_TYPE RESULT_TYPE_MIN =
    npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_MIN;
  static const RESULT_TYPE RESULT_TYPE_MAX =
    npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_MAX;
  static const int RESULT_TYPE_ARRAYSIZE =
    npt_nation_shutup_reply_RESULT_TYPE_RESULT_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RESULT_TYPE_descriptor() {
    return npt_nation_shutup_reply_RESULT_TYPE_descriptor();
  }
  static inline const ::std::string& RESULT_TYPE_Name(RESULT_TYPE value) {
    return npt_nation_shutup_reply_RESULT_TYPE_Name(value);
  }
  static inline bool RESULT_TYPE_Parse(const ::std::string& name,
      RESULT_TYPE* value) {
    return npt_nation_shutup_reply_RESULT_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_REPLY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required .PB.npt_nation_shutup_reply.RESULT_TYPE result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::PB::npt_nation_shutup_reply_RESULT_TYPE result() const;
  inline void set_result(::PB::npt_nation_shutup_reply_RESULT_TYPE value);

  // optional bytes dst_name = 3;
  inline bool has_dst_name() const;
  inline void clear_dst_name();
  static const int kDstNameFieldNumber = 3;
  inline const ::std::string& dst_name() const;
  inline void set_dst_name(const ::std::string& value);
  inline void set_dst_name(const char* value);
  inline void set_dst_name(const void* value, size_t size);
  inline ::std::string* mutable_dst_name();
  inline ::std::string* release_dst_name();
  inline void set_allocated_dst_name(::std::string* dst_name);

  // @@protoc_insertion_point(class_scope:PB.npt_nation_shutup_reply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_dst_name();
  inline void clear_has_dst_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int result_;
  ::std::string* dst_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_nation_shutup_reply* default_instance_;
};
// -------------------------------------------------------------------

class npt_greeting_info_sync : public ::google::protobuf::Message {
 public:
  npt_greeting_info_sync();
  virtual ~npt_greeting_info_sync();

  npt_greeting_info_sync(const npt_greeting_info_sync& from);

  inline npt_greeting_info_sync& operator=(const npt_greeting_info_sync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_greeting_info_sync& default_instance();

  void Swap(npt_greeting_info_sync* other);

  // implements Message ----------------------------------------------

  npt_greeting_info_sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_greeting_info_sync& from);
  void MergeFrom(const npt_greeting_info_sync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_greeting_info_sync_SYNC_TYPE SYNC_TYPE;
  static const SYNC_TYPE SYNC_ALL = npt_greeting_info_sync_SYNC_TYPE_SYNC_ALL;
  static const SYNC_TYPE SYNC_ADD = npt_greeting_info_sync_SYNC_TYPE_SYNC_ADD;
  static const SYNC_TYPE SYNC_DEL = npt_greeting_info_sync_SYNC_TYPE_SYNC_DEL;
  static inline bool SYNC_TYPE_IsValid(int value) {
    return npt_greeting_info_sync_SYNC_TYPE_IsValid(value);
  }
  static const SYNC_TYPE SYNC_TYPE_MIN =
    npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_MIN;
  static const SYNC_TYPE SYNC_TYPE_MAX =
    npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_MAX;
  static const int SYNC_TYPE_ARRAYSIZE =
    npt_greeting_info_sync_SYNC_TYPE_SYNC_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SYNC_TYPE_descriptor() {
    return npt_greeting_info_sync_SYNC_TYPE_descriptor();
  }
  static inline const ::std::string& SYNC_TYPE_Name(SYNC_TYPE value) {
    return npt_greeting_info_sync_SYNC_TYPE_Name(value);
  }
  static inline bool SYNC_TYPE_Parse(const ::std::string& name,
      SYNC_TYPE* value) {
    return npt_greeting_info_sync_SYNC_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_INFO_SYNC];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.npt_greeting_info_sync.SYNC_TYPE sync_type = 2;
  inline bool has_sync_type() const;
  inline void clear_sync_type();
  static const int kSyncTypeFieldNumber = 2;
  inline ::PB::npt_greeting_info_sync_SYNC_TYPE sync_type() const;
  inline void set_sync_type(::PB::npt_greeting_info_sync_SYNC_TYPE value);

  // repeated .PB.greeting_info greeting_list = 3;
  inline int greeting_list_size() const;
  inline void clear_greeting_list();
  static const int kGreetingListFieldNumber = 3;
  inline const ::PB::greeting_info& greeting_list(int index) const;
  inline ::PB::greeting_info* mutable_greeting_list(int index);
  inline ::PB::greeting_info* add_greeting_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::greeting_info >&
      greeting_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::greeting_info >*
      mutable_greeting_list();

  // @@protoc_insertion_point(class_scope:PB.npt_greeting_info_sync)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sync_type();
  inline void clear_has_sync_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int sync_type_;
  ::google::protobuf::RepeatedPtrField< ::PB::greeting_info > greeting_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_greeting_info_sync* default_instance_;
};
// -------------------------------------------------------------------

class npt_greeting_reply : public ::google::protobuf::Message {
 public:
  npt_greeting_reply();
  virtual ~npt_greeting_reply();

  npt_greeting_reply(const npt_greeting_reply& from);

  inline npt_greeting_reply& operator=(const npt_greeting_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_greeting_reply& default_instance();

  void Swap(npt_greeting_reply* other);

  // implements Message ----------------------------------------------

  npt_greeting_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_greeting_reply& from);
  void MergeFrom(const npt_greeting_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_REPLY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 info_seq = 2;
  inline bool has_info_seq() const;
  inline void clear_info_seq();
  static const int kInfoSeqFieldNumber = 2;
  inline ::google::protobuf::int32 info_seq() const;
  inline void set_info_seq(::google::protobuf::int32 value);

  // required int64 dst_roleid = 3;
  inline bool has_dst_roleid() const;
  inline void clear_dst_roleid();
  static const int kDstRoleidFieldNumber = 3;
  inline ::google::protobuf::int64 dst_roleid() const;
  inline void set_dst_roleid(::google::protobuf::int64 value);

  // required int32 reply_type = 4;
  inline bool has_reply_type() const;
  inline void clear_reply_type();
  static const int kReplyTypeFieldNumber = 4;
  inline ::google::protobuf::int32 reply_type() const;
  inline void set_reply_type(::google::protobuf::int32 value);

  // required int32 reply_param = 5;
  inline bool has_reply_param() const;
  inline void clear_reply_param();
  static const int kReplyParamFieldNumber = 5;
  inline ::google::protobuf::int32 reply_param() const;
  inline void set_reply_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_greeting_reply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info_seq();
  inline void clear_has_info_seq();
  inline void set_has_dst_roleid();
  inline void clear_has_dst_roleid();
  inline void set_has_reply_type();
  inline void clear_has_reply_type();
  inline void set_has_reply_param();
  inline void clear_has_reply_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 info_seq_;
  ::google::protobuf::int64 dst_roleid_;
  ::google::protobuf::int32 reply_type_;
  ::google::protobuf::int32 reply_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_greeting_reply* default_instance_;
};
// -------------------------------------------------------------------

class npt_ask_help : public ::google::protobuf::Message {
 public:
  npt_ask_help();
  virtual ~npt_ask_help();

  npt_ask_help(const npt_ask_help& from);

  inline npt_ask_help& operator=(const npt_ask_help& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_ask_help& default_instance();

  void Swap(npt_ask_help* other);

  // implements Message ----------------------------------------------

  npt_ask_help* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_ask_help& from);
  void MergeFrom(const npt_ask_help& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ASK_HELP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional .PB.ask_help_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PB::ask_help_info& info() const;
  inline ::PB::ask_help_info* mutable_info();
  inline ::PB::ask_help_info* release_info();
  inline void set_allocated_info(::PB::ask_help_info* info);

  // optional int32 response_retcode = 3;
  inline bool has_response_retcode() const;
  inline void clear_response_retcode();
  static const int kResponseRetcodeFieldNumber = 3;
  inline ::google::protobuf::int32 response_retcode() const;
  inline void set_response_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_ask_help)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_response_retcode();
  inline void clear_has_response_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::ask_help_info* info_;
  int type_;
  ::google::protobuf::int32 response_retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_ask_help* default_instance_;
};
// -------------------------------------------------------------------

class npt_send_server_midas_info : public ::google::protobuf::Message {
 public:
  npt_send_server_midas_info();
  virtual ~npt_send_server_midas_info();

  npt_send_server_midas_info(const npt_send_server_midas_info& from);

  inline npt_send_server_midas_info& operator=(const npt_send_server_midas_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_send_server_midas_info& default_instance();

  void Swap(npt_send_server_midas_info* other);

  // implements Message ----------------------------------------------

  npt_send_server_midas_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_send_server_midas_info& from);
  void MergeFrom(const npt_send_server_midas_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_SERVER_MIDAS_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional bytes midas_openkey = 3;
  inline bool has_midas_openkey() const;
  inline void clear_midas_openkey();
  static const int kMidasOpenkeyFieldNumber = 3;
  inline const ::std::string& midas_openkey() const;
  inline void set_midas_openkey(const ::std::string& value);
  inline void set_midas_openkey(const char* value);
  inline void set_midas_openkey(const void* value, size_t size);
  inline ::std::string* mutable_midas_openkey();
  inline ::std::string* release_midas_openkey();
  inline void set_allocated_midas_openkey(::std::string* midas_openkey);

  // optional bytes midas_paytoken = 4;
  inline bool has_midas_paytoken() const;
  inline void clear_midas_paytoken();
  static const int kMidasPaytokenFieldNumber = 4;
  inline const ::std::string& midas_paytoken() const;
  inline void set_midas_paytoken(const ::std::string& value);
  inline void set_midas_paytoken(const char* value);
  inline void set_midas_paytoken(const void* value, size_t size);
  inline ::std::string* mutable_midas_paytoken();
  inline ::std::string* release_midas_paytoken();
  inline void set_allocated_midas_paytoken(::std::string* midas_paytoken);

  // optional bytes midas_pf = 5;
  inline bool has_midas_pf() const;
  inline void clear_midas_pf();
  static const int kMidasPfFieldNumber = 5;
  inline const ::std::string& midas_pf() const;
  inline void set_midas_pf(const ::std::string& value);
  inline void set_midas_pf(const char* value);
  inline void set_midas_pf(const void* value, size_t size);
  inline ::std::string* mutable_midas_pf();
  inline ::std::string* release_midas_pf();
  inline void set_allocated_midas_pf(::std::string* midas_pf);

  // optional bytes midas_pfkey = 6;
  inline bool has_midas_pfkey() const;
  inline void clear_midas_pfkey();
  static const int kMidasPfkeyFieldNumber = 6;
  inline const ::std::string& midas_pfkey() const;
  inline void set_midas_pfkey(const ::std::string& value);
  inline void set_midas_pfkey(const char* value);
  inline void set_midas_pfkey(const void* value, size_t size);
  inline ::std::string* mutable_midas_pfkey();
  inline ::std::string* release_midas_pfkey();
  inline void set_allocated_midas_pfkey(::std::string* midas_pfkey);

  // @@protoc_insertion_point(class_scope:PB.npt_send_server_midas_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_midas_openkey();
  inline void clear_has_midas_openkey();
  inline void set_has_midas_paytoken();
  inline void clear_has_midas_paytoken();
  inline void set_has_midas_pf();
  inline void clear_has_midas_pf();
  inline void set_has_midas_pfkey();
  inline void clear_has_midas_pfkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  ::std::string* midas_openkey_;
  ::std::string* midas_paytoken_;
  ::std::string* midas_pf_;
  ::std::string* midas_pfkey_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_send_server_midas_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_send_tencent_secure_info : public ::google::protobuf::Message {
 public:
  npt_send_tencent_secure_info();
  virtual ~npt_send_tencent_secure_info();

  npt_send_tencent_secure_info(const npt_send_tencent_secure_info& from);

  inline npt_send_tencent_secure_info& operator=(const npt_send_tencent_secure_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_send_tencent_secure_info& default_instance();

  void Swap(npt_send_tencent_secure_info* other);

  // implements Message ----------------------------------------------

  npt_send_tencent_secure_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_send_tencent_secure_info& from);
  void MergeFrom(const npt_send_tencent_secure_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_TENCENT_SECURE_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional bytes secure_data = 2;
  inline bool has_secure_data() const;
  inline void clear_secure_data();
  static const int kSecureDataFieldNumber = 2;
  inline const ::std::string& secure_data() const;
  inline void set_secure_data(const ::std::string& value);
  inline void set_secure_data(const char* value);
  inline void set_secure_data(const void* value, size_t size);
  inline ::std::string* mutable_secure_data();
  inline ::std::string* release_secure_data();
  inline void set_allocated_secure_data(::std::string* secure_data);

  // @@protoc_insertion_point(class_scope:PB.npt_send_tencent_secure_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_secure_data();
  inline void clear_has_secure_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* secure_data_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_send_tencent_secure_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_send_client_midas_info : public ::google::protobuf::Message {
 public:
  npt_send_client_midas_info();
  virtual ~npt_send_client_midas_info();

  npt_send_client_midas_info(const npt_send_client_midas_info& from);

  inline npt_send_client_midas_info& operator=(const npt_send_client_midas_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_send_client_midas_info& default_instance();

  void Swap(npt_send_client_midas_info* other);

  // implements Message ----------------------------------------------

  npt_send_client_midas_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_send_client_midas_info& from);
  void MergeFrom(const npt_send_client_midas_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_CLIENT_MIDAS_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int64 midas_total_amount = 2;
  inline bool has_midas_total_amount() const;
  inline void clear_midas_total_amount();
  static const int kMidasTotalAmountFieldNumber = 2;
  inline ::google::protobuf::int64 midas_total_amount() const;
  inline void set_midas_total_amount(::google::protobuf::int64 value);

  // required int64 midas_bind_amount = 3;
  inline bool has_midas_bind_amount() const;
  inline void clear_midas_bind_amount();
  static const int kMidasBindAmountFieldNumber = 3;
  inline ::google::protobuf::int64 midas_bind_amount() const;
  inline void set_midas_bind_amount(::google::protobuf::int64 value);

  // required int64 midas_save_amt = 4;
  inline bool has_midas_save_amt() const;
  inline void clear_midas_save_amt();
  static const int kMidasSaveAmtFieldNumber = 4;
  inline ::google::protobuf::int64 midas_save_amt() const;
  inline void set_midas_save_amt(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.npt_send_client_midas_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_midas_total_amount();
  inline void clear_has_midas_total_amount();
  inline void set_has_midas_bind_amount();
  inline void clear_has_midas_bind_amount();
  inline void set_has_midas_save_amt();
  inline void clear_has_midas_save_amt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 midas_total_amount_;
  ::google::protobuf::int64 midas_bind_amount_;
  ::google::protobuf::int64 midas_save_amt_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_send_client_midas_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_send_midas_bad_token : public ::google::protobuf::Message {
 public:
  npt_send_midas_bad_token();
  virtual ~npt_send_midas_bad_token();

  npt_send_midas_bad_token(const npt_send_midas_bad_token& from);

  inline npt_send_midas_bad_token& operator=(const npt_send_midas_bad_token& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_send_midas_bad_token& default_instance();

  void Swap(npt_send_midas_bad_token* other);

  // implements Message ----------------------------------------------

  npt_send_midas_bad_token* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_send_midas_bad_token& from);
  void MergeFrom(const npt_send_midas_bad_token& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_MIDAS_BAD_TOKEN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 midas_op = 2;
  inline bool has_midas_op() const;
  inline void clear_midas_op();
  static const int kMidasOpFieldNumber = 2;
  inline ::google::protobuf::int32 midas_op() const;
  inline void set_midas_op(::google::protobuf::int32 value);

  // required int32 midas_retcode = 3;
  inline bool has_midas_retcode() const;
  inline void clear_midas_retcode();
  static const int kMidasRetcodeFieldNumber = 3;
  inline ::google::protobuf::int32 midas_retcode() const;
  inline void set_midas_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_send_midas_bad_token)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_midas_op();
  inline void clear_has_midas_op();
  inline void set_has_midas_retcode();
  inline void clear_has_midas_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 midas_op_;
  ::google::protobuf::int32 midas_retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_send_midas_bad_token* default_instance_;
};
// -------------------------------------------------------------------

class npt_officer_gift_get : public ::google::protobuf::Message {
 public:
  npt_officer_gift_get();
  virtual ~npt_officer_gift_get();

  npt_officer_gift_get(const npt_officer_gift_get& from);

  inline npt_officer_gift_get& operator=(const npt_officer_gift_get& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_officer_gift_get& default_instance();

  void Swap(npt_officer_gift_get* other);

  // implements Message ----------------------------------------------

  npt_officer_gift_get* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_officer_gift_get& from);
  void MergeFrom(const npt_officer_gift_get& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_GET];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 gift_id = 2;
  inline bool has_gift_id() const;
  inline void clear_gift_id();
  static const int kGiftIdFieldNumber = 2;
  inline ::google::protobuf::int32 gift_id() const;
  inline void set_gift_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_officer_gift_get)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gift_id();
  inline void clear_has_gift_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 gift_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_officer_gift_get* default_instance_;
};
// -------------------------------------------------------------------

class npt_officer_gift_notify : public ::google::protobuf::Message {
 public:
  npt_officer_gift_notify();
  virtual ~npt_officer_gift_notify();

  npt_officer_gift_notify(const npt_officer_gift_notify& from);

  inline npt_officer_gift_notify& operator=(const npt_officer_gift_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_officer_gift_notify& default_instance();

  void Swap(npt_officer_gift_notify* other);

  // implements Message ----------------------------------------------

  npt_officer_gift_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_officer_gift_notify& from);
  void MergeFrom(const npt_officer_gift_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_NOTIFY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 gift_id = 2;
  inline bool has_gift_id() const;
  inline void clear_gift_id();
  static const int kGiftIdFieldNumber = 2;
  inline ::google::protobuf::int32 gift_id() const;
  inline void set_gift_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_officer_gift_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gift_id();
  inline void clear_has_gift_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 gift_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_officer_gift_notify* default_instance_;
};
// -------------------------------------------------------------------

class npt_weak_nation_gift_get : public ::google::protobuf::Message {
 public:
  npt_weak_nation_gift_get();
  virtual ~npt_weak_nation_gift_get();

  npt_weak_nation_gift_get(const npt_weak_nation_gift_get& from);

  inline npt_weak_nation_gift_get& operator=(const npt_weak_nation_gift_get& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_weak_nation_gift_get& default_instance();

  void Swap(npt_weak_nation_gift_get* other);

  // implements Message ----------------------------------------------

  npt_weak_nation_gift_get* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_weak_nation_gift_get& from);
  void MergeFrom(const npt_weak_nation_gift_get& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_GET];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 gift_id = 2;
  inline bool has_gift_id() const;
  inline void clear_gift_id();
  static const int kGiftIdFieldNumber = 2;
  inline ::google::protobuf::int32 gift_id() const;
  inline void set_gift_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_weak_nation_gift_get)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gift_id();
  inline void clear_has_gift_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 gift_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_weak_nation_gift_get* default_instance_;
};
// -------------------------------------------------------------------

class npt_weak_nation_gift_notify : public ::google::protobuf::Message {
 public:
  npt_weak_nation_gift_notify();
  virtual ~npt_weak_nation_gift_notify();

  npt_weak_nation_gift_notify(const npt_weak_nation_gift_notify& from);

  inline npt_weak_nation_gift_notify& operator=(const npt_weak_nation_gift_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_weak_nation_gift_notify& default_instance();

  void Swap(npt_weak_nation_gift_notify* other);

  // implements Message ----------------------------------------------

  npt_weak_nation_gift_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_weak_nation_gift_notify& from);
  void MergeFrom(const npt_weak_nation_gift_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_NOTIFY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 gift_id = 2;
  inline bool has_gift_id() const;
  inline void clear_gift_id();
  static const int kGiftIdFieldNumber = 2;
  inline ::google::protobuf::int32 gift_id() const;
  inline void set_gift_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_weak_nation_gift_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gift_id();
  inline void clear_has_gift_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 gift_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_weak_nation_gift_notify* default_instance_;
};
// -------------------------------------------------------------------

class npt_server_info_notify : public ::google::protobuf::Message {
 public:
  npt_server_info_notify();
  virtual ~npt_server_info_notify();

  npt_server_info_notify(const npt_server_info_notify& from);

  inline npt_server_info_notify& operator=(const npt_server_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_server_info_notify& default_instance();

  void Swap(npt_server_info_notify* other);

  // implements Message ----------------------------------------------

  npt_server_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_server_info_notify& from);
  void MergeFrom(const npt_server_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SERVER_INFO_NOTIFY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 free_war_left = 2;
  inline bool has_free_war_left() const;
  inline void clear_free_war_left();
  static const int kFreeWarLeftFieldNumber = 2;
  inline ::google::protobuf::int32 free_war_left() const;
  inline void set_free_war_left(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_server_info_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_free_war_left();
  inline void clear_has_free_war_left();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 free_war_left_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_server_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class npt_team_recruit_operate : public ::google::protobuf::Message {
 public:
  npt_team_recruit_operate();
  virtual ~npt_team_recruit_operate();

  npt_team_recruit_operate(const npt_team_recruit_operate& from);

  inline npt_team_recruit_operate& operator=(const npt_team_recruit_operate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_team_recruit_operate& default_instance();

  void Swap(npt_team_recruit_operate* other);

  // implements Message ----------------------------------------------

  npt_team_recruit_operate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_team_recruit_operate& from);
  void MergeFrom(const npt_team_recruit_operate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_team_recruit_operate_OPERATE_TYPE OPERATE_TYPE;
  static const OPERATE_TYPE CREATE = npt_team_recruit_operate_OPERATE_TYPE_CREATE;
  static const OPERATE_TYPE LIST = npt_team_recruit_operate_OPERATE_TYPE_LIST;
  static const OPERATE_TYPE PUBLISH = npt_team_recruit_operate_OPERATE_TYPE_PUBLISH;
  static const OPERATE_TYPE CANCEL = npt_team_recruit_operate_OPERATE_TYPE_CANCEL;
  static const OPERATE_TYPE REQ_COOLDOWN = npt_team_recruit_operate_OPERATE_TYPE_REQ_COOLDOWN;
  static const OPERATE_TYPE MODIFY = npt_team_recruit_operate_OPERATE_TYPE_MODIFY;
  static const OPERATE_TYPE REQ_LEADER_POS = npt_team_recruit_operate_OPERATE_TYPE_REQ_LEADER_POS;
  static const OPERATE_TYPE GATHER = npt_team_recruit_operate_OPERATE_TYPE_GATHER;
  static inline bool OPERATE_TYPE_IsValid(int value) {
    return npt_team_recruit_operate_OPERATE_TYPE_IsValid(value);
  }
  static const OPERATE_TYPE OPERATE_TYPE_MIN =
    npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_MIN;
  static const OPERATE_TYPE OPERATE_TYPE_MAX =
    npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_MAX;
  static const int OPERATE_TYPE_ARRAYSIZE =
    npt_team_recruit_operate_OPERATE_TYPE_OPERATE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPERATE_TYPE_descriptor() {
    return npt_team_recruit_operate_OPERATE_TYPE_descriptor();
  }
  static inline const ::std::string& OPERATE_TYPE_Name(OPERATE_TYPE value) {
    return npt_team_recruit_operate_OPERATE_TYPE_Name(value);
  }
  static inline bool OPERATE_TYPE_Parse(const ::std::string& name,
      OPERATE_TYPE* value) {
    return npt_team_recruit_operate_OPERATE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 operate_type = 2;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 2;
  inline ::google::protobuf::int32 operate_type() const;
  inline void set_operate_type(::google::protobuf::int32 value);

  // optional int64 param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline ::google::protobuf::int64 param1() const;
  inline void set_param1(::google::protobuf::int64 value);

  // optional int64 param2 = 4;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 4;
  inline ::google::protobuf::int64 param2() const;
  inline void set_param2(::google::protobuf::int64 value);

  // optional int64 param3 = 5;
  inline bool has_param3() const;
  inline void clear_param3();
  static const int kParam3FieldNumber = 5;
  inline ::google::protobuf::int64 param3() const;
  inline void set_param3(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.npt_team_recruit_operate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_param3();
  inline void clear_has_param3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 operate_type_;
  ::google::protobuf::int64 param1_;
  ::google::protobuf::int64 param2_;
  ::google::protobuf::int64 param3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_team_recruit_operate* default_instance_;
};
// -------------------------------------------------------------------

class recruit_info : public ::google::protobuf::Message {
 public:
  recruit_info();
  virtual ~recruit_info();

  recruit_info(const recruit_info& from);

  inline recruit_info& operator=(const recruit_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const recruit_info& default_instance();

  void Swap(recruit_info* other);

  // implements Message ----------------------------------------------

  recruit_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const recruit_info& from);
  void MergeFrom(const recruit_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 min_level = 1;
  inline bool has_min_level() const;
  inline void clear_min_level();
  static const int kMinLevelFieldNumber = 1;
  inline ::google::protobuf::int32 min_level() const;
  inline void set_min_level(::google::protobuf::int32 value);

  // optional int32 inst_tid = 2;
  inline bool has_inst_tid() const;
  inline void clear_inst_tid();
  static const int kInstTidFieldNumber = 2;
  inline ::google::protobuf::int32 inst_tid() const;
  inline void set_inst_tid(::google::protobuf::int32 value);

  // optional int32 team_number = 3;
  inline bool has_team_number() const;
  inline void clear_team_number();
  static const int kTeamNumberFieldNumber = 3;
  inline ::google::protobuf::int32 team_number() const;
  inline void set_team_number(::google::protobuf::int32 value);

  // optional bytes leader_name = 4;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 4;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const void* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  inline void set_allocated_leader_name(::std::string* leader_name);

  // optional int64 leader_id = 5;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 5;
  inline ::google::protobuf::int64 leader_id() const;
  inline void set_leader_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.recruit_info)
 private:
  inline void set_has_min_level();
  inline void clear_has_min_level();
  inline void set_has_inst_tid();
  inline void clear_has_inst_tid();
  inline void set_has_team_number();
  inline void clear_has_team_number();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 min_level_;
  ::google::protobuf::int32 inst_tid_;
  ::std::string* leader_name_;
  ::google::protobuf::int64 leader_id_;
  ::google::protobuf::int32 team_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static recruit_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_team_recruit_operate_reply : public ::google::protobuf::Message {
 public:
  npt_team_recruit_operate_reply();
  virtual ~npt_team_recruit_operate_reply();

  npt_team_recruit_operate_reply(const npt_team_recruit_operate_reply& from);

  inline npt_team_recruit_operate_reply& operator=(const npt_team_recruit_operate_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_team_recruit_operate_reply& default_instance();

  void Swap(npt_team_recruit_operate_reply* other);

  // implements Message ----------------------------------------------

  npt_team_recruit_operate_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_team_recruit_operate_reply& from);
  void MergeFrom(const npt_team_recruit_operate_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npt_team_recruit_operate_reply_RESULT RESULT;
  static const RESULT SUCCEED = npt_team_recruit_operate_reply_RESULT_SUCCEED;
  static const RESULT MAX_SIZE = npt_team_recruit_operate_reply_RESULT_MAX_SIZE;
  static const RESULT MIN_LEVEL = npt_team_recruit_operate_reply_RESULT_MIN_LEVEL;
  static const RESULT COOLDOWN = npt_team_recruit_operate_reply_RESULT_COOLDOWN;
  static const RESULT TIME_OUT = npt_team_recruit_operate_reply_RESULT_TIME_OUT;
  static const RESULT IN_INSTANCE = npt_team_recruit_operate_reply_RESULT_IN_INSTANCE;
  static inline bool RESULT_IsValid(int value) {
    return npt_team_recruit_operate_reply_RESULT_IsValid(value);
  }
  static const RESULT RESULT_MIN =
    npt_team_recruit_operate_reply_RESULT_RESULT_MIN;
  static const RESULT RESULT_MAX =
    npt_team_recruit_operate_reply_RESULT_RESULT_MAX;
  static const int RESULT_ARRAYSIZE =
    npt_team_recruit_operate_reply_RESULT_RESULT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RESULT_descriptor() {
    return npt_team_recruit_operate_reply_RESULT_descriptor();
  }
  static inline const ::std::string& RESULT_Name(RESULT value) {
    return npt_team_recruit_operate_reply_RESULT_Name(value);
  }
  static inline bool RESULT_Parse(const ::std::string& name,
      RESULT* value) {
    return npt_team_recruit_operate_reply_RESULT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE_REPLY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // optional int32 operate_type = 2;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 2;
  inline ::google::protobuf::int32 operate_type() const;
  inline void set_operate_type(::google::protobuf::int32 value);

  // optional int32 operate_result = 3;
  inline bool has_operate_result() const;
  inline void clear_operate_result();
  static const int kOperateResultFieldNumber = 3;
  inline ::google::protobuf::int32 operate_result() const;
  inline void set_operate_result(::google::protobuf::int32 value);

  // optional int64 param1 = 4;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 4;
  inline ::google::protobuf::int64 param1() const;
  inline void set_param1(::google::protobuf::int64 value);

  // optional int64 param2 = 5;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 5;
  inline ::google::protobuf::int64 param2() const;
  inline void set_param2(::google::protobuf::int64 value);

  // optional int64 param3 = 6;
  inline bool has_param3() const;
  inline void clear_param3();
  static const int kParam3FieldNumber = 6;
  inline ::google::protobuf::int64 param3() const;
  inline void set_param3(::google::protobuf::int64 value);

  // repeated .PB.recruit_info recruit_list = 7;
  inline int recruit_list_size() const;
  inline void clear_recruit_list();
  static const int kRecruitListFieldNumber = 7;
  inline const ::PB::recruit_info& recruit_list(int index) const;
  inline ::PB::recruit_info* mutable_recruit_list(int index);
  inline ::PB::recruit_info* add_recruit_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::recruit_info >&
      recruit_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::recruit_info >*
      mutable_recruit_list();

  // optional bytes param4 = 8;
  inline bool has_param4() const;
  inline void clear_param4();
  static const int kParam4FieldNumber = 8;
  inline const ::std::string& param4() const;
  inline void set_param4(const ::std::string& value);
  inline void set_param4(const char* value);
  inline void set_param4(const void* value, size_t size);
  inline ::std::string* mutable_param4();
  inline ::std::string* release_param4();
  inline void set_allocated_param4(::std::string* param4);

  // optional .PB.a3d_pos param_pos = 9;
  inline bool has_param_pos() const;
  inline void clear_param_pos();
  static const int kParamPosFieldNumber = 9;
  inline const ::PB::a3d_pos& param_pos() const;
  inline ::PB::a3d_pos* mutable_param_pos();
  inline ::PB::a3d_pos* release_param_pos();
  inline void set_allocated_param_pos(::PB::a3d_pos* param_pos);

  // @@protoc_insertion_point(class_scope:PB.npt_team_recruit_operate_reply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_operate_result();
  inline void clear_has_operate_result();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_param3();
  inline void clear_has_param3();
  inline void set_has_param4();
  inline void clear_has_param4();
  inline void set_has_param_pos();
  inline void clear_has_param_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 operate_type_;
  ::google::protobuf::int64 param1_;
  ::google::protobuf::int64 param2_;
  ::google::protobuf::int64 param3_;
  ::google::protobuf::RepeatedPtrField< ::PB::recruit_info > recruit_list_;
  ::std::string* param4_;
  ::PB::a3d_pos* param_pos_;
  ::google::protobuf::int32 operate_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_team_recruit_operate_reply* default_instance_;
};
// -------------------------------------------------------------------

class npt_update_grc_info : public ::google::protobuf::Message {
 public:
  npt_update_grc_info();
  virtual ~npt_update_grc_info();

  npt_update_grc_info(const npt_update_grc_info& from);

  inline npt_update_grc_info& operator=(const npt_update_grc_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_update_grc_info& default_instance();

  void Swap(npt_update_grc_info* other);

  // implements Message ----------------------------------------------

  npt_update_grc_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_update_grc_info& from);
  void MergeFrom(const npt_update_grc_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_UPDATE_GRC_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // @@protoc_insertion_point(class_scope:PB.npt_update_grc_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_update_grc_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_get_friend_info : public ::google::protobuf::Message {
 public:
  npt_grc_get_friend_info();
  virtual ~npt_grc_get_friend_info();

  npt_grc_get_friend_info(const npt_grc_get_friend_info& from);

  inline npt_grc_get_friend_info& operator=(const npt_grc_get_friend_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_get_friend_info& default_instance();

  void Swap(npt_grc_get_friend_info* other);

  // implements Message ----------------------------------------------

  npt_grc_get_friend_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_get_friend_info& from);
  void MergeFrom(const npt_grc_get_friend_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GET_FRIEND_INFO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);

  // required int32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_grc_get_friend_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_get_friend_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_send_gift : public ::google::protobuf::Message {
 public:
  npt_grc_send_gift();
  virtual ~npt_grc_send_gift();

  npt_grc_send_gift(const npt_grc_send_gift& from);

  inline npt_grc_send_gift& operator=(const npt_grc_send_gift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_send_gift& default_instance();

  void Swap(npt_grc_send_gift* other);

  // implements Message ----------------------------------------------

  npt_grc_send_gift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_send_gift& from);
  void MergeFrom(const npt_grc_send_gift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 giftType = 2;
  inline bool has_gifttype() const;
  inline void clear_gifttype();
  static const int kGiftTypeFieldNumber = 2;
  inline ::google::protobuf::int32 gifttype() const;
  inline void set_gifttype(::google::protobuf::int32 value);

  // required int64 giftCount = 3;
  inline bool has_giftcount() const;
  inline void clear_giftcount();
  static const int kGiftCountFieldNumber = 3;
  inline ::google::protobuf::int64 giftcount() const;
  inline void set_giftcount(::google::protobuf::int64 value);

  // required bytes to = 4;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 4;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const void* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // @@protoc_insertion_point(class_scope:PB.npt_grc_send_gift)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gifttype();
  inline void clear_has_gifttype();
  inline void set_has_giftcount();
  inline void clear_has_giftcount();
  inline void set_has_to();
  inline void clear_has_to();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 gifttype_;
  ::google::protobuf::int64 giftcount_;
  ::std::string* to_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_send_gift* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_rcv_gift : public ::google::protobuf::Message {
 public:
  npt_grc_rcv_gift();
  virtual ~npt_grc_rcv_gift();

  npt_grc_rcv_gift(const npt_grc_rcv_gift& from);

  inline npt_grc_rcv_gift& operator=(const npt_grc_rcv_gift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_rcv_gift& default_instance();

  void Swap(npt_grc_rcv_gift* other);

  // implements Message ----------------------------------------------

  npt_grc_rcv_gift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_rcv_gift& from);
  void MergeFrom(const npt_grc_rcv_gift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 giftType = 2;
  inline bool has_gifttype() const;
  inline void clear_gifttype();
  static const int kGiftTypeFieldNumber = 2;
  inline ::google::protobuf::int32 gifttype() const;
  inline void set_gifttype(::google::protobuf::int32 value);

  // required int64 giftCount = 3;
  inline bool has_giftcount() const;
  inline void clear_giftcount();
  static const int kGiftCountFieldNumber = 3;
  inline ::google::protobuf::int64 giftcount() const;
  inline void set_giftcount(::google::protobuf::int64 value);

  // required int64 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // required bytes from = 5;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 5;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // @@protoc_insertion_point(class_scope:PB.npt_grc_rcv_gift)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gifttype();
  inline void clear_has_gifttype();
  inline void set_has_giftcount();
  inline void clear_has_giftcount();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_from();
  inline void clear_has_from();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 gifttype_;
  ::google::protobuf::int64 giftcount_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* from_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_rcv_gift* default_instance_;
};
// -------------------------------------------------------------------

class grc_friend_info : public ::google::protobuf::Message {
 public:
  grc_friend_info();
  virtual ~grc_friend_info();

  grc_friend_info(const grc_friend_info& from);

  inline grc_friend_info& operator=(const grc_friend_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const grc_friend_info& default_instance();

  void Swap(grc_friend_info* other);

  // implements Message ----------------------------------------------

  grc_friend_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const grc_friend_info& from);
  void MergeFrom(const grc_friend_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes openid = 1;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 1;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const void* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required bytes nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required bytes figure_url = 3;
  inline bool has_figure_url() const;
  inline void clear_figure_url();
  static const int kFigureUrlFieldNumber = 3;
  inline const ::std::string& figure_url() const;
  inline void set_figure_url(const ::std::string& value);
  inline void set_figure_url(const char* value);
  inline void set_figure_url(const void* value, size_t size);
  inline ::std::string* mutable_figure_url();
  inline ::std::string* release_figure_url();
  inline void set_allocated_figure_url(::std::string* figure_url);

  // required uint64 roleid = 4;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 4;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // required bytes rolename = 5;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 5;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const void* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // required int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 gender = 7;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 7;
  inline ::google::protobuf::int32 gender() const;
  inline void set_gender(::google::protobuf::int32 value);

  // required int32 profession = 8;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 8;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // required int32 nation = 9;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 9;
  inline ::google::protobuf::int32 nation() const;
  inline void set_nation(::google::protobuf::int32 value);

  // required int64 fightingcapacity = 10;
  inline bool has_fightingcapacity() const;
  inline void clear_fightingcapacity();
  static const int kFightingcapacityFieldNumber = 10;
  inline ::google::protobuf::int64 fightingcapacity() const;
  inline void set_fightingcapacity(::google::protobuf::int64 value);

  // required bool sameserver = 11;
  inline bool has_sameserver() const;
  inline void clear_sameserver();
  static const int kSameserverFieldNumber = 11;
  inline bool sameserver() const;
  inline void set_sameserver(bool value);

  // required int32 vipinfo = 12;
  inline bool has_vipinfo() const;
  inline void clear_vipinfo();
  static const int kVipinfoFieldNumber = 12;
  inline ::google::protobuf::int32 vipinfo() const;
  inline void set_vipinfo(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.grc_friend_info)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_figure_url();
  inline void clear_has_figure_url();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_fightingcapacity();
  inline void clear_has_fightingcapacity();
  inline void set_has_sameserver();
  inline void clear_has_sameserver();
  inline void set_has_vipinfo();
  inline void clear_has_vipinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;
  ::std::string* nickname_;
  ::std::string* figure_url_;
  ::google::protobuf::uint64 roleid_;
  ::std::string* rolename_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 gender_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 nation_;
  ::google::protobuf::int64 fightingcapacity_;
  bool sameserver_;
  ::google::protobuf::int32 vipinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static grc_friend_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_friend_list : public ::google::protobuf::Message {
 public:
  npt_grc_friend_list();
  virtual ~npt_grc_friend_list();

  npt_grc_friend_list(const npt_grc_friend_list& from);

  inline npt_grc_friend_list& operator=(const npt_grc_friend_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_friend_list& default_instance();

  void Swap(npt_grc_friend_list* other);

  // implements Message ----------------------------------------------

  npt_grc_friend_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_friend_list& from);
  void MergeFrom(const npt_grc_friend_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_FRIEND_LIST];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required int32 retcode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int32 total_friend_count = 3;
  inline bool has_total_friend_count() const;
  inline void clear_total_friend_count();
  static const int kTotalFriendCountFieldNumber = 3;
  inline ::google::protobuf::int32 total_friend_count() const;
  inline void set_total_friend_count(::google::protobuf::int32 value);

  // repeated .PB.grc_friend_info friend = 4;
  inline int friend__size() const;
  inline void clear_friend_();
  static const int kFriendFieldNumber = 4;
  inline const ::PB::grc_friend_info& friend_(int index) const;
  inline ::PB::grc_friend_info* mutable_friend_(int index);
  inline ::PB::grc_friend_info* add_friend_();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_friend_info >&
      friend_() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::grc_friend_info >*
      mutable_friend_();

  // @@protoc_insertion_point(class_scope:PB.npt_grc_friend_list)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_total_friend_count();
  inline void clear_has_total_friend_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::RepeatedPtrField< ::PB::grc_friend_info > friend__;
  ::google::protobuf::int32 total_friend_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_friend_list* default_instance_;
};
// -------------------------------------------------------------------

class grc_gift_info : public ::google::protobuf::Message {
 public:
  grc_gift_info();
  virtual ~grc_gift_info();

  grc_gift_info(const grc_gift_info& from);

  inline grc_gift_info& operator=(const grc_gift_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const grc_gift_info& default_instance();

  void Swap(grc_gift_info* other);

  // implements Message ----------------------------------------------

  grc_gift_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const grc_gift_info& from);
  void MergeFrom(const grc_gift_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gift_type = 1;
  inline bool has_gift_type() const;
  inline void clear_gift_type();
  static const int kGiftTypeFieldNumber = 1;
  inline ::google::protobuf::int32 gift_type() const;
  inline void set_gift_type(::google::protobuf::int32 value);

  // required bytes from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // required bytes to = 3;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 3;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const void* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // required int64 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int64 count() const;
  inline void set_count(::google::protobuf::int64 value);

  // required int32 flag = 5;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 5;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required int64 timestamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // required int32 serialid = 7;
  inline bool has_serialid() const;
  inline void clear_serialid();
  static const int kSerialidFieldNumber = 7;
  inline ::google::protobuf::int32 serialid() const;
  inline void set_serialid(::google::protobuf::int32 value);

  // optional bytes nickname = 8;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 8;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:PB.grc_gift_info)
 private:
  inline void set_has_gift_type();
  inline void clear_has_gift_type();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_serialid();
  inline void clear_has_serialid();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_;
  ::std::string* to_;
  ::google::protobuf::int32 gift_type_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int64 count_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* nickname_;
  ::google::protobuf::int32 serialid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static grc_gift_info* default_instance_;
};
// -------------------------------------------------------------------

class grc_user_gift_info : public ::google::protobuf::Message {
 public:
  grc_user_gift_info();
  virtual ~grc_user_gift_info();

  grc_user_gift_info(const grc_user_gift_info& from);

  inline grc_user_gift_info& operator=(const grc_user_gift_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const grc_user_gift_info& default_instance();

  void Swap(grc_user_gift_info* other);

  // implements Message ----------------------------------------------

  grc_user_gift_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const grc_user_gift_info& from);
  void MergeFrom(const grc_user_gift_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gift_type = 1;
  inline bool has_gift_type() const;
  inline void clear_gift_type();
  static const int kGiftTypeFieldNumber = 1;
  inline ::google::protobuf::int32 gift_type() const;
  inline void set_gift_type(::google::protobuf::int32 value);

  // repeated .PB.grc_gift_info giftsend = 2;
  inline int giftsend_size() const;
  inline void clear_giftsend();
  static const int kGiftsendFieldNumber = 2;
  inline const ::PB::grc_gift_info& giftsend(int index) const;
  inline ::PB::grc_gift_info* mutable_giftsend(int index);
  inline ::PB::grc_gift_info* add_giftsend();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >&
      giftsend() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >*
      mutable_giftsend();

  // required int64 giftreceive_times = 3;
  inline bool has_giftreceive_times() const;
  inline void clear_giftreceive_times();
  static const int kGiftreceiveTimesFieldNumber = 3;
  inline ::google::protobuf::int64 giftreceive_times() const;
  inline void set_giftreceive_times(::google::protobuf::int64 value);

  // repeated .PB.grc_gift_info giftreceive = 4;
  inline int giftreceive_size() const;
  inline void clear_giftreceive();
  static const int kGiftreceiveFieldNumber = 4;
  inline const ::PB::grc_gift_info& giftreceive(int index) const;
  inline ::PB::grc_gift_info* mutable_giftreceive(int index);
  inline ::PB::grc_gift_info* add_giftreceive();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >&
      giftreceive() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >*
      mutable_giftreceive();

  // @@protoc_insertion_point(class_scope:PB.grc_user_gift_info)
 private:
  inline void set_has_gift_type();
  inline void clear_has_gift_type();
  inline void set_has_giftreceive_times();
  inline void clear_has_giftreceive_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info > giftsend_;
  ::google::protobuf::int64 giftreceive_times_;
  ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info > giftreceive_;
  ::google::protobuf::int32 gift_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static grc_user_gift_info* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_gift_list : public ::google::protobuf::Message {
 public:
  npt_grc_gift_list();
  virtual ~npt_grc_gift_list();

  npt_grc_gift_list(const npt_grc_gift_list& from);

  inline npt_grc_gift_list& operator=(const npt_grc_gift_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_gift_list& default_instance();

  void Swap(npt_grc_gift_list* other);

  // implements Message ----------------------------------------------

  npt_grc_gift_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_gift_list& from);
  void MergeFrom(const npt_grc_gift_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GIFT_LIST];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // repeated .PB.grc_user_gift_info gift = 2;
  inline int gift_size() const;
  inline void clear_gift();
  static const int kGiftFieldNumber = 2;
  inline const ::PB::grc_user_gift_info& gift(int index) const;
  inline ::PB::grc_user_gift_info* mutable_gift(int index);
  inline ::PB::grc_user_gift_info* add_gift();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_user_gift_info >&
      gift() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::grc_user_gift_info >*
      mutable_gift();

  // @@protoc_insertion_point(class_scope:PB.npt_grc_gift_list)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::grc_user_gift_info > gift_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_gift_list* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_send_gift_re : public ::google::protobuf::Message {
 public:
  npt_grc_send_gift_re();
  virtual ~npt_grc_send_gift_re();

  npt_grc_send_gift_re(const npt_grc_send_gift_re& from);

  inline npt_grc_send_gift_re& operator=(const npt_grc_send_gift_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_send_gift_re& default_instance();

  void Swap(npt_grc_send_gift_re* other);

  // implements Message ----------------------------------------------

  npt_grc_send_gift_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_send_gift_re& from);
  void MergeFrom(const npt_grc_send_gift_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required bytes to = 2;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const void* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // required int32 retcode = 3;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_grc_send_gift_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* to_;
  int type_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_send_gift_re* default_instance_;
};
// -------------------------------------------------------------------

class npt_grc_rcv_gift_re : public ::google::protobuf::Message {
 public:
  npt_grc_rcv_gift_re();
  virtual ~npt_grc_rcv_gift_re();

  npt_grc_rcv_gift_re(const npt_grc_rcv_gift_re& from);

  inline npt_grc_rcv_gift_re& operator=(const npt_grc_rcv_gift_re& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npt_grc_rcv_gift_re& default_instance();

  void Swap(npt_grc_rcv_gift_re* other);

  // implements Message ----------------------------------------------

  npt_grc_rcv_gift_re* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npt_grc_rcv_gift_re& from);
  void MergeFrom(const npt_grc_rcv_gift_re& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT_RE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::NET_PROTOCBUF_TYPE type() const;
  inline void set_type(::PB::NET_PROTOCBUF_TYPE value);

  // required bytes from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // required int32 retcode = 3;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.npt_grc_rcv_gift_re)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_;
  int type_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static npt_grc_rcv_gift_re* default_instance_;
};
// ===================================================================


// ===================================================================

// a3d_pos

// required float x = 1;
inline bool a3d_pos::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void a3d_pos::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void a3d_pos::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void a3d_pos::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float a3d_pos::x() const {
  return x_;
}
inline void a3d_pos::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float z = 2;
inline bool a3d_pos::has_z() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void a3d_pos::set_has_z() {
  _has_bits_[0] |= 0x00000002u;
}
inline void a3d_pos::clear_has_z() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void a3d_pos::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float a3d_pos::z() const {
  return z_;
}
inline void a3d_pos::set_z(float value) {
  set_has_z();
  z_ = value;
}

// optional float y = 3;
inline bool a3d_pos::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void a3d_pos::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void a3d_pos::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void a3d_pos::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float a3d_pos::y() const {
  return y_;
}
inline void a3d_pos::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// player_id_name

// optional int64 id = 1;
inline bool player_id_name::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_id_name::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_id_name::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_id_name::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 player_id_name::id() const {
  return id_;
}
inline void player_id_name::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool player_id_name::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_id_name::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_id_name::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_id_name::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& player_id_name::name() const {
  return *name_;
}
inline void player_id_name::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void player_id_name::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void player_id_name::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* player_id_name::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* player_id_name::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void player_id_name::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// general_list_item_data

// optional int32 tid = 1;
inline bool general_list_item_data::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void general_list_item_data::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void general_list_item_data::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void general_list_item_data::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 general_list_item_data::tid() const {
  return tid_;
}
inline void general_list_item_data::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 star = 2;
inline bool general_list_item_data::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void general_list_item_data::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void general_list_item_data::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void general_list_item_data::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 general_list_item_data::star() const {
  return star_;
}
inline void general_list_item_data::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional bool locked = 3;
inline bool general_list_item_data::has_locked() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void general_list_item_data::set_has_locked() {
  _has_bits_[0] |= 0x00000004u;
}
inline void general_list_item_data::clear_has_locked() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void general_list_item_data::clear_locked() {
  locked_ = false;
  clear_has_locked();
}
inline bool general_list_item_data::locked() const {
  return locked_;
}
inline void general_list_item_data::set_locked(bool value) {
  set_has_locked();
  locked_ = value;
}

// -------------------------------------------------------------------

// general_list

// repeated .PB.general_list.item_data item_list = 1;
inline int general_list::item_list_size() const {
  return item_list_.size();
}
inline void general_list::clear_item_list() {
  item_list_.Clear();
}
inline const ::PB::general_list_item_data& general_list::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::PB::general_list_item_data* general_list::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::PB::general_list_item_data* general_list::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::general_list_item_data >&
general_list::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::general_list_item_data >*
general_list::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// simple_list

// required int64 key = 1;
inline bool simple_list::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void simple_list::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void simple_list::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void simple_list::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::int64 simple_list::key() const {
  return key_;
}
inline void simple_list::set_key(::google::protobuf::int64 value) {
  set_has_key();
  key_ = value;
}

// optional int64 value = 2;
inline bool simple_list::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void simple_list::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void simple_list::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void simple_list::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 simple_list::value() const {
  return value_;
}
inline void simple_list::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// optional bytes name = 3;
inline bool simple_list::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void simple_list::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void simple_list::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void simple_list::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& simple_list::name() const {
  return *name_;
}
inline void simple_list::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void simple_list::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void simple_list::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* simple_list::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* simple_list::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void simple_list::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// test_data

// optional .PB.GPS_TYPE type = 1 [default = GUT_TEST_DATA];
inline bool test_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void test_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void test_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void test_data::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PB::GPS_TYPE test_data::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void test_data::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated int64 params = 2;
inline int test_data::params_size() const {
  return params_.size();
}
inline void test_data::clear_params() {
  params_.Clear();
}
inline ::google::protobuf::int64 test_data::params(int index) const {
  return params_.Get(index);
}
inline void test_data::set_params(int index, ::google::protobuf::int64 value) {
  params_.Set(index, value);
}
inline void test_data::add_params(::google::protobuf::int64 value) {
  params_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
test_data::params() const {
  return params_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
test_data::mutable_params() {
  return &params_;
}

// optional int32 param2 = 3;
inline bool test_data::has_param2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void test_data::set_has_param2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void test_data::clear_has_param2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void test_data::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline ::google::protobuf::int32 test_data::param2() const {
  return param2_;
}
inline void test_data::set_param2(::google::protobuf::int32 value) {
  set_has_param2();
  param2_ = value;
}

// optional bytes info = 4;
inline bool test_data::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void test_data::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void test_data::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void test_data::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& test_data::info() const {
  return *info_;
}
inline void test_data::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void test_data::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void test_data::set_info(const void* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* test_data::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* test_data::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void test_data::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// other_player_profile_from_gs

// optional uint32 achievement_grade = 1;
inline bool other_player_profile_from_gs::has_achievement_grade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void other_player_profile_from_gs::set_has_achievement_grade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void other_player_profile_from_gs::clear_has_achievement_grade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void other_player_profile_from_gs::clear_achievement_grade() {
  achievement_grade_ = 0u;
  clear_has_achievement_grade();
}
inline ::google::protobuf::uint32 other_player_profile_from_gs::achievement_grade() const {
  return achievement_grade_;
}
inline void other_player_profile_from_gs::set_achievement_grade(::google::protobuf::uint32 value) {
  set_has_achievement_grade();
  achievement_grade_ = value;
}

// optional uint32 achievement_count = 2;
inline bool other_player_profile_from_gs::has_achievement_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void other_player_profile_from_gs::set_has_achievement_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void other_player_profile_from_gs::clear_has_achievement_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void other_player_profile_from_gs::clear_achievement_count() {
  achievement_count_ = 0u;
  clear_has_achievement_count();
}
inline ::google::protobuf::uint32 other_player_profile_from_gs::achievement_count() const {
  return achievement_count_;
}
inline void other_player_profile_from_gs::set_achievement_count(::google::protobuf::uint32 value) {
  set_has_achievement_count();
  achievement_count_ = value;
}

// -------------------------------------------------------------------

// corp_chariot_chariot_info

// optional int64 exp = 1;
inline bool corp_chariot_chariot_info::has_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corp_chariot_chariot_info::set_has_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corp_chariot_chariot_info::clear_has_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corp_chariot_chariot_info::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 corp_chariot_chariot_info::exp() const {
  return exp_;
}
inline void corp_chariot_chariot_info::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional .PB.player_id_name driver = 2;
inline bool corp_chariot_chariot_info::has_driver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corp_chariot_chariot_info::set_has_driver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corp_chariot_chariot_info::clear_has_driver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corp_chariot_chariot_info::clear_driver() {
  if (driver_ != NULL) driver_->::PB::player_id_name::Clear();
  clear_has_driver();
}
inline const ::PB::player_id_name& corp_chariot_chariot_info::driver() const {
  return driver_ != NULL ? *driver_ : *default_instance_->driver_;
}
inline ::PB::player_id_name* corp_chariot_chariot_info::mutable_driver() {
  set_has_driver();
  if (driver_ == NULL) driver_ = new ::PB::player_id_name;
  return driver_;
}
inline ::PB::player_id_name* corp_chariot_chariot_info::release_driver() {
  clear_has_driver();
  ::PB::player_id_name* temp = driver_;
  driver_ = NULL;
  return temp;
}
inline void corp_chariot_chariot_info::set_allocated_driver(::PB::player_id_name* driver) {
  delete driver_;
  driver_ = driver;
  if (driver) {
    set_has_driver();
  } else {
    clear_has_driver();
  }
}

// optional int32 rent_timestamp = 3;
inline bool corp_chariot_chariot_info::has_rent_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void corp_chariot_chariot_info::set_has_rent_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void corp_chariot_chariot_info::clear_has_rent_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void corp_chariot_chariot_info::clear_rent_timestamp() {
  rent_timestamp_ = 0;
  clear_has_rent_timestamp();
}
inline ::google::protobuf::int32 corp_chariot_chariot_info::rent_timestamp() const {
  return rent_timestamp_;
}
inline void corp_chariot_chariot_info::set_rent_timestamp(::google::protobuf::int32 value) {
  set_has_rent_timestamp();
  rent_timestamp_ = value;
}

// optional int32 level = 4;
inline bool corp_chariot_chariot_info::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void corp_chariot_chariot_info::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void corp_chariot_chariot_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void corp_chariot_chariot_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 corp_chariot_chariot_info::level() const {
  return level_;
}
inline void corp_chariot_chariot_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 tid = 5;
inline bool corp_chariot_chariot_info::has_tid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void corp_chariot_chariot_info::set_has_tid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void corp_chariot_chariot_info::clear_has_tid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void corp_chariot_chariot_info::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 corp_chariot_chariot_info::tid() const {
  return tid_;
}
inline void corp_chariot_chariot_info::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional bool is_upgrade = 7;
inline bool corp_chariot_chariot_info::has_is_upgrade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void corp_chariot_chariot_info::set_has_is_upgrade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void corp_chariot_chariot_info::clear_has_is_upgrade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void corp_chariot_chariot_info::clear_is_upgrade() {
  is_upgrade_ = false;
  clear_has_is_upgrade();
}
inline bool corp_chariot_chariot_info::is_upgrade() const {
  return is_upgrade_;
}
inline void corp_chariot_chariot_info::set_is_upgrade(bool value) {
  set_has_is_upgrade();
  is_upgrade_ = value;
}

// -------------------------------------------------------------------

// corp_chariot

// optional int32 level = 1;
inline bool corp_chariot::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corp_chariot::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corp_chariot::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corp_chariot::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 corp_chariot::level() const {
  return level_;
}
inline void corp_chariot::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated .PB.corp_chariot.chariot_info chariots = 2;
inline int corp_chariot::chariots_size() const {
  return chariots_.size();
}
inline void corp_chariot::clear_chariots() {
  chariots_.Clear();
}
inline const ::PB::corp_chariot_chariot_info& corp_chariot::chariots(int index) const {
  return chariots_.Get(index);
}
inline ::PB::corp_chariot_chariot_info* corp_chariot::mutable_chariots(int index) {
  return chariots_.Mutable(index);
}
inline ::PB::corp_chariot_chariot_info* corp_chariot::add_chariots() {
  return chariots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_chariot_chariot_info >&
corp_chariot::chariots() const {
  return chariots_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::corp_chariot_chariot_info >*
corp_chariot::mutable_chariots() {
  return &chariots_;
}

// -------------------------------------------------------------------

// corp_repu

// required int64 key = 1;
inline bool corp_repu::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corp_repu::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corp_repu::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corp_repu::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::int64 corp_repu::key() const {
  return key_;
}
inline void corp_repu::set_key(::google::protobuf::int64 value) {
  set_has_key();
  key_ = value;
}

// optional int64 value = 2;
inline bool corp_repu::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corp_repu::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corp_repu::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corp_repu::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 corp_repu::value() const {
  return value_;
}
inline void corp_repu::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// optional int64 time = 3;
inline bool corp_repu::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void corp_repu::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void corp_repu::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void corp_repu::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 corp_repu::time() const {
  return time_;
}
inline void corp_repu::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// ipt_mirror_info

// required uint32 mirrorid = 1;
inline bool ipt_mirror_info::has_mirrorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ipt_mirror_info::set_has_mirrorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ipt_mirror_info::clear_has_mirrorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ipt_mirror_info::clear_mirrorid() {
  mirrorid_ = 0u;
  clear_has_mirrorid();
}
inline ::google::protobuf::uint32 ipt_mirror_info::mirrorid() const {
  return mirrorid_;
}
inline void ipt_mirror_info::set_mirrorid(::google::protobuf::uint32 value) {
  set_has_mirrorid();
  mirrorid_ = value;
}

// required .PB.MIRROR_STATE state = 2;
inline bool ipt_mirror_info::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ipt_mirror_info::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ipt_mirror_info::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ipt_mirror_info::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::PB::MIRROR_STATE ipt_mirror_info::state() const {
  return static_cast< ::PB::MIRROR_STATE >(state_);
}
inline void ipt_mirror_info::set_state(::PB::MIRROR_STATE value) {
  assert(::PB::MIRROR_STATE_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional uint32 create_time = 3;
inline bool ipt_mirror_info::has_create_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ipt_mirror_info::set_has_create_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ipt_mirror_info::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ipt_mirror_info::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 ipt_mirror_info::create_time() const {
  return create_time_;
}
inline void ipt_mirror_info::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// -------------------------------------------------------------------

// zhaojiling_info

// required uint64 src = 1;
inline bool zhaojiling_info::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void zhaojiling_info::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void zhaojiling_info::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void zhaojiling_info::clear_src() {
  src_ = GOOGLE_ULONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::uint64 zhaojiling_info::src() const {
  return src_;
}
inline void zhaojiling_info::set_src(::google::protobuf::uint64 value) {
  set_has_src();
  src_ = value;
}

// optional bytes src_name = 2;
inline bool zhaojiling_info::has_src_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void zhaojiling_info::set_has_src_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void zhaojiling_info::clear_has_src_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void zhaojiling_info::clear_src_name() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    src_name_->clear();
  }
  clear_has_src_name();
}
inline const ::std::string& zhaojiling_info::src_name() const {
  return *src_name_;
}
inline void zhaojiling_info::set_src_name(const ::std::string& value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void zhaojiling_info::set_src_name(const char* value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void zhaojiling_info::set_src_name(const void* value, size_t size) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* zhaojiling_info::mutable_src_name() {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  return src_name_;
}
inline ::std::string* zhaojiling_info::release_src_name() {
  clear_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_name_;
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void zhaojiling_info::set_allocated_src_name(::std::string* src_name) {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (src_name) {
    set_has_src_name();
    src_name_ = src_name;
  } else {
    clear_has_src_name();
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes reason = 3;
inline bool zhaojiling_info::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void zhaojiling_info::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void zhaojiling_info::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void zhaojiling_info::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& zhaojiling_info::reason() const {
  return *reason_;
}
inline void zhaojiling_info::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void zhaojiling_info::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void zhaojiling_info::set_reason(const void* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* zhaojiling_info::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* zhaojiling_info::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void zhaojiling_info::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 delay_time = 4;
inline bool zhaojiling_info::has_delay_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void zhaojiling_info::set_has_delay_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void zhaojiling_info::clear_has_delay_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void zhaojiling_info::clear_delay_time() {
  delay_time_ = 0;
  clear_has_delay_time();
}
inline ::google::protobuf::int32 zhaojiling_info::delay_time() const {
  return delay_time_;
}
inline void zhaojiling_info::set_delay_time(::google::protobuf::int32 value) {
  set_has_delay_time();
  delay_time_ = value;
}

// required int32 scene_tag = 5;
inline bool zhaojiling_info::has_scene_tag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void zhaojiling_info::set_has_scene_tag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void zhaojiling_info::clear_has_scene_tag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void zhaojiling_info::clear_scene_tag() {
  scene_tag_ = 0;
  clear_has_scene_tag();
}
inline ::google::protobuf::int32 zhaojiling_info::scene_tag() const {
  return scene_tag_;
}
inline void zhaojiling_info::set_scene_tag(::google::protobuf::int32 value) {
  set_has_scene_tag();
  scene_tag_ = value;
}

// required .PB.a3d_pos pos = 6;
inline bool zhaojiling_info::has_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void zhaojiling_info::set_has_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void zhaojiling_info::clear_has_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void zhaojiling_info::clear_pos() {
  if (pos_ != NULL) pos_->::PB::a3d_pos::Clear();
  clear_has_pos();
}
inline const ::PB::a3d_pos& zhaojiling_info::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::PB::a3d_pos* zhaojiling_info::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PB::a3d_pos;
  return pos_;
}
inline ::PB::a3d_pos* zhaojiling_info::release_pos() {
  clear_has_pos();
  ::PB::a3d_pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void zhaojiling_info::set_allocated_pos(::PB::a3d_pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional int32 random_radius = 7;
inline bool zhaojiling_info::has_random_radius() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void zhaojiling_info::set_has_random_radius() {
  _has_bits_[0] |= 0x00000040u;
}
inline void zhaojiling_info::clear_has_random_radius() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void zhaojiling_info::clear_random_radius() {
  random_radius_ = 0;
  clear_has_random_radius();
}
inline ::google::protobuf::int32 zhaojiling_info::random_radius() const {
  return random_radius_;
}
inline void zhaojiling_info::set_random_radius(::google::protobuf::int32 value) {
  set_has_random_radius();
  random_radius_ = value;
}

// optional int32 zhaojiling_id = 8;
inline bool zhaojiling_info::has_zhaojiling_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void zhaojiling_info::set_has_zhaojiling_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void zhaojiling_info::clear_has_zhaojiling_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void zhaojiling_info::clear_zhaojiling_id() {
  zhaojiling_id_ = 0;
  clear_has_zhaojiling_id();
}
inline ::google::protobuf::int32 zhaojiling_info::zhaojiling_id() const {
  return zhaojiling_id_;
}
inline void zhaojiling_info::set_zhaojiling_id(::google::protobuf::int32 value) {
  set_has_zhaojiling_id();
  zhaojiling_id_ = value;
}

// optional int32 src_corp_position = 9;
inline bool zhaojiling_info::has_src_corp_position() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void zhaojiling_info::set_has_src_corp_position() {
  _has_bits_[0] |= 0x00000100u;
}
inline void zhaojiling_info::clear_has_src_corp_position() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void zhaojiling_info::clear_src_corp_position() {
  src_corp_position_ = 0;
  clear_has_src_corp_position();
}
inline ::google::protobuf::int32 zhaojiling_info::src_corp_position() const {
  return src_corp_position_;
}
inline void zhaojiling_info::set_src_corp_position(::google::protobuf::int32 value) {
  set_has_src_corp_position();
  src_corp_position_ = value;
}

// optional int32 src_nation_position = 10;
inline bool zhaojiling_info::has_src_nation_position() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void zhaojiling_info::set_has_src_nation_position() {
  _has_bits_[0] |= 0x00000200u;
}
inline void zhaojiling_info::clear_has_src_nation_position() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void zhaojiling_info::clear_src_nation_position() {
  src_nation_position_ = 0;
  clear_has_src_nation_position();
}
inline ::google::protobuf::int32 zhaojiling_info::src_nation_position() const {
  return src_nation_position_;
}
inline void zhaojiling_info::set_src_nation_position(::google::protobuf::int32 value) {
  set_has_src_nation_position();
  src_nation_position_ = value;
}

// optional int32 mirror_id = 11;
inline bool zhaojiling_info::has_mirror_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void zhaojiling_info::set_has_mirror_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void zhaojiling_info::clear_has_mirror_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void zhaojiling_info::clear_mirror_id() {
  mirror_id_ = 0;
  clear_has_mirror_id();
}
inline ::google::protobuf::int32 zhaojiling_info::mirror_id() const {
  return mirror_id_;
}
inline void zhaojiling_info::set_mirror_id(::google::protobuf::int32 value) {
  set_has_mirror_id();
  mirror_id_ = value;
}

// optional .PB.zhaojiling_info.ZHAOJI_TYPE type = 12;
inline bool zhaojiling_info::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void zhaojiling_info::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void zhaojiling_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void zhaojiling_info::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PB::zhaojiling_info_ZHAOJI_TYPE zhaojiling_info::type() const {
  return static_cast< ::PB::zhaojiling_info_ZHAOJI_TYPE >(type_);
}
inline void zhaojiling_info::set_type(::PB::zhaojiling_info_ZHAOJI_TYPE value) {
  assert(::PB::zhaojiling_info_ZHAOJI_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 param1 = 13;
inline bool zhaojiling_info::has_param1() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void zhaojiling_info::set_has_param1() {
  _has_bits_[0] |= 0x00001000u;
}
inline void zhaojiling_info::clear_has_param1() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void zhaojiling_info::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 zhaojiling_info::param1() const {
  return param1_;
}
inline void zhaojiling_info::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// optional int32 inst_tid = 14;
inline bool zhaojiling_info::has_inst_tid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void zhaojiling_info::set_has_inst_tid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void zhaojiling_info::clear_has_inst_tid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void zhaojiling_info::clear_inst_tid() {
  inst_tid_ = 0;
  clear_has_inst_tid();
}
inline ::google::protobuf::int32 zhaojiling_info::inst_tid() const {
  return inst_tid_;
}
inline void zhaojiling_info::set_inst_tid(::google::protobuf::int32 value) {
  set_has_inst_tid();
  inst_tid_ = value;
}

// -------------------------------------------------------------------

// corps_member

// optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_MEMBER];
inline bool corps_member::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corps_member::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corps_member::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corps_member::clear_type() {
  type_ = 3;
  clear_has_type();
}
inline ::PB::GPS_TYPE corps_member::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void corps_member::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool corps_member::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corps_member::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corps_member::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corps_member::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 corps_member::roleid() const {
  return roleid_;
}
inline void corps_member::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 pos = 3 [default = 0];
inline bool corps_member::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void corps_member::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void corps_member::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void corps_member::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 corps_member::pos() const {
  return pos_;
}
inline void corps_member::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional bytes name = 4;
inline bool corps_member::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void corps_member::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void corps_member::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void corps_member::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& corps_member::name() const {
  return *name_;
}
inline void corps_member::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void corps_member::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void corps_member::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_member::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* corps_member::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_member::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 join_time = 5;
inline bool corps_member::has_join_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void corps_member::set_has_join_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void corps_member::clear_has_join_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void corps_member::clear_join_time() {
  join_time_ = 0;
  clear_has_join_time();
}
inline ::google::protobuf::int32 corps_member::join_time() const {
  return join_time_;
}
inline void corps_member::set_join_time(::google::protobuf::int32 value) {
  set_has_join_time();
  join_time_ = value;
}

// required int32 level = 6;
inline bool corps_member::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void corps_member::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void corps_member::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void corps_member::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 corps_member::level() const {
  return level_;
}
inline void corps_member::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 idphoto = 7;
inline bool corps_member::has_idphoto() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void corps_member::set_has_idphoto() {
  _has_bits_[0] |= 0x00000040u;
}
inline void corps_member::clear_has_idphoto() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void corps_member::clear_idphoto() {
  idphoto_ = 0;
  clear_has_idphoto();
}
inline ::google::protobuf::int32 corps_member::idphoto() const {
  return idphoto_;
}
inline void corps_member::set_idphoto(::google::protobuf::int32 value) {
  set_has_idphoto();
  idphoto_ = value;
}

// optional int64 contri = 10;
inline bool corps_member::has_contri() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void corps_member::set_has_contri() {
  _has_bits_[0] |= 0x00000080u;
}
inline void corps_member::clear_has_contri() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void corps_member::clear_contri() {
  contri_ = GOOGLE_LONGLONG(0);
  clear_has_contri();
}
inline ::google::protobuf::int64 corps_member::contri() const {
  return contri_;
}
inline void corps_member::set_contri(::google::protobuf::int64 value) {
  set_has_contri();
  contri_ = value;
}

// optional int64 contri_cumulate = 11;
inline bool corps_member::has_contri_cumulate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void corps_member::set_has_contri_cumulate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void corps_member::clear_has_contri_cumulate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void corps_member::clear_contri_cumulate() {
  contri_cumulate_ = GOOGLE_LONGLONG(0);
  clear_has_contri_cumulate();
}
inline ::google::protobuf::int64 corps_member::contri_cumulate() const {
  return contri_cumulate_;
}
inline void corps_member::set_contri_cumulate(::google::protobuf::int64 value) {
  set_has_contri_cumulate();
  contri_cumulate_ = value;
}

// optional int32 leave_time = 12;
inline bool corps_member::has_leave_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void corps_member::set_has_leave_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void corps_member::clear_has_leave_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void corps_member::clear_leave_time() {
  leave_time_ = 0;
  clear_has_leave_time();
}
inline ::google::protobuf::int32 corps_member::leave_time() const {
  return leave_time_;
}
inline void corps_member::set_leave_time(::google::protobuf::int32 value) {
  set_has_leave_time();
  leave_time_ = value;
}

// required int32 prof = 13;
inline bool corps_member::has_prof() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void corps_member::set_has_prof() {
  _has_bits_[0] |= 0x00000400u;
}
inline void corps_member::clear_has_prof() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void corps_member::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 corps_member::prof() const {
  return prof_;
}
inline void corps_member::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 online_time_today = 14;
inline bool corps_member::has_online_time_today() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void corps_member::set_has_online_time_today() {
  _has_bits_[0] |= 0x00000800u;
}
inline void corps_member::clear_has_online_time_today() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void corps_member::clear_online_time_today() {
  online_time_today_ = 0;
  clear_has_online_time_today();
}
inline ::google::protobuf::int32 corps_member::online_time_today() const {
  return online_time_today_;
}
inline void corps_member::set_online_time_today(::google::protobuf::int32 value) {
  set_has_online_time_today();
  online_time_today_ = value;
}

// repeated int32 boss_feed_reward = 15;
inline int corps_member::boss_feed_reward_size() const {
  return boss_feed_reward_.size();
}
inline void corps_member::clear_boss_feed_reward() {
  boss_feed_reward_.Clear();
}
inline ::google::protobuf::int32 corps_member::boss_feed_reward(int index) const {
  return boss_feed_reward_.Get(index);
}
inline void corps_member::set_boss_feed_reward(int index, ::google::protobuf::int32 value) {
  boss_feed_reward_.Set(index, value);
}
inline void corps_member::add_boss_feed_reward(::google::protobuf::int32 value) {
  boss_feed_reward_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
corps_member::boss_feed_reward() const {
  return boss_feed_reward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
corps_member::mutable_boss_feed_reward() {
  return &boss_feed_reward_;
}

// repeated int32 elixir = 16;
inline int corps_member::elixir_size() const {
  return elixir_.size();
}
inline void corps_member::clear_elixir() {
  elixir_.Clear();
}
inline ::google::protobuf::int32 corps_member::elixir(int index) const {
  return elixir_.Get(index);
}
inline void corps_member::set_elixir(int index, ::google::protobuf::int32 value) {
  elixir_.Set(index, value);
}
inline void corps_member::add_elixir(::google::protobuf::int32 value) {
  elixir_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
corps_member::elixir() const {
  return elixir_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
corps_member::mutable_elixir() {
  return &elixir_;
}

// optional int64 fightcapacity = 17;
inline bool corps_member::has_fightcapacity() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void corps_member::set_has_fightcapacity() {
  _has_bits_[0] |= 0x00004000u;
}
inline void corps_member::clear_has_fightcapacity() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void corps_member::clear_fightcapacity() {
  fightcapacity_ = GOOGLE_LONGLONG(0);
  clear_has_fightcapacity();
}
inline ::google::protobuf::int64 corps_member::fightcapacity() const {
  return fightcapacity_;
}
inline void corps_member::set_fightcapacity(::google::protobuf::int64 value) {
  set_has_fightcapacity();
  fightcapacity_ = value;
}

// -------------------------------------------------------------------

// corps_apply_t

// required int64 roleid = 1;
inline bool corps_apply_t::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corps_apply_t::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corps_apply_t::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corps_apply_t::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 corps_apply_t::roleid() const {
  return roleid_;
}
inline void corps_apply_t::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required bytes name = 2;
inline bool corps_apply_t::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corps_apply_t::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corps_apply_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corps_apply_t::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& corps_apply_t::name() const {
  return *name_;
}
inline void corps_apply_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void corps_apply_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void corps_apply_t::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_apply_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* corps_apply_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_apply_t::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 apply_time = 3;
inline bool corps_apply_t::has_apply_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void corps_apply_t::set_has_apply_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void corps_apply_t::clear_has_apply_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void corps_apply_t::clear_apply_time() {
  apply_time_ = GOOGLE_LONGLONG(0);
  clear_has_apply_time();
}
inline ::google::protobuf::int64 corps_apply_t::apply_time() const {
  return apply_time_;
}
inline void corps_apply_t::set_apply_time(::google::protobuf::int64 value) {
  set_has_apply_time();
  apply_time_ = value;
}

// optional int32 level = 4;
inline bool corps_apply_t::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void corps_apply_t::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void corps_apply_t::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void corps_apply_t::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 corps_apply_t::level() const {
  return level_;
}
inline void corps_apply_t::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 prof = 5;
inline bool corps_apply_t::has_prof() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void corps_apply_t::set_has_prof() {
  _has_bits_[0] |= 0x00000010u;
}
inline void corps_apply_t::clear_has_prof() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void corps_apply_t::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 corps_apply_t::prof() const {
  return prof_;
}
inline void corps_apply_t::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// -------------------------------------------------------------------

// corp_attribute_corp_skill_room

// repeated uint32 addon_level = 1;
inline int corp_attribute_corp_skill_room::addon_level_size() const {
  return addon_level_.size();
}
inline void corp_attribute_corp_skill_room::clear_addon_level() {
  addon_level_.Clear();
}
inline ::google::protobuf::uint32 corp_attribute_corp_skill_room::addon_level(int index) const {
  return addon_level_.Get(index);
}
inline void corp_attribute_corp_skill_room::set_addon_level(int index, ::google::protobuf::uint32 value) {
  addon_level_.Set(index, value);
}
inline void corp_attribute_corp_skill_room::add_addon_level(::google::protobuf::uint32 value) {
  addon_level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
corp_attribute_corp_skill_room::addon_level() const {
  return addon_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
corp_attribute_corp_skill_room::mutable_addon_level() {
  return &addon_level_;
}

// -------------------------------------------------------------------

// corp_attribute

// repeated .PB.corp_attribute.corp_skill_room skill_room = 1;
inline int corp_attribute::skill_room_size() const {
  return skill_room_.size();
}
inline void corp_attribute::clear_skill_room() {
  skill_room_.Clear();
}
inline const ::PB::corp_attribute_corp_skill_room& corp_attribute::skill_room(int index) const {
  return skill_room_.Get(index);
}
inline ::PB::corp_attribute_corp_skill_room* corp_attribute::mutable_skill_room(int index) {
  return skill_room_.Mutable(index);
}
inline ::PB::corp_attribute_corp_skill_room* corp_attribute::add_skill_room() {
  return skill_room_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_attribute_corp_skill_room >&
corp_attribute::skill_room() const {
  return skill_room_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::corp_attribute_corp_skill_room >*
corp_attribute::mutable_skill_room() {
  return &skill_room_;
}

// optional uint32 shop_level = 2 [default = 0];
inline bool corp_attribute::has_shop_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corp_attribute::set_has_shop_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corp_attribute::clear_has_shop_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corp_attribute::clear_shop_level() {
  shop_level_ = 0u;
  clear_has_shop_level();
}
inline ::google::protobuf::uint32 corp_attribute::shop_level() const {
  return shop_level_;
}
inline void corp_attribute::set_shop_level(::google::protobuf::uint32 value) {
  set_has_shop_level();
  shop_level_ = value;
}

// repeated .PB.corp_repu corp_repu = 3;
inline int corp_attribute::corp_repu_size() const {
  return corp_repu_.size();
}
inline void corp_attribute::clear_corp_repu() {
  corp_repu_.Clear();
}
inline const ::PB::corp_repu& corp_attribute::corp_repu(int index) const {
  return corp_repu_.Get(index);
}
inline ::PB::corp_repu* corp_attribute::mutable_corp_repu(int index) {
  return corp_repu_.Mutable(index);
}
inline ::PB::corp_repu* corp_attribute::add_corp_repu() {
  return corp_repu_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::corp_repu >&
corp_attribute::corp_repu() const {
  return corp_repu_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::corp_repu >*
corp_attribute::mutable_corp_repu() {
  return &corp_repu_;
}

// repeated .PB.simple_list boss_feed_toplist = 4;
inline int corp_attribute::boss_feed_toplist_size() const {
  return boss_feed_toplist_.size();
}
inline void corp_attribute::clear_boss_feed_toplist() {
  boss_feed_toplist_.Clear();
}
inline const ::PB::simple_list& corp_attribute::boss_feed_toplist(int index) const {
  return boss_feed_toplist_.Get(index);
}
inline ::PB::simple_list* corp_attribute::mutable_boss_feed_toplist(int index) {
  return boss_feed_toplist_.Mutable(index);
}
inline ::PB::simple_list* corp_attribute::add_boss_feed_toplist() {
  return boss_feed_toplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::simple_list >&
corp_attribute::boss_feed_toplist() const {
  return boss_feed_toplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::simple_list >*
corp_attribute::mutable_boss_feed_toplist() {
  return &boss_feed_toplist_;
}

// optional .PB.corp_chariot chariot = 5;
inline bool corp_attribute::has_chariot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void corp_attribute::set_has_chariot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void corp_attribute::clear_has_chariot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void corp_attribute::clear_chariot() {
  if (chariot_ != NULL) chariot_->::PB::corp_chariot::Clear();
  clear_has_chariot();
}
inline const ::PB::corp_chariot& corp_attribute::chariot() const {
  return chariot_ != NULL ? *chariot_ : *default_instance_->chariot_;
}
inline ::PB::corp_chariot* corp_attribute::mutable_chariot() {
  set_has_chariot();
  if (chariot_ == NULL) chariot_ = new ::PB::corp_chariot;
  return chariot_;
}
inline ::PB::corp_chariot* corp_attribute::release_chariot() {
  clear_has_chariot();
  ::PB::corp_chariot* temp = chariot_;
  chariot_ = NULL;
  return temp;
}
inline void corp_attribute::set_allocated_chariot(::PB::corp_chariot* chariot) {
  delete chariot_;
  chariot_ = chariot;
  if (chariot) {
    set_has_chariot();
  } else {
    clear_has_chariot();
  }
}

// -------------------------------------------------------------------

// corps_struct

// optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_STRUCT];
inline bool corps_struct::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corps_struct::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corps_struct::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corps_struct::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::PB::GPS_TYPE corps_struct::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void corps_struct::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 id = 2;
inline bool corps_struct::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corps_struct::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corps_struct::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corps_struct::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 corps_struct::id() const {
  return id_;
}
inline void corps_struct::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 4;
inline bool corps_struct::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void corps_struct::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void corps_struct::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void corps_struct::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& corps_struct::name() const {
  return *name_;
}
inline void corps_struct::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void corps_struct::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void corps_struct::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_struct::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* corps_struct::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_struct::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 create_time = 5;
inline bool corps_struct::has_create_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void corps_struct::set_has_create_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void corps_struct::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void corps_struct::clear_create_time() {
  create_time_ = 0;
  clear_has_create_time();
}
inline ::google::protobuf::int32 corps_struct::create_time() const {
  return create_time_;
}
inline void corps_struct::set_create_time(::google::protobuf::int32 value) {
  set_has_create_time();
  create_time_ = value;
}

// required int32 level = 6;
inline bool corps_struct::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void corps_struct::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void corps_struct::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void corps_struct::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 corps_struct::level() const {
  return level_;
}
inline void corps_struct::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required uint64 status = 7;
inline bool corps_struct::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void corps_struct::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void corps_struct::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void corps_struct::clear_status() {
  status_ = GOOGLE_ULONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::uint64 corps_struct::status() const {
  return status_;
}
inline void corps_struct::set_status(::google::protobuf::uint64 value) {
  set_has_status();
  status_ = value;
}

// optional bytes announce = 8;
inline bool corps_struct::has_announce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void corps_struct::set_has_announce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void corps_struct::clear_has_announce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void corps_struct::clear_announce() {
  if (announce_ != &::google::protobuf::internal::kEmptyString) {
    announce_->clear();
  }
  clear_has_announce();
}
inline const ::std::string& corps_struct::announce() const {
  return *announce_;
}
inline void corps_struct::set_announce(const ::std::string& value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
}
inline void corps_struct::set_announce(const char* value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
}
inline void corps_struct::set_announce(const void* value, size_t size) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  announce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_struct::mutable_announce() {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  return announce_;
}
inline ::std::string* corps_struct::release_announce() {
  clear_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = announce_;
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_struct::set_allocated_announce(::std::string* announce) {
  if (announce_ != &::google::protobuf::internal::kEmptyString) {
    delete announce_;
  }
  if (announce) {
    set_has_announce();
    announce_ = announce;
  } else {
    clear_has_announce();
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 announce_time = 9 [default = 0];
inline bool corps_struct::has_announce_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void corps_struct::set_has_announce_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void corps_struct::clear_has_announce_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void corps_struct::clear_announce_time() {
  announce_time_ = GOOGLE_LONGLONG(0);
  clear_has_announce_time();
}
inline ::google::protobuf::int64 corps_struct::announce_time() const {
  return announce_time_;
}
inline void corps_struct::set_announce_time(::google::protobuf::int64 value) {
  set_has_announce_time();
  announce_time_ = value;
}

// optional int64 contri = 10 [default = 0];
inline bool corps_struct::has_contri() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void corps_struct::set_has_contri() {
  _has_bits_[0] |= 0x00000100u;
}
inline void corps_struct::clear_has_contri() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void corps_struct::clear_contri() {
  contri_ = GOOGLE_LONGLONG(0);
  clear_has_contri();
}
inline ::google::protobuf::int64 corps_struct::contri() const {
  return contri_;
}
inline void corps_struct::set_contri(::google::protobuf::int64 value) {
  set_has_contri();
  contri_ = value;
}

// optional int64 contri_cumulate = 11 [default = 0];
inline bool corps_struct::has_contri_cumulate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void corps_struct::set_has_contri_cumulate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void corps_struct::clear_has_contri_cumulate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void corps_struct::clear_contri_cumulate() {
  contri_cumulate_ = GOOGLE_LONGLONG(0);
  clear_has_contri_cumulate();
}
inline ::google::protobuf::int64 corps_struct::contri_cumulate() const {
  return contri_cumulate_;
}
inline void corps_struct::set_contri_cumulate(::google::protobuf::int64 value) {
  set_has_contri_cumulate();
  contri_cumulate_ = value;
}

// optional int64 money = 12 [default = 0];
inline bool corps_struct::has_money() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void corps_struct::set_has_money() {
  _has_bits_[0] |= 0x00000400u;
}
inline void corps_struct::clear_has_money() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void corps_struct::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 corps_struct::money() const {
  return money_;
}
inline void corps_struct::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// repeated .PB.corps_apply_t apply = 13;
inline int corps_struct::apply_size() const {
  return apply_.size();
}
inline void corps_struct::clear_apply() {
  apply_.Clear();
}
inline const ::PB::corps_apply_t& corps_struct::apply(int index) const {
  return apply_.Get(index);
}
inline ::PB::corps_apply_t* corps_struct::mutable_apply(int index) {
  return apply_.Mutable(index);
}
inline ::PB::corps_apply_t* corps_struct::add_apply() {
  return apply_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::corps_apply_t >&
corps_struct::apply() const {
  return apply_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::corps_apply_t >*
corps_struct::mutable_apply() {
  return &apply_;
}

// required int32 nation = 14;
inline bool corps_struct::has_nation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void corps_struct::set_has_nation() {
  _has_bits_[0] |= 0x00001000u;
}
inline void corps_struct::clear_has_nation() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void corps_struct::clear_nation() {
  nation_ = 0;
  clear_has_nation();
}
inline ::google::protobuf::int32 corps_struct::nation() const {
  return nation_;
}
inline void corps_struct::set_nation(::google::protobuf::int32 value) {
  set_has_nation();
  nation_ = value;
}

// optional int64 last_resume_time = 15;
inline bool corps_struct::has_last_resume_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void corps_struct::set_has_last_resume_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void corps_struct::clear_has_last_resume_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void corps_struct::clear_last_resume_time() {
  last_resume_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_resume_time();
}
inline ::google::protobuf::int64 corps_struct::last_resume_time() const {
  return last_resume_time_;
}
inline void corps_struct::set_last_resume_time(::google::protobuf::int64 value) {
  set_has_last_resume_time();
  last_resume_time_ = value;
}

// optional .PB.corp_attribute attr = 16;
inline bool corps_struct::has_attr() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void corps_struct::set_has_attr() {
  _has_bits_[0] |= 0x00004000u;
}
inline void corps_struct::clear_has_attr() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void corps_struct::clear_attr() {
  if (attr_ != NULL) attr_->::PB::corp_attribute::Clear();
  clear_has_attr();
}
inline const ::PB::corp_attribute& corps_struct::attr() const {
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::PB::corp_attribute* corps_struct::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::PB::corp_attribute;
  return attr_;
}
inline ::PB::corp_attribute* corps_struct::release_attr() {
  clear_has_attr();
  ::PB::corp_attribute* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void corps_struct::set_allocated_attr(::PB::corp_attribute* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    set_has_attr();
  } else {
    clear_has_attr();
  }
}

// optional float corp_power = 17;
inline bool corps_struct::has_corp_power() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void corps_struct::set_has_corp_power() {
  _has_bits_[0] |= 0x00008000u;
}
inline void corps_struct::clear_has_corp_power() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void corps_struct::clear_corp_power() {
  corp_power_ = 0;
  clear_has_corp_power();
}
inline float corps_struct::corp_power() const {
  return corp_power_;
}
inline void corps_struct::set_corp_power(float value) {
  set_has_corp_power();
  corp_power_ = value;
}

// optional bytes qqgroup_openid = 18;
inline bool corps_struct::has_qqgroup_openid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void corps_struct::set_has_qqgroup_openid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void corps_struct::clear_has_qqgroup_openid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void corps_struct::clear_qqgroup_openid() {
  if (qqgroup_openid_ != &::google::protobuf::internal::kEmptyString) {
    qqgroup_openid_->clear();
  }
  clear_has_qqgroup_openid();
}
inline const ::std::string& corps_struct::qqgroup_openid() const {
  return *qqgroup_openid_;
}
inline void corps_struct::set_qqgroup_openid(const ::std::string& value) {
  set_has_qqgroup_openid();
  if (qqgroup_openid_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_openid_ = new ::std::string;
  }
  qqgroup_openid_->assign(value);
}
inline void corps_struct::set_qqgroup_openid(const char* value) {
  set_has_qqgroup_openid();
  if (qqgroup_openid_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_openid_ = new ::std::string;
  }
  qqgroup_openid_->assign(value);
}
inline void corps_struct::set_qqgroup_openid(const void* value, size_t size) {
  set_has_qqgroup_openid();
  if (qqgroup_openid_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_openid_ = new ::std::string;
  }
  qqgroup_openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_struct::mutable_qqgroup_openid() {
  set_has_qqgroup_openid();
  if (qqgroup_openid_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_openid_ = new ::std::string;
  }
  return qqgroup_openid_;
}
inline ::std::string* corps_struct::release_qqgroup_openid() {
  clear_has_qqgroup_openid();
  if (qqgroup_openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qqgroup_openid_;
    qqgroup_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_struct::set_allocated_qqgroup_openid(::std::string* qqgroup_openid) {
  if (qqgroup_openid_ != &::google::protobuf::internal::kEmptyString) {
    delete qqgroup_openid_;
  }
  if (qqgroup_openid) {
    set_has_qqgroup_openid();
    qqgroup_openid_ = qqgroup_openid;
  } else {
    clear_has_qqgroup_openid();
    qqgroup_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes qqgroup_name = 19;
inline bool corps_struct::has_qqgroup_name() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void corps_struct::set_has_qqgroup_name() {
  _has_bits_[0] |= 0x00020000u;
}
inline void corps_struct::clear_has_qqgroup_name() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void corps_struct::clear_qqgroup_name() {
  if (qqgroup_name_ != &::google::protobuf::internal::kEmptyString) {
    qqgroup_name_->clear();
  }
  clear_has_qqgroup_name();
}
inline const ::std::string& corps_struct::qqgroup_name() const {
  return *qqgroup_name_;
}
inline void corps_struct::set_qqgroup_name(const ::std::string& value) {
  set_has_qqgroup_name();
  if (qqgroup_name_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_name_ = new ::std::string;
  }
  qqgroup_name_->assign(value);
}
inline void corps_struct::set_qqgroup_name(const char* value) {
  set_has_qqgroup_name();
  if (qqgroup_name_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_name_ = new ::std::string;
  }
  qqgroup_name_->assign(value);
}
inline void corps_struct::set_qqgroup_name(const void* value, size_t size) {
  set_has_qqgroup_name();
  if (qqgroup_name_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_name_ = new ::std::string;
  }
  qqgroup_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_struct::mutable_qqgroup_name() {
  set_has_qqgroup_name();
  if (qqgroup_name_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_name_ = new ::std::string;
  }
  return qqgroup_name_;
}
inline ::std::string* corps_struct::release_qqgroup_name() {
  clear_has_qqgroup_name();
  if (qqgroup_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qqgroup_name_;
    qqgroup_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_struct::set_allocated_qqgroup_name(::std::string* qqgroup_name) {
  if (qqgroup_name_ != &::google::protobuf::internal::kEmptyString) {
    delete qqgroup_name_;
  }
  if (qqgroup_name) {
    set_has_qqgroup_name();
    qqgroup_name_ = qqgroup_name;
  } else {
    clear_has_qqgroup_name();
    qqgroup_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes qqgroup_joinkey = 20;
inline bool corps_struct::has_qqgroup_joinkey() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void corps_struct::set_has_qqgroup_joinkey() {
  _has_bits_[0] |= 0x00040000u;
}
inline void corps_struct::clear_has_qqgroup_joinkey() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void corps_struct::clear_qqgroup_joinkey() {
  if (qqgroup_joinkey_ != &::google::protobuf::internal::kEmptyString) {
    qqgroup_joinkey_->clear();
  }
  clear_has_qqgroup_joinkey();
}
inline const ::std::string& corps_struct::qqgroup_joinkey() const {
  return *qqgroup_joinkey_;
}
inline void corps_struct::set_qqgroup_joinkey(const ::std::string& value) {
  set_has_qqgroup_joinkey();
  if (qqgroup_joinkey_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_joinkey_ = new ::std::string;
  }
  qqgroup_joinkey_->assign(value);
}
inline void corps_struct::set_qqgroup_joinkey(const char* value) {
  set_has_qqgroup_joinkey();
  if (qqgroup_joinkey_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_joinkey_ = new ::std::string;
  }
  qqgroup_joinkey_->assign(value);
}
inline void corps_struct::set_qqgroup_joinkey(const void* value, size_t size) {
  set_has_qqgroup_joinkey();
  if (qqgroup_joinkey_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_joinkey_ = new ::std::string;
  }
  qqgroup_joinkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* corps_struct::mutable_qqgroup_joinkey() {
  set_has_qqgroup_joinkey();
  if (qqgroup_joinkey_ == &::google::protobuf::internal::kEmptyString) {
    qqgroup_joinkey_ = new ::std::string;
  }
  return qqgroup_joinkey_;
}
inline ::std::string* corps_struct::release_qqgroup_joinkey() {
  clear_has_qqgroup_joinkey();
  if (qqgroup_joinkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qqgroup_joinkey_;
    qqgroup_joinkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void corps_struct::set_allocated_qqgroup_joinkey(::std::string* qqgroup_joinkey) {
  if (qqgroup_joinkey_ != &::google::protobuf::internal::kEmptyString) {
    delete qqgroup_joinkey_;
  }
  if (qqgroup_joinkey) {
    set_has_qqgroup_joinkey();
    qqgroup_joinkey_ = qqgroup_joinkey;
  } else {
    clear_has_qqgroup_joinkey();
    qqgroup_joinkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 login_time = 21;
inline bool corps_struct::has_login_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void corps_struct::set_has_login_time() {
  _has_bits_[0] |= 0x00080000u;
}
inline void corps_struct::clear_has_login_time() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void corps_struct::clear_login_time() {
  login_time_ = 0;
  clear_has_login_time();
}
inline ::google::protobuf::int32 corps_struct::login_time() const {
  return login_time_;
}
inline void corps_struct::set_login_time(::google::protobuf::int32 value) {
  set_has_login_time();
  login_time_ = value;
}

// -------------------------------------------------------------------

// facebook_str

// required int64 id = 1 [default = 0];
inline bool facebook_str::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void facebook_str::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void facebook_str::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void facebook_str::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 facebook_str::id() const {
  return id_;
}
inline void facebook_str::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 pos = 2;
inline bool facebook_str::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void facebook_str::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void facebook_str::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void facebook_str::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 facebook_str::pos() const {
  return pos_;
}
inline void facebook_str::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int64 param = 3;
inline bool facebook_str::has_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void facebook_str::set_has_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void facebook_str::clear_has_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void facebook_str::clear_param() {
  param_ = GOOGLE_LONGLONG(0);
  clear_has_param();
}
inline ::google::protobuf::int64 facebook_str::param() const {
  return param_;
}
inline void facebook_str::set_param(::google::protobuf::int64 value) {
  set_has_param();
  param_ = value;
}

// optional bytes name = 4;
inline bool facebook_str::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void facebook_str::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void facebook_str::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void facebook_str::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& facebook_str::name() const {
  return *name_;
}
inline void facebook_str::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void facebook_str::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void facebook_str::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* facebook_str::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* facebook_str::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void facebook_str::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes name2 = 5;
inline bool facebook_str::has_name2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void facebook_str::set_has_name2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void facebook_str::clear_has_name2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void facebook_str::clear_name2() {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    name2_->clear();
  }
  clear_has_name2();
}
inline const ::std::string& facebook_str::name2() const {
  return *name2_;
}
inline void facebook_str::set_name2(const ::std::string& value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void facebook_str::set_name2(const char* value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void facebook_str::set_name2(const void* value, size_t size) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* facebook_str::mutable_name2() {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  return name2_;
}
inline ::std::string* facebook_str::release_name2() {
  clear_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name2_;
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void facebook_str::set_allocated_name2(::std::string* name2) {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (name2) {
    set_has_name2();
    name2_ = name2;
  } else {
    clear_has_name2();
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 leave_corps_time = 6;
inline bool facebook_str::has_leave_corps_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void facebook_str::set_has_leave_corps_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void facebook_str::clear_has_leave_corps_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void facebook_str::clear_leave_corps_time() {
  leave_corps_time_ = 0;
  clear_has_leave_corps_time();
}
inline ::google::protobuf::int32 facebook_str::leave_corps_time() const {
  return leave_corps_time_;
}
inline void facebook_str::set_leave_corps_time(::google::protobuf::int32 value) {
  set_has_leave_corps_time();
  leave_corps_time_ = value;
}

// optional int32 level = 7;
inline bool facebook_str::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void facebook_str::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void facebook_str::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void facebook_str::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 facebook_str::level() const {
  return level_;
}
inline void facebook_str::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// face_book

// optional .PB.GPS_TYPE type = 1 [default = GUT_FACEBOOK];
inline bool face_book::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void face_book::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void face_book::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void face_book::clear_type() {
  type_ = 4;
  clear_has_type();
}
inline ::PB::GPS_TYPE face_book::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void face_book::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.facebook_str corps = 2;
inline bool face_book::has_corps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void face_book::set_has_corps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void face_book::clear_has_corps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void face_book::clear_corps() {
  if (corps_ != NULL) corps_->::PB::facebook_str::Clear();
  clear_has_corps();
}
inline const ::PB::facebook_str& face_book::corps() const {
  return corps_ != NULL ? *corps_ : *default_instance_->corps_;
}
inline ::PB::facebook_str* face_book::mutable_corps() {
  set_has_corps();
  if (corps_ == NULL) corps_ = new ::PB::facebook_str;
  return corps_;
}
inline ::PB::facebook_str* face_book::release_corps() {
  clear_has_corps();
  ::PB::facebook_str* temp = corps_;
  corps_ = NULL;
  return temp;
}
inline void face_book::set_allocated_corps(::PB::facebook_str* corps) {
  delete corps_;
  corps_ = corps;
  if (corps) {
    set_has_corps();
  } else {
    clear_has_corps();
  }
}

// -------------------------------------------------------------------

// idip_role_info

// optional int64 money = 1;
inline bool idip_role_info::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void idip_role_info::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void idip_role_info::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void idip_role_info::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 idip_role_info::money() const {
  return money_;
}
inline void idip_role_info::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// optional int64 vip_exp = 2;
inline bool idip_role_info::has_vip_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void idip_role_info::set_has_vip_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void idip_role_info::clear_has_vip_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void idip_role_info::clear_vip_exp() {
  vip_exp_ = GOOGLE_LONGLONG(0);
  clear_has_vip_exp();
}
inline ::google::protobuf::int64 idip_role_info::vip_exp() const {
  return vip_exp_;
}
inline void idip_role_info::set_vip_exp(::google::protobuf::int64 value) {
  set_has_vip_exp();
  vip_exp_ = value;
}

// optional int32 vip_level = 3;
inline bool idip_role_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void idip_role_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void idip_role_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void idip_role_info::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 idip_role_info::vip_level() const {
  return vip_level_;
}
inline void idip_role_info::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional int64 role_exp = 4;
inline bool idip_role_info::has_role_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void idip_role_info::set_has_role_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void idip_role_info::clear_has_role_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void idip_role_info::clear_role_exp() {
  role_exp_ = GOOGLE_LONGLONG(0);
  clear_has_role_exp();
}
inline ::google::protobuf::int64 idip_role_info::role_exp() const {
  return role_exp_;
}
inline void idip_role_info::set_role_exp(::google::protobuf::int64 value) {
  set_has_role_exp();
  role_exp_ = value;
}

// optional int64 ride_exp = 5;
inline bool idip_role_info::has_ride_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void idip_role_info::set_has_ride_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void idip_role_info::clear_has_ride_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void idip_role_info::clear_ride_exp() {
  ride_exp_ = GOOGLE_LONGLONG(0);
  clear_has_ride_exp();
}
inline ::google::protobuf::int64 idip_role_info::ride_exp() const {
  return ride_exp_;
}
inline void idip_role_info::set_ride_exp(::google::protobuf::int64 value) {
  set_has_ride_exp();
  ride_exp_ = value;
}

// optional int32 ride_level = 6;
inline bool idip_role_info::has_ride_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void idip_role_info::set_has_ride_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void idip_role_info::clear_has_ride_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void idip_role_info::clear_ride_level() {
  ride_level_ = 0;
  clear_has_ride_level();
}
inline ::google::protobuf::int32 idip_role_info::ride_level() const {
  return ride_level_;
}
inline void idip_role_info::set_ride_level(::google::protobuf::int32 value) {
  set_has_ride_level();
  ride_level_ = value;
}

// optional int32 pk_value = 7;
inline bool idip_role_info::has_pk_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void idip_role_info::set_has_pk_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void idip_role_info::clear_has_pk_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void idip_role_info::clear_pk_value() {
  pk_value_ = 0;
  clear_has_pk_value();
}
inline ::google::protobuf::int32 idip_role_info::pk_value() const {
  return pk_value_;
}
inline void idip_role_info::set_pk_value(::google::protobuf::int32 value) {
  set_has_pk_value();
  pk_value_ = value;
}

// optional int32 online_time = 8;
inline bool idip_role_info::has_online_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void idip_role_info::set_has_online_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void idip_role_info::clear_has_online_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void idip_role_info::clear_online_time() {
  online_time_ = 0;
  clear_has_online_time();
}
inline ::google::protobuf::int32 idip_role_info::online_time() const {
  return online_time_;
}
inline void idip_role_info::set_online_time(::google::protobuf::int32 value) {
  set_has_online_time();
  online_time_ = value;
}

// optional int32 friends_count = 9;
inline bool idip_role_info::has_friends_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void idip_role_info::set_has_friends_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void idip_role_info::clear_has_friends_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void idip_role_info::clear_friends_count() {
  friends_count_ = 0;
  clear_has_friends_count();
}
inline ::google::protobuf::int32 idip_role_info::friends_count() const {
  return friends_count_;
}
inline void idip_role_info::set_friends_count(::google::protobuf::int32 value) {
  set_has_friends_count();
  friends_count_ = value;
}

// -------------------------------------------------------------------

// role_list_custom

// optional bool fashion = 1;
inline bool role_list_custom::has_fashion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_list_custom::set_has_fashion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_list_custom::clear_has_fashion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_list_custom::clear_fashion() {
  fashion_ = false;
  clear_has_fashion();
}
inline bool role_list_custom::fashion() const {
  return fashion_;
}
inline void role_list_custom::set_fashion(bool value) {
  set_has_fashion();
  fashion_ = value;
}

// optional uint32 magic_weapon_tid = 2;
inline bool role_list_custom::has_magic_weapon_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_list_custom::set_has_magic_weapon_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_list_custom::clear_has_magic_weapon_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_list_custom::clear_magic_weapon_tid() {
  magic_weapon_tid_ = 0u;
  clear_has_magic_weapon_tid();
}
inline ::google::protobuf::uint32 role_list_custom::magic_weapon_tid() const {
  return magic_weapon_tid_;
}
inline void role_list_custom::set_magic_weapon_tid(::google::protobuf::uint32 value) {
  set_has_magic_weapon_tid();
  magic_weapon_tid_ = value;
}

// -------------------------------------------------------------------

// gs_role_mutable_data

// optional .PB.GPS_TYPE type = 1 [default = GUT_ROLE_PBINFO];
inline bool gs_role_mutable_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_role_mutable_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_role_mutable_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_role_mutable_data::clear_type() {
  type_ = 9;
  clear_has_type();
}
inline ::PB::GPS_TYPE gs_role_mutable_data::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void gs_role_mutable_data::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 vip_level = 2;
inline bool gs_role_mutable_data::has_vip_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_role_mutable_data::set_has_vip_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_role_mutable_data::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_role_mutable_data::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 gs_role_mutable_data::vip_level() const {
  return vip_level_;
}
inline void gs_role_mutable_data::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional uint32 fightcapacity = 3;
inline bool gs_role_mutable_data::has_fightcapacity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_role_mutable_data::set_has_fightcapacity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_role_mutable_data::clear_has_fightcapacity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_role_mutable_data::clear_fightcapacity() {
  fightcapacity_ = 0u;
  clear_has_fightcapacity();
}
inline ::google::protobuf::uint32 gs_role_mutable_data::fightcapacity() const {
  return fightcapacity_;
}
inline void gs_role_mutable_data::set_fightcapacity(::google::protobuf::uint32 value) {
  set_has_fightcapacity();
  fightcapacity_ = value;
}

// optional bytes show_property = 4;
inline bool gs_role_mutable_data::has_show_property() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_role_mutable_data::set_has_show_property() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_role_mutable_data::clear_has_show_property() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_role_mutable_data::clear_show_property() {
  if (show_property_ != &::google::protobuf::internal::kEmptyString) {
    show_property_->clear();
  }
  clear_has_show_property();
}
inline const ::std::string& gs_role_mutable_data::show_property() const {
  return *show_property_;
}
inline void gs_role_mutable_data::set_show_property(const ::std::string& value) {
  set_has_show_property();
  if (show_property_ == &::google::protobuf::internal::kEmptyString) {
    show_property_ = new ::std::string;
  }
  show_property_->assign(value);
}
inline void gs_role_mutable_data::set_show_property(const char* value) {
  set_has_show_property();
  if (show_property_ == &::google::protobuf::internal::kEmptyString) {
    show_property_ = new ::std::string;
  }
  show_property_->assign(value);
}
inline void gs_role_mutable_data::set_show_property(const void* value, size_t size) {
  set_has_show_property();
  if (show_property_ == &::google::protobuf::internal::kEmptyString) {
    show_property_ = new ::std::string;
  }
  show_property_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_role_mutable_data::mutable_show_property() {
  set_has_show_property();
  if (show_property_ == &::google::protobuf::internal::kEmptyString) {
    show_property_ = new ::std::string;
  }
  return show_property_;
}
inline ::std::string* gs_role_mutable_data::release_show_property() {
  clear_has_show_property();
  if (show_property_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = show_property_;
    show_property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_role_mutable_data::set_allocated_show_property(::std::string* show_property) {
  if (show_property_ != &::google::protobuf::internal::kEmptyString) {
    delete show_property_;
  }
  if (show_property) {
    set_has_show_property();
    show_property_ = show_property;
  } else {
    clear_has_show_property();
    show_property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PB.other_player_profile_from_gs pro = 8;
inline bool gs_role_mutable_data::has_pro() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_role_mutable_data::set_has_pro() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_role_mutable_data::clear_has_pro() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_role_mutable_data::clear_pro() {
  if (pro_ != NULL) pro_->::PB::other_player_profile_from_gs::Clear();
  clear_has_pro();
}
inline const ::PB::other_player_profile_from_gs& gs_role_mutable_data::pro() const {
  return pro_ != NULL ? *pro_ : *default_instance_->pro_;
}
inline ::PB::other_player_profile_from_gs* gs_role_mutable_data::mutable_pro() {
  set_has_pro();
  if (pro_ == NULL) pro_ = new ::PB::other_player_profile_from_gs;
  return pro_;
}
inline ::PB::other_player_profile_from_gs* gs_role_mutable_data::release_pro() {
  clear_has_pro();
  ::PB::other_player_profile_from_gs* temp = pro_;
  pro_ = NULL;
  return temp;
}
inline void gs_role_mutable_data::set_allocated_pro(::PB::other_player_profile_from_gs* pro) {
  delete pro_;
  pro_ = pro;
  if (pro) {
    set_has_pro();
  } else {
    clear_has_pro();
  }
}

// optional .PB.idip_role_info idip_info = 9;
inline bool gs_role_mutable_data::has_idip_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gs_role_mutable_data::set_has_idip_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gs_role_mutable_data::clear_has_idip_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gs_role_mutable_data::clear_idip_info() {
  if (idip_info_ != NULL) idip_info_->::PB::idip_role_info::Clear();
  clear_has_idip_info();
}
inline const ::PB::idip_role_info& gs_role_mutable_data::idip_info() const {
  return idip_info_ != NULL ? *idip_info_ : *default_instance_->idip_info_;
}
inline ::PB::idip_role_info* gs_role_mutable_data::mutable_idip_info() {
  set_has_idip_info();
  if (idip_info_ == NULL) idip_info_ = new ::PB::idip_role_info;
  return idip_info_;
}
inline ::PB::idip_role_info* gs_role_mutable_data::release_idip_info() {
  clear_has_idip_info();
  ::PB::idip_role_info* temp = idip_info_;
  idip_info_ = NULL;
  return temp;
}
inline void gs_role_mutable_data::set_allocated_idip_info(::PB::idip_role_info* idip_info) {
  delete idip_info_;
  idip_info_ = idip_info;
  if (idip_info) {
    set_has_idip_info();
  } else {
    clear_has_idip_info();
  }
}

// optional .PB.role_list_custom custom = 10;
inline bool gs_role_mutable_data::has_custom() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gs_role_mutable_data::set_has_custom() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gs_role_mutable_data::clear_has_custom() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gs_role_mutable_data::clear_custom() {
  if (custom_ != NULL) custom_->::PB::role_list_custom::Clear();
  clear_has_custom();
}
inline const ::PB::role_list_custom& gs_role_mutable_data::custom() const {
  return custom_ != NULL ? *custom_ : *default_instance_->custom_;
}
inline ::PB::role_list_custom* gs_role_mutable_data::mutable_custom() {
  set_has_custom();
  if (custom_ == NULL) custom_ = new ::PB::role_list_custom;
  return custom_;
}
inline ::PB::role_list_custom* gs_role_mutable_data::release_custom() {
  clear_has_custom();
  ::PB::role_list_custom* temp = custom_;
  custom_ = NULL;
  return temp;
}
inline void gs_role_mutable_data::set_allocated_custom(::PB::role_list_custom* custom) {
  delete custom_;
  custom_ = custom;
  if (custom) {
    set_has_custom();
  } else {
    clear_has_custom();
  }
}

// -------------------------------------------------------------------

// nation_war_history

// required int32 finish_time = 1;
inline bool nation_war_history::has_finish_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nation_war_history::set_has_finish_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nation_war_history::clear_has_finish_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nation_war_history::clear_finish_time() {
  finish_time_ = 0;
  clear_has_finish_time();
}
inline ::google::protobuf::int32 nation_war_history::finish_time() const {
  return finish_time_;
}
inline void nation_war_history::set_finish_time(::google::protobuf::int32 value) {
  set_has_finish_time();
  finish_time_ = value;
}

// required int32 nation_attack = 2;
inline bool nation_war_history::has_nation_attack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nation_war_history::set_has_nation_attack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nation_war_history::clear_has_nation_attack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nation_war_history::clear_nation_attack() {
  nation_attack_ = 0;
  clear_has_nation_attack();
}
inline ::google::protobuf::int32 nation_war_history::nation_attack() const {
  return nation_attack_;
}
inline void nation_war_history::set_nation_attack(::google::protobuf::int32 value) {
  set_has_nation_attack();
  nation_attack_ = value;
}

// required int32 nation_defend = 3;
inline bool nation_war_history::has_nation_defend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nation_war_history::set_has_nation_defend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nation_war_history::clear_has_nation_defend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nation_war_history::clear_nation_defend() {
  nation_defend_ = 0;
  clear_has_nation_defend();
}
inline ::google::protobuf::int32 nation_war_history::nation_defend() const {
  return nation_defend_;
}
inline void nation_war_history::set_nation_defend(::google::protobuf::int32 value) {
  set_has_nation_defend();
  nation_defend_ = value;
}

// required int32 result = 4;
inline bool nation_war_history::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nation_war_history::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void nation_war_history::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void nation_war_history::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 nation_war_history::result() const {
  return result_;
}
inline void nation_war_history::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// blessing_info

// optional bytes padding = 1;
inline bool blessing_info::has_padding() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blessing_info::set_has_padding() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blessing_info::clear_has_padding() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blessing_info::clear_padding() {
  if (padding_ != &::google::protobuf::internal::kEmptyString) {
    padding_->clear();
  }
  clear_has_padding();
}
inline const ::std::string& blessing_info::padding() const {
  return *padding_;
}
inline void blessing_info::set_padding(const ::std::string& value) {
  set_has_padding();
  if (padding_ == &::google::protobuf::internal::kEmptyString) {
    padding_ = new ::std::string;
  }
  padding_->assign(value);
}
inline void blessing_info::set_padding(const char* value) {
  set_has_padding();
  if (padding_ == &::google::protobuf::internal::kEmptyString) {
    padding_ = new ::std::string;
  }
  padding_->assign(value);
}
inline void blessing_info::set_padding(const void* value, size_t size) {
  set_has_padding();
  if (padding_ == &::google::protobuf::internal::kEmptyString) {
    padding_ = new ::std::string;
  }
  padding_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* blessing_info::mutable_padding() {
  set_has_padding();
  if (padding_ == &::google::protobuf::internal::kEmptyString) {
    padding_ = new ::std::string;
  }
  return padding_;
}
inline ::std::string* blessing_info::release_padding() {
  clear_has_padding();
  if (padding_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = padding_;
    padding_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void blessing_info::set_allocated_padding(::std::string* padding) {
  if (padding_ != &::google::protobuf::internal::kEmptyString) {
    delete padding_;
  }
  if (padding) {
    set_has_padding();
    padding_ = padding;
  } else {
    clear_has_padding();
    padding_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 src = 2;
inline bool blessing_info::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blessing_info::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blessing_info::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blessing_info::clear_src() {
  src_ = GOOGLE_ULONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::uint64 blessing_info::src() const {
  return src_;
}
inline void blessing_info::set_src(::google::protobuf::uint64 value) {
  set_has_src();
  src_ = value;
}

// optional bytes src_name = 3;
inline bool blessing_info::has_src_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blessing_info::set_has_src_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blessing_info::clear_has_src_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blessing_info::clear_src_name() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    src_name_->clear();
  }
  clear_has_src_name();
}
inline const ::std::string& blessing_info::src_name() const {
  return *src_name_;
}
inline void blessing_info::set_src_name(const ::std::string& value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void blessing_info::set_src_name(const char* value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void blessing_info::set_src_name(const void* value, size_t size) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* blessing_info::mutable_src_name() {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  return src_name_;
}
inline ::std::string* blessing_info::release_src_name() {
  clear_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_name_;
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void blessing_info::set_allocated_src_name(::std::string* src_name) {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (src_name) {
    set_has_src_name();
    src_name_ = src_name;
  } else {
    clear_has_src_name();
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 dst = 4;
inline bool blessing_info::has_dst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void blessing_info::set_has_dst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void blessing_info::clear_has_dst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void blessing_info::clear_dst() {
  dst_ = GOOGLE_ULONGLONG(0);
  clear_has_dst();
}
inline ::google::protobuf::uint64 blessing_info::dst() const {
  return dst_;
}
inline void blessing_info::set_dst(::google::protobuf::uint64 value) {
  set_has_dst();
  dst_ = value;
}

// optional bytes dst_name = 5;
inline bool blessing_info::has_dst_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void blessing_info::set_has_dst_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void blessing_info::clear_has_dst_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void blessing_info::clear_dst_name() {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    dst_name_->clear();
  }
  clear_has_dst_name();
}
inline const ::std::string& blessing_info::dst_name() const {
  return *dst_name_;
}
inline void blessing_info::set_dst_name(const ::std::string& value) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(value);
}
inline void blessing_info::set_dst_name(const char* value) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(value);
}
inline void blessing_info::set_dst_name(const void* value, size_t size) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* blessing_info::mutable_dst_name() {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  return dst_name_;
}
inline ::std::string* blessing_info::release_dst_name() {
  clear_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_name_;
    dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void blessing_info::set_allocated_dst_name(::std::string* dst_name) {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (dst_name) {
    set_has_dst_name();
    dst_name_ = dst_name;
  } else {
    clear_has_dst_name();
    dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 repu_id = 6;
inline bool blessing_info::has_repu_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void blessing_info::set_has_repu_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void blessing_info::clear_has_repu_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void blessing_info::clear_repu_id() {
  repu_id_ = 0u;
  clear_has_repu_id();
}
inline ::google::protobuf::uint32 blessing_info::repu_id() const {
  return repu_id_;
}
inline void blessing_info::set_repu_id(::google::protobuf::uint32 value) {
  set_has_repu_id();
  repu_id_ = value;
}

// optional uint32 repu_count = 7;
inline bool blessing_info::has_repu_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void blessing_info::set_has_repu_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void blessing_info::clear_has_repu_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void blessing_info::clear_repu_count() {
  repu_count_ = 0u;
  clear_has_repu_count();
}
inline ::google::protobuf::uint32 blessing_info::repu_count() const {
  return repu_count_;
}
inline void blessing_info::set_repu_count(::google::protobuf::uint32 value) {
  set_has_repu_count();
  repu_count_ = value;
}

// optional uint32 item_tid = 8;
inline bool blessing_info::has_item_tid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void blessing_info::set_has_item_tid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void blessing_info::clear_has_item_tid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void blessing_info::clear_item_tid() {
  item_tid_ = 0u;
  clear_has_item_tid();
}
inline ::google::protobuf::uint32 blessing_info::item_tid() const {
  return item_tid_;
}
inline void blessing_info::set_item_tid(::google::protobuf::uint32 value) {
  set_has_item_tid();
  item_tid_ = value;
}

// optional uint32 item_count = 9;
inline bool blessing_info::has_item_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void blessing_info::set_has_item_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void blessing_info::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void blessing_info::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 blessing_info::item_count() const {
  return item_count_;
}
inline void blessing_info::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// optional uint32 txnid = 10;
inline bool blessing_info::has_txnid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void blessing_info::set_has_txnid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void blessing_info::clear_has_txnid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void blessing_info::clear_txnid() {
  txnid_ = 0u;
  clear_has_txnid();
}
inline ::google::protobuf::uint32 blessing_info::txnid() const {
  return txnid_;
}
inline void blessing_info::set_txnid(::google::protobuf::uint32 value) {
  set_has_txnid();
  txnid_ = value;
}

// optional int32 result = 11;
inline bool blessing_info::has_result() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void blessing_info::set_has_result() {
  _has_bits_[0] |= 0x00000400u;
}
inline void blessing_info::clear_has_result() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void blessing_info::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 blessing_info::result() const {
  return result_;
}
inline void blessing_info::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// card_info

// required int32 card_id = 1;
inline bool card_info::has_card_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void card_info::set_has_card_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void card_info::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void card_info::clear_card_id() {
  card_id_ = 0;
  clear_has_card_id();
}
inline ::google::protobuf::int32 card_info::card_id() const {
  return card_id_;
}
inline void card_info::set_card_id(::google::protobuf::int32 value) {
  set_has_card_id();
  card_id_ = value;
}

// required int32 card_count = 2;
inline bool card_info::has_card_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void card_info::set_has_card_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void card_info::clear_has_card_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void card_info::clear_card_count() {
  card_count_ = 0;
  clear_has_card_count();
}
inline ::google::protobuf::int32 card_info::card_count() const {
  return card_count_;
}
inline void card_info::set_card_count(::google::protobuf::int32 value) {
  set_has_card_count();
  card_count_ = value;
}

// -------------------------------------------------------------------

// greeting_info

// optional .PB.greeting_info.GREETING_TYPE type = 1;
inline bool greeting_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void greeting_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void greeting_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void greeting_info::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PB::greeting_info_GREETING_TYPE greeting_info::type() const {
  return static_cast< ::PB::greeting_info_GREETING_TYPE >(type_);
}
inline void greeting_info::set_type(::PB::greeting_info_GREETING_TYPE value) {
  assert(::PB::greeting_info_GREETING_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 info_seq = 2 [default = 0];
inline bool greeting_info::has_info_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void greeting_info::set_has_info_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void greeting_info::clear_has_info_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void greeting_info::clear_info_seq() {
  info_seq_ = 0;
  clear_has_info_seq();
}
inline ::google::protobuf::int32 greeting_info::info_seq() const {
  return info_seq_;
}
inline void greeting_info::set_info_seq(::google::protobuf::int32 value) {
  set_has_info_seq();
  info_seq_ = value;
}

// optional int64 roleid = 3;
inline bool greeting_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void greeting_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void greeting_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void greeting_info::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 greeting_info::roleid() const {
  return roleid_;
}
inline void greeting_info::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional bytes name = 4;
inline bool greeting_info::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void greeting_info::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void greeting_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void greeting_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& greeting_info::name() const {
  return *name_;
}
inline void greeting_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void greeting_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void greeting_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* greeting_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* greeting_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void greeting_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 param_1 = 5;
inline bool greeting_info::has_param_1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void greeting_info::set_has_param_1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void greeting_info::clear_has_param_1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void greeting_info::clear_param_1() {
  param_1_ = 0;
  clear_has_param_1();
}
inline ::google::protobuf::int32 greeting_info::param_1() const {
  return param_1_;
}
inline void greeting_info::set_param_1(::google::protobuf::int32 value) {
  set_has_param_1();
  param_1_ = value;
}

// optional int32 param_2 = 6;
inline bool greeting_info::has_param_2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void greeting_info::set_has_param_2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void greeting_info::clear_has_param_2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void greeting_info::clear_param_2() {
  param_2_ = 0;
  clear_has_param_2();
}
inline ::google::protobuf::int32 greeting_info::param_2() const {
  return param_2_;
}
inline void greeting_info::set_param_2(::google::protobuf::int32 value) {
  set_has_param_2();
  param_2_ = value;
}

// optional int32 param_3 = 7;
inline bool greeting_info::has_param_3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void greeting_info::set_has_param_3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void greeting_info::clear_has_param_3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void greeting_info::clear_param_3() {
  param_3_ = 0;
  clear_has_param_3();
}
inline ::google::protobuf::int32 greeting_info::param_3() const {
  return param_3_;
}
inline void greeting_info::set_param_3(::google::protobuf::int32 value) {
  set_has_param_3();
  param_3_ = value;
}

// optional int32 greet_tid = 8;
inline bool greeting_info::has_greet_tid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void greeting_info::set_has_greet_tid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void greeting_info::clear_has_greet_tid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void greeting_info::clear_greet_tid() {
  greet_tid_ = 0;
  clear_has_greet_tid();
}
inline ::google::protobuf::int32 greeting_info::greet_tid() const {
  return greet_tid_;
}
inline void greeting_info::set_greet_tid(::google::protobuf::int32 value) {
  set_has_greet_tid();
  greet_tid_ = value;
}

// -------------------------------------------------------------------

// ask_help_info

// required uint64 src = 1;
inline bool ask_help_info::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ask_help_info::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ask_help_info::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ask_help_info::clear_src() {
  src_ = GOOGLE_ULONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::uint64 ask_help_info::src() const {
  return src_;
}
inline void ask_help_info::set_src(::google::protobuf::uint64 value) {
  set_has_src();
  src_ = value;
}

// optional bytes src_name = 2;
inline bool ask_help_info::has_src_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ask_help_info::set_has_src_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ask_help_info::clear_has_src_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ask_help_info::clear_src_name() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    src_name_->clear();
  }
  clear_has_src_name();
}
inline const ::std::string& ask_help_info::src_name() const {
  return *src_name_;
}
inline void ask_help_info::set_src_name(const ::std::string& value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void ask_help_info::set_src_name(const char* value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void ask_help_info::set_src_name(const void* value, size_t size) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ask_help_info::mutable_src_name() {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  return src_name_;
}
inline ::std::string* ask_help_info::release_src_name() {
  clear_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_name_;
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ask_help_info::set_allocated_src_name(::std::string* src_name) {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (src_name) {
    set_has_src_name();
    src_name_ = src_name;
  } else {
    clear_has_src_name();
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 scene_tag = 3;
inline bool ask_help_info::has_scene_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ask_help_info::set_has_scene_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ask_help_info::clear_has_scene_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ask_help_info::clear_scene_tag() {
  scene_tag_ = 0;
  clear_has_scene_tag();
}
inline ::google::protobuf::int32 ask_help_info::scene_tag() const {
  return scene_tag_;
}
inline void ask_help_info::set_scene_tag(::google::protobuf::int32 value) {
  set_has_scene_tag();
  scene_tag_ = value;
}

// optional int32 mirror_id = 4;
inline bool ask_help_info::has_mirror_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ask_help_info::set_has_mirror_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ask_help_info::clear_has_mirror_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ask_help_info::clear_mirror_id() {
  mirror_id_ = 0;
  clear_has_mirror_id();
}
inline ::google::protobuf::int32 ask_help_info::mirror_id() const {
  return mirror_id_;
}
inline void ask_help_info::set_mirror_id(::google::protobuf::int32 value) {
  set_has_mirror_id();
  mirror_id_ = value;
}

// required .PB.a3d_pos pos = 5;
inline bool ask_help_info::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ask_help_info::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ask_help_info::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ask_help_info::clear_pos() {
  if (pos_ != NULL) pos_->::PB::a3d_pos::Clear();
  clear_has_pos();
}
inline const ::PB::a3d_pos& ask_help_info::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::PB::a3d_pos* ask_help_info::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PB::a3d_pos;
  return pos_;
}
inline ::PB::a3d_pos* ask_help_info::release_pos() {
  clear_has_pos();
  ::PB::a3d_pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void ask_help_info::set_allocated_pos(::PB::a3d_pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional int32 end_timestamp = 6;
inline bool ask_help_info::has_end_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ask_help_info::set_has_end_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ask_help_info::clear_has_end_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ask_help_info::clear_end_timestamp() {
  end_timestamp_ = 0;
  clear_has_end_timestamp();
}
inline ::google::protobuf::int32 ask_help_info::end_timestamp() const {
  return end_timestamp_;
}
inline void ask_help_info::set_end_timestamp(::google::protobuf::int32 value) {
  set_has_end_timestamp();
  end_timestamp_ = value;
}

// optional .PB.ask_help_info_type info_type = 7;
inline bool ask_help_info::has_info_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ask_help_info::set_has_info_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ask_help_info::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ask_help_info::clear_info_type() {
  info_type_ = 0;
  clear_has_info_type();
}
inline ::PB::ask_help_info_type ask_help_info::info_type() const {
  return static_cast< ::PB::ask_help_info_type >(info_type_);
}
inline void ask_help_info::set_info_type(::PB::ask_help_info_type value) {
  assert(::PB::ask_help_info_type_IsValid(value));
  set_has_info_type();
  info_type_ = value;
}

// optional .PB.ask_help_info.relation_type relation = 8;
inline bool ask_help_info::has_relation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ask_help_info::set_has_relation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ask_help_info::clear_has_relation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ask_help_info::clear_relation() {
  relation_ = 0;
  clear_has_relation();
}
inline ::PB::ask_help_info_relation_type ask_help_info::relation() const {
  return static_cast< ::PB::ask_help_info_relation_type >(relation_);
}
inline void ask_help_info::set_relation(::PB::ask_help_info_relation_type value) {
  assert(::PB::ask_help_info_relation_type_IsValid(value));
  set_has_relation();
  relation_ = value;
}

// optional sint32 certificate = 9;
inline bool ask_help_info::has_certificate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ask_help_info::set_has_certificate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ask_help_info::clear_has_certificate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ask_help_info::clear_certificate() {
  certificate_ = 0;
  clear_has_certificate();
}
inline ::google::protobuf::int32 ask_help_info::certificate() const {
  return certificate_;
}
inline void ask_help_info::set_certificate(::google::protobuf::int32 value) {
  set_has_certificate();
  certificate_ = value;
}

// optional int32 src_nation = 10;
inline bool ask_help_info::has_src_nation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ask_help_info::set_has_src_nation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ask_help_info::clear_has_src_nation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ask_help_info::clear_src_nation() {
  src_nation_ = 0;
  clear_has_src_nation();
}
inline ::google::protobuf::int32 ask_help_info::src_nation() const {
  return src_nation_;
}
inline void ask_help_info::set_src_nation(::google::protobuf::int32 value) {
  set_has_src_nation();
  src_nation_ = value;
}

// optional int32 corp_id = 11;
inline bool ask_help_info::has_corp_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ask_help_info::set_has_corp_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ask_help_info::clear_has_corp_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ask_help_info::clear_corp_id() {
  corp_id_ = 0;
  clear_has_corp_id();
}
inline ::google::protobuf::int32 ask_help_info::corp_id() const {
  return corp_id_;
}
inline void ask_help_info::set_corp_id(::google::protobuf::int32 value) {
  set_has_corp_id();
  corp_id_ = value;
}

// -------------------------------------------------------------------

// roam_match_info

// optional int32 zoneid = 1;
inline bool roam_match_info::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void roam_match_info::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void roam_match_info::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void roam_match_info::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 roam_match_info::zoneid() const {
  return zoneid_;
}
inline void roam_match_info::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// optional int32 nationid = 2;
inline bool roam_match_info::has_nationid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void roam_match_info::set_has_nationid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void roam_match_info::clear_has_nationid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void roam_match_info::clear_nationid() {
  nationid_ = 0;
  clear_has_nationid();
}
inline ::google::protobuf::int32 roam_match_info::nationid() const {
  return nationid_;
}
inline void roam_match_info::set_nationid(::google::protobuf::int32 value) {
  set_has_nationid();
  nationid_ = value;
}

// optional int32 league_id = 3;
inline bool roam_match_info::has_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void roam_match_info::set_has_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void roam_match_info::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void roam_match_info::clear_league_id() {
  league_id_ = 0;
  clear_has_league_id();
}
inline ::google::protobuf::int32 roam_match_info::league_id() const {
  return league_id_;
}
inline void roam_match_info::set_league_id(::google::protobuf::int32 value) {
  set_has_league_id();
  league_id_ = value;
}

// optional int32 war_id = 4;
inline bool roam_match_info::has_war_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void roam_match_info::set_has_war_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void roam_match_info::clear_has_war_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void roam_match_info::clear_war_id() {
  war_id_ = 0;
  clear_has_war_id();
}
inline ::google::protobuf::int32 roam_match_info::war_id() const {
  return war_id_;
}
inline void roam_match_info::set_war_id(::google::protobuf::int32 value) {
  set_has_war_id();
  war_id_ = value;
}

// optional int32 camp_id = 5;
inline bool roam_match_info::has_camp_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void roam_match_info::set_has_camp_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void roam_match_info::clear_has_camp_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void roam_match_info::clear_camp_id() {
  camp_id_ = 0;
  clear_has_camp_id();
}
inline ::google::protobuf::int32 roam_match_info::camp_id() const {
  return camp_id_;
}
inline void roam_match_info::set_camp_id(::google::protobuf::int32 value) {
  set_has_camp_id();
  camp_id_ = value;
}

// -------------------------------------------------------------------

// db_roam_record_info

// optional int32 zoneid = 1;
inline bool db_roam_record_info::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_roam_record_info::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_roam_record_info::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_roam_record_info::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 db_roam_record_info::zoneid() const {
  return zoneid_;
}
inline void db_roam_record_info::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// optional int32 nation = 2;
inline bool db_roam_record_info::has_nation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_roam_record_info::set_has_nation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_roam_record_info::clear_has_nation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_roam_record_info::clear_nation() {
  nation_ = 0;
  clear_has_nation();
}
inline ::google::protobuf::int32 db_roam_record_info::nation() const {
  return nation_;
}
inline void db_roam_record_info::set_nation(::google::protobuf::int32 value) {
  set_has_nation();
  nation_ = value;
}

// optional int32 leagueid = 3;
inline bool db_roam_record_info::has_leagueid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_roam_record_info::set_has_leagueid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_roam_record_info::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_roam_record_info::clear_leagueid() {
  leagueid_ = 0;
  clear_has_leagueid();
}
inline ::google::protobuf::int32 db_roam_record_info::leagueid() const {
  return leagueid_;
}
inline void db_roam_record_info::set_leagueid(::google::protobuf::int32 value) {
  set_has_leagueid();
  leagueid_ = value;
}

// optional int32 campid = 4;
inline bool db_roam_record_info::has_campid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_roam_record_info::set_has_campid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_roam_record_info::clear_has_campid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_roam_record_info::clear_campid() {
  campid_ = 0;
  clear_has_campid();
}
inline ::google::protobuf::int32 db_roam_record_info::campid() const {
  return campid_;
}
inline void db_roam_record_info::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
}

// -------------------------------------------------------------------

// db_roam_record_data

// optional int32 instid = 1;
inline bool db_roam_record_data::has_instid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_roam_record_data::set_has_instid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_roam_record_data::clear_has_instid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_roam_record_data::clear_instid() {
  instid_ = 0;
  clear_has_instid();
}
inline ::google::protobuf::int32 db_roam_record_data::instid() const {
  return instid_;
}
inline void db_roam_record_data::set_instid(::google::protobuf::int32 value) {
  set_has_instid();
  instid_ = value;
}

// optional int32 win_campid = 2;
inline bool db_roam_record_data::has_win_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_roam_record_data::set_has_win_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_roam_record_data::clear_has_win_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_roam_record_data::clear_win_campid() {
  win_campid_ = 0;
  clear_has_win_campid();
}
inline ::google::protobuf::int32 db_roam_record_data::win_campid() const {
  return win_campid_;
}
inline void db_roam_record_data::set_win_campid(::google::protobuf::int32 value) {
  set_has_win_campid();
  win_campid_ = value;
}

// optional int32 timestamp = 3;
inline bool db_roam_record_data::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_roam_record_data::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_roam_record_data::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_roam_record_data::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 db_roam_record_data::timestamp() const {
  return timestamp_;
}
inline void db_roam_record_data::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// repeated .PB.db_roam_record_info info = 4;
inline int db_roam_record_data::info_size() const {
  return info_.size();
}
inline void db_roam_record_data::clear_info() {
  info_.Clear();
}
inline const ::PB::db_roam_record_info& db_roam_record_data::info(int index) const {
  return info_.Get(index);
}
inline ::PB::db_roam_record_info* db_roam_record_data::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PB::db_roam_record_info* db_roam_record_data::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_info >&
db_roam_record_data::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_roam_record_info >*
db_roam_record_data::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// instance_extend_info

// optional int32 param1 = 1;
inline bool instance_extend_info::has_param1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void instance_extend_info::set_has_param1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void instance_extend_info::clear_has_param1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void instance_extend_info::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 instance_extend_info::param1() const {
  return param1_;
}
inline void instance_extend_info::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// repeated int64 param2 = 2;
inline int instance_extend_info::param2_size() const {
  return param2_.size();
}
inline void instance_extend_info::clear_param2() {
  param2_.Clear();
}
inline ::google::protobuf::int64 instance_extend_info::param2(int index) const {
  return param2_.Get(index);
}
inline void instance_extend_info::set_param2(int index, ::google::protobuf::int64 value) {
  param2_.Set(index, value);
}
inline void instance_extend_info::add_param2(::google::protobuf::int64 value) {
  param2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
instance_extend_info::param2() const {
  return param2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
instance_extend_info::mutable_param2() {
  return &param2_;
}

// -------------------------------------------------------------------

// corp_farmland

// optional int32 cur_planting_tid = 3;
inline bool corp_farmland::has_cur_planting_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void corp_farmland::set_has_cur_planting_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void corp_farmland::clear_has_cur_planting_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void corp_farmland::clear_cur_planting_tid() {
  cur_planting_tid_ = 0;
  clear_has_cur_planting_tid();
}
inline ::google::protobuf::int32 corp_farmland::cur_planting_tid() const {
  return cur_planting_tid_;
}
inline void corp_farmland::set_cur_planting_tid(::google::protobuf::int32 value) {
  set_has_cur_planting_tid();
  cur_planting_tid_ = value;
}

// optional int32 start_time = 4;
inline bool corp_farmland::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void corp_farmland::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void corp_farmland::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void corp_farmland::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
inline ::google::protobuf::int32 corp_farmland::start_time() const {
  return start_time_;
}
inline void corp_farmland::set_start_time(::google::protobuf::int32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional int32 harvest_time = 5;
inline bool corp_farmland::has_harvest_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void corp_farmland::set_has_harvest_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void corp_farmland::clear_has_harvest_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void corp_farmland::clear_harvest_time() {
  harvest_time_ = 0;
  clear_has_harvest_time();
}
inline ::google::protobuf::int32 corp_farmland::harvest_time() const {
  return harvest_time_;
}
inline void corp_farmland::set_harvest_time(::google::protobuf::int32 value) {
  set_has_harvest_time();
  harvest_time_ = value;
}

// optional bool can_speed = 6;
inline bool corp_farmland::has_can_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void corp_farmland::set_has_can_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void corp_farmland::clear_has_can_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void corp_farmland::clear_can_speed() {
  can_speed_ = false;
  clear_has_can_speed();
}
inline bool corp_farmland::can_speed() const {
  return can_speed_;
}
inline void corp_farmland::set_can_speed(bool value) {
  set_has_can_speed();
  can_speed_ = value;
}

// -------------------------------------------------------------------

// enter_instance_config_client_config

// optional int32 mafia_id = 1;
inline bool enter_instance_config_client_config::has_mafia_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_instance_config_client_config::set_has_mafia_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_instance_config_client_config::clear_has_mafia_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_instance_config_client_config::clear_mafia_id() {
  mafia_id_ = 0;
  clear_has_mafia_id();
}
inline ::google::protobuf::int32 enter_instance_config_client_config::mafia_id() const {
  return mafia_id_;
}
inline void enter_instance_config_client_config::set_mafia_id(::google::protobuf::int32 value) {
  set_has_mafia_id();
  mafia_id_ = value;
}

// optional bytes name = 2;
inline bool enter_instance_config_client_config::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_instance_config_client_config::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_instance_config_client_config::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_instance_config_client_config::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& enter_instance_config_client_config::name() const {
  return *name_;
}
inline void enter_instance_config_client_config::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void enter_instance_config_client_config::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void enter_instance_config_client_config::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* enter_instance_config_client_config::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* enter_instance_config_client_config::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void enter_instance_config_client_config::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes password = 3;
inline bool enter_instance_config_client_config::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enter_instance_config_client_config::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enter_instance_config_client_config::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enter_instance_config_client_config::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& enter_instance_config_client_config::password() const {
  return *password_;
}
inline void enter_instance_config_client_config::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void enter_instance_config_client_config::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void enter_instance_config_client_config::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* enter_instance_config_client_config::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* enter_instance_config_client_config::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void enter_instance_config_client_config::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PB.instance_extend_info info = 4;
inline bool enter_instance_config_client_config::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void enter_instance_config_client_config::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void enter_instance_config_client_config::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void enter_instance_config_client_config::clear_info() {
  if (info_ != NULL) info_->::PB::instance_extend_info::Clear();
  clear_has_info();
}
inline const ::PB::instance_extend_info& enter_instance_config_client_config::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PB::instance_extend_info* enter_instance_config_client_config::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PB::instance_extend_info;
  return info_;
}
inline ::PB::instance_extend_info* enter_instance_config_client_config::release_info() {
  clear_has_info();
  ::PB::instance_extend_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void enter_instance_config_client_config::set_allocated_info(::PB::instance_extend_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// enter_instance_config_server_config

// optional int32 param1 = 1;
inline bool enter_instance_config_server_config::has_param1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_instance_config_server_config::set_has_param1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_instance_config_server_config::clear_has_param1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_instance_config_server_config::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 enter_instance_config_server_config::param1() const {
  return param1_;
}
inline void enter_instance_config_server_config::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// optional int32 param2 = 2;
inline bool enter_instance_config_server_config::has_param2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_instance_config_server_config::set_has_param2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_instance_config_server_config::clear_has_param2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_instance_config_server_config::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline ::google::protobuf::int32 enter_instance_config_server_config::param2() const {
  return param2_;
}
inline void enter_instance_config_server_config::set_param2(::google::protobuf::int32 value) {
  set_has_param2();
  param2_ = value;
}

// optional .PB.a3d_pos pos = 3;
inline bool enter_instance_config_server_config::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enter_instance_config_server_config::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enter_instance_config_server_config::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enter_instance_config_server_config::clear_pos() {
  if (pos_ != NULL) pos_->::PB::a3d_pos::Clear();
  clear_has_pos();
}
inline const ::PB::a3d_pos& enter_instance_config_server_config::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::PB::a3d_pos* enter_instance_config_server_config::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PB::a3d_pos;
  return pos_;
}
inline ::PB::a3d_pos* enter_instance_config_server_config::release_pos() {
  clear_has_pos();
  ::PB::a3d_pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void enter_instance_config_server_config::set_allocated_pos(::PB::a3d_pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// -------------------------------------------------------------------

// enter_instance_config

// optional .PB.enter_instance_config.client_config client = 1;
inline bool enter_instance_config::has_client() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_instance_config::set_has_client() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_instance_config::clear_has_client() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_instance_config::clear_client() {
  if (client_ != NULL) client_->::PB::enter_instance_config_client_config::Clear();
  clear_has_client();
}
inline const ::PB::enter_instance_config_client_config& enter_instance_config::client() const {
  return client_ != NULL ? *client_ : *default_instance_->client_;
}
inline ::PB::enter_instance_config_client_config* enter_instance_config::mutable_client() {
  set_has_client();
  if (client_ == NULL) client_ = new ::PB::enter_instance_config_client_config;
  return client_;
}
inline ::PB::enter_instance_config_client_config* enter_instance_config::release_client() {
  clear_has_client();
  ::PB::enter_instance_config_client_config* temp = client_;
  client_ = NULL;
  return temp;
}
inline void enter_instance_config::set_allocated_client(::PB::enter_instance_config_client_config* client) {
  delete client_;
  client_ = client;
  if (client) {
    set_has_client();
  } else {
    clear_has_client();
  }
}

// optional .PB.enter_instance_config.server_config server = 2;
inline bool enter_instance_config::has_server() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_instance_config::set_has_server() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_instance_config::clear_has_server() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_instance_config::clear_server() {
  if (server_ != NULL) server_->::PB::enter_instance_config_server_config::Clear();
  clear_has_server();
}
inline const ::PB::enter_instance_config_server_config& enter_instance_config::server() const {
  return server_ != NULL ? *server_ : *default_instance_->server_;
}
inline ::PB::enter_instance_config_server_config* enter_instance_config::mutable_server() {
  set_has_server();
  if (server_ == NULL) server_ = new ::PB::enter_instance_config_server_config;
  return server_;
}
inline ::PB::enter_instance_config_server_config* enter_instance_config::release_server() {
  clear_has_server();
  ::PB::enter_instance_config_server_config* temp = server_;
  server_ = NULL;
  return temp;
}
inline void enter_instance_config::set_allocated_server(::PB::enter_instance_config_server_config* server) {
  delete server_;
  server_ = server;
  if (server) {
    set_has_server();
  } else {
    clear_has_server();
  }
}

// -------------------------------------------------------------------

// player_corps_attr_config_rent_chariot_info

// optional int32 chariot_hp = 3;
inline bool player_corps_attr_config_rent_chariot_info::has_chariot_hp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_corps_attr_config_rent_chariot_info::set_has_chariot_hp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_has_chariot_hp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_chariot_hp() {
  chariot_hp_ = 0;
  clear_has_chariot_hp();
}
inline ::google::protobuf::int32 player_corps_attr_config_rent_chariot_info::chariot_hp() const {
  return chariot_hp_;
}
inline void player_corps_attr_config_rent_chariot_info::set_chariot_hp(::google::protobuf::int32 value) {
  set_has_chariot_hp();
  chariot_hp_ = value;
}

// optional int32 chariot_tid = 4;
inline bool player_corps_attr_config_rent_chariot_info::has_chariot_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_corps_attr_config_rent_chariot_info::set_has_chariot_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_has_chariot_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_chariot_tid() {
  chariot_tid_ = 0;
  clear_has_chariot_tid();
}
inline ::google::protobuf::int32 player_corps_attr_config_rent_chariot_info::chariot_tid() const {
  return chariot_tid_;
}
inline void player_corps_attr_config_rent_chariot_info::set_chariot_tid(::google::protobuf::int32 value) {
  set_has_chariot_tid();
  chariot_tid_ = value;
}

// optional int32 chariot_level = 5;
inline bool player_corps_attr_config_rent_chariot_info::has_chariot_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_corps_attr_config_rent_chariot_info::set_has_chariot_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_has_chariot_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_chariot_level() {
  chariot_level_ = 0;
  clear_has_chariot_level();
}
inline ::google::protobuf::int32 player_corps_attr_config_rent_chariot_info::chariot_level() const {
  return chariot_level_;
}
inline void player_corps_attr_config_rent_chariot_info::set_chariot_level(::google::protobuf::int32 value) {
  set_has_chariot_level();
  chariot_level_ = value;
}

// optional int32 chariot_rent_timestamp = 6;
inline bool player_corps_attr_config_rent_chariot_info::has_chariot_rent_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void player_corps_attr_config_rent_chariot_info::set_has_chariot_rent_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_has_chariot_rent_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void player_corps_attr_config_rent_chariot_info::clear_chariot_rent_timestamp() {
  chariot_rent_timestamp_ = 0;
  clear_has_chariot_rent_timestamp();
}
inline ::google::protobuf::int32 player_corps_attr_config_rent_chariot_info::chariot_rent_timestamp() const {
  return chariot_rent_timestamp_;
}
inline void player_corps_attr_config_rent_chariot_info::set_chariot_rent_timestamp(::google::protobuf::int32 value) {
  set_has_chariot_rent_timestamp();
  chariot_rent_timestamp_ = value;
}

// -------------------------------------------------------------------

// player_corps_attr_config

// optional int32 active_level = 1 [default = -1];
inline bool player_corps_attr_config::has_active_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_corps_attr_config::set_has_active_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_corps_attr_config::clear_has_active_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_corps_attr_config::clear_active_level() {
  active_level_ = -1;
  clear_has_active_level();
}
inline ::google::protobuf::int32 player_corps_attr_config::active_level() const {
  return active_level_;
}
inline void player_corps_attr_config::set_active_level(::google::protobuf::int32 value) {
  set_has_active_level();
  active_level_ = value;
}

// optional int32 active_index = 2 [default = -1];
inline bool player_corps_attr_config::has_active_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_corps_attr_config::set_has_active_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_corps_attr_config::clear_has_active_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_corps_attr_config::clear_active_index() {
  active_index_ = -1;
  clear_has_active_index();
}
inline ::google::protobuf::int32 player_corps_attr_config::active_index() const {
  return active_index_;
}
inline void player_corps_attr_config::set_active_index(::google::protobuf::int32 value) {
  set_has_active_index();
  active_index_ = value;
}

// optional .PB.player_corps_attr_config.rent_chariot_info chariot_info = 4;
inline bool player_corps_attr_config::has_chariot_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_corps_attr_config::set_has_chariot_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_corps_attr_config::clear_has_chariot_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_corps_attr_config::clear_chariot_info() {
  if (chariot_info_ != NULL) chariot_info_->::PB::player_corps_attr_config_rent_chariot_info::Clear();
  clear_has_chariot_info();
}
inline const ::PB::player_corps_attr_config_rent_chariot_info& player_corps_attr_config::chariot_info() const {
  return chariot_info_ != NULL ? *chariot_info_ : *default_instance_->chariot_info_;
}
inline ::PB::player_corps_attr_config_rent_chariot_info* player_corps_attr_config::mutable_chariot_info() {
  set_has_chariot_info();
  if (chariot_info_ == NULL) chariot_info_ = new ::PB::player_corps_attr_config_rent_chariot_info;
  return chariot_info_;
}
inline ::PB::player_corps_attr_config_rent_chariot_info* player_corps_attr_config::release_chariot_info() {
  clear_has_chariot_info();
  ::PB::player_corps_attr_config_rent_chariot_info* temp = chariot_info_;
  chariot_info_ = NULL;
  return temp;
}
inline void player_corps_attr_config::set_allocated_chariot_info(::PB::player_corps_attr_config_rent_chariot_info* chariot_info) {
  delete chariot_info_;
  chariot_info_ = chariot_info;
  if (chariot_info) {
    set_has_chariot_info();
  } else {
    clear_has_chariot_info();
  }
}

// -------------------------------------------------------------------

// player_stune_config_player_rune_prop_config

// required int32 master_skill_id = 1;
inline bool player_stune_config_player_rune_prop_config::has_master_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_stune_config_player_rune_prop_config::set_has_master_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_stune_config_player_rune_prop_config::clear_has_master_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_stune_config_player_rune_prop_config::clear_master_skill_id() {
  master_skill_id_ = 0;
  clear_has_master_skill_id();
}
inline ::google::protobuf::int32 player_stune_config_player_rune_prop_config::master_skill_id() const {
  return master_skill_id_;
}
inline void player_stune_config_player_rune_prop_config::set_master_skill_id(::google::protobuf::int32 value) {
  set_has_master_skill_id();
  master_skill_id_ = value;
}

// repeated int32 rune_skill_level = 2;
inline int player_stune_config_player_rune_prop_config::rune_skill_level_size() const {
  return rune_skill_level_.size();
}
inline void player_stune_config_player_rune_prop_config::clear_rune_skill_level() {
  rune_skill_level_.Clear();
}
inline ::google::protobuf::int32 player_stune_config_player_rune_prop_config::rune_skill_level(int index) const {
  return rune_skill_level_.Get(index);
}
inline void player_stune_config_player_rune_prop_config::set_rune_skill_level(int index, ::google::protobuf::int32 value) {
  rune_skill_level_.Set(index, value);
}
inline void player_stune_config_player_rune_prop_config::add_rune_skill_level(::google::protobuf::int32 value) {
  rune_skill_level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
player_stune_config_player_rune_prop_config::rune_skill_level() const {
  return rune_skill_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
player_stune_config_player_rune_prop_config::mutable_rune_skill_level() {
  return &rune_skill_level_;
}

// -------------------------------------------------------------------

// player_stune_config_player_rune_config

// required int32 master_skill_id = 1;
inline bool player_stune_config_player_rune_config::has_master_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_stune_config_player_rune_config::set_has_master_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_stune_config_player_rune_config::clear_has_master_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_stune_config_player_rune_config::clear_master_skill_id() {
  master_skill_id_ = 0;
  clear_has_master_skill_id();
}
inline ::google::protobuf::int32 player_stune_config_player_rune_config::master_skill_id() const {
  return master_skill_id_;
}
inline void player_stune_config_player_rune_config::set_master_skill_id(::google::protobuf::int32 value) {
  set_has_master_skill_id();
  master_skill_id_ = value;
}

// required int32 active_index = 2;
inline bool player_stune_config_player_rune_config::has_active_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_stune_config_player_rune_config::set_has_active_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_stune_config_player_rune_config::clear_has_active_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_stune_config_player_rune_config::clear_active_index() {
  active_index_ = 0;
  clear_has_active_index();
}
inline ::google::protobuf::int32 player_stune_config_player_rune_config::active_index() const {
  return active_index_;
}
inline void player_stune_config_player_rune_config::set_active_index(::google::protobuf::int32 value) {
  set_has_active_index();
  active_index_ = value;
}

// -------------------------------------------------------------------

// player_stune_config_config_set

// required int32 set_index = 1;
inline bool player_stune_config_config_set::has_set_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_stune_config_config_set::set_has_set_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_stune_config_config_set::clear_has_set_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_stune_config_config_set::clear_set_index() {
  set_index_ = 0;
  clear_has_set_index();
}
inline ::google::protobuf::int32 player_stune_config_config_set::set_index() const {
  return set_index_;
}
inline void player_stune_config_config_set::set_set_index(::google::protobuf::int32 value) {
  set_has_set_index();
  set_index_ = value;
}

// repeated .PB.player_stune_config.player_rune_config configs = 2;
inline int player_stune_config_config_set::configs_size() const {
  return configs_.size();
}
inline void player_stune_config_config_set::clear_configs() {
  configs_.Clear();
}
inline const ::PB::player_stune_config_player_rune_config& player_stune_config_config_set::configs(int index) const {
  return configs_.Get(index);
}
inline ::PB::player_stune_config_player_rune_config* player_stune_config_config_set::mutable_configs(int index) {
  return configs_.Mutable(index);
}
inline ::PB::player_stune_config_player_rune_config* player_stune_config_config_set::add_configs() {
  return configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_config >&
player_stune_config_config_set::configs() const {
  return configs_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_config >*
player_stune_config_config_set::mutable_configs() {
  return &configs_;
}

// -------------------------------------------------------------------

// player_stune_config

// optional int32 rune_level = 1;
inline bool player_stune_config::has_rune_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_stune_config::set_has_rune_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_stune_config::clear_has_rune_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_stune_config::clear_rune_level() {
  rune_level_ = 0;
  clear_has_rune_level();
}
inline ::google::protobuf::int32 player_stune_config::rune_level() const {
  return rune_level_;
}
inline void player_stune_config::set_rune_level(::google::protobuf::int32 value) {
  set_has_rune_level();
  rune_level_ = value;
}

// optional int32 rune_point = 2;
inline bool player_stune_config::has_rune_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_stune_config::set_has_rune_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_stune_config::clear_has_rune_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_stune_config::clear_rune_point() {
  rune_point_ = 0;
  clear_has_rune_point();
}
inline ::google::protobuf::int32 player_stune_config::rune_point() const {
  return rune_point_;
}
inline void player_stune_config::set_rune_point(::google::protobuf::int32 value) {
  set_has_rune_point();
  rune_point_ = value;
}

// repeated .PB.player_stune_config.player_rune_prop_config rune_config = 3;
inline int player_stune_config::rune_config_size() const {
  return rune_config_.size();
}
inline void player_stune_config::clear_rune_config() {
  rune_config_.Clear();
}
inline const ::PB::player_stune_config_player_rune_prop_config& player_stune_config::rune_config(int index) const {
  return rune_config_.Get(index);
}
inline ::PB::player_stune_config_player_rune_prop_config* player_stune_config::mutable_rune_config(int index) {
  return rune_config_.Mutable(index);
}
inline ::PB::player_stune_config_player_rune_prop_config* player_stune_config::add_rune_config() {
  return rune_config_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_prop_config >&
player_stune_config::rune_config() const {
  return rune_config_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_player_rune_prop_config >*
player_stune_config::mutable_rune_config() {
  return &rune_config_;
}

// repeated .PB.player_stune_config.config_set all_config_set = 4;
inline int player_stune_config::all_config_set_size() const {
  return all_config_set_.size();
}
inline void player_stune_config::clear_all_config_set() {
  all_config_set_.Clear();
}
inline const ::PB::player_stune_config_config_set& player_stune_config::all_config_set(int index) const {
  return all_config_set_.Get(index);
}
inline ::PB::player_stune_config_config_set* player_stune_config::mutable_all_config_set(int index) {
  return all_config_set_.Mutable(index);
}
inline ::PB::player_stune_config_config_set* player_stune_config::add_all_config_set() {
  return all_config_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_config_set >&
player_stune_config::all_config_set() const {
  return all_config_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::player_stune_config_config_set >*
player_stune_config::mutable_all_config_set() {
  return &all_config_set_;
}

// optional int32 cur_active_set = 5;
inline bool player_stune_config::has_cur_active_set() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void player_stune_config::set_has_cur_active_set() {
  _has_bits_[0] |= 0x00000010u;
}
inline void player_stune_config::clear_has_cur_active_set() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void player_stune_config::clear_cur_active_set() {
  cur_active_set_ = 0;
  clear_has_cur_active_set();
}
inline ::google::protobuf::int32 player_stune_config::cur_active_set() const {
  return cur_active_set_;
}
inline void player_stune_config::set_cur_active_set(::google::protobuf::int32 value) {
  set_has_cur_active_set();
  cur_active_set_ = value;
}

// optional int32 total_rune_point = 6;
inline bool player_stune_config::has_total_rune_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void player_stune_config::set_has_total_rune_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void player_stune_config::clear_has_total_rune_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void player_stune_config::clear_total_rune_point() {
  total_rune_point_ = 0;
  clear_has_total_rune_point();
}
inline ::google::protobuf::int32 player_stune_config::total_rune_point() const {
  return total_rune_point_;
}
inline void player_stune_config::set_total_rune_point(::google::protobuf::int32 value) {
  set_has_total_rune_point();
  total_rune_point_ = value;
}

// -------------------------------------------------------------------

// black_shop_info_black_shop_goods_info

// required int32 store_id = 1;
inline bool black_shop_info_black_shop_goods_info::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void black_shop_info_black_shop_goods_info::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void black_shop_info_black_shop_goods_info::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void black_shop_info_black_shop_goods_info::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 black_shop_info_black_shop_goods_info::store_id() const {
  return store_id_;
}
inline void black_shop_info_black_shop_goods_info::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
}

// required int32 goods_id = 2;
inline bool black_shop_info_black_shop_goods_info::has_goods_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void black_shop_info_black_shop_goods_info::set_has_goods_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void black_shop_info_black_shop_goods_info::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void black_shop_info_black_shop_goods_info::clear_goods_id() {
  goods_id_ = 0;
  clear_has_goods_id();
}
inline ::google::protobuf::int32 black_shop_info_black_shop_goods_info::goods_id() const {
  return goods_id_;
}
inline void black_shop_info_black_shop_goods_info::set_goods_id(::google::protobuf::int32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// required int32 is_selled = 3;
inline bool black_shop_info_black_shop_goods_info::has_is_selled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void black_shop_info_black_shop_goods_info::set_has_is_selled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void black_shop_info_black_shop_goods_info::clear_has_is_selled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void black_shop_info_black_shop_goods_info::clear_is_selled() {
  is_selled_ = 0;
  clear_has_is_selled();
}
inline ::google::protobuf::int32 black_shop_info_black_shop_goods_info::is_selled() const {
  return is_selled_;
}
inline void black_shop_info_black_shop_goods_info::set_is_selled(::google::protobuf::int32 value) {
  set_has_is_selled();
  is_selled_ = value;
}

// required int32 goods_pos = 4;
inline bool black_shop_info_black_shop_goods_info::has_goods_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void black_shop_info_black_shop_goods_info::set_has_goods_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void black_shop_info_black_shop_goods_info::clear_has_goods_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void black_shop_info_black_shop_goods_info::clear_goods_pos() {
  goods_pos_ = 0;
  clear_has_goods_pos();
}
inline ::google::protobuf::int32 black_shop_info_black_shop_goods_info::goods_pos() const {
  return goods_pos_;
}
inline void black_shop_info_black_shop_goods_info::set_goods_pos(::google::protobuf::int32 value) {
  set_has_goods_pos();
  goods_pos_ = value;
}

// -------------------------------------------------------------------

// black_shop_info

// required int32 shop_id = 1;
inline bool black_shop_info::has_shop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void black_shop_info::set_has_shop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void black_shop_info::clear_has_shop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void black_shop_info::clear_shop_id() {
  shop_id_ = 0;
  clear_has_shop_id();
}
inline ::google::protobuf::int32 black_shop_info::shop_id() const {
  return shop_id_;
}
inline void black_shop_info::set_shop_id(::google::protobuf::int32 value) {
  set_has_shop_id();
  shop_id_ = value;
}

// required int32 next_refresh_time = 2;
inline bool black_shop_info::has_next_refresh_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void black_shop_info::set_has_next_refresh_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void black_shop_info::clear_has_next_refresh_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void black_shop_info::clear_next_refresh_time() {
  next_refresh_time_ = 0;
  clear_has_next_refresh_time();
}
inline ::google::protobuf::int32 black_shop_info::next_refresh_time() const {
  return next_refresh_time_;
}
inline void black_shop_info::set_next_refresh_time(::google::protobuf::int32 value) {
  set_has_next_refresh_time();
  next_refresh_time_ = value;
}

// repeated .PB.black_shop_info.black_shop_goods_info goods = 3;
inline int black_shop_info::goods_size() const {
  return goods_.size();
}
inline void black_shop_info::clear_goods() {
  goods_.Clear();
}
inline const ::PB::black_shop_info_black_shop_goods_info& black_shop_info::goods(int index) const {
  return goods_.Get(index);
}
inline ::PB::black_shop_info_black_shop_goods_info* black_shop_info::mutable_goods(int index) {
  return goods_.Mutable(index);
}
inline ::PB::black_shop_info_black_shop_goods_info* black_shop_info::add_goods() {
  return goods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info_black_shop_goods_info >&
black_shop_info::goods() const {
  return goods_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::black_shop_info_black_shop_goods_info >*
black_shop_info::mutable_goods() {
  return &goods_;
}

// -------------------------------------------------------------------

// climbtower_magic_shop_info_magic_shop_goods_info

// required int32 store_id = 1;
inline bool climbtower_magic_shop_info_magic_shop_goods_info::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 climbtower_magic_shop_info_magic_shop_goods_info::store_id() const {
  return store_id_;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
}

// required int32 goods_id = 2;
inline bool climbtower_magic_shop_info_magic_shop_goods_info::has_goods_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_has_goods_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_goods_id() {
  goods_id_ = 0;
  clear_has_goods_id();
}
inline ::google::protobuf::int32 climbtower_magic_shop_info_magic_shop_goods_info::goods_id() const {
  return goods_id_;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_goods_id(::google::protobuf::int32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// required int32 is_selled = 3;
inline bool climbtower_magic_shop_info_magic_shop_goods_info::has_is_selled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_has_is_selled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_has_is_selled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_is_selled() {
  is_selled_ = 0;
  clear_has_is_selled();
}
inline ::google::protobuf::int32 climbtower_magic_shop_info_magic_shop_goods_info::is_selled() const {
  return is_selled_;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_is_selled(::google::protobuf::int32 value) {
  set_has_is_selled();
  is_selled_ = value;
}

// required int32 goods_pos = 4;
inline bool climbtower_magic_shop_info_magic_shop_goods_info::has_goods_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_has_goods_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_has_goods_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::clear_goods_pos() {
  goods_pos_ = 0;
  clear_has_goods_pos();
}
inline ::google::protobuf::int32 climbtower_magic_shop_info_magic_shop_goods_info::goods_pos() const {
  return goods_pos_;
}
inline void climbtower_magic_shop_info_magic_shop_goods_info::set_goods_pos(::google::protobuf::int32 value) {
  set_has_goods_pos();
  goods_pos_ = value;
}

// -------------------------------------------------------------------

// climbtower_magic_shop_info

// required int32 shop_id = 1;
inline bool climbtower_magic_shop_info::has_shop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void climbtower_magic_shop_info::set_has_shop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void climbtower_magic_shop_info::clear_has_shop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void climbtower_magic_shop_info::clear_shop_id() {
  shop_id_ = 0;
  clear_has_shop_id();
}
inline ::google::protobuf::int32 climbtower_magic_shop_info::shop_id() const {
  return shop_id_;
}
inline void climbtower_magic_shop_info::set_shop_id(::google::protobuf::int32 value) {
  set_has_shop_id();
  shop_id_ = value;
}

// required int32 level = 2;
inline bool climbtower_magic_shop_info::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void climbtower_magic_shop_info::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void climbtower_magic_shop_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void climbtower_magic_shop_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 climbtower_magic_shop_info::level() const {
  return level_;
}
inline void climbtower_magic_shop_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated .PB.climbtower_magic_shop_info.magic_shop_goods_info goods = 3;
inline int climbtower_magic_shop_info::goods_size() const {
  return goods_.size();
}
inline void climbtower_magic_shop_info::clear_goods() {
  goods_.Clear();
}
inline const ::PB::climbtower_magic_shop_info_magic_shop_goods_info& climbtower_magic_shop_info::goods(int index) const {
  return goods_.Get(index);
}
inline ::PB::climbtower_magic_shop_info_magic_shop_goods_info* climbtower_magic_shop_info::mutable_goods(int index) {
  return goods_.Mutable(index);
}
inline ::PB::climbtower_magic_shop_info_magic_shop_goods_info* climbtower_magic_shop_info::add_goods() {
  return goods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info_magic_shop_goods_info >&
climbtower_magic_shop_info::goods() const {
  return goods_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::climbtower_magic_shop_info_magic_shop_goods_info >*
climbtower_magic_shop_info::mutable_goods() {
  return &goods_;
}

// -------------------------------------------------------------------

// db_hero_trial_config

// optional int32 free_refresh_times = 1;
inline bool db_hero_trial_config::has_free_refresh_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_hero_trial_config::set_has_free_refresh_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_hero_trial_config::clear_has_free_refresh_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_hero_trial_config::clear_free_refresh_times() {
  free_refresh_times_ = 0;
  clear_has_free_refresh_times();
}
inline ::google::protobuf::int32 db_hero_trial_config::free_refresh_times() const {
  return free_refresh_times_;
}
inline void db_hero_trial_config::set_free_refresh_times(::google::protobuf::int32 value) {
  set_has_free_refresh_times();
  free_refresh_times_ = value;
}

// optional int32 pay_refresh_times = 2;
inline bool db_hero_trial_config::has_pay_refresh_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_hero_trial_config::set_has_pay_refresh_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_hero_trial_config::clear_has_pay_refresh_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_hero_trial_config::clear_pay_refresh_times() {
  pay_refresh_times_ = 0;
  clear_has_pay_refresh_times();
}
inline ::google::protobuf::int32 db_hero_trial_config::pay_refresh_times() const {
  return pay_refresh_times_;
}
inline void db_hero_trial_config::set_pay_refresh_times(::google::protobuf::int32 value) {
  set_has_pay_refresh_times();
  pay_refresh_times_ = value;
}

// optional int32 cur_hero_tid = 3;
inline bool db_hero_trial_config::has_cur_hero_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_hero_trial_config::set_has_cur_hero_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_hero_trial_config::clear_has_cur_hero_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_hero_trial_config::clear_cur_hero_tid() {
  cur_hero_tid_ = 0;
  clear_has_cur_hero_tid();
}
inline ::google::protobuf::int32 db_hero_trial_config::cur_hero_tid() const {
  return cur_hero_tid_;
}
inline void db_hero_trial_config::set_cur_hero_tid(::google::protobuf::int32 value) {
  set_has_cur_hero_tid();
  cur_hero_tid_ = value;
}

// -------------------------------------------------------------------

// level_shopid

// required int32 level = 1;
inline bool level_shopid::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void level_shopid::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void level_shopid::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void level_shopid::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 level_shopid::level() const {
  return level_;
}
inline void level_shopid::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 shop_id = 2;
inline bool level_shopid::has_shop_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void level_shopid::set_has_shop_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void level_shopid::clear_has_shop_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void level_shopid::clear_shop_id() {
  shop_id_ = 0;
  clear_has_shop_id();
}
inline ::google::protobuf::int32 level_shopid::shop_id() const {
  return shop_id_;
}
inline void level_shopid::set_shop_id(::google::protobuf::int32 value) {
  set_has_shop_id();
  shop_id_ = value;
}

// -------------------------------------------------------------------

// db_strategy_info

// optional int32 strategy_tid = 1;
inline bool db_strategy_info::has_strategy_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_strategy_info::set_has_strategy_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_strategy_info::clear_has_strategy_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_strategy_info::clear_strategy_tid() {
  strategy_tid_ = 0;
  clear_has_strategy_tid();
}
inline ::google::protobuf::int32 db_strategy_info::strategy_tid() const {
  return strategy_tid_;
}
inline void db_strategy_info::set_strategy_tid(::google::protobuf::int32 value) {
  set_has_strategy_tid();
  strategy_tid_ = value;
}

// optional int32 level = 2;
inline bool db_strategy_info::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_strategy_info::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_strategy_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_strategy_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 db_strategy_info::level() const {
  return level_;
}
inline void db_strategy_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 chip_count = 3;
inline bool db_strategy_info::has_chip_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_strategy_info::set_has_chip_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_strategy_info::clear_has_chip_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_strategy_info::clear_chip_count() {
  chip_count_ = 0;
  clear_has_chip_count();
}
inline ::google::protobuf::int32 db_strategy_info::chip_count() const {
  return chip_count_;
}
inline void db_strategy_info::set_chip_count(::google::protobuf::int32 value) {
  set_has_chip_count();
  chip_count_ = value;
}

// optional int32 star_level = 4;
inline bool db_strategy_info::has_star_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_strategy_info::set_has_star_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_strategy_info::clear_has_star_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_strategy_info::clear_star_level() {
  star_level_ = 0;
  clear_has_star_level();
}
inline ::google::protobuf::int32 db_strategy_info::star_level() const {
  return star_level_;
}
inline void db_strategy_info::set_star_level(::google::protobuf::int32 value) {
  set_has_star_level();
  star_level_ = value;
}

// optional int32 blessing_num = 5;
inline bool db_strategy_info::has_blessing_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_strategy_info::set_has_blessing_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_strategy_info::clear_has_blessing_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_strategy_info::clear_blessing_num() {
  blessing_num_ = 0;
  clear_has_blessing_num();
}
inline ::google::protobuf::int32 db_strategy_info::blessing_num() const {
  return blessing_num_;
}
inline void db_strategy_info::set_blessing_num(::google::protobuf::int32 value) {
  set_has_blessing_num();
  blessing_num_ = value;
}

// -------------------------------------------------------------------

// db_strategy_vectors

// optional .PB.GPS_TYPE type = 1 [default = GUT_STRATEGIES];
inline bool db_strategy_vectors::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_strategy_vectors::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_strategy_vectors::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_strategy_vectors::clear_type() {
  type_ = 25;
  clear_has_type();
}
inline ::PB::GPS_TYPE db_strategy_vectors::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void db_strategy_vectors::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.db_strategy_info strategies = 2;
inline int db_strategy_vectors::strategies_size() const {
  return strategies_.size();
}
inline void db_strategy_vectors::clear_strategies() {
  strategies_.Clear();
}
inline const ::PB::db_strategy_info& db_strategy_vectors::strategies(int index) const {
  return strategies_.Get(index);
}
inline ::PB::db_strategy_info* db_strategy_vectors::mutable_strategies(int index) {
  return strategies_.Mutable(index);
}
inline ::PB::db_strategy_info* db_strategy_vectors::add_strategies() {
  return strategies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_strategy_info >&
db_strategy_vectors::strategies() const {
  return strategies_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_strategy_info >*
db_strategy_vectors::mutable_strategies() {
  return &strategies_;
}

// -------------------------------------------------------------------

// db_surface_soul

// optional int32 soul_tid = 1;
inline bool db_surface_soul::has_soul_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_surface_soul::set_has_soul_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_surface_soul::clear_has_soul_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_surface_soul::clear_soul_tid() {
  soul_tid_ = 0;
  clear_has_soul_tid();
}
inline ::google::protobuf::int32 db_surface_soul::soul_tid() const {
  return soul_tid_;
}
inline void db_surface_soul::set_soul_tid(::google::protobuf::int32 value) {
  set_has_soul_tid();
  soul_tid_ = value;
}

// optional int32 train_value = 2;
inline bool db_surface_soul::has_train_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_surface_soul::set_has_train_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_surface_soul::clear_has_train_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_surface_soul::clear_train_value() {
  train_value_ = 0;
  clear_has_train_value();
}
inline ::google::protobuf::int32 db_surface_soul::train_value() const {
  return train_value_;
}
inline void db_surface_soul::set_train_value(::google::protobuf::int32 value) {
  set_has_train_value();
  train_value_ = value;
}

// -------------------------------------------------------------------

// db_wing_refine_soul

// optional int32 surface_tid = 1;
inline bool db_wing_refine_soul::has_surface_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_wing_refine_soul::set_has_surface_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_wing_refine_soul::clear_has_surface_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_wing_refine_soul::clear_surface_tid() {
  surface_tid_ = 0;
  clear_has_surface_tid();
}
inline ::google::protobuf::int32 db_wing_refine_soul::surface_tid() const {
  return surface_tid_;
}
inline void db_wing_refine_soul::set_surface_tid(::google::protobuf::int32 value) {
  set_has_surface_tid();
  surface_tid_ = value;
}

// optional int32 train_level = 2;
inline bool db_wing_refine_soul::has_train_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_wing_refine_soul::set_has_train_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_wing_refine_soul::clear_has_train_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_wing_refine_soul::clear_train_level() {
  train_level_ = 0;
  clear_has_train_level();
}
inline ::google::protobuf::int32 db_wing_refine_soul::train_level() const {
  return train_level_;
}
inline void db_wing_refine_soul::set_train_level(::google::protobuf::int32 value) {
  set_has_train_level();
  train_level_ = value;
}

// repeated .PB.db_surface_soul souls = 3;
inline int db_wing_refine_soul::souls_size() const {
  return souls_.size();
}
inline void db_wing_refine_soul::clear_souls() {
  souls_.Clear();
}
inline const ::PB::db_surface_soul& db_wing_refine_soul::souls(int index) const {
  return souls_.Get(index);
}
inline ::PB::db_surface_soul* db_wing_refine_soul::mutable_souls(int index) {
  return souls_.Mutable(index);
}
inline ::PB::db_surface_soul* db_wing_refine_soul::add_souls() {
  return souls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul >&
db_wing_refine_soul::souls() const {
  return souls_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_surface_soul >*
db_wing_refine_soul::mutable_souls() {
  return &souls_;
}

// -------------------------------------------------------------------

// db_refine_surfaces

// optional .PB.GPS_TYPE type = 1 [default = GUT_WING_REFINE_SOUL];
inline bool db_refine_surfaces::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_refine_surfaces::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_refine_surfaces::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_refine_surfaces::clear_type() {
  type_ = 26;
  clear_has_type();
}
inline ::PB::GPS_TYPE db_refine_surfaces::type() const {
  return static_cast< ::PB::GPS_TYPE >(type_);
}
inline void db_refine_surfaces::set_type(::PB::GPS_TYPE value) {
  assert(::PB::GPS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.db_wing_refine_soul surfaces = 2;
inline int db_refine_surfaces::surfaces_size() const {
  return surfaces_.size();
}
inline void db_refine_surfaces::clear_surfaces() {
  surfaces_.Clear();
}
inline const ::PB::db_wing_refine_soul& db_refine_surfaces::surfaces(int index) const {
  return surfaces_.Get(index);
}
inline ::PB::db_wing_refine_soul* db_refine_surfaces::mutable_surfaces(int index) {
  return surfaces_.Mutable(index);
}
inline ::PB::db_wing_refine_soul* db_refine_surfaces::add_surfaces() {
  return surfaces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_wing_refine_soul >&
db_refine_surfaces::surfaces() const {
  return surfaces_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_wing_refine_soul >*
db_refine_surfaces::mutable_surfaces() {
  return &surfaces_;
}

// -------------------------------------------------------------------

// db_equip_soul

// optional int32 property_tid = 1;
inline bool db_equip_soul::has_property_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_equip_soul::set_has_property_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_equip_soul::clear_has_property_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_equip_soul::clear_property_tid() {
  property_tid_ = 0;
  clear_has_property_tid();
}
inline ::google::protobuf::int32 db_equip_soul::property_tid() const {
  return property_tid_;
}
inline void db_equip_soul::set_property_tid(::google::protobuf::int32 value) {
  set_has_property_tid();
  property_tid_ = value;
}

// optional int32 exp = 2;
inline bool db_equip_soul::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_equip_soul::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_equip_soul::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_equip_soul::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 db_equip_soul::exp() const {
  return exp_;
}
inline void db_equip_soul::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 level = 3;
inline bool db_equip_soul::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_equip_soul::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_equip_soul::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_equip_soul::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 db_equip_soul::level() const {
  return level_;
}
inline void db_equip_soul::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// db_equip_fixed_data

// optional int32 rank = 1;
inline bool db_equip_fixed_data::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_equip_fixed_data::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_equip_fixed_data::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_equip_fixed_data::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 db_equip_fixed_data::rank() const {
  return rank_;
}
inline void db_equip_fixed_data::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// repeated int32 mingwens = 2;
inline int db_equip_fixed_data::mingwens_size() const {
  return mingwens_.size();
}
inline void db_equip_fixed_data::clear_mingwens() {
  mingwens_.Clear();
}
inline ::google::protobuf::int32 db_equip_fixed_data::mingwens(int index) const {
  return mingwens_.Get(index);
}
inline void db_equip_fixed_data::set_mingwens(int index, ::google::protobuf::int32 value) {
  mingwens_.Set(index, value);
}
inline void db_equip_fixed_data::add_mingwens(::google::protobuf::int32 value) {
  mingwens_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
db_equip_fixed_data::mingwens() const {
  return mingwens_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
db_equip_fixed_data::mutable_mingwens() {
  return &mingwens_;
}

// repeated .PB.db_equip_soul souls = 3;
inline int db_equip_fixed_data::souls_size() const {
  return souls_.size();
}
inline void db_equip_fixed_data::clear_souls() {
  souls_.Clear();
}
inline const ::PB::db_equip_soul& db_equip_fixed_data::souls(int index) const {
  return souls_.Get(index);
}
inline ::PB::db_equip_soul* db_equip_fixed_data::mutable_souls(int index) {
  return souls_.Mutable(index);
}
inline ::PB::db_equip_soul* db_equip_fixed_data::add_souls() {
  return souls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_equip_soul >&
db_equip_fixed_data::souls() const {
  return souls_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_equip_soul >*
db_equip_fixed_data::mutable_souls() {
  return &souls_;
}

// -------------------------------------------------------------------

// db_magic_weapon_property

// optional int32 property_tid = 1;
inline bool db_magic_weapon_property::has_property_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_magic_weapon_property::set_has_property_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_magic_weapon_property::clear_has_property_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_magic_weapon_property::clear_property_tid() {
  property_tid_ = 0;
  clear_has_property_tid();
}
inline ::google::protobuf::int32 db_magic_weapon_property::property_tid() const {
  return property_tid_;
}
inline void db_magic_weapon_property::set_property_tid(::google::protobuf::int32 value) {
  set_has_property_tid();
  property_tid_ = value;
}

// optional int32 exp_value = 2;
inline bool db_magic_weapon_property::has_exp_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_magic_weapon_property::set_has_exp_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_magic_weapon_property::clear_has_exp_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_magic_weapon_property::clear_exp_value() {
  exp_value_ = 0;
  clear_has_exp_value();
}
inline ::google::protobuf::int32 db_magic_weapon_property::exp_value() const {
  return exp_value_;
}
inline void db_magic_weapon_property::set_exp_value(::google::protobuf::int32 value) {
  set_has_exp_value();
  exp_value_ = value;
}

// optional int32 level = 3;
inline bool db_magic_weapon_property::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_magic_weapon_property::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_magic_weapon_property::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_magic_weapon_property::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 db_magic_weapon_property::level() const {
  return level_;
}
inline void db_magic_weapon_property::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 end_time = 4;
inline bool db_magic_weapon_property::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_magic_weapon_property::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_magic_weapon_property::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_magic_weapon_property::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline ::google::protobuf::int32 db_magic_weapon_property::end_time() const {
  return end_time_;
}
inline void db_magic_weapon_property::set_end_time(::google::protobuf::int32 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional int32 multime = 5;
inline bool db_magic_weapon_property::has_multime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_magic_weapon_property::set_has_multime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_magic_weapon_property::clear_has_multime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_magic_weapon_property::clear_multime() {
  multime_ = 0;
  clear_has_multime();
}
inline ::google::protobuf::int32 db_magic_weapon_property::multime() const {
  return multime_;
}
inline void db_magic_weapon_property::set_multime(::google::protobuf::int32 value) {
  set_has_multime();
  multime_ = value;
}

// -------------------------------------------------------------------

// db_magic_weapon_refine_group_refine

// optional int32 train_level = 1;
inline bool db_magic_weapon_refine_group_refine::has_train_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_magic_weapon_refine_group_refine::set_has_train_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_magic_weapon_refine_group_refine::clear_has_train_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_magic_weapon_refine_group_refine::clear_train_level() {
  train_level_ = 0;
  clear_has_train_level();
}
inline ::google::protobuf::int32 db_magic_weapon_refine_group_refine::train_level() const {
  return train_level_;
}
inline void db_magic_weapon_refine_group_refine::set_train_level(::google::protobuf::int32 value) {
  set_has_train_level();
  train_level_ = value;
}

// optional int32 blessing_value = 2;
inline bool db_magic_weapon_refine_group_refine::has_blessing_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_magic_weapon_refine_group_refine::set_has_blessing_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_magic_weapon_refine_group_refine::clear_has_blessing_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_magic_weapon_refine_group_refine::clear_blessing_value() {
  blessing_value_ = 0;
  clear_has_blessing_value();
}
inline ::google::protobuf::int32 db_magic_weapon_refine_group_refine::blessing_value() const {
  return blessing_value_;
}
inline void db_magic_weapon_refine_group_refine::set_blessing_value(::google::protobuf::int32 value) {
  set_has_blessing_value();
  blessing_value_ = value;
}

// -------------------------------------------------------------------

// db_magic_weapon_refine_group

// repeated .PB.db_magic_weapon.refine_group.refine refines = 1;
inline int db_magic_weapon_refine_group::refines_size() const {
  return refines_.size();
}
inline void db_magic_weapon_refine_group::clear_refines() {
  refines_.Clear();
}
inline const ::PB::db_magic_weapon_refine_group_refine& db_magic_weapon_refine_group::refines(int index) const {
  return refines_.Get(index);
}
inline ::PB::db_magic_weapon_refine_group_refine* db_magic_weapon_refine_group::mutable_refines(int index) {
  return refines_.Mutable(index);
}
inline ::PB::db_magic_weapon_refine_group_refine* db_magic_weapon_refine_group::add_refines() {
  return refines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group_refine >&
db_magic_weapon_refine_group::refines() const {
  return refines_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group_refine >*
db_magic_weapon_refine_group::mutable_refines() {
  return &refines_;
}

// -------------------------------------------------------------------

// db_magic_weapon

// optional int32 magic_tid = 1;
inline bool db_magic_weapon::has_magic_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_magic_weapon::set_has_magic_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_magic_weapon::clear_has_magic_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_magic_weapon::clear_magic_tid() {
  magic_tid_ = 0;
  clear_has_magic_tid();
}
inline ::google::protobuf::int32 db_magic_weapon::magic_tid() const {
  return magic_tid_;
}
inline void db_magic_weapon::set_magic_tid(::google::protobuf::int32 value) {
  set_has_magic_tid();
  magic_tid_ = value;
}

// optional bool active = 2;
inline bool db_magic_weapon::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_magic_weapon::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_magic_weapon::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_magic_weapon::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool db_magic_weapon::active() const {
  return active_;
}
inline void db_magic_weapon::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// repeated .PB.db_magic_weapon.property properties = 3;
inline int db_magic_weapon::properties_size() const {
  return properties_.size();
}
inline void db_magic_weapon::clear_properties() {
  properties_.Clear();
}
inline const ::PB::db_magic_weapon_property& db_magic_weapon::properties(int index) const {
  return properties_.Get(index);
}
inline ::PB::db_magic_weapon_property* db_magic_weapon::mutable_properties(int index) {
  return properties_.Mutable(index);
}
inline ::PB::db_magic_weapon_property* db_magic_weapon::add_properties() {
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_property >&
db_magic_weapon::properties() const {
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_property >*
db_magic_weapon::mutable_properties() {
  return &properties_;
}

// repeated .PB.db_magic_weapon.refine_group refine_groups = 4;
inline int db_magic_weapon::refine_groups_size() const {
  return refine_groups_.size();
}
inline void db_magic_weapon::clear_refine_groups() {
  refine_groups_.Clear();
}
inline const ::PB::db_magic_weapon_refine_group& db_magic_weapon::refine_groups(int index) const {
  return refine_groups_.Get(index);
}
inline ::PB::db_magic_weapon_refine_group* db_magic_weapon::mutable_refine_groups(int index) {
  return refine_groups_.Mutable(index);
}
inline ::PB::db_magic_weapon_refine_group* db_magic_weapon::add_refine_groups() {
  return refine_groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group >&
db_magic_weapon::refine_groups() const {
  return refine_groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon_refine_group >*
db_magic_weapon::mutable_refine_groups() {
  return &refine_groups_;
}

// -------------------------------------------------------------------

// db_magic_weapons

// repeated .PB.db_magic_weapon weapons = 1;
inline int db_magic_weapons::weapons_size() const {
  return weapons_.size();
}
inline void db_magic_weapons::clear_weapons() {
  weapons_.Clear();
}
inline const ::PB::db_magic_weapon& db_magic_weapons::weapons(int index) const {
  return weapons_.Get(index);
}
inline ::PB::db_magic_weapon* db_magic_weapons::mutable_weapons(int index) {
  return weapons_.Mutable(index);
}
inline ::PB::db_magic_weapon* db_magic_weapons::add_weapons() {
  return weapons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon >&
db_magic_weapons::weapons() const {
  return weapons_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_magic_weapon >*
db_magic_weapons::mutable_weapons() {
  return &weapons_;
}

// optional int32 summoned_weapon_tid = 2;
inline bool db_magic_weapons::has_summoned_weapon_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_magic_weapons::set_has_summoned_weapon_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_magic_weapons::clear_has_summoned_weapon_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_magic_weapons::clear_summoned_weapon_tid() {
  summoned_weapon_tid_ = 0;
  clear_has_summoned_weapon_tid();
}
inline ::google::protobuf::int32 db_magic_weapons::summoned_weapon_tid() const {
  return summoned_weapon_tid_;
}
inline void db_magic_weapons::set_summoned_weapon_tid(::google::protobuf::int32 value) {
  set_has_summoned_weapon_tid();
  summoned_weapon_tid_ = value;
}

// -------------------------------------------------------------------

// db_general_soul

// optional int32 general_tid = 1;
inline bool db_general_soul::has_general_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_general_soul::set_has_general_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_general_soul::clear_has_general_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_general_soul::clear_general_tid() {
  general_tid_ = 0;
  clear_has_general_tid();
}
inline ::google::protobuf::int32 db_general_soul::general_tid() const {
  return general_tid_;
}
inline void db_general_soul::set_general_tid(::google::protobuf::int32 value) {
  set_has_general_tid();
  general_tid_ = value;
}

// optional int32 level = 2;
inline bool db_general_soul::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_general_soul::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_general_soul::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_general_soul::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 db_general_soul::level() const {
  return level_;
}
inline void db_general_soul::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 experience = 3;
inline bool db_general_soul::has_experience() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_general_soul::set_has_experience() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_general_soul::clear_has_experience() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_general_soul::clear_experience() {
  experience_ = 0;
  clear_has_experience();
}
inline ::google::protobuf::int32 db_general_soul::experience() const {
  return experience_;
}
inline void db_general_soul::set_experience(::google::protobuf::int32 value) {
  set_has_experience();
  experience_ = value;
}

// optional .PB.general_list inventory = 4;
inline bool db_general_soul::has_inventory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_general_soul::set_has_inventory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_general_soul::clear_has_inventory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_general_soul::clear_inventory() {
  if (inventory_ != NULL) inventory_->::PB::general_list::Clear();
  clear_has_inventory();
}
inline const ::PB::general_list& db_general_soul::inventory() const {
  return inventory_ != NULL ? *inventory_ : *default_instance_->inventory_;
}
inline ::PB::general_list* db_general_soul::mutable_inventory() {
  set_has_inventory();
  if (inventory_ == NULL) inventory_ = new ::PB::general_list;
  return inventory_;
}
inline ::PB::general_list* db_general_soul::release_inventory() {
  clear_has_inventory();
  ::PB::general_list* temp = inventory_;
  inventory_ = NULL;
  return temp;
}
inline void db_general_soul::set_allocated_inventory(::PB::general_list* inventory) {
  delete inventory_;
  inventory_ = inventory;
  if (inventory) {
    set_has_inventory();
  } else {
    clear_has_inventory();
  }
}

// optional .PB.general_list soul_holes = 5;
inline bool db_general_soul::has_soul_holes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_general_soul::set_has_soul_holes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_general_soul::clear_has_soul_holes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_general_soul::clear_soul_holes() {
  if (soul_holes_ != NULL) soul_holes_->::PB::general_list::Clear();
  clear_has_soul_holes();
}
inline const ::PB::general_list& db_general_soul::soul_holes() const {
  return soul_holes_ != NULL ? *soul_holes_ : *default_instance_->soul_holes_;
}
inline ::PB::general_list* db_general_soul::mutable_soul_holes() {
  set_has_soul_holes();
  if (soul_holes_ == NULL) soul_holes_ = new ::PB::general_list;
  return soul_holes_;
}
inline ::PB::general_list* db_general_soul::release_soul_holes() {
  clear_has_soul_holes();
  ::PB::general_list* temp = soul_holes_;
  soul_holes_ = NULL;
  return temp;
}
inline void db_general_soul::set_allocated_soul_holes(::PB::general_list* soul_holes) {
  delete soul_holes_;
  soul_holes_ = soul_holes;
  if (soul_holes) {
    set_has_soul_holes();
  } else {
    clear_has_soul_holes();
  }
}

// -------------------------------------------------------------------

// db_general_souls

// repeated .PB.db_general_soul generals = 1;
inline int db_general_souls::generals_size() const {
  return generals_.size();
}
inline void db_general_souls::clear_generals() {
  generals_.Clear();
}
inline const ::PB::db_general_soul& db_general_souls::generals(int index) const {
  return generals_.Get(index);
}
inline ::PB::db_general_soul* db_general_souls::mutable_generals(int index) {
  return generals_.Mutable(index);
}
inline ::PB::db_general_soul* db_general_souls::add_generals() {
  return generals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::db_general_soul >&
db_general_souls::generals() const {
  return generals_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::db_general_soul >*
db_general_souls::mutable_generals() {
  return &generals_;
}

// -------------------------------------------------------------------

// wine_game_history

// optional int32 game_time = 1;
inline bool wine_game_history::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wine_game_history::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wine_game_history::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wine_game_history::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
inline ::google::protobuf::int32 wine_game_history::game_time() const {
  return game_time_;
}
inline void wine_game_history::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
}

// optional int32 mine_status = 2;
inline bool wine_game_history::has_mine_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wine_game_history::set_has_mine_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wine_game_history::clear_has_mine_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wine_game_history::clear_mine_status() {
  mine_status_ = 0;
  clear_has_mine_status();
}
inline ::google::protobuf::int32 wine_game_history::mine_status() const {
  return mine_status_;
}
inline void wine_game_history::set_mine_status(::google::protobuf::int32 value) {
  set_has_mine_status();
  mine_status_ = value;
}

// optional int32 peer_status = 3;
inline bool wine_game_history::has_peer_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wine_game_history::set_has_peer_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wine_game_history::clear_has_peer_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wine_game_history::clear_peer_status() {
  peer_status_ = 0;
  clear_has_peer_status();
}
inline ::google::protobuf::int32 wine_game_history::peer_status() const {
  return peer_status_;
}
inline void wine_game_history::set_peer_status(::google::protobuf::int32 value) {
  set_has_peer_status();
  peer_status_ = value;
}

// optional int32 game_result = 4;
inline bool wine_game_history::has_game_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wine_game_history::set_has_game_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wine_game_history::clear_has_game_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wine_game_history::clear_game_result() {
  game_result_ = 0;
  clear_has_game_result();
}
inline ::google::protobuf::int32 wine_game_history::game_result() const {
  return game_result_;
}
inline void wine_game_history::set_game_result(::google::protobuf::int32 value) {
  set_has_game_result();
  game_result_ = value;
}

// optional .PB.player_id_name peer_info = 5;
inline bool wine_game_history::has_peer_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wine_game_history::set_has_peer_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wine_game_history::clear_has_peer_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wine_game_history::clear_peer_info() {
  if (peer_info_ != NULL) peer_info_->::PB::player_id_name::Clear();
  clear_has_peer_info();
}
inline const ::PB::player_id_name& wine_game_history::peer_info() const {
  return peer_info_ != NULL ? *peer_info_ : *default_instance_->peer_info_;
}
inline ::PB::player_id_name* wine_game_history::mutable_peer_info() {
  set_has_peer_info();
  if (peer_info_ == NULL) peer_info_ = new ::PB::player_id_name;
  return peer_info_;
}
inline ::PB::player_id_name* wine_game_history::release_peer_info() {
  clear_has_peer_info();
  ::PB::player_id_name* temp = peer_info_;
  peer_info_ = NULL;
  return temp;
}
inline void wine_game_history::set_allocated_peer_info(::PB::player_id_name* peer_info) {
  delete peer_info_;
  peer_info_ = peer_info;
  if (peer_info) {
    set_has_peer_info();
  } else {
    clear_has_peer_info();
  }
}

// -------------------------------------------------------------------

// pixiu_service_buy_record

// optional bytes product_id = 1;
inline bool pixiu_service_buy_record::has_product_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pixiu_service_buy_record::set_has_product_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pixiu_service_buy_record::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pixiu_service_buy_record::clear_product_id() {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    product_id_->clear();
  }
  clear_has_product_id();
}
inline const ::std::string& pixiu_service_buy_record::product_id() const {
  return *product_id_;
}
inline void pixiu_service_buy_record::set_product_id(const ::std::string& value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void pixiu_service_buy_record::set_product_id(const char* value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void pixiu_service_buy_record::set_product_id(const void* value, size_t size) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pixiu_service_buy_record::mutable_product_id() {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  return product_id_;
}
inline ::std::string* pixiu_service_buy_record::release_product_id() {
  clear_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = product_id_;
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pixiu_service_buy_record::set_allocated_product_id(::std::string* product_id) {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    delete product_id_;
  }
  if (product_id) {
    set_has_product_id();
    product_id_ = product_id;
  } else {
    clear_has_product_id();
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 counts = 2;
inline bool pixiu_service_buy_record::has_counts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pixiu_service_buy_record::set_has_counts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pixiu_service_buy_record::clear_has_counts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pixiu_service_buy_record::clear_counts() {
  counts_ = 0;
  clear_has_counts();
}
inline ::google::protobuf::int32 pixiu_service_buy_record::counts() const {
  return counts_;
}
inline void pixiu_service_buy_record::set_counts(::google::protobuf::int32 value) {
  set_has_counts();
  counts_ = value;
}

// -------------------------------------------------------------------

// npt_test

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEST];
inline bool npt_test::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_test::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_test::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_test::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_test::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_test::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// npt_response

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RESPONSE];
inline bool npt_response::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_response::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_response::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_response::clear_type() {
  type_ = 3;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_response::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_response::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 retcode = 2;
inline bool npt_response::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_response::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_response::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_response::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_response::retcode() const {
  return retcode_;
}
inline void npt_response::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional int32 request_type = 3;
inline bool npt_response::has_request_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_response::set_has_request_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_response::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_response::clear_request_type() {
  request_type_ = 0;
  clear_has_request_type();
}
inline ::google::protobuf::int32 npt_response::request_type() const {
  return request_type_;
}
inline void npt_response::set_request_type(::google::protobuf::int32 value) {
  set_has_request_type();
  request_type_ = value;
}

// optional int32 param1 = 4;
inline bool npt_response::has_param1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_response::set_has_param1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_response::clear_has_param1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_response::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 npt_response::param1() const {
  return param1_;
}
inline void npt_response::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
}

// -------------------------------------------------------------------

// npt_corps_appoint

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_APPOINT];
inline bool npt_corps_appoint::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_corps_appoint::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_corps_appoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_corps_appoint::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_corps_appoint::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_corps_appoint::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 dst = 2;
inline bool npt_corps_appoint::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_corps_appoint::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_corps_appoint::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_corps_appoint::clear_dst() {
  dst_ = GOOGLE_LONGLONG(0);
  clear_has_dst();
}
inline ::google::protobuf::int64 npt_corps_appoint::dst() const {
  return dst_;
}
inline void npt_corps_appoint::set_dst(::google::protobuf::int64 value) {
  set_has_dst();
  dst_ = value;
}

// required .PB.npt_corps_appoint.CORPS_APPOINT_OP op = 3;
inline bool npt_corps_appoint::has_op() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_corps_appoint::set_has_op() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_corps_appoint::clear_has_op() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_corps_appoint::clear_op() {
  op_ = 1;
  clear_has_op();
}
inline ::PB::npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::op() const {
  return static_cast< ::PB::npt_corps_appoint_CORPS_APPOINT_OP >(op_);
}
inline void npt_corps_appoint::set_op(::PB::npt_corps_appoint_CORPS_APPOINT_OP value) {
  assert(::PB::npt_corps_appoint_CORPS_APPOINT_OP_IsValid(value));
  set_has_op();
  op_ = value;
}

// optional int32 pos = 4;
inline bool npt_corps_appoint::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_corps_appoint::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_corps_appoint::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_corps_appoint::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 npt_corps_appoint::pos() const {
  return pos_;
}
inline void npt_corps_appoint::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional bytes announce = 5;
inline bool npt_corps_appoint::has_announce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_corps_appoint::set_has_announce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_corps_appoint::clear_has_announce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_corps_appoint::clear_announce() {
  if (announce_ != &::google::protobuf::internal::kEmptyString) {
    announce_->clear();
  }
  clear_has_announce();
}
inline const ::std::string& npt_corps_appoint::announce() const {
  return *announce_;
}
inline void npt_corps_appoint::set_announce(const ::std::string& value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
}
inline void npt_corps_appoint::set_announce(const char* value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
}
inline void npt_corps_appoint::set_announce(const void* value, size_t size) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  announce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_corps_appoint::mutable_announce() {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    announce_ = new ::std::string;
  }
  return announce_;
}
inline ::std::string* npt_corps_appoint::release_announce() {
  clear_has_announce();
  if (announce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = announce_;
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_corps_appoint::set_allocated_announce(::std::string* announce) {
  if (announce_ != &::google::protobuf::internal::kEmptyString) {
    delete announce_;
  }
  if (announce) {
    set_has_announce();
    announce_ = announce;
  } else {
    clear_has_announce();
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes srcname = 6;
inline bool npt_corps_appoint::has_srcname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_corps_appoint::set_has_srcname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_corps_appoint::clear_has_srcname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_corps_appoint::clear_srcname() {
  if (srcname_ != &::google::protobuf::internal::kEmptyString) {
    srcname_->clear();
  }
  clear_has_srcname();
}
inline const ::std::string& npt_corps_appoint::srcname() const {
  return *srcname_;
}
inline void npt_corps_appoint::set_srcname(const ::std::string& value) {
  set_has_srcname();
  if (srcname_ == &::google::protobuf::internal::kEmptyString) {
    srcname_ = new ::std::string;
  }
  srcname_->assign(value);
}
inline void npt_corps_appoint::set_srcname(const char* value) {
  set_has_srcname();
  if (srcname_ == &::google::protobuf::internal::kEmptyString) {
    srcname_ = new ::std::string;
  }
  srcname_->assign(value);
}
inline void npt_corps_appoint::set_srcname(const void* value, size_t size) {
  set_has_srcname();
  if (srcname_ == &::google::protobuf::internal::kEmptyString) {
    srcname_ = new ::std::string;
  }
  srcname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_corps_appoint::mutable_srcname() {
  set_has_srcname();
  if (srcname_ == &::google::protobuf::internal::kEmptyString) {
    srcname_ = new ::std::string;
  }
  return srcname_;
}
inline ::std::string* npt_corps_appoint::release_srcname() {
  clear_has_srcname();
  if (srcname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = srcname_;
    srcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_corps_appoint::set_allocated_srcname(::std::string* srcname) {
  if (srcname_ != &::google::protobuf::internal::kEmptyString) {
    delete srcname_;
  }
  if (srcname) {
    set_has_srcname();
    srcname_ = srcname;
  } else {
    clear_has_srcname();
    srcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes dstname = 7;
inline bool npt_corps_appoint::has_dstname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_corps_appoint::set_has_dstname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_corps_appoint::clear_has_dstname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_corps_appoint::clear_dstname() {
  if (dstname_ != &::google::protobuf::internal::kEmptyString) {
    dstname_->clear();
  }
  clear_has_dstname();
}
inline const ::std::string& npt_corps_appoint::dstname() const {
  return *dstname_;
}
inline void npt_corps_appoint::set_dstname(const ::std::string& value) {
  set_has_dstname();
  if (dstname_ == &::google::protobuf::internal::kEmptyString) {
    dstname_ = new ::std::string;
  }
  dstname_->assign(value);
}
inline void npt_corps_appoint::set_dstname(const char* value) {
  set_has_dstname();
  if (dstname_ == &::google::protobuf::internal::kEmptyString) {
    dstname_ = new ::std::string;
  }
  dstname_->assign(value);
}
inline void npt_corps_appoint::set_dstname(const void* value, size_t size) {
  set_has_dstname();
  if (dstname_ == &::google::protobuf::internal::kEmptyString) {
    dstname_ = new ::std::string;
  }
  dstname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_corps_appoint::mutable_dstname() {
  set_has_dstname();
  if (dstname_ == &::google::protobuf::internal::kEmptyString) {
    dstname_ = new ::std::string;
  }
  return dstname_;
}
inline ::std::string* npt_corps_appoint::release_dstname() {
  clear_has_dstname();
  if (dstname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dstname_;
    dstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_corps_appoint::set_allocated_dstname(::std::string* dstname) {
  if (dstname_ != &::google::protobuf::internal::kEmptyString) {
    delete dstname_;
  }
  if (dstname) {
    set_has_dstname();
    dstname_ = dstname;
  } else {
    clear_has_dstname();
    dstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 src = 8;
inline bool npt_corps_appoint::has_src() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_corps_appoint::set_has_src() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_corps_appoint::clear_has_src() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_corps_appoint::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 npt_corps_appoint::src() const {
  return src_;
}
inline void npt_corps_appoint::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
}

// optional bytes corpsname = 9;
inline bool npt_corps_appoint::has_corpsname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void npt_corps_appoint::set_has_corpsname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void npt_corps_appoint::clear_has_corpsname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void npt_corps_appoint::clear_corpsname() {
  if (corpsname_ != &::google::protobuf::internal::kEmptyString) {
    corpsname_->clear();
  }
  clear_has_corpsname();
}
inline const ::std::string& npt_corps_appoint::corpsname() const {
  return *corpsname_;
}
inline void npt_corps_appoint::set_corpsname(const ::std::string& value) {
  set_has_corpsname();
  if (corpsname_ == &::google::protobuf::internal::kEmptyString) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void npt_corps_appoint::set_corpsname(const char* value) {
  set_has_corpsname();
  if (corpsname_ == &::google::protobuf::internal::kEmptyString) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void npt_corps_appoint::set_corpsname(const void* value, size_t size) {
  set_has_corpsname();
  if (corpsname_ == &::google::protobuf::internal::kEmptyString) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_corps_appoint::mutable_corpsname() {
  set_has_corpsname();
  if (corpsname_ == &::google::protobuf::internal::kEmptyString) {
    corpsname_ = new ::std::string;
  }
  return corpsname_;
}
inline ::std::string* npt_corps_appoint::release_corpsname() {
  clear_has_corpsname();
  if (corpsname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = corpsname_;
    corpsname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_corps_appoint::set_allocated_corpsname(::std::string* corpsname) {
  if (corpsname_ != &::google::protobuf::internal::kEmptyString) {
    delete corpsname_;
  }
  if (corpsname) {
    set_has_corpsname();
    corpsname_ = corpsname;
  } else {
    clear_has_corpsname();
    corpsname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PB.corps_member member = 10;
inline bool npt_corps_appoint::has_member() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void npt_corps_appoint::set_has_member() {
  _has_bits_[0] |= 0x00000200u;
}
inline void npt_corps_appoint::clear_has_member() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void npt_corps_appoint::clear_member() {
  if (member_ != NULL) member_->::PB::corps_member::Clear();
  clear_has_member();
}
inline const ::PB::corps_member& npt_corps_appoint::member() const {
  return member_ != NULL ? *member_ : *default_instance_->member_;
}
inline ::PB::corps_member* npt_corps_appoint::mutable_member() {
  set_has_member();
  if (member_ == NULL) member_ = new ::PB::corps_member;
  return member_;
}
inline ::PB::corps_member* npt_corps_appoint::release_member() {
  clear_has_member();
  ::PB::corps_member* temp = member_;
  member_ = NULL;
  return temp;
}
inline void npt_corps_appoint::set_allocated_member(::PB::corps_member* member) {
  delete member_;
  member_ = member;
  if (member) {
    set_has_member();
  } else {
    clear_has_member();
  }
}

// optional int64 contri_money = 11;
inline bool npt_corps_appoint::has_contri_money() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void npt_corps_appoint::set_has_contri_money() {
  _has_bits_[0] |= 0x00000400u;
}
inline void npt_corps_appoint::clear_has_contri_money() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void npt_corps_appoint::clear_contri_money() {
  contri_money_ = GOOGLE_LONGLONG(0);
  clear_has_contri_money();
}
inline ::google::protobuf::int64 npt_corps_appoint::contri_money() const {
  return contri_money_;
}
inline void npt_corps_appoint::set_contri_money(::google::protobuf::int64 value) {
  set_has_contri_money();
  contri_money_ = value;
}

// optional int64 cur_money = 12;
inline bool npt_corps_appoint::has_cur_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void npt_corps_appoint::set_has_cur_money() {
  _has_bits_[0] |= 0x00000800u;
}
inline void npt_corps_appoint::clear_has_cur_money() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void npt_corps_appoint::clear_cur_money() {
  cur_money_ = GOOGLE_LONGLONG(0);
  clear_has_cur_money();
}
inline ::google::protobuf::int64 npt_corps_appoint::cur_money() const {
  return cur_money_;
}
inline void npt_corps_appoint::set_cur_money(::google::protobuf::int64 value) {
  set_has_cur_money();
  cur_money_ = value;
}

// optional uint32 skill_level = 13;
inline bool npt_corps_appoint::has_skill_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void npt_corps_appoint::set_has_skill_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void npt_corps_appoint::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void npt_corps_appoint::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
inline ::google::protobuf::uint32 npt_corps_appoint::skill_level() const {
  return skill_level_;
}
inline void npt_corps_appoint::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// optional uint32 skill_index = 14;
inline bool npt_corps_appoint::has_skill_index() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void npt_corps_appoint::set_has_skill_index() {
  _has_bits_[0] |= 0x00002000u;
}
inline void npt_corps_appoint::clear_has_skill_index() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void npt_corps_appoint::clear_skill_index() {
  skill_index_ = 0u;
  clear_has_skill_index();
}
inline ::google::protobuf::uint32 npt_corps_appoint::skill_index() const {
  return skill_index_;
}
inline void npt_corps_appoint::set_skill_index(::google::protobuf::uint32 value) {
  set_has_skill_index();
  skill_index_ = value;
}

// optional uint32 corps_id = 15;
inline bool npt_corps_appoint::has_corps_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void npt_corps_appoint::set_has_corps_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void npt_corps_appoint::clear_has_corps_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void npt_corps_appoint::clear_corps_id() {
  corps_id_ = 0u;
  clear_has_corps_id();
}
inline ::google::protobuf::uint32 npt_corps_appoint::corps_id() const {
  return corps_id_;
}
inline void npt_corps_appoint::set_corps_id(::google::protobuf::uint32 value) {
  set_has_corps_id();
  corps_id_ = value;
}

// optional .PB.corp_attribute attr = 16;
inline bool npt_corps_appoint::has_attr() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void npt_corps_appoint::set_has_attr() {
  _has_bits_[0] |= 0x00008000u;
}
inline void npt_corps_appoint::clear_has_attr() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void npt_corps_appoint::clear_attr() {
  if (attr_ != NULL) attr_->::PB::corp_attribute::Clear();
  clear_has_attr();
}
inline const ::PB::corp_attribute& npt_corps_appoint::attr() const {
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::PB::corp_attribute* npt_corps_appoint::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::PB::corp_attribute;
  return attr_;
}
inline ::PB::corp_attribute* npt_corps_appoint::release_attr() {
  clear_has_attr();
  ::PB::corp_attribute* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void npt_corps_appoint::set_allocated_attr(::PB::corp_attribute* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    set_has_attr();
  } else {
    clear_has_attr();
  }
}

// optional int32 tid = 17;
inline bool npt_corps_appoint::has_tid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void npt_corps_appoint::set_has_tid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void npt_corps_appoint::clear_has_tid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void npt_corps_appoint::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 npt_corps_appoint::tid() const {
  return tid_;
}
inline void npt_corps_appoint::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 index = 18;
inline bool npt_corps_appoint::has_index() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void npt_corps_appoint::set_has_index() {
  _has_bits_[0] |= 0x00020000u;
}
inline void npt_corps_appoint::clear_has_index() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void npt_corps_appoint::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 npt_corps_appoint::index() const {
  return index_;
}
inline void npt_corps_appoint::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int64 money = 19;
inline bool npt_corps_appoint::has_money() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void npt_corps_appoint::set_has_money() {
  _has_bits_[0] |= 0x00040000u;
}
inline void npt_corps_appoint::clear_has_money() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void npt_corps_appoint::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 npt_corps_appoint::money() const {
  return money_;
}
inline void npt_corps_appoint::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// npt_apply_corps

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_APPLY_CORPS];
inline bool npt_apply_corps::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_apply_corps::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_apply_corps::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_apply_corps::clear_type() {
  type_ = 4;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_apply_corps::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_apply_corps::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 id = 2;
inline bool npt_apply_corps::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_apply_corps::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_apply_corps::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_apply_corps::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 npt_apply_corps::id() const {
  return id_;
}
inline void npt_apply_corps::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .PB.corps_apply_t apply = 3;
inline bool npt_apply_corps::has_apply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_apply_corps::set_has_apply() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_apply_corps::clear_has_apply() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_apply_corps::clear_apply() {
  if (apply_ != NULL) apply_->::PB::corps_apply_t::Clear();
  clear_has_apply();
}
inline const ::PB::corps_apply_t& npt_apply_corps::apply() const {
  return apply_ != NULL ? *apply_ : *default_instance_->apply_;
}
inline ::PB::corps_apply_t* npt_apply_corps::mutable_apply() {
  set_has_apply();
  if (apply_ == NULL) apply_ = new ::PB::corps_apply_t;
  return apply_;
}
inline ::PB::corps_apply_t* npt_apply_corps::release_apply() {
  clear_has_apply();
  ::PB::corps_apply_t* temp = apply_;
  apply_ = NULL;
  return temp;
}
inline void npt_apply_corps::set_allocated_apply(::PB::corps_apply_t* apply) {
  delete apply_;
  apply_ = apply;
  if (apply) {
    set_has_apply();
  } else {
    clear_has_apply();
  }
}

// -------------------------------------------------------------------

// npt_corps_data

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_DATA];
inline bool npt_corps_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_corps_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_corps_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_corps_data::clear_type() {
  type_ = 5;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_corps_data::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_corps_data::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.corps_struct data = 2;
inline bool npt_corps_data::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_corps_data::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_corps_data::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_corps_data::clear_data() {
  if (data_ != NULL) data_->::PB::corps_struct::Clear();
  clear_has_data();
}
inline const ::PB::corps_struct& npt_corps_data::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::PB::corps_struct* npt_corps_data::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::PB::corps_struct;
  return data_;
}
inline ::PB::corps_struct* npt_corps_data::release_data() {
  clear_has_data();
  ::PB::corps_struct* temp = data_;
  data_ = NULL;
  return temp;
}
inline void npt_corps_data::set_allocated_data(::PB::corps_struct* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// repeated .PB.corps_member members = 3;
inline int npt_corps_data::members_size() const {
  return members_.size();
}
inline void npt_corps_data::clear_members() {
  members_.Clear();
}
inline const ::PB::corps_member& npt_corps_data::members(int index) const {
  return members_.Get(index);
}
inline ::PB::corps_member* npt_corps_data::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::PB::corps_member* npt_corps_data::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::corps_member >&
npt_corps_data::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::corps_member >*
npt_corps_data::mutable_members() {
  return &members_;
}

// optional int32 members_count = 4;
inline bool npt_corps_data::has_members_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_corps_data::set_has_members_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_corps_data::clear_has_members_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_corps_data::clear_members_count() {
  members_count_ = 0;
  clear_has_members_count();
}
inline ::google::protobuf::int32 npt_corps_data::members_count() const {
  return members_count_;
}
inline void npt_corps_data::set_members_count(::google::protobuf::int32 value) {
  set_has_members_count();
  members_count_ = value;
}

// -------------------------------------------------------------------

// name_ruid

// required uint64 id = 1;
inline bool name_ruid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void name_ruid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void name_ruid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void name_ruid::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 name_ruid::id() const {
  return id_;
}
inline void name_ruid::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool name_ruid::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void name_ruid::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void name_ruid::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void name_ruid::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& name_ruid::name() const {
  return *name_;
}
inline void name_ruid::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void name_ruid::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void name_ruid::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* name_ruid::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* name_ruid::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void name_ruid::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_common_search_search_corps_key

// required bool has_value = 1 [default = false];
inline bool npt_common_search_search_corps_key::has_has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_common_search_search_corps_key::set_has_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_common_search_search_corps_key::clear_has_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_common_search_search_corps_key::clear_has_value() {
  has_value_ = false;
  clear_has_has_value();
}
inline bool npt_common_search_search_corps_key::has_value() const {
  return has_value_;
}
inline void npt_common_search_search_corps_key::set_has_value(bool value) {
  set_has_has_value();
  has_value_ = value;
}

// optional int32 level = 2;
inline bool npt_common_search_search_corps_key::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_common_search_search_corps_key::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_common_search_search_corps_key::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_common_search_search_corps_key::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 npt_common_search_search_corps_key::level() const {
  return level_;
}
inline void npt_common_search_search_corps_key::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 nation = 3;
inline bool npt_common_search_search_corps_key::has_nation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_common_search_search_corps_key::set_has_nation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_common_search_search_corps_key::clear_has_nation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_common_search_search_corps_key::clear_nation() {
  nation_ = 0;
  clear_has_nation();
}
inline ::google::protobuf::int32 npt_common_search_search_corps_key::nation() const {
  return nation_;
}
inline void npt_common_search_search_corps_key::set_nation(::google::protobuf::int32 value) {
  set_has_nation();
  nation_ = value;
}

// optional bytes name = 4;
inline bool npt_common_search_search_corps_key::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_common_search_search_corps_key::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_common_search_search_corps_key::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_common_search_search_corps_key::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npt_common_search_search_corps_key::name() const {
  return *name_;
}
inline void npt_common_search_search_corps_key::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_common_search_search_corps_key::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_common_search_search_corps_key::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_common_search_search_corps_key::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npt_common_search_search_corps_key::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_common_search_search_corps_key::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_common_search_search_player_key

// required bytes name = 1;
inline bool npt_common_search_search_player_key::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_common_search_search_player_key::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_common_search_search_player_key::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_common_search_search_player_key::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npt_common_search_search_player_key::name() const {
  return *name_;
}
inline void npt_common_search_search_player_key::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_common_search_search_player_key::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_common_search_search_player_key::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_common_search_search_player_key::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npt_common_search_search_player_key::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_common_search_search_player_key::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 nation = 2;
inline bool npt_common_search_search_player_key::has_nation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_common_search_search_player_key::set_has_nation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_common_search_search_player_key::clear_has_nation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_common_search_search_player_key::clear_nation() {
  nation_ = 0;
  clear_has_nation();
}
inline ::google::protobuf::int32 npt_common_search_search_player_key::nation() const {
  return nation_;
}
inline void npt_common_search_search_player_key::set_nation(::google::protobuf::int32 value) {
  set_has_nation();
  nation_ = value;
}

// optional bool is_online = 3;
inline bool npt_common_search_search_player_key::has_is_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_common_search_search_player_key::set_has_is_online() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_common_search_search_player_key::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_common_search_search_player_key::clear_is_online() {
  is_online_ = false;
  clear_has_is_online();
}
inline bool npt_common_search_search_player_key::is_online() const {
  return is_online_;
}
inline void npt_common_search_search_player_key::set_is_online(bool value) {
  set_has_is_online();
  is_online_ = value;
}

// -------------------------------------------------------------------

// npt_common_search

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_COMMON_SEARCH];
inline bool npt_common_search::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_common_search::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_common_search::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_common_search::clear_type() {
  type_ = 6;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_common_search::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_common_search::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 pos = 3;
inline bool npt_common_search::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_common_search::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_common_search::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_common_search::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 npt_common_search::pos() const {
  return pos_;
}
inline void npt_common_search::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// required uint32 len = 4;
inline bool npt_common_search::has_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_common_search::set_has_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_common_search::clear_has_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_common_search::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 npt_common_search::len() const {
  return len_;
}
inline void npt_common_search::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
}

// optional .PB.npt_common_search.search_corps_key corps_key = 5;
inline bool npt_common_search::has_corps_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_common_search::set_has_corps_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_common_search::clear_has_corps_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_common_search::clear_corps_key() {
  if (corps_key_ != NULL) corps_key_->::PB::npt_common_search_search_corps_key::Clear();
  clear_has_corps_key();
}
inline const ::PB::npt_common_search_search_corps_key& npt_common_search::corps_key() const {
  return corps_key_ != NULL ? *corps_key_ : *default_instance_->corps_key_;
}
inline ::PB::npt_common_search_search_corps_key* npt_common_search::mutable_corps_key() {
  set_has_corps_key();
  if (corps_key_ == NULL) corps_key_ = new ::PB::npt_common_search_search_corps_key;
  return corps_key_;
}
inline ::PB::npt_common_search_search_corps_key* npt_common_search::release_corps_key() {
  clear_has_corps_key();
  ::PB::npt_common_search_search_corps_key* temp = corps_key_;
  corps_key_ = NULL;
  return temp;
}
inline void npt_common_search::set_allocated_corps_key(::PB::npt_common_search_search_corps_key* corps_key) {
  delete corps_key_;
  corps_key_ = corps_key;
  if (corps_key) {
    set_has_corps_key();
  } else {
    clear_has_corps_key();
  }
}

// optional int32 retcode = 6;
inline bool npt_common_search::has_retcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_common_search::set_has_retcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_common_search::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_common_search::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_common_search::retcode() const {
  return retcode_;
}
inline void npt_common_search::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional int32 total_count = 7;
inline bool npt_common_search::has_total_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_common_search::set_has_total_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_common_search::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_common_search::clear_total_count() {
  total_count_ = 0;
  clear_has_total_count();
}
inline ::google::protobuf::int32 npt_common_search::total_count() const {
  return total_count_;
}
inline void npt_common_search::set_total_count(::google::protobuf::int32 value) {
  set_has_total_count();
  total_count_ = value;
}

// repeated .PB.npt_corps_data corps = 8;
inline int npt_common_search::corps_size() const {
  return corps_.size();
}
inline void npt_common_search::clear_corps() {
  corps_.Clear();
}
inline const ::PB::npt_corps_data& npt_common_search::corps(int index) const {
  return corps_.Get(index);
}
inline ::PB::npt_corps_data* npt_common_search::mutable_corps(int index) {
  return corps_.Mutable(index);
}
inline ::PB::npt_corps_data* npt_common_search::add_corps() {
  return corps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_corps_data >&
npt_common_search::corps() const {
  return corps_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::npt_corps_data >*
npt_common_search::mutable_corps() {
  return &corps_;
}

// optional .PB.npt_common_search.search_player_key player_key = 9;
inline bool npt_common_search::has_player_key() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_common_search::set_has_player_key() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_common_search::clear_has_player_key() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_common_search::clear_player_key() {
  if (player_key_ != NULL) player_key_->::PB::npt_common_search_search_player_key::Clear();
  clear_has_player_key();
}
inline const ::PB::npt_common_search_search_player_key& npt_common_search::player_key() const {
  return player_key_ != NULL ? *player_key_ : *default_instance_->player_key_;
}
inline ::PB::npt_common_search_search_player_key* npt_common_search::mutable_player_key() {
  set_has_player_key();
  if (player_key_ == NULL) player_key_ = new ::PB::npt_common_search_search_player_key;
  return player_key_;
}
inline ::PB::npt_common_search_search_player_key* npt_common_search::release_player_key() {
  clear_has_player_key();
  ::PB::npt_common_search_search_player_key* temp = player_key_;
  player_key_ = NULL;
  return temp;
}
inline void npt_common_search::set_allocated_player_key(::PB::npt_common_search_search_player_key* player_key) {
  delete player_key_;
  player_key_ = player_key;
  if (player_key) {
    set_has_player_key();
  } else {
    clear_has_player_key();
  }
}

// repeated .PB.name_ruid players = 10;
inline int npt_common_search::players_size() const {
  return players_.size();
}
inline void npt_common_search::clear_players() {
  players_.Clear();
}
inline const ::PB::name_ruid& npt_common_search::players(int index) const {
  return players_.Get(index);
}
inline ::PB::name_ruid* npt_common_search::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::PB::name_ruid* npt_common_search::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::name_ruid >&
npt_common_search::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::name_ruid >*
npt_common_search::mutable_players() {
  return &players_;
}

// optional int32 search_time = 11;
inline bool npt_common_search::has_search_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void npt_common_search::set_has_search_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void npt_common_search::clear_has_search_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void npt_common_search::clear_search_time() {
  search_time_ = 0;
  clear_has_search_time();
}
inline ::google::protobuf::int32 npt_common_search::search_time() const {
  return search_time_;
}
inline void npt_common_search::set_search_time(::google::protobuf::int32 value) {
  set_has_search_time();
  search_time_ = value;
}

// -------------------------------------------------------------------

// npt_zhaojiling

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ZHAOJILING];
inline bool npt_zhaojiling::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_zhaojiling::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_zhaojiling::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_zhaojiling::clear_type() {
  type_ = 7;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_zhaojiling::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_zhaojiling::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.zhaojiling_info baseinfo = 2;
inline bool npt_zhaojiling::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_zhaojiling::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_zhaojiling::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_zhaojiling::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::PB::zhaojiling_info::Clear();
  clear_has_baseinfo();
}
inline const ::PB::zhaojiling_info& npt_zhaojiling::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::PB::zhaojiling_info* npt_zhaojiling::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::PB::zhaojiling_info;
  return baseinfo_;
}
inline ::PB::zhaojiling_info* npt_zhaojiling::release_baseinfo() {
  clear_has_baseinfo();
  ::PB::zhaojiling_info* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void npt_zhaojiling::set_allocated_baseinfo(::PB::zhaojiling_info* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// -------------------------------------------------------------------

// npt_sync_mirror_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_MIRROR_INFO];
inline bool npt_sync_mirror_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_sync_mirror_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_sync_mirror_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_sync_mirror_info::clear_type() {
  type_ = 8;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_sync_mirror_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_sync_mirror_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.ipt_mirror_info infos = 2;
inline int npt_sync_mirror_info::infos_size() const {
  return infos_.size();
}
inline void npt_sync_mirror_info::clear_infos() {
  infos_.Clear();
}
inline const ::PB::ipt_mirror_info& npt_sync_mirror_info::infos(int index) const {
  return infos_.Get(index);
}
inline ::PB::ipt_mirror_info* npt_sync_mirror_info::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::PB::ipt_mirror_info* npt_sync_mirror_info::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ipt_mirror_info >&
npt_sync_mirror_info::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ipt_mirror_info >*
npt_sync_mirror_info::mutable_infos() {
  return &infos_;
}

// optional uint32 state_mask = 3;
inline bool npt_sync_mirror_info::has_state_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_sync_mirror_info::set_has_state_mask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_sync_mirror_info::clear_has_state_mask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_sync_mirror_info::clear_state_mask() {
  state_mask_ = 0u;
  clear_has_state_mask();
}
inline ::google::protobuf::uint32 npt_sync_mirror_info::state_mask() const {
  return state_mask_;
}
inline void npt_sync_mirror_info::set_state_mask(::google::protobuf::uint32 value) {
  set_has_state_mask();
  state_mask_ = value;
}

// -------------------------------------------------------------------

// npt_sync_nation_war_info_nwar_npc_info

// required uint32 npc_tid = 1;
inline bool npt_sync_nation_war_info_nwar_npc_info::has_npc_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_has_npc_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_has_npc_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_npc_tid() {
  npc_tid_ = 0u;
  clear_has_npc_tid();
}
inline ::google::protobuf::uint32 npt_sync_nation_war_info_nwar_npc_info::npc_tid() const {
  return npc_tid_;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_npc_tid(::google::protobuf::uint32 value) {
  set_has_npc_tid();
  npc_tid_ = value;
}

// required uint32 npc_nation = 2;
inline bool npt_sync_nation_war_info_nwar_npc_info::has_npc_nation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_has_npc_nation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_has_npc_nation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_npc_nation() {
  npc_nation_ = 0u;
  clear_has_npc_nation();
}
inline ::google::protobuf::uint32 npt_sync_nation_war_info_nwar_npc_info::npc_nation() const {
  return npc_nation_;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_npc_nation(::google::protobuf::uint32 value) {
  set_has_npc_nation();
  npc_nation_ = value;
}

// required uint32 npc_hp = 3;
inline bool npt_sync_nation_war_info_nwar_npc_info::has_npc_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_has_npc_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_has_npc_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_npc_hp() {
  npc_hp_ = 0u;
  clear_has_npc_hp();
}
inline ::google::protobuf::uint32 npt_sync_nation_war_info_nwar_npc_info::npc_hp() const {
  return npc_hp_;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_npc_hp(::google::protobuf::uint32 value) {
  set_has_npc_hp();
  npc_hp_ = value;
}

// required uint32 npc_born = 4;
inline bool npt_sync_nation_war_info_nwar_npc_info::has_npc_born() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_has_npc_born() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_has_npc_born() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_sync_nation_war_info_nwar_npc_info::clear_npc_born() {
  npc_born_ = 0u;
  clear_has_npc_born();
}
inline ::google::protobuf::uint32 npt_sync_nation_war_info_nwar_npc_info::npc_born() const {
  return npc_born_;
}
inline void npt_sync_nation_war_info_nwar_npc_info::set_npc_born(::google::protobuf::uint32 value) {
  set_has_npc_born();
  npc_born_ = value;
}

// -------------------------------------------------------------------

// npt_sync_nation_war_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_NATION_WAR_INFO];
inline bool npt_sync_nation_war_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_sync_nation_war_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_sync_nation_war_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_sync_nation_war_info::clear_type() {
  type_ = 9;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_sync_nation_war_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_sync_nation_war_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 war_end_time = 2;
inline bool npt_sync_nation_war_info::has_war_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_sync_nation_war_info::set_has_war_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_sync_nation_war_info::clear_has_war_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_sync_nation_war_info::clear_war_end_time() {
  war_end_time_ = 0u;
  clear_has_war_end_time();
}
inline ::google::protobuf::uint32 npt_sync_nation_war_info::war_end_time() const {
  return war_end_time_;
}
inline void npt_sync_nation_war_info::set_war_end_time(::google::protobuf::uint32 value) {
  set_has_war_end_time();
  war_end_time_ = value;
}

// repeated .PB.npt_sync_nation_war_info.nwar_npc_info npc_info = 3;
inline int npt_sync_nation_war_info::npc_info_size() const {
  return npc_info_.size();
}
inline void npt_sync_nation_war_info::clear_npc_info() {
  npc_info_.Clear();
}
inline const ::PB::npt_sync_nation_war_info_nwar_npc_info& npt_sync_nation_war_info::npc_info(int index) const {
  return npc_info_.Get(index);
}
inline ::PB::npt_sync_nation_war_info_nwar_npc_info* npt_sync_nation_war_info::mutable_npc_info(int index) {
  return npc_info_.Mutable(index);
}
inline ::PB::npt_sync_nation_war_info_nwar_npc_info* npt_sync_nation_war_info::add_npc_info() {
  return npc_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_sync_nation_war_info_nwar_npc_info >&
npt_sync_nation_war_info::npc_info() const {
  return npc_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::npt_sync_nation_war_info_nwar_npc_info >*
npt_sync_nation_war_info::mutable_npc_info() {
  return &npc_info_;
}

// optional uint32 wangcheng_revive_faction = 4;
inline bool npt_sync_nation_war_info::has_wangcheng_revive_faction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_sync_nation_war_info::set_has_wangcheng_revive_faction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_sync_nation_war_info::clear_has_wangcheng_revive_faction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_sync_nation_war_info::clear_wangcheng_revive_faction() {
  wangcheng_revive_faction_ = 0u;
  clear_has_wangcheng_revive_faction();
}
inline ::google::protobuf::uint32 npt_sync_nation_war_info::wangcheng_revive_faction() const {
  return wangcheng_revive_faction_;
}
inline void npt_sync_nation_war_info::set_wangcheng_revive_faction(::google::protobuf::uint32 value) {
  set_has_wangcheng_revive_faction();
  wangcheng_revive_faction_ = value;
}

// -------------------------------------------------------------------

// npt_get_corp_name

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_CORP_NAME];
inline bool npt_get_corp_name::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_get_corp_name::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_get_corp_name::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_get_corp_name::clear_type() {
  type_ = 11;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_get_corp_name::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_get_corp_name::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 corp_id = 2;
inline bool npt_get_corp_name::has_corp_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_get_corp_name::set_has_corp_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_get_corp_name::clear_has_corp_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_get_corp_name::clear_corp_id() {
  corp_id_ = 0u;
  clear_has_corp_id();
}
inline ::google::protobuf::uint32 npt_get_corp_name::corp_id() const {
  return corp_id_;
}
inline void npt_get_corp_name::set_corp_id(::google::protobuf::uint32 value) {
  set_has_corp_id();
  corp_id_ = value;
}

// optional bytes name = 3;
inline bool npt_get_corp_name::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_get_corp_name::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_get_corp_name::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_get_corp_name::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npt_get_corp_name::name() const {
  return *name_;
}
inline void npt_get_corp_name::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_get_corp_name::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_get_corp_name::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_get_corp_name::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npt_get_corp_name::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_get_corp_name::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_nation_war_operate

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE];
inline bool npt_nation_war_operate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_war_operate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_war_operate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_war_operate::clear_type() {
  type_ = 10;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_war_operate::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_war_operate::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 oper_type = 2;
inline bool npt_nation_war_operate::has_oper_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_war_operate::set_has_oper_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_war_operate::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_war_operate::clear_oper_type() {
  oper_type_ = 0u;
  clear_has_oper_type();
}
inline ::google::protobuf::uint32 npt_nation_war_operate::oper_type() const {
  return oper_type_;
}
inline void npt_nation_war_operate::set_oper_type(::google::protobuf::uint32 value) {
  set_has_oper_type();
  oper_type_ = value;
}

// required uint32 oper_param1 = 3;
inline bool npt_nation_war_operate::has_oper_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_nation_war_operate::set_has_oper_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_nation_war_operate::clear_has_oper_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_nation_war_operate::clear_oper_param1() {
  oper_param1_ = 0u;
  clear_has_oper_param1();
}
inline ::google::protobuf::uint32 npt_nation_war_operate::oper_param1() const {
  return oper_param1_;
}
inline void npt_nation_war_operate::set_oper_param1(::google::protobuf::uint32 value) {
  set_has_oper_param1();
  oper_param1_ = value;
}

// -------------------------------------------------------------------

// npt_nation_war_operate_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO];
inline bool npt_nation_war_operate_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_war_operate_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_war_operate_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_war_operate_info::clear_type() {
  type_ = 12;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_war_operate_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_war_operate_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 war_id = 2;
inline bool npt_nation_war_operate_info::has_war_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_war_operate_info::set_has_war_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_war_operate_info::clear_has_war_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_war_operate_info::clear_war_id() {
  war_id_ = 0u;
  clear_has_war_id();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info::war_id() const {
  return war_id_;
}
inline void npt_nation_war_operate_info::set_war_id(::google::protobuf::uint32 value) {
  set_has_war_id();
  war_id_ = value;
}

// -------------------------------------------------------------------

// npt_nation_war_operate_info_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO_RE];
inline bool npt_nation_war_operate_info_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_war_operate_info_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_war_operate_info_re::clear_type() {
  type_ = 13;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_war_operate_info_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_war_operate_info_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 attack_zhaoji = 2;
inline bool npt_nation_war_operate_info_re::has_attack_zhaoji() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_attack_zhaoji() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_war_operate_info_re::clear_has_attack_zhaoji() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_war_operate_info_re::clear_attack_zhaoji() {
  attack_zhaoji_ = 0u;
  clear_has_attack_zhaoji();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::attack_zhaoji() const {
  return attack_zhaoji_;
}
inline void npt_nation_war_operate_info_re::set_attack_zhaoji(::google::protobuf::uint32 value) {
  set_has_attack_zhaoji();
  attack_zhaoji_ = value;
}

// required uint32 defend_zhaoji = 3;
inline bool npt_nation_war_operate_info_re::has_defend_zhaoji() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_defend_zhaoji() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_nation_war_operate_info_re::clear_has_defend_zhaoji() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_nation_war_operate_info_re::clear_defend_zhaoji() {
  defend_zhaoji_ = 0u;
  clear_has_defend_zhaoji();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::defend_zhaoji() const {
  return defend_zhaoji_;
}
inline void npt_nation_war_operate_info_re::set_defend_zhaoji(::google::protobuf::uint32 value) {
  set_has_defend_zhaoji();
  defend_zhaoji_ = value;
}

// required uint32 attack_yanshi = 4;
inline bool npt_nation_war_operate_info_re::has_attack_yanshi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_attack_yanshi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_nation_war_operate_info_re::clear_has_attack_yanshi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_nation_war_operate_info_re::clear_attack_yanshi() {
  attack_yanshi_ = 0u;
  clear_has_attack_yanshi();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::attack_yanshi() const {
  return attack_yanshi_;
}
inline void npt_nation_war_operate_info_re::set_attack_yanshi(::google::protobuf::uint32 value) {
  set_has_attack_yanshi();
  attack_yanshi_ = value;
}

// required uint32 defend_jiaxue = 5;
inline bool npt_nation_war_operate_info_re::has_defend_jiaxue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_defend_jiaxue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_nation_war_operate_info_re::clear_has_defend_jiaxue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_nation_war_operate_info_re::clear_defend_jiaxue() {
  defend_jiaxue_ = 0u;
  clear_has_defend_jiaxue();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::defend_jiaxue() const {
  return defend_jiaxue_;
}
inline void npt_nation_war_operate_info_re::set_defend_jiaxue(::google::protobuf::uint32 value) {
  set_has_defend_jiaxue();
  defend_jiaxue_ = value;
}

// required uint32 attack_jihuo = 6;
inline bool npt_nation_war_operate_info_re::has_attack_jihuo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_attack_jihuo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_nation_war_operate_info_re::clear_has_attack_jihuo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_nation_war_operate_info_re::clear_attack_jihuo() {
  attack_jihuo_ = 0u;
  clear_has_attack_jihuo();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::attack_jihuo() const {
  return attack_jihuo_;
}
inline void npt_nation_war_operate_info_re::set_attack_jihuo(::google::protobuf::uint32 value) {
  set_has_attack_jihuo();
  attack_jihuo_ = value;
}

// required uint32 defend_jihuo = 7;
inline bool npt_nation_war_operate_info_re::has_defend_jihuo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_defend_jihuo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_nation_war_operate_info_re::clear_has_defend_jihuo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_nation_war_operate_info_re::clear_defend_jihuo() {
  defend_jihuo_ = 0u;
  clear_has_defend_jihuo();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::defend_jihuo() const {
  return defend_jihuo_;
}
inline void npt_nation_war_operate_info_re::set_defend_jihuo(::google::protobuf::uint32 value) {
  set_has_defend_jihuo();
  defend_jihuo_ = value;
}

// required uint32 quick_transfer = 8;
inline bool npt_nation_war_operate_info_re::has_quick_transfer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_nation_war_operate_info_re::set_has_quick_transfer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_nation_war_operate_info_re::clear_has_quick_transfer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_nation_war_operate_info_re::clear_quick_transfer() {
  quick_transfer_ = 0u;
  clear_has_quick_transfer();
}
inline ::google::protobuf::uint32 npt_nation_war_operate_info_re::quick_transfer() const {
  return quick_transfer_;
}
inline void npt_nation_war_operate_info_re::set_quick_transfer(::google::protobuf::uint32 value) {
  set_has_quick_transfer();
  quick_transfer_ = value;
}

// -------------------------------------------------------------------

// npt_team_invite

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INVITE];
inline bool npt_team_invite::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_team_invite::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_team_invite::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_team_invite::clear_type() {
  type_ = 14;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_team_invite::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_team_invite::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes name = 2;
inline bool npt_team_invite::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_team_invite::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_team_invite::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_team_invite::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npt_team_invite::name() const {
  return *name_;
}
inline void npt_team_invite::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_team_invite::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_team_invite::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_team_invite::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npt_team_invite::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_team_invite::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 assign_rule = 3;
inline bool npt_team_invite::has_assign_rule() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_team_invite::set_has_assign_rule() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_team_invite::clear_has_assign_rule() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_team_invite::clear_assign_rule() {
  assign_rule_ = 0;
  clear_has_assign_rule();
}
inline ::google::protobuf::int32 npt_team_invite::assign_rule() const {
  return assign_rule_;
}
inline void npt_team_invite::set_assign_rule(::google::protobuf::int32 value) {
  set_has_assign_rule();
  assign_rule_ = value;
}

// optional int32 auto_admit = 4;
inline bool npt_team_invite::has_auto_admit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_team_invite::set_has_auto_admit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_team_invite::clear_has_auto_admit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_team_invite::clear_auto_admit() {
  auto_admit_ = 0;
  clear_has_auto_admit();
}
inline ::google::protobuf::int32 npt_team_invite::auto_admit() const {
  return auto_admit_;
}
inline void npt_team_invite::set_auto_admit(::google::protobuf::int32 value) {
  set_has_auto_admit();
  auto_admit_ = value;
}

// optional int32 open_invite = 5;
inline bool npt_team_invite::has_open_invite() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_team_invite::set_has_open_invite() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_team_invite::clear_has_open_invite() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_team_invite::clear_open_invite() {
  open_invite_ = 0;
  clear_has_open_invite();
}
inline ::google::protobuf::int32 npt_team_invite::open_invite() const {
  return open_invite_;
}
inline void npt_team_invite::set_open_invite(::google::protobuf::int32 value) {
  set_has_open_invite();
  open_invite_ = value;
}

// optional int32 level = 6;
inline bool npt_team_invite::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_team_invite::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_team_invite::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_team_invite::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 npt_team_invite::level() const {
  return level_;
}
inline void npt_team_invite::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 profession = 7;
inline bool npt_team_invite::has_profession() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_team_invite::set_has_profession() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_team_invite::clear_has_profession() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_team_invite::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 npt_team_invite::profession() const {
  return profession_;
}
inline void npt_team_invite::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 lineid = 8;
inline bool npt_team_invite::has_lineid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_team_invite::set_has_lineid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_team_invite::clear_has_lineid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_team_invite::clear_lineid() {
  lineid_ = 0;
  clear_has_lineid();
}
inline ::google::protobuf::int32 npt_team_invite::lineid() const {
  return lineid_;
}
inline void npt_team_invite::set_lineid(::google::protobuf::int32 value) {
  set_has_lineid();
  lineid_ = value;
}

// -------------------------------------------------------------------

// npt_friend_invite

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_FRIEND_INVITE];
inline bool npt_friend_invite::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_friend_invite::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_friend_invite::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_friend_invite::clear_type() {
  type_ = 16;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_friend_invite::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_friend_invite::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes name = 2;
inline bool npt_friend_invite::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_friend_invite::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_friend_invite::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_friend_invite::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npt_friend_invite::name() const {
  return *name_;
}
inline void npt_friend_invite::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_friend_invite::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_friend_invite::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_friend_invite::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npt_friend_invite::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_friend_invite::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool npt_friend_invite::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_friend_invite::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_friend_invite::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_friend_invite::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 npt_friend_invite::level() const {
  return level_;
}
inline void npt_friend_invite::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 profession = 4;
inline bool npt_friend_invite::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_friend_invite::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_friend_invite::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_friend_invite::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 npt_friend_invite::profession() const {
  return profession_;
}
inline void npt_friend_invite::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 group = 5;
inline bool npt_friend_invite::has_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_friend_invite::set_has_group() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_friend_invite::clear_has_group() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_friend_invite::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 npt_friend_invite::group() const {
  return group_;
}
inline void npt_friend_invite::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// -------------------------------------------------------------------

// npt_team_info_team_info

// required int32 teamid = 1;
inline bool npt_team_info_team_info::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_team_info_team_info::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_team_info_team_info::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_team_info_team_info::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 npt_team_info_team_info::teamid() const {
  return teamid_;
}
inline void npt_team_info_team_info::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// required int64 leader = 2;
inline bool npt_team_info_team_info::has_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_team_info_team_info::set_has_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_team_info_team_info::clear_has_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_team_info_team_info::clear_leader() {
  leader_ = GOOGLE_LONGLONG(0);
  clear_has_leader();
}
inline ::google::protobuf::int64 npt_team_info_team_info::leader() const {
  return leader_;
}
inline void npt_team_info_team_info::set_leader(::google::protobuf::int64 value) {
  set_has_leader();
  leader_ = value;
}

// optional bytes name = 3;
inline bool npt_team_info_team_info::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_team_info_team_info::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_team_info_team_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_team_info_team_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npt_team_info_team_info::name() const {
  return *name_;
}
inline void npt_team_info_team_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_team_info_team_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npt_team_info_team_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_team_info_team_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npt_team_info_team_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_team_info_team_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 4;
inline bool npt_team_info_team_info::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_team_info_team_info::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_team_info_team_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_team_info_team_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 npt_team_info_team_info::level() const {
  return level_;
}
inline void npt_team_info_team_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 capacity = 5;
inline bool npt_team_info_team_info::has_capacity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_team_info_team_info::set_has_capacity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_team_info_team_info::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_team_info_team_info::clear_capacity() {
  capacity_ = 0;
  clear_has_capacity();
}
inline ::google::protobuf::int32 npt_team_info_team_info::capacity() const {
  return capacity_;
}
inline void npt_team_info_team_info::set_capacity(::google::protobuf::int32 value) {
  set_has_capacity();
  capacity_ = value;
}

// optional int32 prof = 6;
inline bool npt_team_info_team_info::has_prof() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_team_info_team_info::set_has_prof() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_team_info_team_info::clear_has_prof() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_team_info_team_info::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 npt_team_info_team_info::prof() const {
  return prof_;
}
inline void npt_team_info_team_info::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// required int32 members = 7;
inline bool npt_team_info_team_info::has_members() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_team_info_team_info::set_has_members() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_team_info_team_info::clear_has_members() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_team_info_team_info::clear_members() {
  members_ = 0;
  clear_has_members();
}
inline ::google::protobuf::int32 npt_team_info_team_info::members() const {
  return members_;
}
inline void npt_team_info_team_info::set_members(::google::protobuf::int32 value) {
  set_has_members();
  members_ = value;
}

// -------------------------------------------------------------------

// npt_team_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INFO];
inline bool npt_team_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_team_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_team_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_team_info::clear_type() {
  type_ = 15;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_team_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_team_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated int32 teamids = 2;
inline int npt_team_info::teamids_size() const {
  return teamids_.size();
}
inline void npt_team_info::clear_teamids() {
  teamids_.Clear();
}
inline ::google::protobuf::int32 npt_team_info::teamids(int index) const {
  return teamids_.Get(index);
}
inline void npt_team_info::set_teamids(int index, ::google::protobuf::int32 value) {
  teamids_.Set(index, value);
}
inline void npt_team_info::add_teamids(::google::protobuf::int32 value) {
  teamids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
npt_team_info::teamids() const {
  return teamids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
npt_team_info::mutable_teamids() {
  return &teamids_;
}

// repeated .PB.npt_team_info.team_info teams = 3;
inline int npt_team_info::teams_size() const {
  return teams_.size();
}
inline void npt_team_info::clear_teams() {
  teams_.Clear();
}
inline const ::PB::npt_team_info_team_info& npt_team_info::teams(int index) const {
  return teams_.Get(index);
}
inline ::PB::npt_team_info_team_info* npt_team_info::mutable_teams(int index) {
  return teams_.Mutable(index);
}
inline ::PB::npt_team_info_team_info* npt_team_info::add_teams() {
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::npt_team_info_team_info >&
npt_team_info::teams() const {
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::npt_team_info_team_info >*
npt_team_info::mutable_teams() {
  return &teams_;
}

// -------------------------------------------------------------------

// other_player_profile

// optional .PB.face_book pb_facebook = 1;
inline bool other_player_profile::has_pb_facebook() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void other_player_profile::set_has_pb_facebook() {
  _has_bits_[0] |= 0x00000001u;
}
inline void other_player_profile::clear_has_pb_facebook() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void other_player_profile::clear_pb_facebook() {
  if (pb_facebook_ != NULL) pb_facebook_->::PB::face_book::Clear();
  clear_has_pb_facebook();
}
inline const ::PB::face_book& other_player_profile::pb_facebook() const {
  return pb_facebook_ != NULL ? *pb_facebook_ : *default_instance_->pb_facebook_;
}
inline ::PB::face_book* other_player_profile::mutable_pb_facebook() {
  set_has_pb_facebook();
  if (pb_facebook_ == NULL) pb_facebook_ = new ::PB::face_book;
  return pb_facebook_;
}
inline ::PB::face_book* other_player_profile::release_pb_facebook() {
  clear_has_pb_facebook();
  ::PB::face_book* temp = pb_facebook_;
  pb_facebook_ = NULL;
  return temp;
}
inline void other_player_profile::set_allocated_pb_facebook(::PB::face_book* pb_facebook) {
  delete pb_facebook_;
  pb_facebook_ = pb_facebook;
  if (pb_facebook) {
    set_has_pb_facebook();
  } else {
    clear_has_pb_facebook();
  }
}

// optional uint32 nation = 2;
inline bool other_player_profile::has_nation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void other_player_profile::set_has_nation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void other_player_profile::clear_has_nation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void other_player_profile::clear_nation() {
  nation_ = 0u;
  clear_has_nation();
}
inline ::google::protobuf::uint32 other_player_profile::nation() const {
  return nation_;
}
inline void other_player_profile::set_nation(::google::protobuf::uint32 value) {
  set_has_nation();
  nation_ = value;
}

// optional uint32 nation_pos = 3;
inline bool other_player_profile::has_nation_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void other_player_profile::set_has_nation_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void other_player_profile::clear_has_nation_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void other_player_profile::clear_nation_pos() {
  nation_pos_ = 0u;
  clear_has_nation_pos();
}
inline ::google::protobuf::uint32 other_player_profile::nation_pos() const {
  return nation_pos_;
}
inline void other_player_profile::set_nation_pos(::google::protobuf::uint32 value) {
  set_has_nation_pos();
  nation_pos_ = value;
}

// optional uint32 duke_level = 4;
inline bool other_player_profile::has_duke_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void other_player_profile::set_has_duke_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void other_player_profile::clear_has_duke_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void other_player_profile::clear_duke_level() {
  duke_level_ = 0u;
  clear_has_duke_level();
}
inline ::google::protobuf::uint32 other_player_profile::duke_level() const {
  return duke_level_;
}
inline void other_player_profile::set_duke_level(::google::protobuf::uint32 value) {
  set_has_duke_level();
  duke_level_ = value;
}

// optional bool fashion = 5;
inline bool other_player_profile::has_fashion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void other_player_profile::set_has_fashion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void other_player_profile::clear_has_fashion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void other_player_profile::clear_fashion() {
  fashion_ = false;
  clear_has_fashion();
}
inline bool other_player_profile::fashion() const {
  return fashion_;
}
inline void other_player_profile::set_fashion(bool value) {
  set_has_fashion();
  fashion_ = value;
}

// optional uint32 magic_weapon_tid = 6;
inline bool other_player_profile::has_magic_weapon_tid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void other_player_profile::set_has_magic_weapon_tid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void other_player_profile::clear_has_magic_weapon_tid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void other_player_profile::clear_magic_weapon_tid() {
  magic_weapon_tid_ = 0u;
  clear_has_magic_weapon_tid();
}
inline ::google::protobuf::uint32 other_player_profile::magic_weapon_tid() const {
  return magic_weapon_tid_;
}
inline void other_player_profile::set_magic_weapon_tid(::google::protobuf::uint32 value) {
  set_has_magic_weapon_tid();
  magic_weapon_tid_ = value;
}

// -------------------------------------------------------------------

// npt_get_player_profile

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_PLAYER_PROFILE];
inline bool npt_get_player_profile::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_get_player_profile::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_get_player_profile::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_get_player_profile::clear_type() {
  type_ = 18;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_get_player_profile::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_get_player_profile::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool npt_get_player_profile::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_get_player_profile::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_get_player_profile::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_get_player_profile::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_get_player_profile::roleid() const {
  return roleid_;
}
inline void npt_get_player_profile::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional uint32 get_profile_mask = 3 [default = 0];
inline bool npt_get_player_profile::has_get_profile_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_get_player_profile::set_has_get_profile_mask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_get_player_profile::clear_has_get_profile_mask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_get_player_profile::clear_get_profile_mask() {
  get_profile_mask_ = 0u;
  clear_has_get_profile_mask();
}
inline ::google::protobuf::uint32 npt_get_player_profile::get_profile_mask() const {
  return get_profile_mask_;
}
inline void npt_get_player_profile::set_get_profile_mask(::google::protobuf::uint32 value) {
  set_has_get_profile_mask();
  get_profile_mask_ = value;
}

// optional bytes snsinfo = 4;
inline bool npt_get_player_profile::has_snsinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_get_player_profile::set_has_snsinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_get_player_profile::clear_has_snsinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_get_player_profile::clear_snsinfo() {
  if (snsinfo_ != &::google::protobuf::internal::kEmptyString) {
    snsinfo_->clear();
  }
  clear_has_snsinfo();
}
inline const ::std::string& npt_get_player_profile::snsinfo() const {
  return *snsinfo_;
}
inline void npt_get_player_profile::set_snsinfo(const ::std::string& value) {
  set_has_snsinfo();
  if (snsinfo_ == &::google::protobuf::internal::kEmptyString) {
    snsinfo_ = new ::std::string;
  }
  snsinfo_->assign(value);
}
inline void npt_get_player_profile::set_snsinfo(const char* value) {
  set_has_snsinfo();
  if (snsinfo_ == &::google::protobuf::internal::kEmptyString) {
    snsinfo_ = new ::std::string;
  }
  snsinfo_->assign(value);
}
inline void npt_get_player_profile::set_snsinfo(const void* value, size_t size) {
  set_has_snsinfo();
  if (snsinfo_ == &::google::protobuf::internal::kEmptyString) {
    snsinfo_ = new ::std::string;
  }
  snsinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_get_player_profile::mutable_snsinfo() {
  set_has_snsinfo();
  if (snsinfo_ == &::google::protobuf::internal::kEmptyString) {
    snsinfo_ = new ::std::string;
  }
  return snsinfo_;
}
inline ::std::string* npt_get_player_profile::release_snsinfo() {
  clear_has_snsinfo();
  if (snsinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snsinfo_;
    snsinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_get_player_profile::set_allocated_snsinfo(::std::string* snsinfo) {
  if (snsinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete snsinfo_;
  }
  if (snsinfo) {
    set_has_snsinfo();
    snsinfo_ = snsinfo;
  } else {
    clear_has_snsinfo();
    snsinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PB.gs_role_mutable_data property = 5;
inline bool npt_get_player_profile::has_property() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_get_player_profile::set_has_property() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_get_player_profile::clear_has_property() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_get_player_profile::clear_property() {
  if (property_ != NULL) property_->::PB::gs_role_mutable_data::Clear();
  clear_has_property();
}
inline const ::PB::gs_role_mutable_data& npt_get_player_profile::property() const {
  return property_ != NULL ? *property_ : *default_instance_->property_;
}
inline ::PB::gs_role_mutable_data* npt_get_player_profile::mutable_property() {
  set_has_property();
  if (property_ == NULL) property_ = new ::PB::gs_role_mutable_data;
  return property_;
}
inline ::PB::gs_role_mutable_data* npt_get_player_profile::release_property() {
  clear_has_property();
  ::PB::gs_role_mutable_data* temp = property_;
  property_ = NULL;
  return temp;
}
inline void npt_get_player_profile::set_allocated_property(::PB::gs_role_mutable_data* property) {
  delete property_;
  property_ = property;
  if (property) {
    set_has_property();
  } else {
    clear_has_property();
  }
}

// optional bytes equipments = 6;
inline bool npt_get_player_profile::has_equipments() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_get_player_profile::set_has_equipments() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_get_player_profile::clear_has_equipments() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_get_player_profile::clear_equipments() {
  if (equipments_ != &::google::protobuf::internal::kEmptyString) {
    equipments_->clear();
  }
  clear_has_equipments();
}
inline const ::std::string& npt_get_player_profile::equipments() const {
  return *equipments_;
}
inline void npt_get_player_profile::set_equipments(const ::std::string& value) {
  set_has_equipments();
  if (equipments_ == &::google::protobuf::internal::kEmptyString) {
    equipments_ = new ::std::string;
  }
  equipments_->assign(value);
}
inline void npt_get_player_profile::set_equipments(const char* value) {
  set_has_equipments();
  if (equipments_ == &::google::protobuf::internal::kEmptyString) {
    equipments_ = new ::std::string;
  }
  equipments_->assign(value);
}
inline void npt_get_player_profile::set_equipments(const void* value, size_t size) {
  set_has_equipments();
  if (equipments_ == &::google::protobuf::internal::kEmptyString) {
    equipments_ = new ::std::string;
  }
  equipments_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_get_player_profile::mutable_equipments() {
  set_has_equipments();
  if (equipments_ == &::google::protobuf::internal::kEmptyString) {
    equipments_ = new ::std::string;
  }
  return equipments_;
}
inline ::std::string* npt_get_player_profile::release_equipments() {
  clear_has_equipments();
  if (equipments_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equipments_;
    equipments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_get_player_profile::set_allocated_equipments(::std::string* equipments) {
  if (equipments_ != &::google::protobuf::internal::kEmptyString) {
    delete equipments_;
  }
  if (equipments) {
    set_has_equipments();
    equipments_ = equipments;
  } else {
    clear_has_equipments();
    equipments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PB.other_player_profile others = 7;
inline bool npt_get_player_profile::has_others() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npt_get_player_profile::set_has_others() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npt_get_player_profile::clear_has_others() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npt_get_player_profile::clear_others() {
  if (others_ != NULL) others_->::PB::other_player_profile::Clear();
  clear_has_others();
}
inline const ::PB::other_player_profile& npt_get_player_profile::others() const {
  return others_ != NULL ? *others_ : *default_instance_->others_;
}
inline ::PB::other_player_profile* npt_get_player_profile::mutable_others() {
  set_has_others();
  if (others_ == NULL) others_ = new ::PB::other_player_profile;
  return others_;
}
inline ::PB::other_player_profile* npt_get_player_profile::release_others() {
  clear_has_others();
  ::PB::other_player_profile* temp = others_;
  others_ = NULL;
  return temp;
}
inline void npt_get_player_profile::set_allocated_others(::PB::other_player_profile* others) {
  delete others_;
  others_ = others;
  if (others) {
    set_has_others();
  } else {
    clear_has_others();
  }
}

// -------------------------------------------------------------------

// npt_blessing_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BLESSING_INFO];
inline bool npt_blessing_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_blessing_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_blessing_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_blessing_info::clear_type() {
  type_ = 21;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_blessing_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_blessing_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.blessing_info info = 2;
inline bool npt_blessing_info::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_blessing_info::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_blessing_info::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_blessing_info::clear_info() {
  if (info_ != NULL) info_->::PB::blessing_info::Clear();
  clear_has_info();
}
inline const ::PB::blessing_info& npt_blessing_info::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PB::blessing_info* npt_blessing_info::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PB::blessing_info;
  return info_;
}
inline ::PB::blessing_info* npt_blessing_info::release_info() {
  clear_has_info();
  ::PB::blessing_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void npt_blessing_info::set_allocated_info(::PB::blessing_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional bool tanksgiver = 3;
inline bool npt_blessing_info::has_tanksgiver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_blessing_info::set_has_tanksgiver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_blessing_info::clear_has_tanksgiver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_blessing_info::clear_tanksgiver() {
  tanksgiver_ = false;
  clear_has_tanksgiver();
}
inline bool npt_blessing_info::tanksgiver() const {
  return tanksgiver_;
}
inline void npt_blessing_info::set_tanksgiver(bool value) {
  set_has_tanksgiver();
  tanksgiver_ = value;
}

// -------------------------------------------------------------------

// npt_nationwar_event

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATIONWAR_EVENT];
inline bool npt_nationwar_event::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nationwar_event::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nationwar_event::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nationwar_event::clear_type() {
  type_ = 22;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nationwar_event::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nationwar_event::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.npt_nationwar_event.NNE_TYPE event_type = 2;
inline bool npt_nationwar_event::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nationwar_event::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nationwar_event::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nationwar_event::clear_event_type() {
  event_type_ = 1;
  clear_has_event_type();
}
inline ::PB::npt_nationwar_event_NNE_TYPE npt_nationwar_event::event_type() const {
  return static_cast< ::PB::npt_nationwar_event_NNE_TYPE >(event_type_);
}
inline void npt_nationwar_event::set_event_type(::PB::npt_nationwar_event_NNE_TYPE value) {
  assert(::PB::npt_nationwar_event_NNE_TYPE_IsValid(value));
  set_has_event_type();
  event_type_ = value;
}

// optional int32 event_param = 3;
inline bool npt_nationwar_event::has_event_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_nationwar_event::set_has_event_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_nationwar_event::clear_has_event_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_nationwar_event::clear_event_param() {
  event_param_ = 0;
  clear_has_event_param();
}
inline ::google::protobuf::int32 npt_nationwar_event::event_param() const {
  return event_param_;
}
inline void npt_nationwar_event::set_event_param(::google::protobuf::int32 value) {
  set_has_event_param();
  event_param_ = value;
}

// -------------------------------------------------------------------

// npt_nation_shutup

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP];
inline bool npt_nation_shutup::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_shutup::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_shutup::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_shutup::clear_type() {
  type_ = 23;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_shutup::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_shutup::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 dst_roleid = 2;
inline bool npt_nation_shutup::has_dst_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_shutup::set_has_dst_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_shutup::clear_has_dst_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_shutup::clear_dst_roleid() {
  dst_roleid_ = GOOGLE_LONGLONG(0);
  clear_has_dst_roleid();
}
inline ::google::protobuf::int64 npt_nation_shutup::dst_roleid() const {
  return dst_roleid_;
}
inline void npt_nation_shutup::set_dst_roleid(::google::protobuf::int64 value) {
  set_has_dst_roleid();
  dst_roleid_ = value;
}

// -------------------------------------------------------------------

// npt_nation_shutup_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_INFO];
inline bool npt_nation_shutup_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_shutup_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_shutup_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_shutup_info::clear_type() {
  type_ = 24;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_shutup_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_shutup_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 use_times = 2;
inline bool npt_nation_shutup_info::has_use_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_shutup_info::set_has_use_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_shutup_info::clear_has_use_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_shutup_info::clear_use_times() {
  use_times_ = 0;
  clear_has_use_times();
}
inline ::google::protobuf::int32 npt_nation_shutup_info::use_times() const {
  return use_times_;
}
inline void npt_nation_shutup_info::set_use_times(::google::protobuf::int32 value) {
  set_has_use_times();
  use_times_ = value;
}

// required int32 remain_times = 3;
inline bool npt_nation_shutup_info::has_remain_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_nation_shutup_info::set_has_remain_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_nation_shutup_info::clear_has_remain_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_nation_shutup_info::clear_remain_times() {
  remain_times_ = 0;
  clear_has_remain_times();
}
inline ::google::protobuf::int32 npt_nation_shutup_info::remain_times() const {
  return remain_times_;
}
inline void npt_nation_shutup_info::set_remain_times(::google::protobuf::int32 value) {
  set_has_remain_times();
  remain_times_ = value;
}

// -------------------------------------------------------------------

// npt_nation_commander_appoint

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_APPOINT];
inline bool npt_nation_commander_appoint::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_commander_appoint::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_commander_appoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_commander_appoint::clear_type() {
  type_ = 26;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_commander_appoint::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_commander_appoint::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 dst_roleid = 2;
inline bool npt_nation_commander_appoint::has_dst_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_commander_appoint::set_has_dst_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_commander_appoint::clear_has_dst_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_commander_appoint::clear_dst_roleid() {
  dst_roleid_ = GOOGLE_LONGLONG(0);
  clear_has_dst_roleid();
}
inline ::google::protobuf::int64 npt_nation_commander_appoint::dst_roleid() const {
  return dst_roleid_;
}
inline void npt_nation_commander_appoint::set_dst_roleid(::google::protobuf::int64 value) {
  set_has_dst_roleid();
  dst_roleid_ = value;
}

// -------------------------------------------------------------------

// npt_nation_commander_notify

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_NOTIFY];
inline bool npt_nation_commander_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_commander_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_commander_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_commander_notify::clear_type() {
  type_ = 27;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_commander_notify::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_commander_notify::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes dst_name = 2;
inline bool npt_nation_commander_notify::has_dst_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_commander_notify::set_has_dst_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_commander_notify::clear_has_dst_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_commander_notify::clear_dst_name() {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    dst_name_->clear();
  }
  clear_has_dst_name();
}
inline const ::std::string& npt_nation_commander_notify::dst_name() const {
  return *dst_name_;
}
inline void npt_nation_commander_notify::set_dst_name(const ::std::string& value) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(value);
}
inline void npt_nation_commander_notify::set_dst_name(const char* value) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(value);
}
inline void npt_nation_commander_notify::set_dst_name(const void* value, size_t size) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_nation_commander_notify::mutable_dst_name() {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  return dst_name_;
}
inline ::std::string* npt_nation_commander_notify::release_dst_name() {
  clear_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_name_;
    dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_nation_commander_notify::set_allocated_dst_name(::std::string* dst_name) {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (dst_name) {
    set_has_dst_name();
    dst_name_ = dst_name;
  } else {
    clear_has_dst_name();
    dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_nation_war_history

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_HISTORY];
inline bool npt_nation_war_history::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_war_history::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_war_history::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_war_history::clear_type() {
  type_ = 28;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_war_history::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_war_history::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.nation_war_history historys = 2;
inline int npt_nation_war_history::historys_size() const {
  return historys_.size();
}
inline void npt_nation_war_history::clear_historys() {
  historys_.Clear();
}
inline const ::PB::nation_war_history& npt_nation_war_history::historys(int index) const {
  return historys_.Get(index);
}
inline ::PB::nation_war_history* npt_nation_war_history::mutable_historys(int index) {
  return historys_.Mutable(index);
}
inline ::PB::nation_war_history* npt_nation_war_history::add_historys() {
  return historys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::nation_war_history >&
npt_nation_war_history::historys() const {
  return historys_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::nation_war_history >*
npt_nation_war_history::mutable_historys() {
  return &historys_;
}

// -------------------------------------------------------------------

// npt_request_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REQUEST_INFO];
inline bool npt_request_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_request_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_request_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_request_info::clear_type() {
  type_ = 29;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_request_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_request_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.npt_request_info.INFO_TYPE request_type = 2;
inline bool npt_request_info::has_request_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_request_info::set_has_request_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_request_info::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_request_info::clear_request_type() {
  request_type_ = 1;
  clear_has_request_type();
}
inline ::PB::npt_request_info_INFO_TYPE npt_request_info::request_type() const {
  return static_cast< ::PB::npt_request_info_INFO_TYPE >(request_type_);
}
inline void npt_request_info::set_request_type(::PB::npt_request_info_INFO_TYPE value) {
  assert(::PB::npt_request_info_INFO_TYPE_IsValid(value));
  set_has_request_type();
  request_type_ = value;
}

// -------------------------------------------------------------------

// npt_nation_shutup_reply

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_REPLY];
inline bool npt_nation_shutup_reply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_nation_shutup_reply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_nation_shutup_reply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_nation_shutup_reply::clear_type() {
  type_ = 25;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_nation_shutup_reply::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_nation_shutup_reply::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .PB.npt_nation_shutup_reply.RESULT_TYPE result = 2;
inline bool npt_nation_shutup_reply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_nation_shutup_reply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_nation_shutup_reply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_nation_shutup_reply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::PB::npt_nation_shutup_reply_RESULT_TYPE npt_nation_shutup_reply::result() const {
  return static_cast< ::PB::npt_nation_shutup_reply_RESULT_TYPE >(result_);
}
inline void npt_nation_shutup_reply::set_result(::PB::npt_nation_shutup_reply_RESULT_TYPE value) {
  assert(::PB::npt_nation_shutup_reply_RESULT_TYPE_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional bytes dst_name = 3;
inline bool npt_nation_shutup_reply::has_dst_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_nation_shutup_reply::set_has_dst_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_nation_shutup_reply::clear_has_dst_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_nation_shutup_reply::clear_dst_name() {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    dst_name_->clear();
  }
  clear_has_dst_name();
}
inline const ::std::string& npt_nation_shutup_reply::dst_name() const {
  return *dst_name_;
}
inline void npt_nation_shutup_reply::set_dst_name(const ::std::string& value) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(value);
}
inline void npt_nation_shutup_reply::set_dst_name(const char* value) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(value);
}
inline void npt_nation_shutup_reply::set_dst_name(const void* value, size_t size) {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  dst_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_nation_shutup_reply::mutable_dst_name() {
  set_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    dst_name_ = new ::std::string;
  }
  return dst_name_;
}
inline ::std::string* npt_nation_shutup_reply::release_dst_name() {
  clear_has_dst_name();
  if (dst_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_name_;
    dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_nation_shutup_reply::set_allocated_dst_name(::std::string* dst_name) {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (dst_name) {
    set_has_dst_name();
    dst_name_ = dst_name;
  } else {
    clear_has_dst_name();
    dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_greeting_info_sync

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_INFO_SYNC];
inline bool npt_greeting_info_sync::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_greeting_info_sync::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_greeting_info_sync::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_greeting_info_sync::clear_type() {
  type_ = 19;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_greeting_info_sync::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_greeting_info_sync::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.npt_greeting_info_sync.SYNC_TYPE sync_type = 2;
inline bool npt_greeting_info_sync::has_sync_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_greeting_info_sync::set_has_sync_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_greeting_info_sync::clear_has_sync_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_greeting_info_sync::clear_sync_type() {
  sync_type_ = 1;
  clear_has_sync_type();
}
inline ::PB::npt_greeting_info_sync_SYNC_TYPE npt_greeting_info_sync::sync_type() const {
  return static_cast< ::PB::npt_greeting_info_sync_SYNC_TYPE >(sync_type_);
}
inline void npt_greeting_info_sync::set_sync_type(::PB::npt_greeting_info_sync_SYNC_TYPE value) {
  assert(::PB::npt_greeting_info_sync_SYNC_TYPE_IsValid(value));
  set_has_sync_type();
  sync_type_ = value;
}

// repeated .PB.greeting_info greeting_list = 3;
inline int npt_greeting_info_sync::greeting_list_size() const {
  return greeting_list_.size();
}
inline void npt_greeting_info_sync::clear_greeting_list() {
  greeting_list_.Clear();
}
inline const ::PB::greeting_info& npt_greeting_info_sync::greeting_list(int index) const {
  return greeting_list_.Get(index);
}
inline ::PB::greeting_info* npt_greeting_info_sync::mutable_greeting_list(int index) {
  return greeting_list_.Mutable(index);
}
inline ::PB::greeting_info* npt_greeting_info_sync::add_greeting_list() {
  return greeting_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::greeting_info >&
npt_greeting_info_sync::greeting_list() const {
  return greeting_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::greeting_info >*
npt_greeting_info_sync::mutable_greeting_list() {
  return &greeting_list_;
}

// -------------------------------------------------------------------

// npt_greeting_reply

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_REPLY];
inline bool npt_greeting_reply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_greeting_reply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_greeting_reply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_greeting_reply::clear_type() {
  type_ = 20;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_greeting_reply::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_greeting_reply::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 info_seq = 2;
inline bool npt_greeting_reply::has_info_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_greeting_reply::set_has_info_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_greeting_reply::clear_has_info_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_greeting_reply::clear_info_seq() {
  info_seq_ = 0;
  clear_has_info_seq();
}
inline ::google::protobuf::int32 npt_greeting_reply::info_seq() const {
  return info_seq_;
}
inline void npt_greeting_reply::set_info_seq(::google::protobuf::int32 value) {
  set_has_info_seq();
  info_seq_ = value;
}

// required int64 dst_roleid = 3;
inline bool npt_greeting_reply::has_dst_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_greeting_reply::set_has_dst_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_greeting_reply::clear_has_dst_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_greeting_reply::clear_dst_roleid() {
  dst_roleid_ = GOOGLE_LONGLONG(0);
  clear_has_dst_roleid();
}
inline ::google::protobuf::int64 npt_greeting_reply::dst_roleid() const {
  return dst_roleid_;
}
inline void npt_greeting_reply::set_dst_roleid(::google::protobuf::int64 value) {
  set_has_dst_roleid();
  dst_roleid_ = value;
}

// required int32 reply_type = 4;
inline bool npt_greeting_reply::has_reply_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_greeting_reply::set_has_reply_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_greeting_reply::clear_has_reply_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_greeting_reply::clear_reply_type() {
  reply_type_ = 0;
  clear_has_reply_type();
}
inline ::google::protobuf::int32 npt_greeting_reply::reply_type() const {
  return reply_type_;
}
inline void npt_greeting_reply::set_reply_type(::google::protobuf::int32 value) {
  set_has_reply_type();
  reply_type_ = value;
}

// required int32 reply_param = 5;
inline bool npt_greeting_reply::has_reply_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_greeting_reply::set_has_reply_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_greeting_reply::clear_has_reply_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_greeting_reply::clear_reply_param() {
  reply_param_ = 0;
  clear_has_reply_param();
}
inline ::google::protobuf::int32 npt_greeting_reply::reply_param() const {
  return reply_param_;
}
inline void npt_greeting_reply::set_reply_param(::google::protobuf::int32 value) {
  set_has_reply_param();
  reply_param_ = value;
}

// -------------------------------------------------------------------

// npt_ask_help

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ASK_HELP];
inline bool npt_ask_help::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_ask_help::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_ask_help::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_ask_help::clear_type() {
  type_ = 30;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_ask_help::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_ask_help::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PB.ask_help_info info = 2;
inline bool npt_ask_help::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_ask_help::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_ask_help::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_ask_help::clear_info() {
  if (info_ != NULL) info_->::PB::ask_help_info::Clear();
  clear_has_info();
}
inline const ::PB::ask_help_info& npt_ask_help::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PB::ask_help_info* npt_ask_help::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PB::ask_help_info;
  return info_;
}
inline ::PB::ask_help_info* npt_ask_help::release_info() {
  clear_has_info();
  ::PB::ask_help_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void npt_ask_help::set_allocated_info(::PB::ask_help_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional int32 response_retcode = 3;
inline bool npt_ask_help::has_response_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_ask_help::set_has_response_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_ask_help::clear_has_response_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_ask_help::clear_response_retcode() {
  response_retcode_ = 0;
  clear_has_response_retcode();
}
inline ::google::protobuf::int32 npt_ask_help::response_retcode() const {
  return response_retcode_;
}
inline void npt_ask_help::set_response_retcode(::google::protobuf::int32 value) {
  set_has_response_retcode();
  response_retcode_ = value;
}

// -------------------------------------------------------------------

// npt_send_server_midas_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_SERVER_MIDAS_INFO];
inline bool npt_send_server_midas_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_send_server_midas_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_send_server_midas_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_send_server_midas_info::clear_type() {
  type_ = 31;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_send_server_midas_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_send_server_midas_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 roleid = 2;
inline bool npt_send_server_midas_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_send_server_midas_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_send_server_midas_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_send_server_midas_info::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 npt_send_server_midas_info::roleid() const {
  return roleid_;
}
inline void npt_send_server_midas_info::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional bytes midas_openkey = 3;
inline bool npt_send_server_midas_info::has_midas_openkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_send_server_midas_info::set_has_midas_openkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_send_server_midas_info::clear_has_midas_openkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_send_server_midas_info::clear_midas_openkey() {
  if (midas_openkey_ != &::google::protobuf::internal::kEmptyString) {
    midas_openkey_->clear();
  }
  clear_has_midas_openkey();
}
inline const ::std::string& npt_send_server_midas_info::midas_openkey() const {
  return *midas_openkey_;
}
inline void npt_send_server_midas_info::set_midas_openkey(const ::std::string& value) {
  set_has_midas_openkey();
  if (midas_openkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_openkey_ = new ::std::string;
  }
  midas_openkey_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_openkey(const char* value) {
  set_has_midas_openkey();
  if (midas_openkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_openkey_ = new ::std::string;
  }
  midas_openkey_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_openkey(const void* value, size_t size) {
  set_has_midas_openkey();
  if (midas_openkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_openkey_ = new ::std::string;
  }
  midas_openkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_send_server_midas_info::mutable_midas_openkey() {
  set_has_midas_openkey();
  if (midas_openkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_openkey_ = new ::std::string;
  }
  return midas_openkey_;
}
inline ::std::string* npt_send_server_midas_info::release_midas_openkey() {
  clear_has_midas_openkey();
  if (midas_openkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = midas_openkey_;
    midas_openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_send_server_midas_info::set_allocated_midas_openkey(::std::string* midas_openkey) {
  if (midas_openkey_ != &::google::protobuf::internal::kEmptyString) {
    delete midas_openkey_;
  }
  if (midas_openkey) {
    set_has_midas_openkey();
    midas_openkey_ = midas_openkey;
  } else {
    clear_has_midas_openkey();
    midas_openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes midas_paytoken = 4;
inline bool npt_send_server_midas_info::has_midas_paytoken() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_send_server_midas_info::set_has_midas_paytoken() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_send_server_midas_info::clear_has_midas_paytoken() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_send_server_midas_info::clear_midas_paytoken() {
  if (midas_paytoken_ != &::google::protobuf::internal::kEmptyString) {
    midas_paytoken_->clear();
  }
  clear_has_midas_paytoken();
}
inline const ::std::string& npt_send_server_midas_info::midas_paytoken() const {
  return *midas_paytoken_;
}
inline void npt_send_server_midas_info::set_midas_paytoken(const ::std::string& value) {
  set_has_midas_paytoken();
  if (midas_paytoken_ == &::google::protobuf::internal::kEmptyString) {
    midas_paytoken_ = new ::std::string;
  }
  midas_paytoken_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_paytoken(const char* value) {
  set_has_midas_paytoken();
  if (midas_paytoken_ == &::google::protobuf::internal::kEmptyString) {
    midas_paytoken_ = new ::std::string;
  }
  midas_paytoken_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_paytoken(const void* value, size_t size) {
  set_has_midas_paytoken();
  if (midas_paytoken_ == &::google::protobuf::internal::kEmptyString) {
    midas_paytoken_ = new ::std::string;
  }
  midas_paytoken_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_send_server_midas_info::mutable_midas_paytoken() {
  set_has_midas_paytoken();
  if (midas_paytoken_ == &::google::protobuf::internal::kEmptyString) {
    midas_paytoken_ = new ::std::string;
  }
  return midas_paytoken_;
}
inline ::std::string* npt_send_server_midas_info::release_midas_paytoken() {
  clear_has_midas_paytoken();
  if (midas_paytoken_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = midas_paytoken_;
    midas_paytoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_send_server_midas_info::set_allocated_midas_paytoken(::std::string* midas_paytoken) {
  if (midas_paytoken_ != &::google::protobuf::internal::kEmptyString) {
    delete midas_paytoken_;
  }
  if (midas_paytoken) {
    set_has_midas_paytoken();
    midas_paytoken_ = midas_paytoken;
  } else {
    clear_has_midas_paytoken();
    midas_paytoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes midas_pf = 5;
inline bool npt_send_server_midas_info::has_midas_pf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_send_server_midas_info::set_has_midas_pf() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_send_server_midas_info::clear_has_midas_pf() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_send_server_midas_info::clear_midas_pf() {
  if (midas_pf_ != &::google::protobuf::internal::kEmptyString) {
    midas_pf_->clear();
  }
  clear_has_midas_pf();
}
inline const ::std::string& npt_send_server_midas_info::midas_pf() const {
  return *midas_pf_;
}
inline void npt_send_server_midas_info::set_midas_pf(const ::std::string& value) {
  set_has_midas_pf();
  if (midas_pf_ == &::google::protobuf::internal::kEmptyString) {
    midas_pf_ = new ::std::string;
  }
  midas_pf_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_pf(const char* value) {
  set_has_midas_pf();
  if (midas_pf_ == &::google::protobuf::internal::kEmptyString) {
    midas_pf_ = new ::std::string;
  }
  midas_pf_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_pf(const void* value, size_t size) {
  set_has_midas_pf();
  if (midas_pf_ == &::google::protobuf::internal::kEmptyString) {
    midas_pf_ = new ::std::string;
  }
  midas_pf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_send_server_midas_info::mutable_midas_pf() {
  set_has_midas_pf();
  if (midas_pf_ == &::google::protobuf::internal::kEmptyString) {
    midas_pf_ = new ::std::string;
  }
  return midas_pf_;
}
inline ::std::string* npt_send_server_midas_info::release_midas_pf() {
  clear_has_midas_pf();
  if (midas_pf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = midas_pf_;
    midas_pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_send_server_midas_info::set_allocated_midas_pf(::std::string* midas_pf) {
  if (midas_pf_ != &::google::protobuf::internal::kEmptyString) {
    delete midas_pf_;
  }
  if (midas_pf) {
    set_has_midas_pf();
    midas_pf_ = midas_pf;
  } else {
    clear_has_midas_pf();
    midas_pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes midas_pfkey = 6;
inline bool npt_send_server_midas_info::has_midas_pfkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_send_server_midas_info::set_has_midas_pfkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_send_server_midas_info::clear_has_midas_pfkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_send_server_midas_info::clear_midas_pfkey() {
  if (midas_pfkey_ != &::google::protobuf::internal::kEmptyString) {
    midas_pfkey_->clear();
  }
  clear_has_midas_pfkey();
}
inline const ::std::string& npt_send_server_midas_info::midas_pfkey() const {
  return *midas_pfkey_;
}
inline void npt_send_server_midas_info::set_midas_pfkey(const ::std::string& value) {
  set_has_midas_pfkey();
  if (midas_pfkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_pfkey_ = new ::std::string;
  }
  midas_pfkey_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_pfkey(const char* value) {
  set_has_midas_pfkey();
  if (midas_pfkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_pfkey_ = new ::std::string;
  }
  midas_pfkey_->assign(value);
}
inline void npt_send_server_midas_info::set_midas_pfkey(const void* value, size_t size) {
  set_has_midas_pfkey();
  if (midas_pfkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_pfkey_ = new ::std::string;
  }
  midas_pfkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_send_server_midas_info::mutable_midas_pfkey() {
  set_has_midas_pfkey();
  if (midas_pfkey_ == &::google::protobuf::internal::kEmptyString) {
    midas_pfkey_ = new ::std::string;
  }
  return midas_pfkey_;
}
inline ::std::string* npt_send_server_midas_info::release_midas_pfkey() {
  clear_has_midas_pfkey();
  if (midas_pfkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = midas_pfkey_;
    midas_pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_send_server_midas_info::set_allocated_midas_pfkey(::std::string* midas_pfkey) {
  if (midas_pfkey_ != &::google::protobuf::internal::kEmptyString) {
    delete midas_pfkey_;
  }
  if (midas_pfkey) {
    set_has_midas_pfkey();
    midas_pfkey_ = midas_pfkey;
  } else {
    clear_has_midas_pfkey();
    midas_pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_send_tencent_secure_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_TENCENT_SECURE_INFO];
inline bool npt_send_tencent_secure_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_send_tencent_secure_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_send_tencent_secure_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_send_tencent_secure_info::clear_type() {
  type_ = 33;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_send_tencent_secure_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_send_tencent_secure_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes secure_data = 2;
inline bool npt_send_tencent_secure_info::has_secure_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_send_tencent_secure_info::set_has_secure_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_send_tencent_secure_info::clear_has_secure_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_send_tencent_secure_info::clear_secure_data() {
  if (secure_data_ != &::google::protobuf::internal::kEmptyString) {
    secure_data_->clear();
  }
  clear_has_secure_data();
}
inline const ::std::string& npt_send_tencent_secure_info::secure_data() const {
  return *secure_data_;
}
inline void npt_send_tencent_secure_info::set_secure_data(const ::std::string& value) {
  set_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::kEmptyString) {
    secure_data_ = new ::std::string;
  }
  secure_data_->assign(value);
}
inline void npt_send_tencent_secure_info::set_secure_data(const char* value) {
  set_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::kEmptyString) {
    secure_data_ = new ::std::string;
  }
  secure_data_->assign(value);
}
inline void npt_send_tencent_secure_info::set_secure_data(const void* value, size_t size) {
  set_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::kEmptyString) {
    secure_data_ = new ::std::string;
  }
  secure_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_send_tencent_secure_info::mutable_secure_data() {
  set_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::kEmptyString) {
    secure_data_ = new ::std::string;
  }
  return secure_data_;
}
inline ::std::string* npt_send_tencent_secure_info::release_secure_data() {
  clear_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secure_data_;
    secure_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_send_tencent_secure_info::set_allocated_secure_data(::std::string* secure_data) {
  if (secure_data_ != &::google::protobuf::internal::kEmptyString) {
    delete secure_data_;
  }
  if (secure_data) {
    set_has_secure_data();
    secure_data_ = secure_data;
  } else {
    clear_has_secure_data();
    secure_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_send_client_midas_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_CLIENT_MIDAS_INFO];
inline bool npt_send_client_midas_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_send_client_midas_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_send_client_midas_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_send_client_midas_info::clear_type() {
  type_ = 32;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_send_client_midas_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_send_client_midas_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 midas_total_amount = 2;
inline bool npt_send_client_midas_info::has_midas_total_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_send_client_midas_info::set_has_midas_total_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_send_client_midas_info::clear_has_midas_total_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_send_client_midas_info::clear_midas_total_amount() {
  midas_total_amount_ = GOOGLE_LONGLONG(0);
  clear_has_midas_total_amount();
}
inline ::google::protobuf::int64 npt_send_client_midas_info::midas_total_amount() const {
  return midas_total_amount_;
}
inline void npt_send_client_midas_info::set_midas_total_amount(::google::protobuf::int64 value) {
  set_has_midas_total_amount();
  midas_total_amount_ = value;
}

// required int64 midas_bind_amount = 3;
inline bool npt_send_client_midas_info::has_midas_bind_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_send_client_midas_info::set_has_midas_bind_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_send_client_midas_info::clear_has_midas_bind_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_send_client_midas_info::clear_midas_bind_amount() {
  midas_bind_amount_ = GOOGLE_LONGLONG(0);
  clear_has_midas_bind_amount();
}
inline ::google::protobuf::int64 npt_send_client_midas_info::midas_bind_amount() const {
  return midas_bind_amount_;
}
inline void npt_send_client_midas_info::set_midas_bind_amount(::google::protobuf::int64 value) {
  set_has_midas_bind_amount();
  midas_bind_amount_ = value;
}

// required int64 midas_save_amt = 4;
inline bool npt_send_client_midas_info::has_midas_save_amt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_send_client_midas_info::set_has_midas_save_amt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_send_client_midas_info::clear_has_midas_save_amt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_send_client_midas_info::clear_midas_save_amt() {
  midas_save_amt_ = GOOGLE_LONGLONG(0);
  clear_has_midas_save_amt();
}
inline ::google::protobuf::int64 npt_send_client_midas_info::midas_save_amt() const {
  return midas_save_amt_;
}
inline void npt_send_client_midas_info::set_midas_save_amt(::google::protobuf::int64 value) {
  set_has_midas_save_amt();
  midas_save_amt_ = value;
}

// -------------------------------------------------------------------

// npt_send_midas_bad_token

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_MIDAS_BAD_TOKEN];
inline bool npt_send_midas_bad_token::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_send_midas_bad_token::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_send_midas_bad_token::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_send_midas_bad_token::clear_type() {
  type_ = 36;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_send_midas_bad_token::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_send_midas_bad_token::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 midas_op = 2;
inline bool npt_send_midas_bad_token::has_midas_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_send_midas_bad_token::set_has_midas_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_send_midas_bad_token::clear_has_midas_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_send_midas_bad_token::clear_midas_op() {
  midas_op_ = 0;
  clear_has_midas_op();
}
inline ::google::protobuf::int32 npt_send_midas_bad_token::midas_op() const {
  return midas_op_;
}
inline void npt_send_midas_bad_token::set_midas_op(::google::protobuf::int32 value) {
  set_has_midas_op();
  midas_op_ = value;
}

// required int32 midas_retcode = 3;
inline bool npt_send_midas_bad_token::has_midas_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_send_midas_bad_token::set_has_midas_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_send_midas_bad_token::clear_has_midas_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_send_midas_bad_token::clear_midas_retcode() {
  midas_retcode_ = 0;
  clear_has_midas_retcode();
}
inline ::google::protobuf::int32 npt_send_midas_bad_token::midas_retcode() const {
  return midas_retcode_;
}
inline void npt_send_midas_bad_token::set_midas_retcode(::google::protobuf::int32 value) {
  set_has_midas_retcode();
  midas_retcode_ = value;
}

// -------------------------------------------------------------------

// npt_officer_gift_get

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_GET];
inline bool npt_officer_gift_get::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_officer_gift_get::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_officer_gift_get::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_officer_gift_get::clear_type() {
  type_ = 34;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_officer_gift_get::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_officer_gift_get::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 gift_id = 2;
inline bool npt_officer_gift_get::has_gift_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_officer_gift_get::set_has_gift_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_officer_gift_get::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_officer_gift_get::clear_gift_id() {
  gift_id_ = 0;
  clear_has_gift_id();
}
inline ::google::protobuf::int32 npt_officer_gift_get::gift_id() const {
  return gift_id_;
}
inline void npt_officer_gift_get::set_gift_id(::google::protobuf::int32 value) {
  set_has_gift_id();
  gift_id_ = value;
}

// -------------------------------------------------------------------

// npt_officer_gift_notify

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_NOTIFY];
inline bool npt_officer_gift_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_officer_gift_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_officer_gift_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_officer_gift_notify::clear_type() {
  type_ = 35;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_officer_gift_notify::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_officer_gift_notify::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 gift_id = 2;
inline bool npt_officer_gift_notify::has_gift_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_officer_gift_notify::set_has_gift_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_officer_gift_notify::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_officer_gift_notify::clear_gift_id() {
  gift_id_ = 0;
  clear_has_gift_id();
}
inline ::google::protobuf::int32 npt_officer_gift_notify::gift_id() const {
  return gift_id_;
}
inline void npt_officer_gift_notify::set_gift_id(::google::protobuf::int32 value) {
  set_has_gift_id();
  gift_id_ = value;
}

// -------------------------------------------------------------------

// npt_weak_nation_gift_get

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_GET];
inline bool npt_weak_nation_gift_get::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_weak_nation_gift_get::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_weak_nation_gift_get::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_weak_nation_gift_get::clear_type() {
  type_ = 50;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_weak_nation_gift_get::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_weak_nation_gift_get::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 gift_id = 2;
inline bool npt_weak_nation_gift_get::has_gift_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_weak_nation_gift_get::set_has_gift_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_weak_nation_gift_get::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_weak_nation_gift_get::clear_gift_id() {
  gift_id_ = 0;
  clear_has_gift_id();
}
inline ::google::protobuf::int32 npt_weak_nation_gift_get::gift_id() const {
  return gift_id_;
}
inline void npt_weak_nation_gift_get::set_gift_id(::google::protobuf::int32 value) {
  set_has_gift_id();
  gift_id_ = value;
}

// -------------------------------------------------------------------

// npt_weak_nation_gift_notify

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_NOTIFY];
inline bool npt_weak_nation_gift_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_weak_nation_gift_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_weak_nation_gift_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_weak_nation_gift_notify::clear_type() {
  type_ = 49;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_weak_nation_gift_notify::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_weak_nation_gift_notify::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 gift_id = 2;
inline bool npt_weak_nation_gift_notify::has_gift_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_weak_nation_gift_notify::set_has_gift_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_weak_nation_gift_notify::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_weak_nation_gift_notify::clear_gift_id() {
  gift_id_ = 0;
  clear_has_gift_id();
}
inline ::google::protobuf::int32 npt_weak_nation_gift_notify::gift_id() const {
  return gift_id_;
}
inline void npt_weak_nation_gift_notify::set_gift_id(::google::protobuf::int32 value) {
  set_has_gift_id();
  gift_id_ = value;
}

// -------------------------------------------------------------------

// npt_server_info_notify

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SERVER_INFO_NOTIFY];
inline bool npt_server_info_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_server_info_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_server_info_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_server_info_notify::clear_type() {
  type_ = 51;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_server_info_notify::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_server_info_notify::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 free_war_left = 2;
inline bool npt_server_info_notify::has_free_war_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_server_info_notify::set_has_free_war_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_server_info_notify::clear_has_free_war_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_server_info_notify::clear_free_war_left() {
  free_war_left_ = 0;
  clear_has_free_war_left();
}
inline ::google::protobuf::int32 npt_server_info_notify::free_war_left() const {
  return free_war_left_;
}
inline void npt_server_info_notify::set_free_war_left(::google::protobuf::int32 value) {
  set_has_free_war_left();
  free_war_left_ = value;
}

// -------------------------------------------------------------------

// npt_team_recruit_operate

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE];
inline bool npt_team_recruit_operate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_team_recruit_operate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_team_recruit_operate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_team_recruit_operate::clear_type() {
  type_ = 37;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_team_recruit_operate::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_team_recruit_operate::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 operate_type = 2;
inline bool npt_team_recruit_operate::has_operate_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_team_recruit_operate::set_has_operate_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_team_recruit_operate::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_team_recruit_operate::clear_operate_type() {
  operate_type_ = 0;
  clear_has_operate_type();
}
inline ::google::protobuf::int32 npt_team_recruit_operate::operate_type() const {
  return operate_type_;
}
inline void npt_team_recruit_operate::set_operate_type(::google::protobuf::int32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// optional int64 param1 = 3;
inline bool npt_team_recruit_operate::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_team_recruit_operate::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_team_recruit_operate::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_team_recruit_operate::clear_param1() {
  param1_ = GOOGLE_LONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::int64 npt_team_recruit_operate::param1() const {
  return param1_;
}
inline void npt_team_recruit_operate::set_param1(::google::protobuf::int64 value) {
  set_has_param1();
  param1_ = value;
}

// optional int64 param2 = 4;
inline bool npt_team_recruit_operate::has_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_team_recruit_operate::set_has_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_team_recruit_operate::clear_has_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_team_recruit_operate::clear_param2() {
  param2_ = GOOGLE_LONGLONG(0);
  clear_has_param2();
}
inline ::google::protobuf::int64 npt_team_recruit_operate::param2() const {
  return param2_;
}
inline void npt_team_recruit_operate::set_param2(::google::protobuf::int64 value) {
  set_has_param2();
  param2_ = value;
}

// optional int64 param3 = 5;
inline bool npt_team_recruit_operate::has_param3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_team_recruit_operate::set_has_param3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_team_recruit_operate::clear_has_param3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_team_recruit_operate::clear_param3() {
  param3_ = GOOGLE_LONGLONG(0);
  clear_has_param3();
}
inline ::google::protobuf::int64 npt_team_recruit_operate::param3() const {
  return param3_;
}
inline void npt_team_recruit_operate::set_param3(::google::protobuf::int64 value) {
  set_has_param3();
  param3_ = value;
}

// -------------------------------------------------------------------

// recruit_info

// optional int32 min_level = 1;
inline bool recruit_info::has_min_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void recruit_info::set_has_min_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void recruit_info::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void recruit_info::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
inline ::google::protobuf::int32 recruit_info::min_level() const {
  return min_level_;
}
inline void recruit_info::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
}

// optional int32 inst_tid = 2;
inline bool recruit_info::has_inst_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void recruit_info::set_has_inst_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void recruit_info::clear_has_inst_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void recruit_info::clear_inst_tid() {
  inst_tid_ = 0;
  clear_has_inst_tid();
}
inline ::google::protobuf::int32 recruit_info::inst_tid() const {
  return inst_tid_;
}
inline void recruit_info::set_inst_tid(::google::protobuf::int32 value) {
  set_has_inst_tid();
  inst_tid_ = value;
}

// optional int32 team_number = 3;
inline bool recruit_info::has_team_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void recruit_info::set_has_team_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void recruit_info::clear_has_team_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void recruit_info::clear_team_number() {
  team_number_ = 0;
  clear_has_team_number();
}
inline ::google::protobuf::int32 recruit_info::team_number() const {
  return team_number_;
}
inline void recruit_info::set_team_number(::google::protobuf::int32 value) {
  set_has_team_number();
  team_number_ = value;
}

// optional bytes leader_name = 4;
inline bool recruit_info::has_leader_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void recruit_info::set_has_leader_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void recruit_info::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void recruit_info::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& recruit_info::leader_name() const {
  return *leader_name_;
}
inline void recruit_info::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void recruit_info::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void recruit_info::set_leader_name(const void* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* recruit_info::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  return leader_name_;
}
inline ::std::string* recruit_info::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void recruit_info::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (leader_name) {
    set_has_leader_name();
    leader_name_ = leader_name;
  } else {
    clear_has_leader_name();
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 leader_id = 5;
inline bool recruit_info::has_leader_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void recruit_info::set_has_leader_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void recruit_info::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void recruit_info::clear_leader_id() {
  leader_id_ = GOOGLE_LONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::int64 recruit_info::leader_id() const {
  return leader_id_;
}
inline void recruit_info::set_leader_id(::google::protobuf::int64 value) {
  set_has_leader_id();
  leader_id_ = value;
}

// -------------------------------------------------------------------

// npt_team_recruit_operate_reply

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE_REPLY];
inline bool npt_team_recruit_operate_reply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_team_recruit_operate_reply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_team_recruit_operate_reply::clear_type() {
  type_ = 38;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_team_recruit_operate_reply::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_team_recruit_operate_reply::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 operate_type = 2;
inline bool npt_team_recruit_operate_reply::has_operate_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_operate_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_team_recruit_operate_reply::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_team_recruit_operate_reply::clear_operate_type() {
  operate_type_ = 0;
  clear_has_operate_type();
}
inline ::google::protobuf::int32 npt_team_recruit_operate_reply::operate_type() const {
  return operate_type_;
}
inline void npt_team_recruit_operate_reply::set_operate_type(::google::protobuf::int32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// optional int32 operate_result = 3;
inline bool npt_team_recruit_operate_reply::has_operate_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_operate_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_team_recruit_operate_reply::clear_has_operate_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_team_recruit_operate_reply::clear_operate_result() {
  operate_result_ = 0;
  clear_has_operate_result();
}
inline ::google::protobuf::int32 npt_team_recruit_operate_reply::operate_result() const {
  return operate_result_;
}
inline void npt_team_recruit_operate_reply::set_operate_result(::google::protobuf::int32 value) {
  set_has_operate_result();
  operate_result_ = value;
}

// optional int64 param1 = 4;
inline bool npt_team_recruit_operate_reply::has_param1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_param1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_team_recruit_operate_reply::clear_has_param1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_team_recruit_operate_reply::clear_param1() {
  param1_ = GOOGLE_LONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::int64 npt_team_recruit_operate_reply::param1() const {
  return param1_;
}
inline void npt_team_recruit_operate_reply::set_param1(::google::protobuf::int64 value) {
  set_has_param1();
  param1_ = value;
}

// optional int64 param2 = 5;
inline bool npt_team_recruit_operate_reply::has_param2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_param2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_team_recruit_operate_reply::clear_has_param2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_team_recruit_operate_reply::clear_param2() {
  param2_ = GOOGLE_LONGLONG(0);
  clear_has_param2();
}
inline ::google::protobuf::int64 npt_team_recruit_operate_reply::param2() const {
  return param2_;
}
inline void npt_team_recruit_operate_reply::set_param2(::google::protobuf::int64 value) {
  set_has_param2();
  param2_ = value;
}

// optional int64 param3 = 6;
inline bool npt_team_recruit_operate_reply::has_param3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_param3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npt_team_recruit_operate_reply::clear_has_param3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npt_team_recruit_operate_reply::clear_param3() {
  param3_ = GOOGLE_LONGLONG(0);
  clear_has_param3();
}
inline ::google::protobuf::int64 npt_team_recruit_operate_reply::param3() const {
  return param3_;
}
inline void npt_team_recruit_operate_reply::set_param3(::google::protobuf::int64 value) {
  set_has_param3();
  param3_ = value;
}

// repeated .PB.recruit_info recruit_list = 7;
inline int npt_team_recruit_operate_reply::recruit_list_size() const {
  return recruit_list_.size();
}
inline void npt_team_recruit_operate_reply::clear_recruit_list() {
  recruit_list_.Clear();
}
inline const ::PB::recruit_info& npt_team_recruit_operate_reply::recruit_list(int index) const {
  return recruit_list_.Get(index);
}
inline ::PB::recruit_info* npt_team_recruit_operate_reply::mutable_recruit_list(int index) {
  return recruit_list_.Mutable(index);
}
inline ::PB::recruit_info* npt_team_recruit_operate_reply::add_recruit_list() {
  return recruit_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::recruit_info >&
npt_team_recruit_operate_reply::recruit_list() const {
  return recruit_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::recruit_info >*
npt_team_recruit_operate_reply::mutable_recruit_list() {
  return &recruit_list_;
}

// optional bytes param4 = 8;
inline bool npt_team_recruit_operate_reply::has_param4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_param4() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npt_team_recruit_operate_reply::clear_has_param4() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npt_team_recruit_operate_reply::clear_param4() {
  if (param4_ != &::google::protobuf::internal::kEmptyString) {
    param4_->clear();
  }
  clear_has_param4();
}
inline const ::std::string& npt_team_recruit_operate_reply::param4() const {
  return *param4_;
}
inline void npt_team_recruit_operate_reply::set_param4(const ::std::string& value) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  param4_->assign(value);
}
inline void npt_team_recruit_operate_reply::set_param4(const char* value) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  param4_->assign(value);
}
inline void npt_team_recruit_operate_reply::set_param4(const void* value, size_t size) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  param4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_team_recruit_operate_reply::mutable_param4() {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  return param4_;
}
inline ::std::string* npt_team_recruit_operate_reply::release_param4() {
  clear_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param4_;
    param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_team_recruit_operate_reply::set_allocated_param4(::std::string* param4) {
  if (param4_ != &::google::protobuf::internal::kEmptyString) {
    delete param4_;
  }
  if (param4) {
    set_has_param4();
    param4_ = param4;
  } else {
    clear_has_param4();
    param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PB.a3d_pos param_pos = 9;
inline bool npt_team_recruit_operate_reply::has_param_pos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void npt_team_recruit_operate_reply::set_has_param_pos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void npt_team_recruit_operate_reply::clear_has_param_pos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void npt_team_recruit_operate_reply::clear_param_pos() {
  if (param_pos_ != NULL) param_pos_->::PB::a3d_pos::Clear();
  clear_has_param_pos();
}
inline const ::PB::a3d_pos& npt_team_recruit_operate_reply::param_pos() const {
  return param_pos_ != NULL ? *param_pos_ : *default_instance_->param_pos_;
}
inline ::PB::a3d_pos* npt_team_recruit_operate_reply::mutable_param_pos() {
  set_has_param_pos();
  if (param_pos_ == NULL) param_pos_ = new ::PB::a3d_pos;
  return param_pos_;
}
inline ::PB::a3d_pos* npt_team_recruit_operate_reply::release_param_pos() {
  clear_has_param_pos();
  ::PB::a3d_pos* temp = param_pos_;
  param_pos_ = NULL;
  return temp;
}
inline void npt_team_recruit_operate_reply::set_allocated_param_pos(::PB::a3d_pos* param_pos) {
  delete param_pos_;
  param_pos_ = param_pos;
  if (param_pos) {
    set_has_param_pos();
  } else {
    clear_has_param_pos();
  }
}

// -------------------------------------------------------------------

// npt_update_grc_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_UPDATE_GRC_INFO];
inline bool npt_update_grc_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_update_grc_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_update_grc_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_update_grc_info::clear_type() {
  type_ = 39;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_update_grc_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_update_grc_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// npt_grc_get_friend_info

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GET_FRIEND_INFO];
inline bool npt_grc_get_friend_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_get_friend_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_get_friend_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_get_friend_info::clear_type() {
  type_ = 40;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_get_friend_info::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_get_friend_info::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 start = 2;
inline bool npt_grc_get_friend_info::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_get_friend_info::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_get_friend_info::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_get_friend_info::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 npt_grc_get_friend_info::start() const {
  return start_;
}
inline void npt_grc_get_friend_info::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
}

// required int32 offset = 3;
inline bool npt_grc_get_friend_info::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_get_friend_info::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_get_friend_info::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_get_friend_info::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 npt_grc_get_friend_info::offset() const {
  return offset_;
}
inline void npt_grc_get_friend_info::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// npt_grc_send_gift

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT];
inline bool npt_grc_send_gift::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_send_gift::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_send_gift::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_send_gift::clear_type() {
  type_ = 41;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_send_gift::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_send_gift::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 giftType = 2;
inline bool npt_grc_send_gift::has_gifttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_send_gift::set_has_gifttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_send_gift::clear_has_gifttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_send_gift::clear_gifttype() {
  gifttype_ = 0;
  clear_has_gifttype();
}
inline ::google::protobuf::int32 npt_grc_send_gift::gifttype() const {
  return gifttype_;
}
inline void npt_grc_send_gift::set_gifttype(::google::protobuf::int32 value) {
  set_has_gifttype();
  gifttype_ = value;
}

// required int64 giftCount = 3;
inline bool npt_grc_send_gift::has_giftcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_send_gift::set_has_giftcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_send_gift::clear_has_giftcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_send_gift::clear_giftcount() {
  giftcount_ = GOOGLE_LONGLONG(0);
  clear_has_giftcount();
}
inline ::google::protobuf::int64 npt_grc_send_gift::giftcount() const {
  return giftcount_;
}
inline void npt_grc_send_gift::set_giftcount(::google::protobuf::int64 value) {
  set_has_giftcount();
  giftcount_ = value;
}

// required bytes to = 4;
inline bool npt_grc_send_gift::has_to() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_grc_send_gift::set_has_to() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_grc_send_gift::clear_has_to() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_grc_send_gift::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& npt_grc_send_gift::to() const {
  return *to_;
}
inline void npt_grc_send_gift::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void npt_grc_send_gift::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void npt_grc_send_gift::set_to(const void* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_grc_send_gift::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* npt_grc_send_gift::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_grc_send_gift::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// npt_grc_rcv_gift

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT];
inline bool npt_grc_rcv_gift::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_rcv_gift::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_rcv_gift::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_rcv_gift::clear_type() {
  type_ = 42;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_rcv_gift::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_rcv_gift::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 giftType = 2;
inline bool npt_grc_rcv_gift::has_gifttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_rcv_gift::set_has_gifttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_rcv_gift::clear_has_gifttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_rcv_gift::clear_gifttype() {
  gifttype_ = 0;
  clear_has_gifttype();
}
inline ::google::protobuf::int32 npt_grc_rcv_gift::gifttype() const {
  return gifttype_;
}
inline void npt_grc_rcv_gift::set_gifttype(::google::protobuf::int32 value) {
  set_has_gifttype();
  gifttype_ = value;
}

// required int64 giftCount = 3;
inline bool npt_grc_rcv_gift::has_giftcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_rcv_gift::set_has_giftcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_rcv_gift::clear_has_giftcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_rcv_gift::clear_giftcount() {
  giftcount_ = GOOGLE_LONGLONG(0);
  clear_has_giftcount();
}
inline ::google::protobuf::int64 npt_grc_rcv_gift::giftcount() const {
  return giftcount_;
}
inline void npt_grc_rcv_gift::set_giftcount(::google::protobuf::int64 value) {
  set_has_giftcount();
  giftcount_ = value;
}

// required int64 timestamp = 4;
inline bool npt_grc_rcv_gift::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npt_grc_rcv_gift::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npt_grc_rcv_gift::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npt_grc_rcv_gift::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 npt_grc_rcv_gift::timestamp() const {
  return timestamp_;
}
inline void npt_grc_rcv_gift::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required bytes from = 5;
inline bool npt_grc_rcv_gift::has_from() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npt_grc_rcv_gift::set_has_from() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npt_grc_rcv_gift::clear_has_from() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npt_grc_rcv_gift::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& npt_grc_rcv_gift::from() const {
  return *from_;
}
inline void npt_grc_rcv_gift::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void npt_grc_rcv_gift::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void npt_grc_rcv_gift::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_grc_rcv_gift::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* npt_grc_rcv_gift::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_grc_rcv_gift::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// grc_friend_info

// required bytes openid = 1;
inline bool grc_friend_info::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void grc_friend_info::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void grc_friend_info::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void grc_friend_info::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& grc_friend_info::openid() const {
  return *openid_;
}
inline void grc_friend_info::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void grc_friend_info::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void grc_friend_info::set_openid(const void* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_friend_info::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* grc_friend_info::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_friend_info::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes nickname = 2;
inline bool grc_friend_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void grc_friend_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void grc_friend_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void grc_friend_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& grc_friend_info::nickname() const {
  return *nickname_;
}
inline void grc_friend_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void grc_friend_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void grc_friend_info::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_friend_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* grc_friend_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_friend_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes figure_url = 3;
inline bool grc_friend_info::has_figure_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void grc_friend_info::set_has_figure_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void grc_friend_info::clear_has_figure_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void grc_friend_info::clear_figure_url() {
  if (figure_url_ != &::google::protobuf::internal::kEmptyString) {
    figure_url_->clear();
  }
  clear_has_figure_url();
}
inline const ::std::string& grc_friend_info::figure_url() const {
  return *figure_url_;
}
inline void grc_friend_info::set_figure_url(const ::std::string& value) {
  set_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    figure_url_ = new ::std::string;
  }
  figure_url_->assign(value);
}
inline void grc_friend_info::set_figure_url(const char* value) {
  set_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    figure_url_ = new ::std::string;
  }
  figure_url_->assign(value);
}
inline void grc_friend_info::set_figure_url(const void* value, size_t size) {
  set_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    figure_url_ = new ::std::string;
  }
  figure_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_friend_info::mutable_figure_url() {
  set_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    figure_url_ = new ::std::string;
  }
  return figure_url_;
}
inline ::std::string* grc_friend_info::release_figure_url() {
  clear_has_figure_url();
  if (figure_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = figure_url_;
    figure_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_friend_info::set_allocated_figure_url(::std::string* figure_url) {
  if (figure_url_ != &::google::protobuf::internal::kEmptyString) {
    delete figure_url_;
  }
  if (figure_url) {
    set_has_figure_url();
    figure_url_ = figure_url;
  } else {
    clear_has_figure_url();
    figure_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 roleid = 4;
inline bool grc_friend_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void grc_friend_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void grc_friend_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void grc_friend_info::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 grc_friend_info::roleid() const {
  return roleid_;
}
inline void grc_friend_info::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required bytes rolename = 5;
inline bool grc_friend_info::has_rolename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void grc_friend_info::set_has_rolename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void grc_friend_info::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void grc_friend_info::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& grc_friend_info::rolename() const {
  return *rolename_;
}
inline void grc_friend_info::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void grc_friend_info::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void grc_friend_info::set_rolename(const void* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_friend_info::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* grc_friend_info::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_friend_info::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 6;
inline bool grc_friend_info::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void grc_friend_info::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void grc_friend_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void grc_friend_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 grc_friend_info::level() const {
  return level_;
}
inline void grc_friend_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 gender = 7;
inline bool grc_friend_info::has_gender() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void grc_friend_info::set_has_gender() {
  _has_bits_[0] |= 0x00000040u;
}
inline void grc_friend_info::clear_has_gender() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void grc_friend_info::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::google::protobuf::int32 grc_friend_info::gender() const {
  return gender_;
}
inline void grc_friend_info::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
}

// required int32 profession = 8;
inline bool grc_friend_info::has_profession() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void grc_friend_info::set_has_profession() {
  _has_bits_[0] |= 0x00000080u;
}
inline void grc_friend_info::clear_has_profession() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void grc_friend_info::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 grc_friend_info::profession() const {
  return profession_;
}
inline void grc_friend_info::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// required int32 nation = 9;
inline bool grc_friend_info::has_nation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void grc_friend_info::set_has_nation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void grc_friend_info::clear_has_nation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void grc_friend_info::clear_nation() {
  nation_ = 0;
  clear_has_nation();
}
inline ::google::protobuf::int32 grc_friend_info::nation() const {
  return nation_;
}
inline void grc_friend_info::set_nation(::google::protobuf::int32 value) {
  set_has_nation();
  nation_ = value;
}

// required int64 fightingcapacity = 10;
inline bool grc_friend_info::has_fightingcapacity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void grc_friend_info::set_has_fightingcapacity() {
  _has_bits_[0] |= 0x00000200u;
}
inline void grc_friend_info::clear_has_fightingcapacity() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void grc_friend_info::clear_fightingcapacity() {
  fightingcapacity_ = GOOGLE_LONGLONG(0);
  clear_has_fightingcapacity();
}
inline ::google::protobuf::int64 grc_friend_info::fightingcapacity() const {
  return fightingcapacity_;
}
inline void grc_friend_info::set_fightingcapacity(::google::protobuf::int64 value) {
  set_has_fightingcapacity();
  fightingcapacity_ = value;
}

// required bool sameserver = 11;
inline bool grc_friend_info::has_sameserver() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void grc_friend_info::set_has_sameserver() {
  _has_bits_[0] |= 0x00000400u;
}
inline void grc_friend_info::clear_has_sameserver() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void grc_friend_info::clear_sameserver() {
  sameserver_ = false;
  clear_has_sameserver();
}
inline bool grc_friend_info::sameserver() const {
  return sameserver_;
}
inline void grc_friend_info::set_sameserver(bool value) {
  set_has_sameserver();
  sameserver_ = value;
}

// required int32 vipinfo = 12;
inline bool grc_friend_info::has_vipinfo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void grc_friend_info::set_has_vipinfo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void grc_friend_info::clear_has_vipinfo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void grc_friend_info::clear_vipinfo() {
  vipinfo_ = 0;
  clear_has_vipinfo();
}
inline ::google::protobuf::int32 grc_friend_info::vipinfo() const {
  return vipinfo_;
}
inline void grc_friend_info::set_vipinfo(::google::protobuf::int32 value) {
  set_has_vipinfo();
  vipinfo_ = value;
}

// -------------------------------------------------------------------

// npt_grc_friend_list

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_FRIEND_LIST];
inline bool npt_grc_friend_list::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_friend_list::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_friend_list::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_friend_list::clear_type() {
  type_ = 43;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_friend_list::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_friend_list::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 retcode = 2;
inline bool npt_grc_friend_list::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_friend_list::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_friend_list::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_friend_list::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_grc_friend_list::retcode() const {
  return retcode_;
}
inline void npt_grc_friend_list::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int32 total_friend_count = 3;
inline bool npt_grc_friend_list::has_total_friend_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_friend_list::set_has_total_friend_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_friend_list::clear_has_total_friend_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_friend_list::clear_total_friend_count() {
  total_friend_count_ = 0;
  clear_has_total_friend_count();
}
inline ::google::protobuf::int32 npt_grc_friend_list::total_friend_count() const {
  return total_friend_count_;
}
inline void npt_grc_friend_list::set_total_friend_count(::google::protobuf::int32 value) {
  set_has_total_friend_count();
  total_friend_count_ = value;
}

// repeated .PB.grc_friend_info friend = 4;
inline int npt_grc_friend_list::friend__size() const {
  return friend__.size();
}
inline void npt_grc_friend_list::clear_friend_() {
  friend__.Clear();
}
inline const ::PB::grc_friend_info& npt_grc_friend_list::friend_(int index) const {
  return friend__.Get(index);
}
inline ::PB::grc_friend_info* npt_grc_friend_list::mutable_friend_(int index) {
  return friend__.Mutable(index);
}
inline ::PB::grc_friend_info* npt_grc_friend_list::add_friend_() {
  return friend__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_friend_info >&
npt_grc_friend_list::friend_() const {
  return friend__;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::grc_friend_info >*
npt_grc_friend_list::mutable_friend_() {
  return &friend__;
}

// -------------------------------------------------------------------

// grc_gift_info

// required int32 gift_type = 1;
inline bool grc_gift_info::has_gift_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void grc_gift_info::set_has_gift_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void grc_gift_info::clear_has_gift_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void grc_gift_info::clear_gift_type() {
  gift_type_ = 0;
  clear_has_gift_type();
}
inline ::google::protobuf::int32 grc_gift_info::gift_type() const {
  return gift_type_;
}
inline void grc_gift_info::set_gift_type(::google::protobuf::int32 value) {
  set_has_gift_type();
  gift_type_ = value;
}

// required bytes from = 2;
inline bool grc_gift_info::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void grc_gift_info::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void grc_gift_info::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void grc_gift_info::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& grc_gift_info::from() const {
  return *from_;
}
inline void grc_gift_info::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void grc_gift_info::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void grc_gift_info::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_gift_info::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* grc_gift_info::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_gift_info::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes to = 3;
inline bool grc_gift_info::has_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void grc_gift_info::set_has_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void grc_gift_info::clear_has_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void grc_gift_info::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& grc_gift_info::to() const {
  return *to_;
}
inline void grc_gift_info::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void grc_gift_info::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void grc_gift_info::set_to(const void* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_gift_info::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* grc_gift_info::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_gift_info::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 count = 4;
inline bool grc_gift_info::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void grc_gift_info::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void grc_gift_info::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void grc_gift_info::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::int64 grc_gift_info::count() const {
  return count_;
}
inline void grc_gift_info::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
}

// required int32 flag = 5;
inline bool grc_gift_info::has_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void grc_gift_info::set_has_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void grc_gift_info::clear_has_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void grc_gift_info::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 grc_gift_info::flag() const {
  return flag_;
}
inline void grc_gift_info::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// required int64 timestamp = 6;
inline bool grc_gift_info::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void grc_gift_info::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void grc_gift_info::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void grc_gift_info::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 grc_gift_info::timestamp() const {
  return timestamp_;
}
inline void grc_gift_info::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required int32 serialid = 7;
inline bool grc_gift_info::has_serialid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void grc_gift_info::set_has_serialid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void grc_gift_info::clear_has_serialid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void grc_gift_info::clear_serialid() {
  serialid_ = 0;
  clear_has_serialid();
}
inline ::google::protobuf::int32 grc_gift_info::serialid() const {
  return serialid_;
}
inline void grc_gift_info::set_serialid(::google::protobuf::int32 value) {
  set_has_serialid();
  serialid_ = value;
}

// optional bytes nickname = 8;
inline bool grc_gift_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void grc_gift_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void grc_gift_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void grc_gift_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& grc_gift_info::nickname() const {
  return *nickname_;
}
inline void grc_gift_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void grc_gift_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void grc_gift_info::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* grc_gift_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* grc_gift_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void grc_gift_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// grc_user_gift_info

// required int32 gift_type = 1;
inline bool grc_user_gift_info::has_gift_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void grc_user_gift_info::set_has_gift_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void grc_user_gift_info::clear_has_gift_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void grc_user_gift_info::clear_gift_type() {
  gift_type_ = 0;
  clear_has_gift_type();
}
inline ::google::protobuf::int32 grc_user_gift_info::gift_type() const {
  return gift_type_;
}
inline void grc_user_gift_info::set_gift_type(::google::protobuf::int32 value) {
  set_has_gift_type();
  gift_type_ = value;
}

// repeated .PB.grc_gift_info giftsend = 2;
inline int grc_user_gift_info::giftsend_size() const {
  return giftsend_.size();
}
inline void grc_user_gift_info::clear_giftsend() {
  giftsend_.Clear();
}
inline const ::PB::grc_gift_info& grc_user_gift_info::giftsend(int index) const {
  return giftsend_.Get(index);
}
inline ::PB::grc_gift_info* grc_user_gift_info::mutable_giftsend(int index) {
  return giftsend_.Mutable(index);
}
inline ::PB::grc_gift_info* grc_user_gift_info::add_giftsend() {
  return giftsend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >&
grc_user_gift_info::giftsend() const {
  return giftsend_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >*
grc_user_gift_info::mutable_giftsend() {
  return &giftsend_;
}

// required int64 giftreceive_times = 3;
inline bool grc_user_gift_info::has_giftreceive_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void grc_user_gift_info::set_has_giftreceive_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void grc_user_gift_info::clear_has_giftreceive_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void grc_user_gift_info::clear_giftreceive_times() {
  giftreceive_times_ = GOOGLE_LONGLONG(0);
  clear_has_giftreceive_times();
}
inline ::google::protobuf::int64 grc_user_gift_info::giftreceive_times() const {
  return giftreceive_times_;
}
inline void grc_user_gift_info::set_giftreceive_times(::google::protobuf::int64 value) {
  set_has_giftreceive_times();
  giftreceive_times_ = value;
}

// repeated .PB.grc_gift_info giftreceive = 4;
inline int grc_user_gift_info::giftreceive_size() const {
  return giftreceive_.size();
}
inline void grc_user_gift_info::clear_giftreceive() {
  giftreceive_.Clear();
}
inline const ::PB::grc_gift_info& grc_user_gift_info::giftreceive(int index) const {
  return giftreceive_.Get(index);
}
inline ::PB::grc_gift_info* grc_user_gift_info::mutable_giftreceive(int index) {
  return giftreceive_.Mutable(index);
}
inline ::PB::grc_gift_info* grc_user_gift_info::add_giftreceive() {
  return giftreceive_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >&
grc_user_gift_info::giftreceive() const {
  return giftreceive_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::grc_gift_info >*
grc_user_gift_info::mutable_giftreceive() {
  return &giftreceive_;
}

// -------------------------------------------------------------------

// npt_grc_gift_list

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GIFT_LIST];
inline bool npt_grc_gift_list::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_gift_list::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_gift_list::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_gift_list::clear_type() {
  type_ = 44;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_gift_list::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_gift_list::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PB.grc_user_gift_info gift = 2;
inline int npt_grc_gift_list::gift_size() const {
  return gift_.size();
}
inline void npt_grc_gift_list::clear_gift() {
  gift_.Clear();
}
inline const ::PB::grc_user_gift_info& npt_grc_gift_list::gift(int index) const {
  return gift_.Get(index);
}
inline ::PB::grc_user_gift_info* npt_grc_gift_list::mutable_gift(int index) {
  return gift_.Mutable(index);
}
inline ::PB::grc_user_gift_info* npt_grc_gift_list::add_gift() {
  return gift_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::grc_user_gift_info >&
npt_grc_gift_list::gift() const {
  return gift_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::grc_user_gift_info >*
npt_grc_gift_list::mutable_gift() {
  return &gift_;
}

// -------------------------------------------------------------------

// npt_grc_send_gift_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT_RE];
inline bool npt_grc_send_gift_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_send_gift_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_send_gift_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_send_gift_re::clear_type() {
  type_ = 45;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_send_gift_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_send_gift_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required bytes to = 2;
inline bool npt_grc_send_gift_re::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_send_gift_re::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_send_gift_re::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_send_gift_re::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& npt_grc_send_gift_re::to() const {
  return *to_;
}
inline void npt_grc_send_gift_re::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void npt_grc_send_gift_re::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void npt_grc_send_gift_re::set_to(const void* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_grc_send_gift_re::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* npt_grc_send_gift_re::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_grc_send_gift_re::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 retcode = 3;
inline bool npt_grc_send_gift_re::has_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_send_gift_re::set_has_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_send_gift_re::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_send_gift_re::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_grc_send_gift_re::retcode() const {
  return retcode_;
}
inline void npt_grc_send_gift_re::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// -------------------------------------------------------------------

// npt_grc_rcv_gift_re

// optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT_RE];
inline bool npt_grc_rcv_gift_re::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npt_grc_rcv_gift_re::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npt_grc_rcv_gift_re::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npt_grc_rcv_gift_re::clear_type() {
  type_ = 46;
  clear_has_type();
}
inline ::PB::NET_PROTOCBUF_TYPE npt_grc_rcv_gift_re::type() const {
  return static_cast< ::PB::NET_PROTOCBUF_TYPE >(type_);
}
inline void npt_grc_rcv_gift_re::set_type(::PB::NET_PROTOCBUF_TYPE value) {
  assert(::PB::NET_PROTOCBUF_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required bytes from = 2;
inline bool npt_grc_rcv_gift_re::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npt_grc_rcv_gift_re::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npt_grc_rcv_gift_re::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npt_grc_rcv_gift_re::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& npt_grc_rcv_gift_re::from() const {
  return *from_;
}
inline void npt_grc_rcv_gift_re::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void npt_grc_rcv_gift_re::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void npt_grc_rcv_gift_re::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npt_grc_rcv_gift_re::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* npt_grc_rcv_gift_re::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npt_grc_rcv_gift_re::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 retcode = 3;
inline bool npt_grc_rcv_gift_re::has_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npt_grc_rcv_gift_re::set_has_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npt_grc_rcv_gift_re::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npt_grc_rcv_gift_re::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 npt_grc_rcv_gift_re::retcode() const {
  return retcode_;
}
inline void npt_grc_rcv_gift_re::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::zhaojiling_info_ZHAOJI_TYPE>() {
  return ::PB::zhaojiling_info_ZHAOJI_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::greeting_info_GREETING_TYPE>() {
  return ::PB::greeting_info_GREETING_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::ask_help_info_relation_type>() {
  return ::PB::ask_help_info_relation_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_corps_appoint_CORPS_APPOINT_OP>() {
  return ::PB::npt_corps_appoint_CORPS_APPOINT_OP_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_sync_mirror_info_MIRROR_STATE_MASK>() {
  return ::PB::npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_get_player_profile_GET_PROFILE_MASK>() {
  return ::PB::npt_get_player_profile_GET_PROFILE_MASK_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_nationwar_event_NNE_TYPE>() {
  return ::PB::npt_nationwar_event_NNE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_request_info_INFO_TYPE>() {
  return ::PB::npt_request_info_INFO_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_nation_shutup_reply_RESULT_TYPE>() {
  return ::PB::npt_nation_shutup_reply_RESULT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_greeting_info_sync_SYNC_TYPE>() {
  return ::PB::npt_greeting_info_sync_SYNC_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_team_recruit_operate_OPERATE_TYPE>() {
  return ::PB::npt_team_recruit_operate_OPERATE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::npt_team_recruit_operate_reply_RESULT>() {
  return ::PB::npt_team_recruit_operate_reply_RESULT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::GPS_TYPE>() {
  return ::PB::GPS_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::CORPS_POSITION>() {
  return ::PB::CORPS_POSITION_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::MIRROR_STATE>() {
  return ::PB::MIRROR_STATE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::ask_help_info_type>() {
  return ::PB::ask_help_info_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::NET_PROTOCBUF_TYPE>() {
  return ::PB::NET_PROTOCBUF_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PB_2fnet_5fcommon_2eproto__INCLUDED
