// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PB/net_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PB/net_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PB {

namespace {

const ::google::protobuf::Descriptor* a3d_pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  a3d_pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_id_name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_id_name_reflection_ = NULL;
const ::google::protobuf::Descriptor* general_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  general_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* general_list_item_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  general_list_item_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* simple_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  simple_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* other_player_profile_from_gs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  other_player_profile_from_gs_reflection_ = NULL;
const ::google::protobuf::Descriptor* corp_chariot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  corp_chariot_reflection_ = NULL;
const ::google::protobuf::Descriptor* corp_chariot_chariot_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  corp_chariot_chariot_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* corp_repu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  corp_repu_reflection_ = NULL;
const ::google::protobuf::Descriptor* ipt_mirror_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ipt_mirror_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* zhaojiling_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zhaojiling_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* zhaojiling_info_ZHAOJI_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* corps_member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  corps_member_reflection_ = NULL;
const ::google::protobuf::Descriptor* corps_apply_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  corps_apply_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* corp_attribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  corp_attribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* corp_attribute_corp_skill_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  corp_attribute_corp_skill_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* corps_struct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  corps_struct_reflection_ = NULL;
const ::google::protobuf::Descriptor* facebook_str_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facebook_str_reflection_ = NULL;
const ::google::protobuf::Descriptor* face_book_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  face_book_reflection_ = NULL;
const ::google::protobuf::Descriptor* idip_role_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  idip_role_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_list_custom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_list_custom_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_role_mutable_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_role_mutable_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* nation_war_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nation_war_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* blessing_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blessing_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* card_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  card_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* greeting_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  greeting_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* greeting_info_GREETING_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ask_help_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ask_help_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ask_help_info_relation_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* roam_match_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roam_match_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_roam_record_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_roam_record_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_roam_record_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_roam_record_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* instance_extend_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  instance_extend_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* corp_farmland_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  corp_farmland_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_instance_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_instance_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_instance_config_client_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_instance_config_client_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_instance_config_server_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_instance_config_server_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_corps_attr_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_corps_attr_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_corps_attr_config_rent_chariot_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_corps_attr_config_rent_chariot_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_stune_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_stune_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_stune_config_player_rune_prop_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_stune_config_player_rune_prop_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_stune_config_player_rune_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_stune_config_player_rune_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_stune_config_config_set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_stune_config_config_set_reflection_ = NULL;
const ::google::protobuf::Descriptor* black_shop_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  black_shop_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* black_shop_info_black_shop_goods_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  black_shop_info_black_shop_goods_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* climbtower_magic_shop_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  climbtower_magic_shop_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* climbtower_magic_shop_info_magic_shop_goods_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  climbtower_magic_shop_info_magic_shop_goods_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_hero_trial_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_hero_trial_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* level_shopid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  level_shopid_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_strategy_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_strategy_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_strategy_vectors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_strategy_vectors_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_surface_soul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_surface_soul_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_wing_refine_soul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_wing_refine_soul_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_refine_surfaces_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_refine_surfaces_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_equip_soul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_equip_soul_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_equip_fixed_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_equip_fixed_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_magic_weapon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_magic_weapon_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_magic_weapon_property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_magic_weapon_property_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_magic_weapon_refine_group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_magic_weapon_refine_group_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_magic_weapon_refine_group_refine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_magic_weapon_refine_group_refine_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_magic_weapons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_magic_weapons_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_general_soul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_general_soul_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_general_souls_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_general_souls_reflection_ = NULL;
const ::google::protobuf::Descriptor* wine_game_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wine_game_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* pixiu_service_buy_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pixiu_service_buy_record_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_test_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_response_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_corps_appoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_corps_appoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* npt_corps_appoint_CORPS_APPOINT_OP_descriptor_ = NULL;
const ::google::protobuf::Descriptor* npt_apply_corps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_apply_corps_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_corps_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_corps_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* name_ruid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  name_ruid_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_common_search_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_common_search_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_common_search_search_corps_key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_common_search_search_corps_key_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_common_search_search_player_key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_common_search_search_player_key_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_zhaojiling_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_zhaojiling_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_sync_mirror_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_sync_mirror_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor_ = NULL;
const ::google::protobuf::Descriptor* npt_sync_nation_war_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_sync_nation_war_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_sync_nation_war_info_nwar_npc_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_sync_nation_war_info_nwar_npc_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_get_corp_name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_get_corp_name_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_nation_war_operate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_nation_war_operate_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_nation_war_operate_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_nation_war_operate_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_nation_war_operate_info_re_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_nation_war_operate_info_re_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_team_invite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_team_invite_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_friend_invite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_friend_invite_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_team_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_team_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_team_info_team_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_team_info_team_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* other_player_profile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  other_player_profile_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_get_player_profile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_get_player_profile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* npt_get_player_profile_GET_PROFILE_MASK_descriptor_ = NULL;
const ::google::protobuf::Descriptor* npt_blessing_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_blessing_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_nationwar_event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_nationwar_event_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* npt_nationwar_event_NNE_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* npt_nation_shutup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_nation_shutup_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_nation_shutup_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_nation_shutup_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_nation_commander_appoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_nation_commander_appoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_nation_commander_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_nation_commander_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_nation_war_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_nation_war_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_request_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_request_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* npt_request_info_INFO_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* npt_nation_shutup_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_nation_shutup_reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* npt_nation_shutup_reply_RESULT_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* npt_greeting_info_sync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_greeting_info_sync_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* npt_greeting_info_sync_SYNC_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* npt_greeting_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_greeting_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_ask_help_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_ask_help_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_send_server_midas_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_send_server_midas_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_send_tencent_secure_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_send_tencent_secure_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_send_client_midas_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_send_client_midas_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_send_midas_bad_token_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_send_midas_bad_token_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_officer_gift_get_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_officer_gift_get_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_officer_gift_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_officer_gift_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_weak_nation_gift_get_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_weak_nation_gift_get_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_weak_nation_gift_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_weak_nation_gift_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_server_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_server_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_team_recruit_operate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_team_recruit_operate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* npt_team_recruit_operate_OPERATE_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* recruit_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  recruit_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_team_recruit_operate_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_team_recruit_operate_reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* npt_team_recruit_operate_reply_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* npt_update_grc_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_update_grc_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_grc_get_friend_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_grc_get_friend_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_grc_send_gift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_grc_send_gift_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_grc_rcv_gift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_grc_rcv_gift_reflection_ = NULL;
const ::google::protobuf::Descriptor* grc_friend_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  grc_friend_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_grc_friend_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_grc_friend_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* grc_gift_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  grc_gift_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* grc_user_gift_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  grc_user_gift_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_grc_gift_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_grc_gift_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_grc_send_gift_re_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_grc_send_gift_re_reflection_ = NULL;
const ::google::protobuf::Descriptor* npt_grc_rcv_gift_re_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npt_grc_rcv_gift_re_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GPS_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CORPS_POSITION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MIRROR_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ask_help_info_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NET_PROTOCBUF_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto() {
  protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PB/net_common.proto");
  GOOGLE_CHECK(file != NULL);
  a3d_pos_descriptor_ = file->message_type(0);
  static const int a3d_pos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(a3d_pos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(a3d_pos, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(a3d_pos, y_),
  };
  a3d_pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      a3d_pos_descriptor_,
      a3d_pos::default_instance_,
      a3d_pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(a3d_pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(a3d_pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(a3d_pos));
  player_id_name_descriptor_ = file->message_type(1);
  static const int player_id_name_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_id_name, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_id_name, name_),
  };
  player_id_name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_id_name_descriptor_,
      player_id_name::default_instance_,
      player_id_name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_id_name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_id_name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_id_name));
  general_list_descriptor_ = file->message_type(2);
  static const int general_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(general_list, item_list_),
  };
  general_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      general_list_descriptor_,
      general_list::default_instance_,
      general_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(general_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(general_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(general_list));
  general_list_item_data_descriptor_ = general_list_descriptor_->nested_type(0);
  static const int general_list_item_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(general_list_item_data, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(general_list_item_data, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(general_list_item_data, locked_),
  };
  general_list_item_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      general_list_item_data_descriptor_,
      general_list_item_data::default_instance_,
      general_list_item_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(general_list_item_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(general_list_item_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(general_list_item_data));
  simple_list_descriptor_ = file->message_type(3);
  static const int simple_list_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(simple_list, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(simple_list, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(simple_list, name_),
  };
  simple_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      simple_list_descriptor_,
      simple_list::default_instance_,
      simple_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(simple_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(simple_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(simple_list));
  test_data_descriptor_ = file->message_type(4);
  static const int test_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_data, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_data, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_data, info_),
  };
  test_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_data_descriptor_,
      test_data::default_instance_,
      test_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_data));
  other_player_profile_from_gs_descriptor_ = file->message_type(5);
  static const int other_player_profile_from_gs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_profile_from_gs, achievement_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_profile_from_gs, achievement_count_),
  };
  other_player_profile_from_gs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      other_player_profile_from_gs_descriptor_,
      other_player_profile_from_gs::default_instance_,
      other_player_profile_from_gs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_profile_from_gs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_profile_from_gs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(other_player_profile_from_gs));
  corp_chariot_descriptor_ = file->message_type(6);
  static const int corp_chariot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_chariot, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_chariot, chariots_),
  };
  corp_chariot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      corp_chariot_descriptor_,
      corp_chariot::default_instance_,
      corp_chariot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_chariot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_chariot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(corp_chariot));
  corp_chariot_chariot_info_descriptor_ = corp_chariot_descriptor_->nested_type(0);
  static const int corp_chariot_chariot_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_chariot_chariot_info, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_chariot_chariot_info, driver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_chariot_chariot_info, rent_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_chariot_chariot_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_chariot_chariot_info, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_chariot_chariot_info, is_upgrade_),
  };
  corp_chariot_chariot_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      corp_chariot_chariot_info_descriptor_,
      corp_chariot_chariot_info::default_instance_,
      corp_chariot_chariot_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_chariot_chariot_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_chariot_chariot_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(corp_chariot_chariot_info));
  corp_repu_descriptor_ = file->message_type(7);
  static const int corp_repu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_repu, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_repu, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_repu, time_),
  };
  corp_repu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      corp_repu_descriptor_,
      corp_repu::default_instance_,
      corp_repu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_repu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_repu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(corp_repu));
  ipt_mirror_info_descriptor_ = file->message_type(8);
  static const int ipt_mirror_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipt_mirror_info, mirrorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipt_mirror_info, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipt_mirror_info, create_time_),
  };
  ipt_mirror_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ipt_mirror_info_descriptor_,
      ipt_mirror_info::default_instance_,
      ipt_mirror_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipt_mirror_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipt_mirror_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ipt_mirror_info));
  zhaojiling_info_descriptor_ = file->message_type(9);
  static const int zhaojiling_info_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, src_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, delay_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, scene_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, random_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, zhaojiling_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, src_corp_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, src_nation_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, mirror_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, inst_tid_),
  };
  zhaojiling_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      zhaojiling_info_descriptor_,
      zhaojiling_info::default_instance_,
      zhaojiling_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhaojiling_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(zhaojiling_info));
  zhaojiling_info_ZHAOJI_TYPE_descriptor_ = zhaojiling_info_descriptor_->enum_type(0);
  corps_member_descriptor_ = file->message_type(10);
  static const int corps_member_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, join_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, idphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, contri_cumulate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, leave_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, online_time_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, boss_feed_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, elixir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, fightcapacity_),
  };
  corps_member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      corps_member_descriptor_,
      corps_member::default_instance_,
      corps_member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(corps_member));
  corps_apply_t_descriptor_ = file->message_type(11);
  static const int corps_apply_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_apply_t, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_apply_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_apply_t, apply_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_apply_t, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_apply_t, prof_),
  };
  corps_apply_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      corps_apply_t_descriptor_,
      corps_apply_t::default_instance_,
      corps_apply_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_apply_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_apply_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(corps_apply_t));
  corp_attribute_descriptor_ = file->message_type(12);
  static const int corp_attribute_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_attribute, skill_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_attribute, shop_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_attribute, corp_repu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_attribute, boss_feed_toplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_attribute, chariot_),
  };
  corp_attribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      corp_attribute_descriptor_,
      corp_attribute::default_instance_,
      corp_attribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_attribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_attribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(corp_attribute));
  corp_attribute_corp_skill_room_descriptor_ = corp_attribute_descriptor_->nested_type(0);
  static const int corp_attribute_corp_skill_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_attribute_corp_skill_room, addon_level_),
  };
  corp_attribute_corp_skill_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      corp_attribute_corp_skill_room_descriptor_,
      corp_attribute_corp_skill_room::default_instance_,
      corp_attribute_corp_skill_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_attribute_corp_skill_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_attribute_corp_skill_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(corp_attribute_corp_skill_room));
  corps_struct_descriptor_ = file->message_type(13);
  static const int corps_struct_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, announce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, announce_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, contri_cumulate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, apply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, last_resume_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, corp_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, qqgroup_openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, qqgroup_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, qqgroup_joinkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, login_time_),
  };
  corps_struct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      corps_struct_descriptor_,
      corps_struct::default_instance_,
      corps_struct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corps_struct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(corps_struct));
  facebook_str_descriptor_ = file->message_type(14);
  static const int facebook_str_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facebook_str, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facebook_str, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facebook_str, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facebook_str, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facebook_str, name2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facebook_str, leave_corps_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facebook_str, level_),
  };
  facebook_str_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facebook_str_descriptor_,
      facebook_str::default_instance_,
      facebook_str_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facebook_str, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facebook_str, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facebook_str));
  face_book_descriptor_ = file->message_type(15);
  static const int face_book_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_book, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_book, corps_),
  };
  face_book_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      face_book_descriptor_,
      face_book::default_instance_,
      face_book_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_book, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_book, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(face_book));
  idip_role_info_descriptor_ = file->message_type(16);
  static const int idip_role_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_role_info, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_role_info, vip_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_role_info, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_role_info, role_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_role_info, ride_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_role_info, ride_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_role_info, pk_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_role_info, online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_role_info, friends_count_),
  };
  idip_role_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      idip_role_info_descriptor_,
      idip_role_info::default_instance_,
      idip_role_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_role_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(idip_role_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(idip_role_info));
  role_list_custom_descriptor_ = file->message_type(17);
  static const int role_list_custom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_list_custom, fashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_list_custom, magic_weapon_tid_),
  };
  role_list_custom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_list_custom_descriptor_,
      role_list_custom::default_instance_,
      role_list_custom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_list_custom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_list_custom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_list_custom));
  gs_role_mutable_data_descriptor_ = file->message_type(18);
  static const int gs_role_mutable_data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_role_mutable_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_role_mutable_data, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_role_mutable_data, fightcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_role_mutable_data, show_property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_role_mutable_data, pro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_role_mutable_data, idip_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_role_mutable_data, custom_),
  };
  gs_role_mutable_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_role_mutable_data_descriptor_,
      gs_role_mutable_data::default_instance_,
      gs_role_mutable_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_role_mutable_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_role_mutable_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_role_mutable_data));
  nation_war_history_descriptor_ = file->message_type(19);
  static const int nation_war_history_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_war_history, finish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_war_history, nation_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_war_history, nation_defend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_war_history, result_),
  };
  nation_war_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      nation_war_history_descriptor_,
      nation_war_history::default_instance_,
      nation_war_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_war_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_war_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(nation_war_history));
  blessing_info_descriptor_ = file->message_type(20);
  static const int blessing_info_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blessing_info, padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blessing_info, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blessing_info, src_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blessing_info, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blessing_info, dst_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blessing_info, repu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blessing_info, repu_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blessing_info, item_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blessing_info, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blessing_info, txnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blessing_info, result_),
  };
  blessing_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blessing_info_descriptor_,
      blessing_info::default_instance_,
      blessing_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blessing_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blessing_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blessing_info));
  card_info_descriptor_ = file->message_type(21);
  static const int card_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, card_count_),
  };
  card_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      card_info_descriptor_,
      card_info::default_instance_,
      card_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(card_info));
  greeting_info_descriptor_ = file->message_type(22);
  static const int greeting_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(greeting_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(greeting_info, info_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(greeting_info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(greeting_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(greeting_info, param_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(greeting_info, param_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(greeting_info, param_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(greeting_info, greet_tid_),
  };
  greeting_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      greeting_info_descriptor_,
      greeting_info::default_instance_,
      greeting_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(greeting_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(greeting_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(greeting_info));
  greeting_info_GREETING_TYPE_descriptor_ = greeting_info_descriptor_->enum_type(0);
  ask_help_info_descriptor_ = file->message_type(23);
  static const int ask_help_info_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_help_info, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_help_info, src_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_help_info, scene_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_help_info, mirror_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_help_info, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_help_info, end_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_help_info, info_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_help_info, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_help_info, certificate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_help_info, src_nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_help_info, corp_id_),
  };
  ask_help_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ask_help_info_descriptor_,
      ask_help_info::default_instance_,
      ask_help_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_help_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_help_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ask_help_info));
  ask_help_info_relation_type_descriptor_ = ask_help_info_descriptor_->enum_type(0);
  roam_match_info_descriptor_ = file->message_type(24);
  static const int roam_match_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roam_match_info, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roam_match_info, nationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roam_match_info, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roam_match_info, war_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roam_match_info, camp_id_),
  };
  roam_match_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roam_match_info_descriptor_,
      roam_match_info::default_instance_,
      roam_match_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roam_match_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roam_match_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roam_match_info));
  db_roam_record_info_descriptor_ = file->message_type(25);
  static const int db_roam_record_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_roam_record_info, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_roam_record_info, nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_roam_record_info, leagueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_roam_record_info, campid_),
  };
  db_roam_record_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_roam_record_info_descriptor_,
      db_roam_record_info::default_instance_,
      db_roam_record_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_roam_record_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_roam_record_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_roam_record_info));
  db_roam_record_data_descriptor_ = file->message_type(26);
  static const int db_roam_record_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_roam_record_data, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_roam_record_data, win_campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_roam_record_data, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_roam_record_data, info_),
  };
  db_roam_record_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_roam_record_data_descriptor_,
      db_roam_record_data::default_instance_,
      db_roam_record_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_roam_record_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_roam_record_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_roam_record_data));
  instance_extend_info_descriptor_ = file->message_type(27);
  static const int instance_extend_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instance_extend_info, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instance_extend_info, param2_),
  };
  instance_extend_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      instance_extend_info_descriptor_,
      instance_extend_info::default_instance_,
      instance_extend_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instance_extend_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instance_extend_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(instance_extend_info));
  corp_farmland_descriptor_ = file->message_type(28);
  static const int corp_farmland_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_farmland, cur_planting_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_farmland, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_farmland, harvest_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_farmland, can_speed_),
  };
  corp_farmland_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      corp_farmland_descriptor_,
      corp_farmland::default_instance_,
      corp_farmland_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_farmland, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(corp_farmland, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(corp_farmland));
  enter_instance_config_descriptor_ = file->message_type(29);
  static const int enter_instance_config_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config, server_),
  };
  enter_instance_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_instance_config_descriptor_,
      enter_instance_config::default_instance_,
      enter_instance_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_instance_config));
  enter_instance_config_client_config_descriptor_ = enter_instance_config_descriptor_->nested_type(0);
  static const int enter_instance_config_client_config_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config_client_config, mafia_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config_client_config, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config_client_config, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config_client_config, info_),
  };
  enter_instance_config_client_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_instance_config_client_config_descriptor_,
      enter_instance_config_client_config::default_instance_,
      enter_instance_config_client_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config_client_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config_client_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_instance_config_client_config));
  enter_instance_config_server_config_descriptor_ = enter_instance_config_descriptor_->nested_type(1);
  static const int enter_instance_config_server_config_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config_server_config, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config_server_config, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config_server_config, pos_),
  };
  enter_instance_config_server_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_instance_config_server_config_descriptor_,
      enter_instance_config_server_config::default_instance_,
      enter_instance_config_server_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config_server_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_instance_config_server_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_instance_config_server_config));
  player_corps_attr_config_descriptor_ = file->message_type(30);
  static const int player_corps_attr_config_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_corps_attr_config, active_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_corps_attr_config, active_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_corps_attr_config, chariot_info_),
  };
  player_corps_attr_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_corps_attr_config_descriptor_,
      player_corps_attr_config::default_instance_,
      player_corps_attr_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_corps_attr_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_corps_attr_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_corps_attr_config));
  player_corps_attr_config_rent_chariot_info_descriptor_ = player_corps_attr_config_descriptor_->nested_type(0);
  static const int player_corps_attr_config_rent_chariot_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_corps_attr_config_rent_chariot_info, chariot_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_corps_attr_config_rent_chariot_info, chariot_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_corps_attr_config_rent_chariot_info, chariot_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_corps_attr_config_rent_chariot_info, chariot_rent_timestamp_),
  };
  player_corps_attr_config_rent_chariot_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_corps_attr_config_rent_chariot_info_descriptor_,
      player_corps_attr_config_rent_chariot_info::default_instance_,
      player_corps_attr_config_rent_chariot_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_corps_attr_config_rent_chariot_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_corps_attr_config_rent_chariot_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_corps_attr_config_rent_chariot_info));
  player_stune_config_descriptor_ = file->message_type(31);
  static const int player_stune_config_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config, rune_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config, rune_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config, rune_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config, all_config_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config, cur_active_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config, total_rune_point_),
  };
  player_stune_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_stune_config_descriptor_,
      player_stune_config::default_instance_,
      player_stune_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_stune_config));
  player_stune_config_player_rune_prop_config_descriptor_ = player_stune_config_descriptor_->nested_type(0);
  static const int player_stune_config_player_rune_prop_config_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config_player_rune_prop_config, master_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config_player_rune_prop_config, rune_skill_level_),
  };
  player_stune_config_player_rune_prop_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_stune_config_player_rune_prop_config_descriptor_,
      player_stune_config_player_rune_prop_config::default_instance_,
      player_stune_config_player_rune_prop_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config_player_rune_prop_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config_player_rune_prop_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_stune_config_player_rune_prop_config));
  player_stune_config_player_rune_config_descriptor_ = player_stune_config_descriptor_->nested_type(1);
  static const int player_stune_config_player_rune_config_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config_player_rune_config, master_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config_player_rune_config, active_index_),
  };
  player_stune_config_player_rune_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_stune_config_player_rune_config_descriptor_,
      player_stune_config_player_rune_config::default_instance_,
      player_stune_config_player_rune_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config_player_rune_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config_player_rune_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_stune_config_player_rune_config));
  player_stune_config_config_set_descriptor_ = player_stune_config_descriptor_->nested_type(2);
  static const int player_stune_config_config_set_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config_config_set, set_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config_config_set, configs_),
  };
  player_stune_config_config_set_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_stune_config_config_set_descriptor_,
      player_stune_config_config_set::default_instance_,
      player_stune_config_config_set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config_config_set, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_stune_config_config_set, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_stune_config_config_set));
  black_shop_info_descriptor_ = file->message_type(32);
  static const int black_shop_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_info, shop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_info, next_refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_info, goods_),
  };
  black_shop_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      black_shop_info_descriptor_,
      black_shop_info::default_instance_,
      black_shop_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(black_shop_info));
  black_shop_info_black_shop_goods_info_descriptor_ = black_shop_info_descriptor_->nested_type(0);
  static const int black_shop_info_black_shop_goods_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_info_black_shop_goods_info, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_info_black_shop_goods_info, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_info_black_shop_goods_info, is_selled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_info_black_shop_goods_info, goods_pos_),
  };
  black_shop_info_black_shop_goods_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      black_shop_info_black_shop_goods_info_descriptor_,
      black_shop_info_black_shop_goods_info::default_instance_,
      black_shop_info_black_shop_goods_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_info_black_shop_goods_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_info_black_shop_goods_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(black_shop_info_black_shop_goods_info));
  climbtower_magic_shop_info_descriptor_ = file->message_type(33);
  static const int climbtower_magic_shop_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(climbtower_magic_shop_info, shop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(climbtower_magic_shop_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(climbtower_magic_shop_info, goods_),
  };
  climbtower_magic_shop_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      climbtower_magic_shop_info_descriptor_,
      climbtower_magic_shop_info::default_instance_,
      climbtower_magic_shop_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(climbtower_magic_shop_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(climbtower_magic_shop_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(climbtower_magic_shop_info));
  climbtower_magic_shop_info_magic_shop_goods_info_descriptor_ = climbtower_magic_shop_info_descriptor_->nested_type(0);
  static const int climbtower_magic_shop_info_magic_shop_goods_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(climbtower_magic_shop_info_magic_shop_goods_info, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(climbtower_magic_shop_info_magic_shop_goods_info, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(climbtower_magic_shop_info_magic_shop_goods_info, is_selled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(climbtower_magic_shop_info_magic_shop_goods_info, goods_pos_),
  };
  climbtower_magic_shop_info_magic_shop_goods_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      climbtower_magic_shop_info_magic_shop_goods_info_descriptor_,
      climbtower_magic_shop_info_magic_shop_goods_info::default_instance_,
      climbtower_magic_shop_info_magic_shop_goods_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(climbtower_magic_shop_info_magic_shop_goods_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(climbtower_magic_shop_info_magic_shop_goods_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(climbtower_magic_shop_info_magic_shop_goods_info));
  db_hero_trial_config_descriptor_ = file->message_type(34);
  static const int db_hero_trial_config_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_hero_trial_config, free_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_hero_trial_config, pay_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_hero_trial_config, cur_hero_tid_),
  };
  db_hero_trial_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_hero_trial_config_descriptor_,
      db_hero_trial_config::default_instance_,
      db_hero_trial_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_hero_trial_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_hero_trial_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_hero_trial_config));
  level_shopid_descriptor_ = file->message_type(35);
  static const int level_shopid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(level_shopid, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(level_shopid, shop_id_),
  };
  level_shopid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      level_shopid_descriptor_,
      level_shopid::default_instance_,
      level_shopid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(level_shopid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(level_shopid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(level_shopid));
  db_strategy_info_descriptor_ = file->message_type(36);
  static const int db_strategy_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_strategy_info, strategy_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_strategy_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_strategy_info, chip_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_strategy_info, star_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_strategy_info, blessing_num_),
  };
  db_strategy_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_strategy_info_descriptor_,
      db_strategy_info::default_instance_,
      db_strategy_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_strategy_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_strategy_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_strategy_info));
  db_strategy_vectors_descriptor_ = file->message_type(37);
  static const int db_strategy_vectors_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_strategy_vectors, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_strategy_vectors, strategies_),
  };
  db_strategy_vectors_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_strategy_vectors_descriptor_,
      db_strategy_vectors::default_instance_,
      db_strategy_vectors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_strategy_vectors, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_strategy_vectors, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_strategy_vectors));
  db_surface_soul_descriptor_ = file->message_type(38);
  static const int db_surface_soul_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_surface_soul, soul_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_surface_soul, train_value_),
  };
  db_surface_soul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_surface_soul_descriptor_,
      db_surface_soul::default_instance_,
      db_surface_soul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_surface_soul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_surface_soul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_surface_soul));
  db_wing_refine_soul_descriptor_ = file->message_type(39);
  static const int db_wing_refine_soul_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_wing_refine_soul, surface_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_wing_refine_soul, train_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_wing_refine_soul, souls_),
  };
  db_wing_refine_soul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_wing_refine_soul_descriptor_,
      db_wing_refine_soul::default_instance_,
      db_wing_refine_soul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_wing_refine_soul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_wing_refine_soul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_wing_refine_soul));
  db_refine_surfaces_descriptor_ = file->message_type(40);
  static const int db_refine_surfaces_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_refine_surfaces, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_refine_surfaces, surfaces_),
  };
  db_refine_surfaces_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_refine_surfaces_descriptor_,
      db_refine_surfaces::default_instance_,
      db_refine_surfaces_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_refine_surfaces, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_refine_surfaces, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_refine_surfaces));
  db_equip_soul_descriptor_ = file->message_type(41);
  static const int db_equip_soul_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_soul, property_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_soul, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_soul, level_),
  };
  db_equip_soul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_equip_soul_descriptor_,
      db_equip_soul::default_instance_,
      db_equip_soul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_soul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_soul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_equip_soul));
  db_equip_fixed_data_descriptor_ = file->message_type(42);
  static const int db_equip_fixed_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_fixed_data, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_fixed_data, mingwens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_fixed_data, souls_),
  };
  db_equip_fixed_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_equip_fixed_data_descriptor_,
      db_equip_fixed_data::default_instance_,
      db_equip_fixed_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_fixed_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_fixed_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_equip_fixed_data));
  db_magic_weapon_descriptor_ = file->message_type(43);
  static const int db_magic_weapon_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon, magic_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon, refine_groups_),
  };
  db_magic_weapon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_magic_weapon_descriptor_,
      db_magic_weapon::default_instance_,
      db_magic_weapon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_magic_weapon));
  db_magic_weapon_property_descriptor_ = db_magic_weapon_descriptor_->nested_type(0);
  static const int db_magic_weapon_property_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_property, property_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_property, exp_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_property, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_property, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_property, multime_),
  };
  db_magic_weapon_property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_magic_weapon_property_descriptor_,
      db_magic_weapon_property::default_instance_,
      db_magic_weapon_property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_magic_weapon_property));
  db_magic_weapon_refine_group_descriptor_ = db_magic_weapon_descriptor_->nested_type(1);
  static const int db_magic_weapon_refine_group_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_refine_group, refines_),
  };
  db_magic_weapon_refine_group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_magic_weapon_refine_group_descriptor_,
      db_magic_weapon_refine_group::default_instance_,
      db_magic_weapon_refine_group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_refine_group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_refine_group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_magic_weapon_refine_group));
  db_magic_weapon_refine_group_refine_descriptor_ = db_magic_weapon_refine_group_descriptor_->nested_type(0);
  static const int db_magic_weapon_refine_group_refine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_refine_group_refine, train_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_refine_group_refine, blessing_value_),
  };
  db_magic_weapon_refine_group_refine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_magic_weapon_refine_group_refine_descriptor_,
      db_magic_weapon_refine_group_refine::default_instance_,
      db_magic_weapon_refine_group_refine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_refine_group_refine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapon_refine_group_refine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_magic_weapon_refine_group_refine));
  db_magic_weapons_descriptor_ = file->message_type(44);
  static const int db_magic_weapons_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapons, weapons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapons, summoned_weapon_tid_),
  };
  db_magic_weapons_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_magic_weapons_descriptor_,
      db_magic_weapons::default_instance_,
      db_magic_weapons_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapons, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_magic_weapons, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_magic_weapons));
  db_general_soul_descriptor_ = file->message_type(45);
  static const int db_general_soul_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_general_soul, general_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_general_soul, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_general_soul, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_general_soul, inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_general_soul, soul_holes_),
  };
  db_general_soul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_general_soul_descriptor_,
      db_general_soul::default_instance_,
      db_general_soul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_general_soul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_general_soul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_general_soul));
  db_general_souls_descriptor_ = file->message_type(46);
  static const int db_general_souls_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_general_souls, generals_),
  };
  db_general_souls_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_general_souls_descriptor_,
      db_general_souls::default_instance_,
      db_general_souls_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_general_souls, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_general_souls, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_general_souls));
  wine_game_history_descriptor_ = file->message_type(47);
  static const int wine_game_history_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wine_game_history, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wine_game_history, mine_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wine_game_history, peer_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wine_game_history, game_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wine_game_history, peer_info_),
  };
  wine_game_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wine_game_history_descriptor_,
      wine_game_history::default_instance_,
      wine_game_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wine_game_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wine_game_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wine_game_history));
  pixiu_service_buy_record_descriptor_ = file->message_type(48);
  static const int pixiu_service_buy_record_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pixiu_service_buy_record, product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pixiu_service_buy_record, counts_),
  };
  pixiu_service_buy_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pixiu_service_buy_record_descriptor_,
      pixiu_service_buy_record::default_instance_,
      pixiu_service_buy_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pixiu_service_buy_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pixiu_service_buy_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pixiu_service_buy_record));
  npt_test_descriptor_ = file->message_type(49);
  static const int npt_test_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_test, type_),
  };
  npt_test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_test_descriptor_,
      npt_test::default_instance_,
      npt_test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_test));
  npt_response_descriptor_ = file->message_type(50);
  static const int npt_response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_response, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_response, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_response, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_response, param1_),
  };
  npt_response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_response_descriptor_,
      npt_response::default_instance_,
      npt_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_response));
  npt_corps_appoint_descriptor_ = file->message_type(51);
  static const int npt_corps_appoint_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, announce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, srcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, dstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, contri_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, cur_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, skill_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, corps_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, money_),
  };
  npt_corps_appoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_corps_appoint_descriptor_,
      npt_corps_appoint::default_instance_,
      npt_corps_appoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_appoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_corps_appoint));
  npt_corps_appoint_CORPS_APPOINT_OP_descriptor_ = npt_corps_appoint_descriptor_->enum_type(0);
  npt_apply_corps_descriptor_ = file->message_type(52);
  static const int npt_apply_corps_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_apply_corps, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_apply_corps, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_apply_corps, apply_),
  };
  npt_apply_corps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_apply_corps_descriptor_,
      npt_apply_corps::default_instance_,
      npt_apply_corps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_apply_corps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_apply_corps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_apply_corps));
  npt_corps_data_descriptor_ = file->message_type(53);
  static const int npt_corps_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_data, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_data, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_data, members_count_),
  };
  npt_corps_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_corps_data_descriptor_,
      npt_corps_data::default_instance_,
      npt_corps_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_corps_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_corps_data));
  name_ruid_descriptor_ = file->message_type(54);
  static const int name_ruid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(name_ruid, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(name_ruid, name_),
  };
  name_ruid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      name_ruid_descriptor_,
      name_ruid::default_instance_,
      name_ruid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(name_ruid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(name_ruid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(name_ruid));
  npt_common_search_descriptor_ = file->message_type(55);
  static const int npt_common_search_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search, corps_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search, corps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search, player_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search, search_time_),
  };
  npt_common_search_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_common_search_descriptor_,
      npt_common_search::default_instance_,
      npt_common_search_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_common_search));
  npt_common_search_search_corps_key_descriptor_ = npt_common_search_descriptor_->nested_type(0);
  static const int npt_common_search_search_corps_key_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search_search_corps_key, has_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search_search_corps_key, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search_search_corps_key, nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search_search_corps_key, name_),
  };
  npt_common_search_search_corps_key_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_common_search_search_corps_key_descriptor_,
      npt_common_search_search_corps_key::default_instance_,
      npt_common_search_search_corps_key_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search_search_corps_key, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search_search_corps_key, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_common_search_search_corps_key));
  npt_common_search_search_player_key_descriptor_ = npt_common_search_descriptor_->nested_type(1);
  static const int npt_common_search_search_player_key_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search_search_player_key, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search_search_player_key, nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search_search_player_key, is_online_),
  };
  npt_common_search_search_player_key_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_common_search_search_player_key_descriptor_,
      npt_common_search_search_player_key::default_instance_,
      npt_common_search_search_player_key_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search_search_player_key, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_common_search_search_player_key, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_common_search_search_player_key));
  npt_zhaojiling_descriptor_ = file->message_type(56);
  static const int npt_zhaojiling_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_zhaojiling, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_zhaojiling, baseinfo_),
  };
  npt_zhaojiling_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_zhaojiling_descriptor_,
      npt_zhaojiling::default_instance_,
      npt_zhaojiling_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_zhaojiling, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_zhaojiling, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_zhaojiling));
  npt_sync_mirror_info_descriptor_ = file->message_type(57);
  static const int npt_sync_mirror_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_mirror_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_mirror_info, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_mirror_info, state_mask_),
  };
  npt_sync_mirror_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_sync_mirror_info_descriptor_,
      npt_sync_mirror_info::default_instance_,
      npt_sync_mirror_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_mirror_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_mirror_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_sync_mirror_info));
  npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor_ = npt_sync_mirror_info_descriptor_->enum_type(0);
  npt_sync_nation_war_info_descriptor_ = file->message_type(58);
  static const int npt_sync_nation_war_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_nation_war_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_nation_war_info, war_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_nation_war_info, npc_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_nation_war_info, wangcheng_revive_faction_),
  };
  npt_sync_nation_war_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_sync_nation_war_info_descriptor_,
      npt_sync_nation_war_info::default_instance_,
      npt_sync_nation_war_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_nation_war_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_nation_war_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_sync_nation_war_info));
  npt_sync_nation_war_info_nwar_npc_info_descriptor_ = npt_sync_nation_war_info_descriptor_->nested_type(0);
  static const int npt_sync_nation_war_info_nwar_npc_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_nation_war_info_nwar_npc_info, npc_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_nation_war_info_nwar_npc_info, npc_nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_nation_war_info_nwar_npc_info, npc_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_nation_war_info_nwar_npc_info, npc_born_),
  };
  npt_sync_nation_war_info_nwar_npc_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_sync_nation_war_info_nwar_npc_info_descriptor_,
      npt_sync_nation_war_info_nwar_npc_info::default_instance_,
      npt_sync_nation_war_info_nwar_npc_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_nation_war_info_nwar_npc_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_sync_nation_war_info_nwar_npc_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_sync_nation_war_info_nwar_npc_info));
  npt_get_corp_name_descriptor_ = file->message_type(59);
  static const int npt_get_corp_name_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_corp_name, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_corp_name, corp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_corp_name, name_),
  };
  npt_get_corp_name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_get_corp_name_descriptor_,
      npt_get_corp_name::default_instance_,
      npt_get_corp_name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_corp_name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_corp_name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_get_corp_name));
  npt_nation_war_operate_descriptor_ = file->message_type(60);
  static const int npt_nation_war_operate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate, oper_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate, oper_param1_),
  };
  npt_nation_war_operate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_nation_war_operate_descriptor_,
      npt_nation_war_operate::default_instance_,
      npt_nation_war_operate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_nation_war_operate));
  npt_nation_war_operate_info_descriptor_ = file->message_type(61);
  static const int npt_nation_war_operate_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info, war_id_),
  };
  npt_nation_war_operate_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_nation_war_operate_info_descriptor_,
      npt_nation_war_operate_info::default_instance_,
      npt_nation_war_operate_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_nation_war_operate_info));
  npt_nation_war_operate_info_re_descriptor_ = file->message_type(62);
  static const int npt_nation_war_operate_info_re_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info_re, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info_re, attack_zhaoji_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info_re, defend_zhaoji_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info_re, attack_yanshi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info_re, defend_jiaxue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info_re, attack_jihuo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info_re, defend_jihuo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info_re, quick_transfer_),
  };
  npt_nation_war_operate_info_re_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_nation_war_operate_info_re_descriptor_,
      npt_nation_war_operate_info_re::default_instance_,
      npt_nation_war_operate_info_re_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info_re, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_operate_info_re, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_nation_war_operate_info_re));
  npt_team_invite_descriptor_ = file->message_type(63);
  static const int npt_team_invite_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_invite, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_invite, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_invite, assign_rule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_invite, auto_admit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_invite, open_invite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_invite, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_invite, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_invite, lineid_),
  };
  npt_team_invite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_team_invite_descriptor_,
      npt_team_invite::default_instance_,
      npt_team_invite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_invite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_invite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_team_invite));
  npt_friend_invite_descriptor_ = file->message_type(64);
  static const int npt_friend_invite_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_friend_invite, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_friend_invite, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_friend_invite, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_friend_invite, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_friend_invite, group_),
  };
  npt_friend_invite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_friend_invite_descriptor_,
      npt_friend_invite::default_instance_,
      npt_friend_invite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_friend_invite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_friend_invite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_friend_invite));
  npt_team_info_descriptor_ = file->message_type(65);
  static const int npt_team_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info, teamids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info, teams_),
  };
  npt_team_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_team_info_descriptor_,
      npt_team_info::default_instance_,
      npt_team_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_team_info));
  npt_team_info_team_info_descriptor_ = npt_team_info_descriptor_->nested_type(0);
  static const int npt_team_info_team_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info_team_info, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info_team_info, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info_team_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info_team_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info_team_info, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info_team_info, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info_team_info, members_),
  };
  npt_team_info_team_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_team_info_team_info_descriptor_,
      npt_team_info_team_info::default_instance_,
      npt_team_info_team_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info_team_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_info_team_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_team_info_team_info));
  other_player_profile_descriptor_ = file->message_type(66);
  static const int other_player_profile_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_profile, pb_facebook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_profile, nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_profile, nation_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_profile, duke_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_profile, fashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_profile, magic_weapon_tid_),
  };
  other_player_profile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      other_player_profile_descriptor_,
      other_player_profile::default_instance_,
      other_player_profile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_profile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(other_player_profile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(other_player_profile));
  npt_get_player_profile_descriptor_ = file->message_type(67);
  static const int npt_get_player_profile_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_player_profile, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_player_profile, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_player_profile, get_profile_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_player_profile, snsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_player_profile, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_player_profile, equipments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_player_profile, others_),
  };
  npt_get_player_profile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_get_player_profile_descriptor_,
      npt_get_player_profile::default_instance_,
      npt_get_player_profile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_player_profile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_get_player_profile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_get_player_profile));
  npt_get_player_profile_GET_PROFILE_MASK_descriptor_ = npt_get_player_profile_descriptor_->enum_type(0);
  npt_blessing_info_descriptor_ = file->message_type(68);
  static const int npt_blessing_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_blessing_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_blessing_info, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_blessing_info, tanksgiver_),
  };
  npt_blessing_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_blessing_info_descriptor_,
      npt_blessing_info::default_instance_,
      npt_blessing_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_blessing_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_blessing_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_blessing_info));
  npt_nationwar_event_descriptor_ = file->message_type(69);
  static const int npt_nationwar_event_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nationwar_event, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nationwar_event, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nationwar_event, event_param_),
  };
  npt_nationwar_event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_nationwar_event_descriptor_,
      npt_nationwar_event::default_instance_,
      npt_nationwar_event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nationwar_event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nationwar_event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_nationwar_event));
  npt_nationwar_event_NNE_TYPE_descriptor_ = npt_nationwar_event_descriptor_->enum_type(0);
  npt_nation_shutup_descriptor_ = file->message_type(70);
  static const int npt_nation_shutup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup, dst_roleid_),
  };
  npt_nation_shutup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_nation_shutup_descriptor_,
      npt_nation_shutup::default_instance_,
      npt_nation_shutup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_nation_shutup));
  npt_nation_shutup_info_descriptor_ = file->message_type(71);
  static const int npt_nation_shutup_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup_info, use_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup_info, remain_times_),
  };
  npt_nation_shutup_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_nation_shutup_info_descriptor_,
      npt_nation_shutup_info::default_instance_,
      npt_nation_shutup_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_nation_shutup_info));
  npt_nation_commander_appoint_descriptor_ = file->message_type(72);
  static const int npt_nation_commander_appoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_commander_appoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_commander_appoint, dst_roleid_),
  };
  npt_nation_commander_appoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_nation_commander_appoint_descriptor_,
      npt_nation_commander_appoint::default_instance_,
      npt_nation_commander_appoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_commander_appoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_commander_appoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_nation_commander_appoint));
  npt_nation_commander_notify_descriptor_ = file->message_type(73);
  static const int npt_nation_commander_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_commander_notify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_commander_notify, dst_name_),
  };
  npt_nation_commander_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_nation_commander_notify_descriptor_,
      npt_nation_commander_notify::default_instance_,
      npt_nation_commander_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_commander_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_commander_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_nation_commander_notify));
  npt_nation_war_history_descriptor_ = file->message_type(74);
  static const int npt_nation_war_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_history, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_history, historys_),
  };
  npt_nation_war_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_nation_war_history_descriptor_,
      npt_nation_war_history::default_instance_,
      npt_nation_war_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_war_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_nation_war_history));
  npt_request_info_descriptor_ = file->message_type(75);
  static const int npt_request_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_request_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_request_info, request_type_),
  };
  npt_request_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_request_info_descriptor_,
      npt_request_info::default_instance_,
      npt_request_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_request_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_request_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_request_info));
  npt_request_info_INFO_TYPE_descriptor_ = npt_request_info_descriptor_->enum_type(0);
  npt_nation_shutup_reply_descriptor_ = file->message_type(76);
  static const int npt_nation_shutup_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup_reply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup_reply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup_reply, dst_name_),
  };
  npt_nation_shutup_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_nation_shutup_reply_descriptor_,
      npt_nation_shutup_reply::default_instance_,
      npt_nation_shutup_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_nation_shutup_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_nation_shutup_reply));
  npt_nation_shutup_reply_RESULT_TYPE_descriptor_ = npt_nation_shutup_reply_descriptor_->enum_type(0);
  npt_greeting_info_sync_descriptor_ = file->message_type(77);
  static const int npt_greeting_info_sync_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_greeting_info_sync, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_greeting_info_sync, sync_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_greeting_info_sync, greeting_list_),
  };
  npt_greeting_info_sync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_greeting_info_sync_descriptor_,
      npt_greeting_info_sync::default_instance_,
      npt_greeting_info_sync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_greeting_info_sync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_greeting_info_sync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_greeting_info_sync));
  npt_greeting_info_sync_SYNC_TYPE_descriptor_ = npt_greeting_info_sync_descriptor_->enum_type(0);
  npt_greeting_reply_descriptor_ = file->message_type(78);
  static const int npt_greeting_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_greeting_reply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_greeting_reply, info_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_greeting_reply, dst_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_greeting_reply, reply_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_greeting_reply, reply_param_),
  };
  npt_greeting_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_greeting_reply_descriptor_,
      npt_greeting_reply::default_instance_,
      npt_greeting_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_greeting_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_greeting_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_greeting_reply));
  npt_ask_help_descriptor_ = file->message_type(79);
  static const int npt_ask_help_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_ask_help, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_ask_help, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_ask_help, response_retcode_),
  };
  npt_ask_help_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_ask_help_descriptor_,
      npt_ask_help::default_instance_,
      npt_ask_help_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_ask_help, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_ask_help, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_ask_help));
  npt_send_server_midas_info_descriptor_ = file->message_type(80);
  static const int npt_send_server_midas_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_server_midas_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_server_midas_info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_server_midas_info, midas_openkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_server_midas_info, midas_paytoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_server_midas_info, midas_pf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_server_midas_info, midas_pfkey_),
  };
  npt_send_server_midas_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_send_server_midas_info_descriptor_,
      npt_send_server_midas_info::default_instance_,
      npt_send_server_midas_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_server_midas_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_server_midas_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_send_server_midas_info));
  npt_send_tencent_secure_info_descriptor_ = file->message_type(81);
  static const int npt_send_tencent_secure_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_tencent_secure_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_tencent_secure_info, secure_data_),
  };
  npt_send_tencent_secure_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_send_tencent_secure_info_descriptor_,
      npt_send_tencent_secure_info::default_instance_,
      npt_send_tencent_secure_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_tencent_secure_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_tencent_secure_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_send_tencent_secure_info));
  npt_send_client_midas_info_descriptor_ = file->message_type(82);
  static const int npt_send_client_midas_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_client_midas_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_client_midas_info, midas_total_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_client_midas_info, midas_bind_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_client_midas_info, midas_save_amt_),
  };
  npt_send_client_midas_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_send_client_midas_info_descriptor_,
      npt_send_client_midas_info::default_instance_,
      npt_send_client_midas_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_client_midas_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_client_midas_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_send_client_midas_info));
  npt_send_midas_bad_token_descriptor_ = file->message_type(83);
  static const int npt_send_midas_bad_token_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_midas_bad_token, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_midas_bad_token, midas_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_midas_bad_token, midas_retcode_),
  };
  npt_send_midas_bad_token_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_send_midas_bad_token_descriptor_,
      npt_send_midas_bad_token::default_instance_,
      npt_send_midas_bad_token_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_midas_bad_token, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_send_midas_bad_token, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_send_midas_bad_token));
  npt_officer_gift_get_descriptor_ = file->message_type(84);
  static const int npt_officer_gift_get_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_officer_gift_get, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_officer_gift_get, gift_id_),
  };
  npt_officer_gift_get_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_officer_gift_get_descriptor_,
      npt_officer_gift_get::default_instance_,
      npt_officer_gift_get_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_officer_gift_get, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_officer_gift_get, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_officer_gift_get));
  npt_officer_gift_notify_descriptor_ = file->message_type(85);
  static const int npt_officer_gift_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_officer_gift_notify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_officer_gift_notify, gift_id_),
  };
  npt_officer_gift_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_officer_gift_notify_descriptor_,
      npt_officer_gift_notify::default_instance_,
      npt_officer_gift_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_officer_gift_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_officer_gift_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_officer_gift_notify));
  npt_weak_nation_gift_get_descriptor_ = file->message_type(86);
  static const int npt_weak_nation_gift_get_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_weak_nation_gift_get, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_weak_nation_gift_get, gift_id_),
  };
  npt_weak_nation_gift_get_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_weak_nation_gift_get_descriptor_,
      npt_weak_nation_gift_get::default_instance_,
      npt_weak_nation_gift_get_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_weak_nation_gift_get, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_weak_nation_gift_get, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_weak_nation_gift_get));
  npt_weak_nation_gift_notify_descriptor_ = file->message_type(87);
  static const int npt_weak_nation_gift_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_weak_nation_gift_notify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_weak_nation_gift_notify, gift_id_),
  };
  npt_weak_nation_gift_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_weak_nation_gift_notify_descriptor_,
      npt_weak_nation_gift_notify::default_instance_,
      npt_weak_nation_gift_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_weak_nation_gift_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_weak_nation_gift_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_weak_nation_gift_notify));
  npt_server_info_notify_descriptor_ = file->message_type(88);
  static const int npt_server_info_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_server_info_notify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_server_info_notify, free_war_left_),
  };
  npt_server_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_server_info_notify_descriptor_,
      npt_server_info_notify::default_instance_,
      npt_server_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_server_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_server_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_server_info_notify));
  npt_team_recruit_operate_descriptor_ = file->message_type(89);
  static const int npt_team_recruit_operate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate, param3_),
  };
  npt_team_recruit_operate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_team_recruit_operate_descriptor_,
      npt_team_recruit_operate::default_instance_,
      npt_team_recruit_operate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_team_recruit_operate));
  npt_team_recruit_operate_OPERATE_TYPE_descriptor_ = npt_team_recruit_operate_descriptor_->enum_type(0);
  recruit_info_descriptor_ = file->message_type(90);
  static const int recruit_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recruit_info, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recruit_info, inst_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recruit_info, team_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recruit_info, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recruit_info, leader_id_),
  };
  recruit_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      recruit_info_descriptor_,
      recruit_info::default_instance_,
      recruit_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recruit_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recruit_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(recruit_info));
  npt_team_recruit_operate_reply_descriptor_ = file->message_type(91);
  static const int npt_team_recruit_operate_reply_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate_reply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate_reply, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate_reply, operate_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate_reply, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate_reply, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate_reply, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate_reply, recruit_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate_reply, param4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate_reply, param_pos_),
  };
  npt_team_recruit_operate_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_team_recruit_operate_reply_descriptor_,
      npt_team_recruit_operate_reply::default_instance_,
      npt_team_recruit_operate_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_team_recruit_operate_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_team_recruit_operate_reply));
  npt_team_recruit_operate_reply_RESULT_descriptor_ = npt_team_recruit_operate_reply_descriptor_->enum_type(0);
  npt_update_grc_info_descriptor_ = file->message_type(92);
  static const int npt_update_grc_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_update_grc_info, type_),
  };
  npt_update_grc_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_update_grc_info_descriptor_,
      npt_update_grc_info::default_instance_,
      npt_update_grc_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_update_grc_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_update_grc_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_update_grc_info));
  npt_grc_get_friend_info_descriptor_ = file->message_type(93);
  static const int npt_grc_get_friend_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_get_friend_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_get_friend_info, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_get_friend_info, offset_),
  };
  npt_grc_get_friend_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_grc_get_friend_info_descriptor_,
      npt_grc_get_friend_info::default_instance_,
      npt_grc_get_friend_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_get_friend_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_get_friend_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_grc_get_friend_info));
  npt_grc_send_gift_descriptor_ = file->message_type(94);
  static const int npt_grc_send_gift_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_send_gift, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_send_gift, gifttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_send_gift, giftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_send_gift, to_),
  };
  npt_grc_send_gift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_grc_send_gift_descriptor_,
      npt_grc_send_gift::default_instance_,
      npt_grc_send_gift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_send_gift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_send_gift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_grc_send_gift));
  npt_grc_rcv_gift_descriptor_ = file->message_type(95);
  static const int npt_grc_rcv_gift_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_rcv_gift, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_rcv_gift, gifttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_rcv_gift, giftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_rcv_gift, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_rcv_gift, from_),
  };
  npt_grc_rcv_gift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_grc_rcv_gift_descriptor_,
      npt_grc_rcv_gift::default_instance_,
      npt_grc_rcv_gift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_rcv_gift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_rcv_gift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_grc_rcv_gift));
  grc_friend_info_descriptor_ = file->message_type(96);
  static const int grc_friend_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, figure_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, fightingcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, sameserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, vipinfo_),
  };
  grc_friend_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      grc_friend_info_descriptor_,
      grc_friend_info::default_instance_,
      grc_friend_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_friend_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(grc_friend_info));
  npt_grc_friend_list_descriptor_ = file->message_type(97);
  static const int npt_grc_friend_list_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_friend_list, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_friend_list, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_friend_list, total_friend_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_friend_list, friend__),
  };
  npt_grc_friend_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_grc_friend_list_descriptor_,
      npt_grc_friend_list::default_instance_,
      npt_grc_friend_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_friend_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_friend_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_grc_friend_list));
  grc_gift_info_descriptor_ = file->message_type(98);
  static const int grc_gift_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_gift_info, gift_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_gift_info, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_gift_info, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_gift_info, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_gift_info, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_gift_info, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_gift_info, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_gift_info, nickname_),
  };
  grc_gift_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      grc_gift_info_descriptor_,
      grc_gift_info::default_instance_,
      grc_gift_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_gift_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_gift_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(grc_gift_info));
  grc_user_gift_info_descriptor_ = file->message_type(99);
  static const int grc_user_gift_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_user_gift_info, gift_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_user_gift_info, giftsend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_user_gift_info, giftreceive_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_user_gift_info, giftreceive_),
  };
  grc_user_gift_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      grc_user_gift_info_descriptor_,
      grc_user_gift_info::default_instance_,
      grc_user_gift_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_user_gift_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grc_user_gift_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(grc_user_gift_info));
  npt_grc_gift_list_descriptor_ = file->message_type(100);
  static const int npt_grc_gift_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_gift_list, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_gift_list, gift_),
  };
  npt_grc_gift_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_grc_gift_list_descriptor_,
      npt_grc_gift_list::default_instance_,
      npt_grc_gift_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_gift_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_gift_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_grc_gift_list));
  npt_grc_send_gift_re_descriptor_ = file->message_type(101);
  static const int npt_grc_send_gift_re_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_send_gift_re, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_send_gift_re, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_send_gift_re, retcode_),
  };
  npt_grc_send_gift_re_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_grc_send_gift_re_descriptor_,
      npt_grc_send_gift_re::default_instance_,
      npt_grc_send_gift_re_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_send_gift_re, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_send_gift_re, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_grc_send_gift_re));
  npt_grc_rcv_gift_re_descriptor_ = file->message_type(102);
  static const int npt_grc_rcv_gift_re_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_rcv_gift_re, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_rcv_gift_re, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_rcv_gift_re, retcode_),
  };
  npt_grc_rcv_gift_re_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npt_grc_rcv_gift_re_descriptor_,
      npt_grc_rcv_gift_re::default_instance_,
      npt_grc_rcv_gift_re_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_rcv_gift_re, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npt_grc_rcv_gift_re, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npt_grc_rcv_gift_re));
  GPS_TYPE_descriptor_ = file->enum_type(0);
  CORPS_POSITION_descriptor_ = file->enum_type(1);
  MIRROR_STATE_descriptor_ = file->enum_type(2);
  ask_help_info_type_descriptor_ = file->enum_type(3);
  NET_PROTOCBUF_TYPE_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PB_2fnet_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    a3d_pos_descriptor_, &a3d_pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_id_name_descriptor_, &player_id_name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    general_list_descriptor_, &general_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    general_list_item_data_descriptor_, &general_list_item_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    simple_list_descriptor_, &simple_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_data_descriptor_, &test_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    other_player_profile_from_gs_descriptor_, &other_player_profile_from_gs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    corp_chariot_descriptor_, &corp_chariot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    corp_chariot_chariot_info_descriptor_, &corp_chariot_chariot_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    corp_repu_descriptor_, &corp_repu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ipt_mirror_info_descriptor_, &ipt_mirror_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    zhaojiling_info_descriptor_, &zhaojiling_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    corps_member_descriptor_, &corps_member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    corps_apply_t_descriptor_, &corps_apply_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    corp_attribute_descriptor_, &corp_attribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    corp_attribute_corp_skill_room_descriptor_, &corp_attribute_corp_skill_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    corps_struct_descriptor_, &corps_struct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facebook_str_descriptor_, &facebook_str::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    face_book_descriptor_, &face_book::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    idip_role_info_descriptor_, &idip_role_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_list_custom_descriptor_, &role_list_custom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_role_mutable_data_descriptor_, &gs_role_mutable_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    nation_war_history_descriptor_, &nation_war_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blessing_info_descriptor_, &blessing_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    card_info_descriptor_, &card_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    greeting_info_descriptor_, &greeting_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ask_help_info_descriptor_, &ask_help_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roam_match_info_descriptor_, &roam_match_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_roam_record_info_descriptor_, &db_roam_record_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_roam_record_data_descriptor_, &db_roam_record_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    instance_extend_info_descriptor_, &instance_extend_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    corp_farmland_descriptor_, &corp_farmland::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_instance_config_descriptor_, &enter_instance_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_instance_config_client_config_descriptor_, &enter_instance_config_client_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_instance_config_server_config_descriptor_, &enter_instance_config_server_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_corps_attr_config_descriptor_, &player_corps_attr_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_corps_attr_config_rent_chariot_info_descriptor_, &player_corps_attr_config_rent_chariot_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_stune_config_descriptor_, &player_stune_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_stune_config_player_rune_prop_config_descriptor_, &player_stune_config_player_rune_prop_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_stune_config_player_rune_config_descriptor_, &player_stune_config_player_rune_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_stune_config_config_set_descriptor_, &player_stune_config_config_set::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    black_shop_info_descriptor_, &black_shop_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    black_shop_info_black_shop_goods_info_descriptor_, &black_shop_info_black_shop_goods_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    climbtower_magic_shop_info_descriptor_, &climbtower_magic_shop_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    climbtower_magic_shop_info_magic_shop_goods_info_descriptor_, &climbtower_magic_shop_info_magic_shop_goods_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_hero_trial_config_descriptor_, &db_hero_trial_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    level_shopid_descriptor_, &level_shopid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_strategy_info_descriptor_, &db_strategy_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_strategy_vectors_descriptor_, &db_strategy_vectors::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_surface_soul_descriptor_, &db_surface_soul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_wing_refine_soul_descriptor_, &db_wing_refine_soul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_refine_surfaces_descriptor_, &db_refine_surfaces::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_equip_soul_descriptor_, &db_equip_soul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_equip_fixed_data_descriptor_, &db_equip_fixed_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_magic_weapon_descriptor_, &db_magic_weapon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_magic_weapon_property_descriptor_, &db_magic_weapon_property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_magic_weapon_refine_group_descriptor_, &db_magic_weapon_refine_group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_magic_weapon_refine_group_refine_descriptor_, &db_magic_weapon_refine_group_refine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_magic_weapons_descriptor_, &db_magic_weapons::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_general_soul_descriptor_, &db_general_soul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_general_souls_descriptor_, &db_general_souls::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wine_game_history_descriptor_, &wine_game_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pixiu_service_buy_record_descriptor_, &pixiu_service_buy_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_test_descriptor_, &npt_test::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_response_descriptor_, &npt_response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_corps_appoint_descriptor_, &npt_corps_appoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_apply_corps_descriptor_, &npt_apply_corps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_corps_data_descriptor_, &npt_corps_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    name_ruid_descriptor_, &name_ruid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_common_search_descriptor_, &npt_common_search::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_common_search_search_corps_key_descriptor_, &npt_common_search_search_corps_key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_common_search_search_player_key_descriptor_, &npt_common_search_search_player_key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_zhaojiling_descriptor_, &npt_zhaojiling::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_sync_mirror_info_descriptor_, &npt_sync_mirror_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_sync_nation_war_info_descriptor_, &npt_sync_nation_war_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_sync_nation_war_info_nwar_npc_info_descriptor_, &npt_sync_nation_war_info_nwar_npc_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_get_corp_name_descriptor_, &npt_get_corp_name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_nation_war_operate_descriptor_, &npt_nation_war_operate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_nation_war_operate_info_descriptor_, &npt_nation_war_operate_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_nation_war_operate_info_re_descriptor_, &npt_nation_war_operate_info_re::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_team_invite_descriptor_, &npt_team_invite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_friend_invite_descriptor_, &npt_friend_invite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_team_info_descriptor_, &npt_team_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_team_info_team_info_descriptor_, &npt_team_info_team_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    other_player_profile_descriptor_, &other_player_profile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_get_player_profile_descriptor_, &npt_get_player_profile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_blessing_info_descriptor_, &npt_blessing_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_nationwar_event_descriptor_, &npt_nationwar_event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_nation_shutup_descriptor_, &npt_nation_shutup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_nation_shutup_info_descriptor_, &npt_nation_shutup_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_nation_commander_appoint_descriptor_, &npt_nation_commander_appoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_nation_commander_notify_descriptor_, &npt_nation_commander_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_nation_war_history_descriptor_, &npt_nation_war_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_request_info_descriptor_, &npt_request_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_nation_shutup_reply_descriptor_, &npt_nation_shutup_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_greeting_info_sync_descriptor_, &npt_greeting_info_sync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_greeting_reply_descriptor_, &npt_greeting_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_ask_help_descriptor_, &npt_ask_help::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_send_server_midas_info_descriptor_, &npt_send_server_midas_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_send_tencent_secure_info_descriptor_, &npt_send_tencent_secure_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_send_client_midas_info_descriptor_, &npt_send_client_midas_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_send_midas_bad_token_descriptor_, &npt_send_midas_bad_token::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_officer_gift_get_descriptor_, &npt_officer_gift_get::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_officer_gift_notify_descriptor_, &npt_officer_gift_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_weak_nation_gift_get_descriptor_, &npt_weak_nation_gift_get::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_weak_nation_gift_notify_descriptor_, &npt_weak_nation_gift_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_server_info_notify_descriptor_, &npt_server_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_team_recruit_operate_descriptor_, &npt_team_recruit_operate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    recruit_info_descriptor_, &recruit_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_team_recruit_operate_reply_descriptor_, &npt_team_recruit_operate_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_update_grc_info_descriptor_, &npt_update_grc_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_grc_get_friend_info_descriptor_, &npt_grc_get_friend_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_grc_send_gift_descriptor_, &npt_grc_send_gift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_grc_rcv_gift_descriptor_, &npt_grc_rcv_gift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    grc_friend_info_descriptor_, &grc_friend_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_grc_friend_list_descriptor_, &npt_grc_friend_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    grc_gift_info_descriptor_, &grc_gift_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    grc_user_gift_info_descriptor_, &grc_user_gift_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_grc_gift_list_descriptor_, &npt_grc_gift_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_grc_send_gift_re_descriptor_, &npt_grc_send_gift_re::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npt_grc_rcv_gift_re_descriptor_, &npt_grc_rcv_gift_re::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto() {
  delete a3d_pos::default_instance_;
  delete a3d_pos_reflection_;
  delete player_id_name::default_instance_;
  delete player_id_name_reflection_;
  delete general_list::default_instance_;
  delete general_list_reflection_;
  delete general_list_item_data::default_instance_;
  delete general_list_item_data_reflection_;
  delete simple_list::default_instance_;
  delete simple_list_reflection_;
  delete test_data::default_instance_;
  delete test_data_reflection_;
  delete other_player_profile_from_gs::default_instance_;
  delete other_player_profile_from_gs_reflection_;
  delete corp_chariot::default_instance_;
  delete corp_chariot_reflection_;
  delete corp_chariot_chariot_info::default_instance_;
  delete corp_chariot_chariot_info_reflection_;
  delete corp_repu::default_instance_;
  delete corp_repu_reflection_;
  delete ipt_mirror_info::default_instance_;
  delete ipt_mirror_info_reflection_;
  delete zhaojiling_info::default_instance_;
  delete zhaojiling_info_reflection_;
  delete corps_member::default_instance_;
  delete corps_member_reflection_;
  delete corps_apply_t::default_instance_;
  delete corps_apply_t_reflection_;
  delete corp_attribute::default_instance_;
  delete corp_attribute_reflection_;
  delete corp_attribute_corp_skill_room::default_instance_;
  delete corp_attribute_corp_skill_room_reflection_;
  delete corps_struct::default_instance_;
  delete corps_struct_reflection_;
  delete facebook_str::default_instance_;
  delete facebook_str_reflection_;
  delete face_book::default_instance_;
  delete face_book_reflection_;
  delete idip_role_info::default_instance_;
  delete idip_role_info_reflection_;
  delete role_list_custom::default_instance_;
  delete role_list_custom_reflection_;
  delete gs_role_mutable_data::default_instance_;
  delete gs_role_mutable_data_reflection_;
  delete nation_war_history::default_instance_;
  delete nation_war_history_reflection_;
  delete blessing_info::default_instance_;
  delete blessing_info_reflection_;
  delete card_info::default_instance_;
  delete card_info_reflection_;
  delete greeting_info::default_instance_;
  delete greeting_info_reflection_;
  delete ask_help_info::default_instance_;
  delete ask_help_info_reflection_;
  delete roam_match_info::default_instance_;
  delete roam_match_info_reflection_;
  delete db_roam_record_info::default_instance_;
  delete db_roam_record_info_reflection_;
  delete db_roam_record_data::default_instance_;
  delete db_roam_record_data_reflection_;
  delete instance_extend_info::default_instance_;
  delete instance_extend_info_reflection_;
  delete corp_farmland::default_instance_;
  delete corp_farmland_reflection_;
  delete enter_instance_config::default_instance_;
  delete enter_instance_config_reflection_;
  delete enter_instance_config_client_config::default_instance_;
  delete enter_instance_config_client_config_reflection_;
  delete enter_instance_config_server_config::default_instance_;
  delete enter_instance_config_server_config_reflection_;
  delete player_corps_attr_config::default_instance_;
  delete player_corps_attr_config_reflection_;
  delete player_corps_attr_config_rent_chariot_info::default_instance_;
  delete player_corps_attr_config_rent_chariot_info_reflection_;
  delete player_stune_config::default_instance_;
  delete player_stune_config_reflection_;
  delete player_stune_config_player_rune_prop_config::default_instance_;
  delete player_stune_config_player_rune_prop_config_reflection_;
  delete player_stune_config_player_rune_config::default_instance_;
  delete player_stune_config_player_rune_config_reflection_;
  delete player_stune_config_config_set::default_instance_;
  delete player_stune_config_config_set_reflection_;
  delete black_shop_info::default_instance_;
  delete black_shop_info_reflection_;
  delete black_shop_info_black_shop_goods_info::default_instance_;
  delete black_shop_info_black_shop_goods_info_reflection_;
  delete climbtower_magic_shop_info::default_instance_;
  delete climbtower_magic_shop_info_reflection_;
  delete climbtower_magic_shop_info_magic_shop_goods_info::default_instance_;
  delete climbtower_magic_shop_info_magic_shop_goods_info_reflection_;
  delete db_hero_trial_config::default_instance_;
  delete db_hero_trial_config_reflection_;
  delete level_shopid::default_instance_;
  delete level_shopid_reflection_;
  delete db_strategy_info::default_instance_;
  delete db_strategy_info_reflection_;
  delete db_strategy_vectors::default_instance_;
  delete db_strategy_vectors_reflection_;
  delete db_surface_soul::default_instance_;
  delete db_surface_soul_reflection_;
  delete db_wing_refine_soul::default_instance_;
  delete db_wing_refine_soul_reflection_;
  delete db_refine_surfaces::default_instance_;
  delete db_refine_surfaces_reflection_;
  delete db_equip_soul::default_instance_;
  delete db_equip_soul_reflection_;
  delete db_equip_fixed_data::default_instance_;
  delete db_equip_fixed_data_reflection_;
  delete db_magic_weapon::default_instance_;
  delete db_magic_weapon_reflection_;
  delete db_magic_weapon_property::default_instance_;
  delete db_magic_weapon_property_reflection_;
  delete db_magic_weapon_refine_group::default_instance_;
  delete db_magic_weapon_refine_group_reflection_;
  delete db_magic_weapon_refine_group_refine::default_instance_;
  delete db_magic_weapon_refine_group_refine_reflection_;
  delete db_magic_weapons::default_instance_;
  delete db_magic_weapons_reflection_;
  delete db_general_soul::default_instance_;
  delete db_general_soul_reflection_;
  delete db_general_souls::default_instance_;
  delete db_general_souls_reflection_;
  delete wine_game_history::default_instance_;
  delete wine_game_history_reflection_;
  delete pixiu_service_buy_record::default_instance_;
  delete pixiu_service_buy_record_reflection_;
  delete npt_test::default_instance_;
  delete npt_test_reflection_;
  delete npt_response::default_instance_;
  delete npt_response_reflection_;
  delete npt_corps_appoint::default_instance_;
  delete npt_corps_appoint_reflection_;
  delete npt_apply_corps::default_instance_;
  delete npt_apply_corps_reflection_;
  delete npt_corps_data::default_instance_;
  delete npt_corps_data_reflection_;
  delete name_ruid::default_instance_;
  delete name_ruid_reflection_;
  delete npt_common_search::default_instance_;
  delete npt_common_search_reflection_;
  delete npt_common_search_search_corps_key::default_instance_;
  delete npt_common_search_search_corps_key_reflection_;
  delete npt_common_search_search_player_key::default_instance_;
  delete npt_common_search_search_player_key_reflection_;
  delete npt_zhaojiling::default_instance_;
  delete npt_zhaojiling_reflection_;
  delete npt_sync_mirror_info::default_instance_;
  delete npt_sync_mirror_info_reflection_;
  delete npt_sync_nation_war_info::default_instance_;
  delete npt_sync_nation_war_info_reflection_;
  delete npt_sync_nation_war_info_nwar_npc_info::default_instance_;
  delete npt_sync_nation_war_info_nwar_npc_info_reflection_;
  delete npt_get_corp_name::default_instance_;
  delete npt_get_corp_name_reflection_;
  delete npt_nation_war_operate::default_instance_;
  delete npt_nation_war_operate_reflection_;
  delete npt_nation_war_operate_info::default_instance_;
  delete npt_nation_war_operate_info_reflection_;
  delete npt_nation_war_operate_info_re::default_instance_;
  delete npt_nation_war_operate_info_re_reflection_;
  delete npt_team_invite::default_instance_;
  delete npt_team_invite_reflection_;
  delete npt_friend_invite::default_instance_;
  delete npt_friend_invite_reflection_;
  delete npt_team_info::default_instance_;
  delete npt_team_info_reflection_;
  delete npt_team_info_team_info::default_instance_;
  delete npt_team_info_team_info_reflection_;
  delete other_player_profile::default_instance_;
  delete other_player_profile_reflection_;
  delete npt_get_player_profile::default_instance_;
  delete npt_get_player_profile_reflection_;
  delete npt_blessing_info::default_instance_;
  delete npt_blessing_info_reflection_;
  delete npt_nationwar_event::default_instance_;
  delete npt_nationwar_event_reflection_;
  delete npt_nation_shutup::default_instance_;
  delete npt_nation_shutup_reflection_;
  delete npt_nation_shutup_info::default_instance_;
  delete npt_nation_shutup_info_reflection_;
  delete npt_nation_commander_appoint::default_instance_;
  delete npt_nation_commander_appoint_reflection_;
  delete npt_nation_commander_notify::default_instance_;
  delete npt_nation_commander_notify_reflection_;
  delete npt_nation_war_history::default_instance_;
  delete npt_nation_war_history_reflection_;
  delete npt_request_info::default_instance_;
  delete npt_request_info_reflection_;
  delete npt_nation_shutup_reply::default_instance_;
  delete npt_nation_shutup_reply_reflection_;
  delete npt_greeting_info_sync::default_instance_;
  delete npt_greeting_info_sync_reflection_;
  delete npt_greeting_reply::default_instance_;
  delete npt_greeting_reply_reflection_;
  delete npt_ask_help::default_instance_;
  delete npt_ask_help_reflection_;
  delete npt_send_server_midas_info::default_instance_;
  delete npt_send_server_midas_info_reflection_;
  delete npt_send_tencent_secure_info::default_instance_;
  delete npt_send_tencent_secure_info_reflection_;
  delete npt_send_client_midas_info::default_instance_;
  delete npt_send_client_midas_info_reflection_;
  delete npt_send_midas_bad_token::default_instance_;
  delete npt_send_midas_bad_token_reflection_;
  delete npt_officer_gift_get::default_instance_;
  delete npt_officer_gift_get_reflection_;
  delete npt_officer_gift_notify::default_instance_;
  delete npt_officer_gift_notify_reflection_;
  delete npt_weak_nation_gift_get::default_instance_;
  delete npt_weak_nation_gift_get_reflection_;
  delete npt_weak_nation_gift_notify::default_instance_;
  delete npt_weak_nation_gift_notify_reflection_;
  delete npt_server_info_notify::default_instance_;
  delete npt_server_info_notify_reflection_;
  delete npt_team_recruit_operate::default_instance_;
  delete npt_team_recruit_operate_reflection_;
  delete recruit_info::default_instance_;
  delete recruit_info_reflection_;
  delete npt_team_recruit_operate_reply::default_instance_;
  delete npt_team_recruit_operate_reply_reflection_;
  delete npt_update_grc_info::default_instance_;
  delete npt_update_grc_info_reflection_;
  delete npt_grc_get_friend_info::default_instance_;
  delete npt_grc_get_friend_info_reflection_;
  delete npt_grc_send_gift::default_instance_;
  delete npt_grc_send_gift_reflection_;
  delete npt_grc_rcv_gift::default_instance_;
  delete npt_grc_rcv_gift_reflection_;
  delete grc_friend_info::default_instance_;
  delete grc_friend_info_reflection_;
  delete npt_grc_friend_list::default_instance_;
  delete npt_grc_friend_list_reflection_;
  delete grc_gift_info::default_instance_;
  delete grc_gift_info_reflection_;
  delete grc_user_gift_info::default_instance_;
  delete grc_user_gift_info_reflection_;
  delete npt_grc_gift_list::default_instance_;
  delete npt_grc_gift_list_reflection_;
  delete npt_grc_send_gift_re::default_instance_;
  delete npt_grc_send_gift_re_reflection_;
  delete npt_grc_rcv_gift_re::default_instance_;
  delete npt_grc_rcv_gift_re_reflection_;
}

void protobuf_AddDesc_PB_2fnet_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023PB/net_common.proto\022\002PB\"*\n\007a3d_pos\022\t\n\001"
    "x\030\001 \002(\002\022\t\n\001z\030\002 \002(\002\022\t\n\001y\030\003 \001(\002\"*\n\016player_"
    "id_name\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\014\"u\n\014gen"
    "eral_list\022-\n\titem_list\030\001 \003(\0132\032.PB.genera"
    "l_list.item_data\0326\n\titem_data\022\013\n\003tid\030\001 \001"
    "(\005\022\014\n\004star\030\002 \001(\005\022\016\n\006locked\030\003 \001(\010\"7\n\013simp"
    "le_list\022\013\n\003key\030\001 \002(\003\022\r\n\005value\030\002 \001(\003\022\014\n\004n"
    "ame\030\003 \001(\014\"d\n\ttest_data\022)\n\004type\030\001 \001(\0162\014.P"
    "B.GPS_TYPE:\rGUT_TEST_DATA\022\016\n\006params\030\002 \003("
    "\003\022\016\n\006param2\030\003 \001(\005\022\014\n\004info\030\004 \001(\014\"T\n\034other"
    "_player_profile_from_gs\022\031\n\021achievement_g"
    "rade\030\001 \001(\r\022\031\n\021achievement_count\030\002 \001(\r\"\330\001"
    "\n\014corp_chariot\022\r\n\005level\030\001 \001(\005\022/\n\010chariot"
    "s\030\002 \003(\0132\035.PB.corp_chariot.chariot_info\032\207"
    "\001\n\014chariot_info\022\013\n\003exp\030\001 \001(\003\022\"\n\006driver\030\002"
    " \001(\0132\022.PB.player_id_name\022\026\n\016rent_timesta"
    "mp\030\003 \001(\005\022\r\n\005level\030\004 \001(\005\022\013\n\003tid\030\005 \001(\005\022\022\n\n"
    "is_upgrade\030\007 \001(\010\"5\n\tcorp_repu\022\013\n\003key\030\001 \002"
    "(\003\022\r\n\005value\030\002 \001(\003\022\014\n\004time\030\003 \001(\003\"Y\n\017ipt_m"
    "irror_info\022\020\n\010mirrorid\030\001 \002(\r\022\037\n\005state\030\002 "
    "\002(\0162\020.PB.MIRROR_STATE\022\023\n\013create_time\030\003 \001"
    "(\r\"\247\003\n\017zhaojiling_info\022\013\n\003src\030\001 \002(\004\022\020\n\010s"
    "rc_name\030\002 \001(\014\022\016\n\006reason\030\003 \001(\014\022\022\n\ndelay_t"
    "ime\030\004 \001(\005\022\021\n\tscene_tag\030\005 \002(\005\022\030\n\003pos\030\006 \002("
    "\0132\013.PB.a3d_pos\022\025\n\rrandom_radius\030\007 \001(\005\022\025\n"
    "\rzhaojiling_id\030\010 \001(\005\022\031\n\021src_corp_positio"
    "n\030\t \001(\005\022\033\n\023src_nation_position\030\n \001(\005\022\021\n\t"
    "mirror_id\030\013 \001(\005\022-\n\004type\030\014 \001(\0162\037.PB.zhaoj"
    "iling_info.ZHAOJI_TYPE\022\016\n\006param1\030\r \001(\005\022\020"
    "\n\010inst_tid\030\016 \001(\005\"Z\n\013ZHAOJI_TYPE\022\013\n\007ZT_IT"
    "EM\020\000\022\027\n\023ZT_NATION_WAR_START\020\001\022\026\n\022ZT_NATI"
    "ON_WAR_ROLE\020\002\022\r\n\tZT_SUCCOR\020\003\"\304\002\n\014corps_m"
    "ember\022,\n\004type\030\001 \001(\0162\014.PB.GPS_TYPE:\020GUT_C"
    "ORPS_MEMBER\022\016\n\006roleid\030\002 \002(\003\022\016\n\003pos\030\003 \002(\005"
    ":\0010\022\014\n\004name\030\004 \001(\014\022\021\n\tjoin_time\030\005 \002(\005\022\r\n\005"
    "level\030\006 \002(\005\022\017\n\007idphoto\030\007 \002(\005\022\016\n\006contri\030\n"
    " \001(\003\022\027\n\017contri_cumulate\030\013 \001(\003\022\022\n\nleave_t"
    "ime\030\014 \001(\005\022\014\n\004prof\030\r \002(\005\022\031\n\021online_time_t"
    "oday\030\016 \001(\005\022\030\n\020boss_feed_reward\030\017 \003(\005\022\016\n\006"
    "elixir\030\020 \003(\005\022\025\n\rfightcapacity\030\021 \001(\003\"^\n\rc"
    "orps_apply_t\022\016\n\006roleid\030\001 \002(\003\022\014\n\004name\030\002 \002"
    "(\014\022\022\n\napply_time\030\003 \002(\003\022\r\n\005level\030\004 \001(\005\022\014\n"
    "\004prof\030\005 \001(\005\"\370\001\n\016corp_attribute\0226\n\nskill_"
    "room\030\001 \003(\0132\".PB.corp_attribute.corp_skil"
    "l_room\022\025\n\nshop_level\030\002 \001(\r:\0010\022 \n\tcorp_re"
    "pu\030\003 \003(\0132\r.PB.corp_repu\022*\n\021boss_feed_top"
    "list\030\004 \003(\0132\017.PB.simple_list\022!\n\007chariot\030\005"
    " \001(\0132\020.PB.corp_chariot\032&\n\017corp_skill_roo"
    "m\022\023\n\013addon_level\030\001 \003(\r\"\324\003\n\014corps_struct\022"
    ",\n\004type\030\001 \001(\0162\014.PB.GPS_TYPE:\020GUT_CORPS_S"
    "TRUCT\022\n\n\002id\030\002 \002(\005\022\014\n\004name\030\004 \001(\014\022\023\n\013creat"
    "e_time\030\005 \002(\005\022\r\n\005level\030\006 \002(\005\022\016\n\006status\030\007 "
    "\002(\004\022\020\n\010announce\030\010 \001(\014\022\030\n\rannounce_time\030\t"
    " \001(\003:\0010\022\021\n\006contri\030\n \001(\003:\0010\022\032\n\017contri_cum"
    "ulate\030\013 \001(\003:\0010\022\020\n\005money\030\014 \001(\003:\0010\022 \n\005appl"
    "y\030\r \003(\0132\021.PB.corps_apply_t\022\016\n\006nation\030\016 \002"
    "(\005\022\030\n\020last_resume_time\030\017 \001(\003\022 \n\004attr\030\020 \001"
    "(\0132\022.PB.corp_attribute\022\022\n\ncorp_power\030\021 \001"
    "(\002\022\026\n\016qqgroup_openid\030\022 \001(\014\022\024\n\014qqgroup_na"
    "me\030\023 \001(\014\022\027\n\017qqgroup_joinkey\030\024 \001(\014\022\022\n\nlog"
    "in_time\030\025 \001(\005\"\177\n\014facebook_str\022\r\n\002id\030\001 \002("
    "\003:\0010\022\013\n\003pos\030\002 \001(\005\022\r\n\005param\030\003 \001(\003\022\014\n\004name"
    "\030\004 \001(\014\022\r\n\005name2\030\005 \001(\014\022\030\n\020leave_corps_tim"
    "e\030\006 \001(\005\022\r\n\005level\030\007 \001(\005\"V\n\tface_book\022(\n\004t"
    "ype\030\001 \001(\0162\014.PB.GPS_TYPE:\014GUT_FACEBOOK\022\037\n"
    "\005corps\030\002 \001(\0132\020.PB.facebook_str\"\271\001\n\016idip_"
    "role_info\022\r\n\005money\030\001 \001(\003\022\017\n\007vip_exp\030\002 \001("
    "\003\022\021\n\tvip_level\030\003 \001(\005\022\020\n\010role_exp\030\004 \001(\003\022\020"
    "\n\010ride_exp\030\005 \001(\003\022\022\n\nride_level\030\006 \001(\005\022\020\n\010"
    "pk_value\030\007 \001(\005\022\023\n\013online_time\030\010 \001(\005\022\025\n\rf"
    "riends_count\030\t \001(\005\"=\n\020role_list_custom\022\017"
    "\n\007fashion\030\001 \001(\010\022\030\n\020magic_weapon_tid\030\002 \001("
    "\r\"\200\002\n\024gs_role_mutable_data\022+\n\004type\030\001 \001(\016"
    "2\014.PB.GPS_TYPE:\017GUT_ROLE_PBINFO\022\021\n\tvip_l"
    "evel\030\002 \001(\r\022\025\n\rfightcapacity\030\003 \001(\r\022\025\n\rsho"
    "w_property\030\004 \001(\014\022-\n\003pro\030\010 \001(\0132 .PB.other"
    "_player_profile_from_gs\022%\n\tidip_info\030\t \001"
    "(\0132\022.PB.idip_role_info\022$\n\006custom\030\n \001(\0132\024"
    ".PB.role_list_custom\"g\n\022nation_war_histo"
    "ry\022\023\n\013finish_time\030\001 \002(\005\022\025\n\rnation_attack"
    "\030\002 \002(\005\022\025\n\rnation_defend\030\003 \002(\005\022\016\n\006result\030"
    "\004 \002(\005\"\310\001\n\rblessing_info\022\017\n\007padding\030\001 \001(\014"
    "\022\013\n\003src\030\002 \001(\004\022\020\n\010src_name\030\003 \001(\014\022\013\n\003dst\030\004"
    " \001(\004\022\020\n\010dst_name\030\005 \001(\014\022\017\n\007repu_id\030\006 \001(\r\022"
    "\022\n\nrepu_count\030\007 \001(\r\022\020\n\010item_tid\030\010 \001(\r\022\022\n"
    "\nitem_count\030\t \001(\r\022\r\n\005txnid\030\n \001(\r\022\016\n\006resu"
    "lt\030\013 \001(\005\"0\n\tcard_info\022\017\n\007card_id\030\001 \002(\005\022\022"
    "\n\ncard_count\030\002 \002(\005\"\206\002\n\rgreeting_info\022-\n\004"
    "type\030\001 \001(\0162\037.PB.greeting_info.GREETING_T"
    "YPE\022\023\n\010info_seq\030\002 \001(\005:\0010\022\016\n\006roleid\030\003 \001(\003"
    "\022\014\n\004name\030\004 \001(\014\022\017\n\007param_1\030\005 \001(\005\022\017\n\007param"
    "_2\030\006 \001(\005\022\017\n\007param_3\030\007 \001(\005\022\021\n\tgreet_tid\030\010"
    " \001(\005\"M\n\rGREETING_TYPE\022\023\n\017GREETING_INVITE"
    "\020\001\022\022\n\016GREETING_GRANT\020\002\022\023\n\017GREETING_THANK"
    "S\020\003\"\333\002\n\rask_help_info\022\013\n\003src\030\001 \002(\004\022\020\n\010sr"
    "c_name\030\002 \001(\014\022\021\n\tscene_tag\030\003 \002(\005\022\021\n\tmirro"
    "r_id\030\004 \001(\005\022\030\n\003pos\030\005 \002(\0132\013.PB.a3d_pos\022\025\n\r"
    "end_timestamp\030\006 \001(\005\022)\n\tinfo_type\030\007 \001(\0162\026"
    ".PB.ask_help_info_type\0221\n\010relation\030\010 \001(\016"
    "2\037.PB.ask_help_info.relation_type\022\023\n\013cer"
    "tificate\030\t \001(\021\022\022\n\nsrc_nation\030\n \001(\005\022\017\n\007co"
    "rp_id\030\013 \001(\005\"<\n\rrelation_type\022\017\n\013RT_STRAN"
    "GER\020\000\022\013\n\007RT_CORP\020\001\022\r\n\tRT_NATION\020\002\"g\n\017roa"
    "m_match_info\022\016\n\006zoneid\030\001 \001(\005\022\020\n\010nationid"
    "\030\002 \001(\005\022\021\n\tleague_id\030\003 \001(\005\022\016\n\006war_id\030\004 \001("
    "\005\022\017\n\007camp_id\030\005 \001(\005\"W\n\023db_roam_record_inf"
    "o\022\016\n\006zoneid\030\001 \001(\005\022\016\n\006nation\030\002 \001(\005\022\020\n\010lea"
    "gueid\030\003 \001(\005\022\016\n\006campid\030\004 \001(\005\"s\n\023db_roam_r"
    "ecord_data\022\016\n\006instid\030\001 \001(\005\022\022\n\nwin_campid"
    "\030\002 \001(\005\022\021\n\ttimestamp\030\003 \001(\005\022%\n\004info\030\004 \003(\0132"
    "\027.PB.db_roam_record_info\"6\n\024instance_ext"
    "end_info\022\016\n\006param1\030\001 \001(\005\022\016\n\006param2\030\002 \003(\003"
    "\"f\n\rcorp_farmland\022\030\n\020cur_planting_tid\030\003 "
    "\001(\005\022\022\n\nstart_time\030\004 \001(\005\022\024\n\014harvest_time\030"
    "\005 \001(\005\022\021\n\tcan_speed\030\006 \001(\010\"\277\002\n\025enter_insta"
    "nce_config\0227\n\006client\030\001 \001(\0132\'.PB.enter_in"
    "stance_config.client_config\0227\n\006server\030\002 "
    "\001(\0132\'.PB.enter_instance_config.server_co"
    "nfig\032i\n\rclient_config\022\020\n\010mafia_id\030\001 \001(\005\022"
    "\014\n\004name\030\002 \001(\014\022\020\n\010password\030\003 \001(\014\022&\n\004info\030"
    "\004 \001(\0132\030.PB.instance_extend_info\032I\n\rserve"
    "r_config\022\016\n\006param1\030\001 \001(\005\022\016\n\006param2\030\002 \001(\005"
    "\022\030\n\003pos\030\003 \001(\0132\013.PB.a3d_pos\"\211\002\n\030player_co"
    "rps_attr_config\022\030\n\014active_level\030\001 \001(\005:\002-"
    "1\022\030\n\014active_index\030\002 \001(\005:\002-1\022D\n\014chariot_i"
    "nfo\030\004 \001(\0132..PB.player_corps_attr_config."
    "rent_chariot_info\032s\n\021rent_chariot_info\022\022"
    "\n\nchariot_hp\030\003 \001(\005\022\023\n\013chariot_tid\030\004 \001(\005\022"
    "\025\n\rchariot_level\030\005 \001(\005\022\036\n\026chariot_rent_t"
    "imestamp\030\006 \001(\005\"\342\003\n\023player_stune_config\022\022"
    "\n\nrune_level\030\001 \001(\005\022\022\n\nrune_point\030\002 \001(\005\022D"
    "\n\013rune_config\030\003 \003(\0132/.PB.player_stune_co"
    "nfig.player_rune_prop_config\022:\n\016all_conf"
    "ig_set\030\004 \003(\0132\".PB.player_stune_config.co"
    "nfig_set\022\026\n\016cur_active_set\030\005 \001(\005\022\030\n\020tota"
    "l_rune_point\030\006 \001(\005\032L\n\027player_rune_prop_c"
    "onfig\022\027\n\017master_skill_id\030\001 \002(\005\022\030\n\020rune_s"
    "kill_level\030\002 \003(\005\032C\n\022player_rune_config\022\027"
    "\n\017master_skill_id\030\001 \002(\005\022\024\n\014active_index\030"
    "\002 \002(\005\032\\\n\nconfig_set\022\021\n\tset_index\030\001 \002(\005\022;"
    "\n\007configs\030\002 \003(\0132*.PB.player_stune_config"
    ".player_rune_config\"\332\001\n\017black_shop_info\022"
    "\017\n\007shop_id\030\001 \002(\005\022\031\n\021next_refresh_time\030\002 "
    "\002(\005\0228\n\005goods\030\003 \003(\0132).PB.black_shop_info."
    "black_shop_goods_info\032a\n\025black_shop_good"
    "s_info\022\020\n\010store_id\030\001 \002(\005\022\020\n\010goods_id\030\002 \002"
    "(\005\022\021\n\tis_selled\030\003 \002(\005\022\021\n\tgoods_pos\030\004 \002(\005"
    "\"\344\001\n\032climbtower_magic_shop_info\022\017\n\007shop_"
    "id\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022C\n\005goods\030\003 \003(\01324"
    ".PB.climbtower_magic_shop_info.magic_sho"
    "p_goods_info\032a\n\025magic_shop_goods_info\022\020\n"
    "\010store_id\030\001 \002(\005\022\020\n\010goods_id\030\002 \002(\005\022\021\n\tis_"
    "selled\030\003 \002(\005\022\021\n\tgoods_pos\030\004 \002(\005\"c\n\024db_he"
    "ro_trial_config\022\032\n\022free_refresh_times\030\001 "
    "\001(\005\022\031\n\021pay_refresh_times\030\002 \001(\005\022\024\n\014cur_he"
    "ro_tid\030\003 \001(\005\".\n\014level_shopid\022\r\n\005level\030\001 "
    "\002(\005\022\017\n\007shop_id\030\002 \002(\005\"u\n\020db_strategy_info"
    "\022\024\n\014strategy_tid\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\022\n"
    "\nchip_count\030\003 \001(\005\022\022\n\nstar_level\030\004 \001(\005\022\024\n"
    "\014blessing_num\030\005 \001(\005\"k\n\023db_strategy_vecto"
    "rs\022*\n\004type\030\001 \001(\0162\014.PB.GPS_TYPE:\016GUT_STRA"
    "TEGIES\022(\n\nstrategies\030\002 \003(\0132\024.PB.db_strat"
    "egy_info\"8\n\017db_surface_soul\022\020\n\010soul_tid\030"
    "\001 \001(\005\022\023\n\013train_value\030\002 \001(\005\"c\n\023db_wing_re"
    "fine_soul\022\023\n\013surface_tid\030\001 \001(\005\022\023\n\013train_"
    "level\030\002 \001(\005\022\"\n\005souls\030\003 \003(\0132\023.PB.db_surfa"
    "ce_soul\"q\n\022db_refine_surfaces\0220\n\004type\030\001 "
    "\001(\0162\014.PB.GPS_TYPE:\024GUT_WING_REFINE_SOUL\022"
    ")\n\010surfaces\030\002 \003(\0132\027.PB.db_wing_refine_so"
    "ul\"A\n\rdb_equip_soul\022\024\n\014property_tid\030\001 \001("
    "\005\022\013\n\003exp\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\"W\n\023db_equi"
    "p_fixed_data\022\014\n\004rank\030\001 \001(\005\022\020\n\010mingwens\030\002"
    " \003(\005\022 \n\005souls\030\003 \003(\0132\021.PB.db_equip_soul\"\207"
    "\003\n\017db_magic_weapon\022\021\n\tmagic_tid\030\001 \001(\005\022\016\n"
    "\006active\030\002 \001(\010\0220\n\nproperties\030\003 \003(\0132\034.PB.d"
    "b_magic_weapon.property\0227\n\rrefine_groups"
    "\030\004 \003(\0132 .PB.db_magic_weapon.refine_group"
    "\032e\n\010property\022\024\n\014property_tid\030\001 \001(\005\022\021\n\tex"
    "p_value\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\022\020\n\010end_time"
    "\030\004 \001(\005\022\017\n\007multime\030\005 \001(\005\032\177\n\014refine_group\022"
    "8\n\007refines\030\001 \003(\0132\'.PB.db_magic_weapon.re"
    "fine_group.refine\0325\n\006refine\022\023\n\013train_lev"
    "el\030\001 \001(\005\022\026\n\016blessing_value\030\002 \001(\005\"U\n\020db_m"
    "agic_weapons\022$\n\007weapons\030\001 \003(\0132\023.PB.db_ma"
    "gic_weapon\022\033\n\023summoned_weapon_tid\030\002 \001(\005\""
    "\224\001\n\017db_general_soul\022\023\n\013general_tid\030\001 \001(\005"
    "\022\r\n\005level\030\002 \001(\005\022\022\n\nexperience\030\003 \001(\005\022#\n\ti"
    "nventory\030\004 \001(\0132\020.PB.general_list\022$\n\nsoul"
    "_holes\030\005 \001(\0132\020.PB.general_list\"9\n\020db_gen"
    "eral_souls\022%\n\010generals\030\001 \003(\0132\023.PB.db_gen"
    "eral_soul\"\214\001\n\021wine_game_history\022\021\n\tgame_"
    "time\030\001 \001(\005\022\023\n\013mine_status\030\002 \001(\005\022\023\n\013peer_"
    "status\030\003 \001(\005\022\023\n\013game_result\030\004 \001(\005\022%\n\tpee"
    "r_info\030\005 \001(\0132\022.PB.player_id_name\">\n\030pixi"
    "u_service_buy_record\022\022\n\nproduct_id\030\001 \001(\014"
    "\022\016\n\006counts\030\002 \001(\005\":\n\010npt_test\022.\n\004type\030\001 \001"
    "(\0162\026.PB.NET_PROTOCBUF_TYPE:\010NPT_TEST\"y\n\014"
    "npt_response\0222\n\004type\030\001 \001(\0162\026.PB.NET_PROT"
    "OCBUF_TYPE:\014NPT_RESPONSE\022\017\n\007retcode\030\002 \002("
    "\005\022\024\n\014request_type\030\003 \001(\005\022\016\n\006param1\030\004 \001(\005\""
    "\233\007\n\021npt_corps_appoint\0227\n\004type\030\001 \001(\0162\026.PB"
    ".NET_PROTOCBUF_TYPE:\021NPT_CORPS_APPOINT\022\013"
    "\n\003dst\030\002 \002(\003\0222\n\002op\030\003 \002(\0162&.PB.npt_corps_a"
    "ppoint.CORPS_APPOINT_OP\022\013\n\003pos\030\004 \001(\005\022\020\n\010"
    "announce\030\005 \001(\014\022\017\n\007srcname\030\006 \001(\014\022\017\n\007dstna"
    "me\030\007 \001(\014\022\013\n\003src\030\010 \001(\003\022\021\n\tcorpsname\030\t \001(\014"
    "\022 \n\006member\030\n \001(\0132\020.PB.corps_member\022\024\n\014co"
    "ntri_money\030\013 \001(\003\022\021\n\tcur_money\030\014 \001(\003\022\023\n\013s"
    "kill_level\030\r \001(\r\022\023\n\013skill_index\030\016 \001(\r\022\020\n"
    "\010corps_id\030\017 \001(\r\022 \n\004attr\030\020 \001(\0132\022.PB.corp_"
    "attribute\022\013\n\003tid\030\021 \001(\005\022\r\n\005index\030\022 \001(\005\022\r\n"
    "\005money\030\023 \001(\003\"\326\003\n\020CORPS_APPOINT_OP\022\r\n\tCOR"
    "PS_ADD\020\001\022\r\n\tCORPS_DEL\020\002\022\021\n\rCORPS_APPOINT"
    "\020\003\022\021\n\rCORPS_DISMISS\020\004\022\016\n\nCORPS_QUIT\020\005\022\022\n"
    "\016CORPS_ANNOUNCE\020\006\022\021\n\rCORPS_UPGRADE\020\007\022\022\n\016"
    "CORPS_ABDICATE\020\010\022\022\n\016CORPS_ACTIVITY\020\t\022\020\n\014"
    "CORPS_INVITE\020\n\022\020\n\014CORPS_REJECT\020\013\022\017\n\013CORP"
    "S_AGREE\020\014\022\021\n\rCORPS_GETDATA\020\r\022\017\n\013CORPS_BR"
    "IEF\020\016\022\020\n\014CORPS_CONTRI\020\017\022\027\n\023CORPS_UPGRADE"
    "_SKILL\020\020\022\026\n\022CORPS_UPGRADE_SHOP\020\021\022\030\n\024CORP"
    "S_UPGRADE_SKILL2\020\022\022\016\n\nCORPS_ATTR\020\023\022\020\n\014CO"
    "RPS_SUMMON\020\024\022\016\n\nCORPS_FIRE\020\025\022\021\n\rCORPS_CH"
    "ARIOT\020\026\022\020\n\014CORPS_UP_CHA\020\027\022\022\n\016CORPS_RECL_"
    "CHA\020\030\"v\n\017npt_apply_corps\0225\n\004type\030\001 \001(\0162\026"
    ".PB.NET_PROTOCBUF_TYPE:\017NPT_APPLY_CORPS\022"
    "\n\n\002id\030\002 \002(\005\022 \n\005apply\030\003 \001(\0132\021.PB.corps_ap"
    "ply_t\"\240\001\n\016npt_corps_data\0224\n\004type\030\001 \001(\0162\026"
    ".PB.NET_PROTOCBUF_TYPE:\016NPT_CORPS_DATA\022\036"
    "\n\004data\030\002 \002(\0132\020.PB.corps_struct\022!\n\007member"
    "s\030\003 \003(\0132\020.PB.corps_member\022\025\n\rmembers_cou"
    "nt\030\004 \001(\005\"%\n\tname_ruid\022\n\n\002id\030\001 \002(\004\022\014\n\004nam"
    "e\030\002 \001(\014\"\375\003\n\021npt_common_search\0227\n\004type\030\001 "
    "\001(\0162\026.PB.NET_PROTOCBUF_TYPE:\021NPT_COMMON_"
    "SEARCH\022\013\n\003pos\030\003 \002(\r\022\013\n\003len\030\004 \002(\r\0229\n\tcorp"
    "s_key\030\005 \001(\0132&.PB.npt_common_search.searc"
    "h_corps_key\022\017\n\007retcode\030\006 \001(\005\022\023\n\013total_co"
    "unt\030\007 \001(\005\022!\n\005corps\030\010 \003(\0132\022.PB.npt_corps_"
    "data\022;\n\nplayer_key\030\t \001(\0132\'.PB.npt_common"
    "_search.search_player_key\022\036\n\007players\030\n \003"
    "(\0132\r.PB.name_ruid\022\023\n\013search_time\030\013 \001(\005\032Y"
    "\n\020search_corps_key\022\030\n\thas_value\030\001 \002(\010:\005f"
    "alse\022\r\n\005level\030\002 \001(\005\022\016\n\006nation\030\003 \001(\005\022\014\n\004n"
    "ame\030\004 \001(\014\032D\n\021search_player_key\022\014\n\004name\030\001"
    " \002(\014\022\016\n\006nation\030\002 \001(\005\022\021\n\tis_online\030\003 \001(\010\""
    "m\n\016npt_zhaojiling\0224\n\004type\030\001 \001(\0162\026.PB.NET"
    "_PROTOCBUF_TYPE:\016NPT_ZHAOJILING\022%\n\010basei"
    "nfo\030\002 \001(\0132\023.PB.zhaojiling_info\"\321\001\n\024npt_s"
    "ync_mirror_info\022:\n\004type\030\001 \001(\0162\026.PB.NET_P"
    "ROTOCBUF_TYPE:\024NPT_SYNC_MIRROR_INFO\022\"\n\005i"
    "nfos\030\002 \003(\0132\023.PB.ipt_mirror_info\022\022\n\nstate"
    "_mask\030\003 \001(\r\"E\n\021MIRROR_STATE_MASK\022\032\n\026MS_F"
    "ORBIT_MIRROR_STATE\020\001\022\024\n\020MS_IN_NATION_WAR"
    "\020\002\"\250\002\n\030npt_sync_nation_war_info\022>\n\004type\030"
    "\001 \001(\0162\026.PB.NET_PROTOCBUF_TYPE:\030NPT_SYNC_"
    "NATION_WAR_INFO\022\024\n\014war_end_time\030\002 \002(\r\022<\n"
    "\010npc_info\030\003 \003(\0132*.PB.npt_sync_nation_war"
    "_info.nwar_npc_info\022 \n\030wangcheng_revive_"
    "faction\030\004 \001(\r\032V\n\rnwar_npc_info\022\017\n\007npc_ti"
    "d\030\001 \002(\r\022\022\n\nnpc_nation\030\002 \002(\r\022\016\n\006npc_hp\030\003 "
    "\002(\r\022\020\n\010npc_born\030\004 \002(\r\"k\n\021npt_get_corp_na"
    "me\0227\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCBUF_TYPE"
    ":\021NPT_GET_CORP_NAME\022\017\n\007corp_id\030\002 \002(\r\022\014\n\004"
    "name\030\003 \001(\014\"~\n\026npt_nation_war_operate\022<\n\004"
    "type\030\001 \001(\0162\026.PB.NET_PROTOCBUF_TYPE:\026NPT_"
    "NATION_WAR_OPERATE\022\021\n\toper_type\030\002 \002(\r\022\023\n"
    "\013oper_param1\030\003 \002(\r\"p\n\033npt_nation_war_ope"
    "rate_info\022A\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCB"
    "UF_TYPE:\033NPT_NATION_WAR_OPERATE_INFO\022\016\n\006"
    "war_id\030\002 \002(\r\"\206\002\n\036npt_nation_war_operate_"
    "info_re\022D\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCBUF"
    "_TYPE:\036NPT_NATION_WAR_OPERATE_INFO_RE\022\025\n"
    "\rattack_zhaoji\030\002 \002(\r\022\025\n\rdefend_zhaoji\030\003 "
    "\002(\r\022\025\n\rattack_yanshi\030\004 \002(\r\022\025\n\rdefend_jia"
    "xue\030\005 \002(\r\022\024\n\014attack_jihuo\030\006 \002(\r\022\024\n\014defen"
    "d_jihuo\030\007 \002(\r\022\026\n\016quick_transfer\030\010 \002(\r\"\307\001"
    "\n\017npt_team_invite\0225\n\004type\030\001 \001(\0162\026.PB.NET"
    "_PROTOCBUF_TYPE:\017NPT_TEAM_INVITE\022\014\n\004name"
    "\030\002 \001(\014\022\023\n\013assign_rule\030\003 \001(\005\022\022\n\nauto_admi"
    "t\030\004 \001(\005\022\023\n\013open_invite\030\005 \001(\005\022\r\n\005level\030\006 "
    "\001(\005\022\022\n\nprofession\030\007 \001(\005\022\016\n\006lineid\030\010 \001(\005\""
    "\214\001\n\021npt_friend_invite\0227\n\004type\030\001 \001(\0162\026.PB"
    ".NET_PROTOCBUF_TYPE:\021NPT_FRIEND_INVITE\022\014"
    "\n\004name\030\002 \001(\014\022\r\n\005level\030\003 \001(\005\022\022\n\nprofessio"
    "n\030\004 \001(\005\022\r\n\005group\030\005 \001(\005\"\374\001\n\rnpt_team_info"
    "\0223\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCBUF_TYPE:\r"
    "NPT_TEAM_INFO\022\017\n\007teamids\030\002 \003(\005\022*\n\005teams\030"
    "\003 \003(\0132\033.PB.npt_team_info.team_info\032y\n\tte"
    "am_info\022\016\n\006teamid\030\001 \002(\005\022\016\n\006leader\030\002 \002(\003\022"
    "\014\n\004name\030\003 \001(\014\022\r\n\005level\030\004 \001(\005\022\020\n\010capacity"
    "\030\005 \001(\005\022\014\n\004prof\030\006 \001(\005\022\017\n\007members\030\007 \002(\005\"\235\001"
    "\n\024other_player_profile\022\"\n\013pb_facebook\030\001 "
    "\001(\0132\r.PB.face_book\022\016\n\006nation\030\002 \001(\r\022\022\n\nna"
    "tion_pos\030\003 \001(\r\022\022\n\nduke_level\030\004 \001(\r\022\017\n\007fa"
    "shion\030\005 \001(\010\022\030\n\020magic_weapon_tid\030\006 \001(\r\"\325\002"
    "\n\026npt_get_player_profile\022<\n\004type\030\001 \001(\0162\026"
    ".PB.NET_PROTOCBUF_TYPE:\026NPT_GET_PLAYER_P"
    "ROFILE\022\016\n\006roleid\030\002 \002(\003\022\033\n\020get_profile_ma"
    "sk\030\003 \001(\r:\0010\022\017\n\007snsinfo\030\004 \001(\014\022*\n\010property"
    "\030\005 \001(\0132\030.PB.gs_role_mutable_data\022\022\n\nequi"
    "pments\030\006 \001(\014\022(\n\006others\030\007 \001(\0132\030.PB.other_"
    "player_profile\"U\n\020GET_PROFILE_MASK\022\023\n\017GE"
    "T_ALL_PROFILE\020\000\022\013\n\007GET_SNS\020\001\022\r\n\tGET_EQUI"
    "P\020\002\022\020\n\014GET_PROPERTY\020\004\"\201\001\n\021npt_blessing_i"
    "nfo\0227\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCBUF_TYP"
    "E:\021NPT_BLESSING_INFO\022\037\n\004info\030\002 \001(\0132\021.PB."
    "blessing_info\022\022\n\ntanksgiver\030\003 \001(\010\"\367\001\n\023np"
    "t_nationwar_event\0229\n\004type\030\001 \001(\0162\026.PB.NET"
    "_PROTOCBUF_TYPE:\023NPT_NATIONWAR_EVENT\0224\n\n"
    "event_type\030\002 \001(\0162 .PB.npt_nationwar_even"
    "t.NNE_TYPE\022\023\n\013event_param\030\003 \001(\005\"Z\n\010NNE_T"
    "YPE\022\031\n\025NATION_WAR_KILL_COUNT\020\001\022\024\n\020NATION"
    "_WAR_JIHUO\020\002\022\035\n\031NATION_WAR_JIHUO_COOLDOW"
    "N\020\003\"`\n\021npt_nation_shutup\0227\n\004type\030\001 \001(\0162\026"
    ".PB.NET_PROTOCBUF_TYPE:\021NPT_NATION_SHUTU"
    "P\022\022\n\ndst_roleid\030\002 \002(\003\"\177\n\026npt_nation_shut"
    "up_info\022<\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCBUF"
    "_TYPE:\026NPT_NATION_SHUTUP_INFO\022\021\n\tuse_tim"
    "es\030\002 \002(\005\022\024\n\014remain_times\030\003 \002(\005\"v\n\034npt_na"
    "tion_commander_appoint\022B\n\004type\030\001 \001(\0162\026.P"
    "B.NET_PROTOCBUF_TYPE:\034NPT_NATION_COMMAND"
    "ER_APPOINT\022\022\n\ndst_roleid\030\002 \002(\003\"r\n\033npt_na"
    "tion_commander_notify\022A\n\004type\030\001 \001(\0162\026.PB"
    ".NET_PROTOCBUF_TYPE:\033NPT_NATION_COMMANDE"
    "R_NOTIFY\022\020\n\010dst_name\030\002 \001(\014\"\200\001\n\026npt_natio"
    "n_war_history\022<\n\004type\030\001 \001(\0162\026.PB.NET_PRO"
    "TOCBUF_TYPE:\026NPT_NATION_WAR_HISTORY\022(\n\010h"
    "istorys\030\002 \003(\0132\026.PB.nation_war_history\"\245\001"
    "\n\020npt_request_info\0226\n\004type\030\001 \001(\0162\026.PB.NE"
    "T_PROTOCBUF_TYPE:\020NPT_REQUEST_INFO\0224\n\014re"
    "quest_type\030\002 \002(\0162\036.PB.npt_request_info.I"
    "NFO_TYPE\"#\n\tINFO_TYPE\022\026\n\022NATION_WAR_HIST"
    "ORY\020\001\"\365\001\n\027npt_nation_shutup_reply\022=\n\004typ"
    "e\030\001 \001(\0162\026.PB.NET_PROTOCBUF_TYPE:\027NPT_NAT"
    "ION_SHUTUP_REPLY\0227\n\006result\030\002 \002(\0162\'.PB.np"
    "t_nation_shutup_reply.RESULT_TYPE\022\020\n\010dst"
    "_name\030\003 \001(\014\"P\n\013RESULT_TYPE\022\022\n\016RESULT_SUC"
    "CEED\020\001\022\022\n\016RESULT_OFFLINE\020\002\022\031\n\025RESULT_ALR"
    "EADY_SHUTUP\020\003\"\360\001\n\026npt_greeting_info_sync"
    "\022<\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCBUF_TYPE:\026"
    "NPT_GREETING_INFO_SYNC\0227\n\tsync_type\030\002 \001("
    "\0162$.PB.npt_greeting_info_sync.SYNC_TYPE\022"
    "(\n\rgreeting_list\030\003 \003(\0132\021.PB.greeting_inf"
    "o\"5\n\tSYNC_TYPE\022\014\n\010SYNC_ALL\020\001\022\014\n\010SYNC_ADD"
    "\020\002\022\014\n\010SYNC_DEL\020\003\"\235\001\n\022npt_greeting_reply\022"
    "8\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCBUF_TYPE:\022N"
    "PT_GREETING_REPLY\022\020\n\010info_seq\030\002 \002(\005\022\022\n\nd"
    "st_roleid\030\003 \002(\003\022\022\n\nreply_type\030\004 \002(\005\022\023\n\013r"
    "eply_param\030\005 \002(\005\"}\n\014npt_ask_help\0222\n\004type"
    "\030\001 \001(\0162\026.PB.NET_PROTOCBUF_TYPE:\014NPT_ASK_"
    "HELP\022\037\n\004info\030\002 \001(\0132\021.PB.ask_help_info\022\030\n"
    "\020response_retcode\030\003 \001(\005\"\304\001\n\032npt_send_ser"
    "ver_midas_info\022@\n\004type\030\001 \001(\0162\026.PB.NET_PR"
    "OTOCBUF_TYPE:\032NPT_SEND_SERVER_MIDAS_INFO"
    "\022\016\n\006roleid\030\002 \002(\003\022\025\n\rmidas_openkey\030\003 \001(\014\022"
    "\026\n\016midas_paytoken\030\004 \001(\014\022\020\n\010midas_pf\030\005 \001("
    "\014\022\023\n\013midas_pfkey\030\006 \001(\014\"w\n\034npt_send_tence"
    "nt_secure_info\022B\n\004type\030\001 \001(\0162\026.PB.NET_PR"
    "OTOCBUF_TYPE:\034NPT_SEND_TENCENT_SECURE_IN"
    "FO\022\023\n\013secure_data\030\002 \001(\014\"\255\001\n\032npt_send_cli"
    "ent_midas_info\022@\n\004type\030\001 \001(\0162\026.PB.NET_PR"
    "OTOCBUF_TYPE:\032NPT_SEND_CLIENT_MIDAS_INFO"
    "\022\032\n\022midas_total_amount\030\002 \002(\003\022\031\n\021midas_bi"
    "nd_amount\030\003 \002(\003\022\026\n\016midas_save_amt\030\004 \002(\003\""
    "\203\001\n\030npt_send_midas_bad_token\022>\n\004type\030\001 \001"
    "(\0162\026.PB.NET_PROTOCBUF_TYPE:\030NPT_SEND_MID"
    "AS_BAD_TOKEN\022\020\n\010midas_op\030\002 \002(\005\022\025\n\rmidas_"
    "retcode\030\003 \002(\005\"c\n\024npt_officer_gift_get\022:\n"
    "\004type\030\001 \001(\0162\026.PB.NET_PROTOCBUF_TYPE:\024NPT"
    "_OFFICER_GIFT_GET\022\017\n\007gift_id\030\002 \001(\005\"i\n\027np"
    "t_officer_gift_notify\022=\n\004type\030\001 \001(\0162\026.PB"
    ".NET_PROTOCBUF_TYPE:\027NPT_OFFICER_GIFT_NO"
    "TIFY\022\017\n\007gift_id\030\002 \001(\005\"k\n\030npt_weak_nation"
    "_gift_get\022>\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCB"
    "UF_TYPE:\030NPT_WEAK_NATION_GIFT_GET\022\017\n\007gif"
    "t_id\030\002 \001(\005\"q\n\033npt_weak_nation_gift_notif"
    "y\022A\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCBUF_TYPE:"
    "\033NPT_WEAK_NATION_GIFT_NOTIFY\022\017\n\007gift_id\030"
    "\002 \001(\005\"m\n\026npt_server_info_notify\022<\n\004type\030"
    "\001 \001(\0162\026.PB.NET_PROTOCBUF_TYPE:\026NPT_SERVE"
    "R_INFO_NOTIFY\022\025\n\rfree_war_left\030\002 \001(\005\"\235\002\n"
    "\030npt_team_recruit_operate\022>\n\004type\030\001 \001(\0162"
    "\026.PB.NET_PROTOCBUF_TYPE:\030NPT_TEAM_RECRUI"
    "T_OPERATE\022\024\n\014operate_type\030\002 \001(\005\022\016\n\006param"
    "1\030\003 \001(\003\022\016\n\006param2\030\004 \001(\003\022\016\n\006param3\030\005 \001(\003\""
    "{\n\014OPERATE_TYPE\022\n\n\006CREATE\020\001\022\010\n\004LIST\020\002\022\013\n"
    "\007PUBLISH\020\003\022\n\n\006CANCEL\020\004\022\020\n\014REQ_COOLDOWN\020\005"
    "\022\n\n\006MODIFY\020\006\022\022\n\016REQ_LEADER_POS\020\007\022\n\n\006GATH"
    "ER\020\010\"p\n\014recruit_info\022\021\n\tmin_level\030\001 \001(\005\022"
    "\020\n\010inst_tid\030\002 \001(\005\022\023\n\013team_number\030\003 \001(\005\022\023"
    "\n\013leader_name\030\004 \001(\014\022\021\n\tleader_id\030\005 \001(\003\"\375"
    "\002\n\036npt_team_recruit_operate_reply\022D\n\004typ"
    "e\030\001 \001(\0162\026.PB.NET_PROTOCBUF_TYPE:\036NPT_TEA"
    "M_RECRUIT_OPERATE_REPLY\022\024\n\014operate_type\030"
    "\002 \001(\005\022\026\n\016operate_result\030\003 \001(\005\022\016\n\006param1\030"
    "\004 \001(\003\022\016\n\006param2\030\005 \001(\003\022\016\n\006param3\030\006 \001(\003\022&\n"
    "\014recruit_list\030\007 \003(\0132\020.PB.recruit_info\022\016\n"
    "\006param4\030\010 \001(\014\022\036\n\tparam_pos\030\t \001(\0132\013.PB.a3"
    "d_pos\"_\n\006RESULT\022\013\n\007SUCCEED\020\000\022\014\n\010MAX_SIZE"
    "\020\001\022\r\n\tMIN_LEVEL\020\002\022\014\n\010COOLDOWN\020\003\022\014\n\010TIME_"
    "OUT\020\004\022\017\n\013IN_INSTANCE\020\005\"P\n\023npt_update_grc"
    "_info\0229\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCBUF_T"
    "YPE:\023NPT_UPDATE_GRC_INFO\"w\n\027npt_grc_get_"
    "friend_info\022=\n\004type\030\001 \001(\0162\026.PB.NET_PROTO"
    "CBUF_TYPE:\027NPT_GRC_GET_FRIEND_INFO\022\r\n\005st"
    "art\030\002 \002(\005\022\016\n\006offset\030\003 \002(\005\"}\n\021npt_grc_sen"
    "d_gift\0227\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCBUF_"
    "TYPE:\021NPT_GRC_SEND_GIFT\022\020\n\010giftType\030\002 \002("
    "\005\022\021\n\tgiftCount\030\003 \002(\003\022\n\n\002to\030\004 \002(\014\"\220\001\n\020npt"
    "_grc_rcv_gift\0226\n\004type\030\001 \001(\0162\026.PB.NET_PRO"
    "TOCBUF_TYPE:\020NPT_GRC_RCV_GIFT\022\020\n\010giftTyp"
    "e\030\002 \002(\005\022\021\n\tgiftCount\030\003 \002(\003\022\021\n\ttimestamp\030"
    "\004 \002(\003\022\014\n\004from\030\005 \002(\014\"\353\001\n\017grc_friend_info\022"
    "\016\n\006openid\030\001 \002(\014\022\020\n\010nickname\030\002 \002(\014\022\022\n\nfig"
    "ure_url\030\003 \002(\014\022\016\n\006roleid\030\004 \002(\004\022\020\n\010rolenam"
    "e\030\005 \002(\014\022\r\n\005level\030\006 \002(\005\022\016\n\006gender\030\007 \002(\005\022\022"
    "\n\nprofession\030\010 \002(\005\022\016\n\006nation\030\t \002(\005\022\030\n\020fi"
    "ghtingcapacity\030\n \002(\003\022\022\n\nsameserver\030\013 \002(\010"
    "\022\017\n\007vipinfo\030\014 \002(\005\"\242\001\n\023npt_grc_friend_lis"
    "t\0229\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCBUF_TYPE:"
    "\023NPT_GRC_FRIEND_LIST\022\017\n\007retcode\030\002 \002(\005\022\032\n"
    "\022total_friend_count\030\003 \002(\005\022#\n\006friend\030\004 \003("
    "\0132\023.PB.grc_friend_info\"\220\001\n\rgrc_gift_info"
    "\022\021\n\tgift_type\030\001 \002(\005\022\014\n\004from\030\002 \002(\014\022\n\n\002to\030"
    "\003 \002(\014\022\r\n\005count\030\004 \002(\003\022\014\n\004flag\030\005 \002(\005\022\021\n\tti"
    "mestamp\030\006 \002(\003\022\020\n\010serialid\030\007 \002(\005\022\020\n\010nickn"
    "ame\030\010 \001(\014\"\217\001\n\022grc_user_gift_info\022\021\n\tgift"
    "_type\030\001 \002(\005\022#\n\010giftsend\030\002 \003(\0132\021.PB.grc_g"
    "ift_info\022\031\n\021giftreceive_times\030\003 \002(\003\022&\n\013g"
    "iftreceive\030\004 \003(\0132\021.PB.grc_gift_info\"r\n\021n"
    "pt_grc_gift_list\0227\n\004type\030\001 \001(\0162\026.PB.NET_"
    "PROTOCBUF_TYPE:\021NPT_GRC_GIFT_LIST\022$\n\004gif"
    "t\030\002 \003(\0132\026.PB.grc_user_gift_info\"o\n\024npt_g"
    "rc_send_gift_re\022:\n\004type\030\001 \001(\0162\026.PB.NET_P"
    "ROTOCBUF_TYPE:\024NPT_GRC_SEND_GIFT_RE\022\n\n\002t"
    "o\030\002 \002(\014\022\017\n\007retcode\030\003 \002(\005\"o\n\023npt_grc_rcv_"
    "gift_re\0229\n\004type\030\001 \001(\0162\026.PB.NET_PROTOCBUF"
    "_TYPE:\023NPT_GRC_RCV_GIFT_RE\022\014\n\004from\030\002 \002(\014"
    "\022\017\n\007retcode\030\003 \002(\005*\357\005\n\010GPS_TYPE\022\020\n\014GUT_UN"
    "DEFIED\020\000\022\021\n\rGUT_TEST_DATA\020\001\022\024\n\020GUT_CORPS"
    "_STRUCT\020\002\022\024\n\020GUT_CORPS_MEMBER\020\003\022\020\n\014GUT_F"
    "ACEBOOK\020\004\022\027\n\023GUT_PLAYER_MEMSSAGE\020\005\022\020\n\014GU"
    "T_DB_TABLE\020\006\022\016\n\nGUT_NATION\020\007\022\022\n\016GUT_NATI"
    "ON_WAR\020\010\022\023\n\017GUT_ROLE_PBINFO\020\t\022\024\n\020GUT_HER"
    "O_PBINFOS\020\n\022\025\n\021GUT_GREETING_DATA\020\013\022\023\n\017GU"
    "T_PLAYER_MISC\020\014\022\021\n\rGUT_CARD_DATA\020\r\022\027\n\023GU"
    "T_BLACK_SHOP_DATA\020\016\022\021\n\rGUT_DUKE_DATA\020\017\022\034"
    "\n\030GUT_CLIMBTOWER_SHOP_DATA\020\020\022\027\n\023GUT_ACCO"
    "UNT_DS_DATA\020\021\022\027\n\023GUT_ACCOUNT_GS_DATA\020\022\022\027"
    "\n\023GUT_MIDAS_USER_FAIL\020\023\022\030\n\024GUT_MIDAS_MUL"
    "TI_FAIL\020\024\022\023\n\017GUT_MIDAS_PIXIU\020\025\022\023\n\017GUT_SE"
    "CURE_IDIP\020\026\022\022\n\016GUT_TOP_REWARD\020\027\022\033\n\027GUT_D"
    "S_SAVE_PLAYER_DATA\020\030\022\022\n\016GUT_STRATEGIES\020\031"
    "\022\030\n\024GUT_WING_REFINE_SOUL\020\032\022\020\n\014GUT_PET_DA"
    "TA\020\033\022\025\n\021GUT_PET_LIST_DATA\020\034\022\021\n\rGUT_ITEM_"
    "DATA\020\035\022\026\n\022GUT_ITEM_LIST_DATA\020\036\022\020\n\014GUT_ZO"
    "NELIST\020\037\022\024\n\020GUT_RICHMAN_DATA\020 \022\023\n\017GUT_RO"
    "AM_RECORD\020!*f\n\016CORPS_POSITION\022\r\n\tCP_NORM"
    "AL\020\000\022\r\n\tCP_MASTER\020\001\022\022\n\016CP_VICE_MASTER\020\002\022"
    "\020\n\014CP_ZHANGLAO1\020\003\022\020\n\014CP_ZHANGLAO2\020\004*a\n\014M"
    "IRROR_STATE\022\025\n\021MIRROR_S_CREATING\020\001\022\017\n\013MI"
    "RROR_S_OK\020\002\022\024\n\020MIRROR_S_CLOSING\020\003\022\023\n\017MIR"
    "ROR_S_CLOSED\020\004*%\n\022ask_help_info_type\022\017\n\013"
    "AT_ASK_HELP\020\000*\210\031\n\022NET_PROTOCBUF_TYPE\022\014\n\010"
    "NPT_TEST\020\001\022\025\n\021NPT_CORPS_APPOINT\020\002\022\020\n\014NPT"
    "_RESPONSE\020\003\022\023\n\017NPT_APPLY_CORPS\020\004\022\022\n\016NPT_"
    "CORPS_DATA\020\005\022\025\n\021NPT_COMMON_SEARCH\020\006\022\022\n\016N"
    "PT_ZHAOJILING\020\007\022\030\n\024NPT_SYNC_MIRROR_INFO\020"
    "\010\022\034\n\030NPT_SYNC_NATION_WAR_INFO\020\t\022\032\n\026NPT_N"
    "ATION_WAR_OPERATE\020\n\022\025\n\021NPT_GET_CORP_NAME"
    "\020\013\022\037\n\033NPT_NATION_WAR_OPERATE_INFO\020\014\022\"\n\036N"
    "PT_NATION_WAR_OPERATE_INFO_RE\020\r\022\023\n\017NPT_T"
    "EAM_INVITE\020\016\022\021\n\rNPT_TEAM_INFO\020\017\022\025\n\021NPT_F"
    "RIEND_INVITE\020\020\022\032\n\026NPT_GET_PLAYER_PROFILE"
    "\020\022\022\032\n\026NPT_GREETING_INFO_SYNC\020\023\022\026\n\022NPT_GR"
    "EETING_REPLY\020\024\022\025\n\021NPT_BLESSING_INFO\020\025\022\027\n"
    "\023NPT_NATIONWAR_EVENT\020\026\022\025\n\021NPT_NATION_SHU"
    "TUP\020\027\022\032\n\026NPT_NATION_SHUTUP_INFO\020\030\022\033\n\027NPT"
    "_NATION_SHUTUP_REPLY\020\031\022 \n\034NPT_NATION_COM"
    "MANDER_APPOINT\020\032\022\037\n\033NPT_NATION_COMMANDER"
    "_NOTIFY\020\033\022\032\n\026NPT_NATION_WAR_HISTORY\020\034\022\024\n"
    "\020NPT_REQUEST_INFO\020\035\022\020\n\014NPT_ASK_HELP\020\036\022\036\n"
    "\032NPT_SEND_SERVER_MIDAS_INFO\020\037\022\036\n\032NPT_SEN"
    "D_CLIENT_MIDAS_INFO\020 \022 \n\034NPT_SEND_TENCEN"
    "T_SECURE_INFO\020!\022\030\n\024NPT_OFFICER_GIFT_GET\020"
    "\"\022\033\n\027NPT_OFFICER_GIFT_NOTIFY\020#\022\034\n\030NPT_SE"
    "ND_MIDAS_BAD_TOKEN\020$\022\034\n\030NPT_TEAM_RECRUIT"
    "_OPERATE\020%\022\"\n\036NPT_TEAM_RECRUIT_OPERATE_R"
    "EPLY\020&\022\027\n\023NPT_UPDATE_GRC_INFO\020\'\022\033\n\027NPT_G"
    "RC_GET_FRIEND_INFO\020(\022\025\n\021NPT_GRC_SEND_GIF"
    "T\020)\022\024\n\020NPT_GRC_RCV_GIFT\020*\022\027\n\023NPT_GRC_FRI"
    "END_LIST\020+\022\025\n\021NPT_GRC_GIFT_LIST\020,\022\030\n\024NPT"
    "_GRC_SEND_GIFT_RE\020-\022\027\n\023NPT_GRC_RCV_GIFT_"
    "RE\020.\022\032\n\026NPT_MIDAS_ACTIVITY_GET\020/\022\035\n\031NPT_"
    "MIDAS_ACTIVITY_GET_RE\0200\022\037\n\033NPT_WEAK_NATI"
    "ON_GIFT_NOTIFY\0201\022\034\n\030NPT_WEAK_NATION_GIFT"
    "_GET\0202\022\032\n\026NPT_SERVER_INFO_NOTIFY\0203\022\032\n\026NP"
    "T_GET_QQGROUP_OPENID\0204\022\033\n\027NPT_RESP_QQGRO"
    "UP_OPENID\0205\022\027\n\023NPT_GRC_TURN_ON_OFF\0206\022\032\n\026"
    "NPT_GRC_TURN_ON_OFF_RE\0207\022\025\n\021NPT_DIE_ELIT"
    "E_TID\0208\022\031\n\025NPT_GET_DIE_ELITE_TID\0209\022\036\n\032NP"
    "T_GRC_EXCEED_FRIEND_LIST\020:\022\024\n\020NPT_GET_HT"
    "TP_REQ\020;\022\025\n\021NPT_GET_HTTP_RESP\020<\022\026\n\022NPT_S"
    "END_TLOG_INFO\020=\022\032\n\026NPT_UNBIND_QQGROUP_RE"
    "Q\020\?\022\033\n\027NPT_UNBIND_QQGROUP_RESP\020@\022\031\n\025NPT_"
    "RECHARGE_PLAT_VIP\020A\022\033\n\027NPT_QQGROUP_JOINK"
    "EY_REQ\020B\022\034\n\030NPT_QQGROUP_JOINKEY_RESP\020C\022\022"
    "\n\016NPT_TOP_REWARD\020D\022\"\n\036NPT_GRC_GET_SELF_P"
    "LAT_VIP_INFO\020E\022\031\n\025NPT_GREET_INVEST_INFO\020"
    "F\022\032\n\026NPT_GREET_INVEST_AWARD\020G\022\036\n\032NPT_SEN"
    "D_LEVEL_SORTED_INFO\020H\022\031\n\025NPT_WINE_GAME_O"
    "PERATE\020I\022\033\n\027NPT_WINE_GAME_SYNC_DATA\020J\022\031\n"
    "\025NPT_WINE_GAME_HISTORY\020K\022\034\n\030NPT_WINE_GAM"
    "E_HISTORY_RE\020L\022\032\n\026NPT_REGION_WAR_OPERATE"
    "\020M\022\036\n\032NPT_REGION_WAR_GET_INFO_RE\020N\022\033\n\027NP"
    "T_GM_SHUT_DOWN_SERVER\020O\022\"\n\036NPT_NOTIFY_RE"
    "GIONWAR_DELTATIME\020P\022#\n\037NPT_NOTIFY_REGION"
    "WAR_DAILYBONUS\020Q\022\026\n\022NPT_GET_CORPS_INFO\020R"
    "\022\035\n\031NPT_GET_REGION_CHEER_INFO\020S\022 \n\034NPT_G"
    "ET_REGION_CHEER_INFO_RE\020T\022\035\n\031NPT_REGION_"
    "WAR_OPERATE_RE\020U\022\037\n\033NPT_REGION_WAR_BEGIN"
    "_NOTIFY\020V\022\035\n\031NPT_NEST_COMMON_OPERATION\020W"
    "\022\031\n\025NPT_NATION_REPUTATION\020X\022\034\n\030NPT_NATIO"
    "N_REPUTATION_RE\020Y\022\033\n\027NPT_NATION_LANTERN_"
    "INFO\020Z\022\036\n\032NPT_NATION_LANTERN_INFO_RE\020[\022 "
    "\n\034NPT_NATION_REPUTATION_CHANGE\020\\\022\033\n\027NPT_"
    "RECEIVE_NATION_GIFT\020]\022\030\n\024NPT_NOTIFY_ZONE"
    "_LIST\020^\022\036\n\032NPT_NOTIFY_ROAM_MATCH_INFO\020_\022"
    "\031\n\025NPT_BATTLE_AUTO_MATCH\020`\022\031\n\025NPT_EXCHAN"
    "GE_ACTIVITY\020a\022\034\n\030NPT_EXCHANGE_ACTIVITY_R"
    "E\020b\022\026\n\022NPT_EXCHANGE_AWARD\020c\022\033\n\027NPT_BATTL"
    "E_MATCH_RESULT\020d\022\034\n\030NPT_BATTLE_MATCH_PRE"
    "PARE\020e\022\035\n\031NPT_GET_BATTLE_MATCH_RANK\020f\022\034\n"
    "\030NPT_CHANGE_ZONE_RESPONSE\020g\022\023\n\017NPT_ROAM_"
    "ZHAOJI\020h\022\030\n\024NPT_ROAM_ZHAOJI_INFO\020i\022\030\n\024NP"
    "T_ROAM_INST_RESULT\020j\022\031\n\025NPT_REQ_BACKFLOW"
    "_DATA\020k\022\034\n\030NPT_REQ_BACKFLOW_DATA_RE\020l\022\033\n"
    "\027NPT_SHARE_BACKFLOW_CODE\020m\022\031\n\025NPT_RECE_I"
    "NVITE_AWARD\020n\022\034\n\030NPT_RECE_INVITE_AWARD_R"
    "E\020o\022\032\n\026NPT_RECE_CONVENE_AWARD\020p\022\035\n\031NPT_R"
    "ECE_CONVENE_AWARD_RE\020q\022\033\n\027NPT_RECE_BACKF"
    "LOW_AWARD\020r\022\036\n\032NPT_RECE_BACKFLOW_AWARD_R"
    "E\020s\022\033\n\027NPT_RESET_DOUBLERECHAGE\020t\022\036\n\032NPT_"
    "SHARE_BACKFLOW_CODE_RE\020uB\002H\001", 21708);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PB/net_common.proto", &protobuf_RegisterTypes);
  a3d_pos::default_instance_ = new a3d_pos();
  player_id_name::default_instance_ = new player_id_name();
  general_list::default_instance_ = new general_list();
  general_list_item_data::default_instance_ = new general_list_item_data();
  simple_list::default_instance_ = new simple_list();
  test_data::default_instance_ = new test_data();
  other_player_profile_from_gs::default_instance_ = new other_player_profile_from_gs();
  corp_chariot::default_instance_ = new corp_chariot();
  corp_chariot_chariot_info::default_instance_ = new corp_chariot_chariot_info();
  corp_repu::default_instance_ = new corp_repu();
  ipt_mirror_info::default_instance_ = new ipt_mirror_info();
  zhaojiling_info::default_instance_ = new zhaojiling_info();
  corps_member::default_instance_ = new corps_member();
  corps_apply_t::default_instance_ = new corps_apply_t();
  corp_attribute::default_instance_ = new corp_attribute();
  corp_attribute_corp_skill_room::default_instance_ = new corp_attribute_corp_skill_room();
  corps_struct::default_instance_ = new corps_struct();
  facebook_str::default_instance_ = new facebook_str();
  face_book::default_instance_ = new face_book();
  idip_role_info::default_instance_ = new idip_role_info();
  role_list_custom::default_instance_ = new role_list_custom();
  gs_role_mutable_data::default_instance_ = new gs_role_mutable_data();
  nation_war_history::default_instance_ = new nation_war_history();
  blessing_info::default_instance_ = new blessing_info();
  card_info::default_instance_ = new card_info();
  greeting_info::default_instance_ = new greeting_info();
  ask_help_info::default_instance_ = new ask_help_info();
  roam_match_info::default_instance_ = new roam_match_info();
  db_roam_record_info::default_instance_ = new db_roam_record_info();
  db_roam_record_data::default_instance_ = new db_roam_record_data();
  instance_extend_info::default_instance_ = new instance_extend_info();
  corp_farmland::default_instance_ = new corp_farmland();
  enter_instance_config::default_instance_ = new enter_instance_config();
  enter_instance_config_client_config::default_instance_ = new enter_instance_config_client_config();
  enter_instance_config_server_config::default_instance_ = new enter_instance_config_server_config();
  player_corps_attr_config::default_instance_ = new player_corps_attr_config();
  player_corps_attr_config_rent_chariot_info::default_instance_ = new player_corps_attr_config_rent_chariot_info();
  player_stune_config::default_instance_ = new player_stune_config();
  player_stune_config_player_rune_prop_config::default_instance_ = new player_stune_config_player_rune_prop_config();
  player_stune_config_player_rune_config::default_instance_ = new player_stune_config_player_rune_config();
  player_stune_config_config_set::default_instance_ = new player_stune_config_config_set();
  black_shop_info::default_instance_ = new black_shop_info();
  black_shop_info_black_shop_goods_info::default_instance_ = new black_shop_info_black_shop_goods_info();
  climbtower_magic_shop_info::default_instance_ = new climbtower_magic_shop_info();
  climbtower_magic_shop_info_magic_shop_goods_info::default_instance_ = new climbtower_magic_shop_info_magic_shop_goods_info();
  db_hero_trial_config::default_instance_ = new db_hero_trial_config();
  level_shopid::default_instance_ = new level_shopid();
  db_strategy_info::default_instance_ = new db_strategy_info();
  db_strategy_vectors::default_instance_ = new db_strategy_vectors();
  db_surface_soul::default_instance_ = new db_surface_soul();
  db_wing_refine_soul::default_instance_ = new db_wing_refine_soul();
  db_refine_surfaces::default_instance_ = new db_refine_surfaces();
  db_equip_soul::default_instance_ = new db_equip_soul();
  db_equip_fixed_data::default_instance_ = new db_equip_fixed_data();
  db_magic_weapon::default_instance_ = new db_magic_weapon();
  db_magic_weapon_property::default_instance_ = new db_magic_weapon_property();
  db_magic_weapon_refine_group::default_instance_ = new db_magic_weapon_refine_group();
  db_magic_weapon_refine_group_refine::default_instance_ = new db_magic_weapon_refine_group_refine();
  db_magic_weapons::default_instance_ = new db_magic_weapons();
  db_general_soul::default_instance_ = new db_general_soul();
  db_general_souls::default_instance_ = new db_general_souls();
  wine_game_history::default_instance_ = new wine_game_history();
  pixiu_service_buy_record::default_instance_ = new pixiu_service_buy_record();
  npt_test::default_instance_ = new npt_test();
  npt_response::default_instance_ = new npt_response();
  npt_corps_appoint::default_instance_ = new npt_corps_appoint();
  npt_apply_corps::default_instance_ = new npt_apply_corps();
  npt_corps_data::default_instance_ = new npt_corps_data();
  name_ruid::default_instance_ = new name_ruid();
  npt_common_search::default_instance_ = new npt_common_search();
  npt_common_search_search_corps_key::default_instance_ = new npt_common_search_search_corps_key();
  npt_common_search_search_player_key::default_instance_ = new npt_common_search_search_player_key();
  npt_zhaojiling::default_instance_ = new npt_zhaojiling();
  npt_sync_mirror_info::default_instance_ = new npt_sync_mirror_info();
  npt_sync_nation_war_info::default_instance_ = new npt_sync_nation_war_info();
  npt_sync_nation_war_info_nwar_npc_info::default_instance_ = new npt_sync_nation_war_info_nwar_npc_info();
  npt_get_corp_name::default_instance_ = new npt_get_corp_name();
  npt_nation_war_operate::default_instance_ = new npt_nation_war_operate();
  npt_nation_war_operate_info::default_instance_ = new npt_nation_war_operate_info();
  npt_nation_war_operate_info_re::default_instance_ = new npt_nation_war_operate_info_re();
  npt_team_invite::default_instance_ = new npt_team_invite();
  npt_friend_invite::default_instance_ = new npt_friend_invite();
  npt_team_info::default_instance_ = new npt_team_info();
  npt_team_info_team_info::default_instance_ = new npt_team_info_team_info();
  other_player_profile::default_instance_ = new other_player_profile();
  npt_get_player_profile::default_instance_ = new npt_get_player_profile();
  npt_blessing_info::default_instance_ = new npt_blessing_info();
  npt_nationwar_event::default_instance_ = new npt_nationwar_event();
  npt_nation_shutup::default_instance_ = new npt_nation_shutup();
  npt_nation_shutup_info::default_instance_ = new npt_nation_shutup_info();
  npt_nation_commander_appoint::default_instance_ = new npt_nation_commander_appoint();
  npt_nation_commander_notify::default_instance_ = new npt_nation_commander_notify();
  npt_nation_war_history::default_instance_ = new npt_nation_war_history();
  npt_request_info::default_instance_ = new npt_request_info();
  npt_nation_shutup_reply::default_instance_ = new npt_nation_shutup_reply();
  npt_greeting_info_sync::default_instance_ = new npt_greeting_info_sync();
  npt_greeting_reply::default_instance_ = new npt_greeting_reply();
  npt_ask_help::default_instance_ = new npt_ask_help();
  npt_send_server_midas_info::default_instance_ = new npt_send_server_midas_info();
  npt_send_tencent_secure_info::default_instance_ = new npt_send_tencent_secure_info();
  npt_send_client_midas_info::default_instance_ = new npt_send_client_midas_info();
  npt_send_midas_bad_token::default_instance_ = new npt_send_midas_bad_token();
  npt_officer_gift_get::default_instance_ = new npt_officer_gift_get();
  npt_officer_gift_notify::default_instance_ = new npt_officer_gift_notify();
  npt_weak_nation_gift_get::default_instance_ = new npt_weak_nation_gift_get();
  npt_weak_nation_gift_notify::default_instance_ = new npt_weak_nation_gift_notify();
  npt_server_info_notify::default_instance_ = new npt_server_info_notify();
  npt_team_recruit_operate::default_instance_ = new npt_team_recruit_operate();
  recruit_info::default_instance_ = new recruit_info();
  npt_team_recruit_operate_reply::default_instance_ = new npt_team_recruit_operate_reply();
  npt_update_grc_info::default_instance_ = new npt_update_grc_info();
  npt_grc_get_friend_info::default_instance_ = new npt_grc_get_friend_info();
  npt_grc_send_gift::default_instance_ = new npt_grc_send_gift();
  npt_grc_rcv_gift::default_instance_ = new npt_grc_rcv_gift();
  grc_friend_info::default_instance_ = new grc_friend_info();
  npt_grc_friend_list::default_instance_ = new npt_grc_friend_list();
  grc_gift_info::default_instance_ = new grc_gift_info();
  grc_user_gift_info::default_instance_ = new grc_user_gift_info();
  npt_grc_gift_list::default_instance_ = new npt_grc_gift_list();
  npt_grc_send_gift_re::default_instance_ = new npt_grc_send_gift_re();
  npt_grc_rcv_gift_re::default_instance_ = new npt_grc_rcv_gift_re();
  a3d_pos::default_instance_->InitAsDefaultInstance();
  player_id_name::default_instance_->InitAsDefaultInstance();
  general_list::default_instance_->InitAsDefaultInstance();
  general_list_item_data::default_instance_->InitAsDefaultInstance();
  simple_list::default_instance_->InitAsDefaultInstance();
  test_data::default_instance_->InitAsDefaultInstance();
  other_player_profile_from_gs::default_instance_->InitAsDefaultInstance();
  corp_chariot::default_instance_->InitAsDefaultInstance();
  corp_chariot_chariot_info::default_instance_->InitAsDefaultInstance();
  corp_repu::default_instance_->InitAsDefaultInstance();
  ipt_mirror_info::default_instance_->InitAsDefaultInstance();
  zhaojiling_info::default_instance_->InitAsDefaultInstance();
  corps_member::default_instance_->InitAsDefaultInstance();
  corps_apply_t::default_instance_->InitAsDefaultInstance();
  corp_attribute::default_instance_->InitAsDefaultInstance();
  corp_attribute_corp_skill_room::default_instance_->InitAsDefaultInstance();
  corps_struct::default_instance_->InitAsDefaultInstance();
  facebook_str::default_instance_->InitAsDefaultInstance();
  face_book::default_instance_->InitAsDefaultInstance();
  idip_role_info::default_instance_->InitAsDefaultInstance();
  role_list_custom::default_instance_->InitAsDefaultInstance();
  gs_role_mutable_data::default_instance_->InitAsDefaultInstance();
  nation_war_history::default_instance_->InitAsDefaultInstance();
  blessing_info::default_instance_->InitAsDefaultInstance();
  card_info::default_instance_->InitAsDefaultInstance();
  greeting_info::default_instance_->InitAsDefaultInstance();
  ask_help_info::default_instance_->InitAsDefaultInstance();
  roam_match_info::default_instance_->InitAsDefaultInstance();
  db_roam_record_info::default_instance_->InitAsDefaultInstance();
  db_roam_record_data::default_instance_->InitAsDefaultInstance();
  instance_extend_info::default_instance_->InitAsDefaultInstance();
  corp_farmland::default_instance_->InitAsDefaultInstance();
  enter_instance_config::default_instance_->InitAsDefaultInstance();
  enter_instance_config_client_config::default_instance_->InitAsDefaultInstance();
  enter_instance_config_server_config::default_instance_->InitAsDefaultInstance();
  player_corps_attr_config::default_instance_->InitAsDefaultInstance();
  player_corps_attr_config_rent_chariot_info::default_instance_->InitAsDefaultInstance();
  player_stune_config::default_instance_->InitAsDefaultInstance();
  player_stune_config_player_rune_prop_config::default_instance_->InitAsDefaultInstance();
  player_stune_config_player_rune_config::default_instance_->InitAsDefaultInstance();
  player_stune_config_config_set::default_instance_->InitAsDefaultInstance();
  black_shop_info::default_instance_->InitAsDefaultInstance();
  black_shop_info_black_shop_goods_info::default_instance_->InitAsDefaultInstance();
  climbtower_magic_shop_info::default_instance_->InitAsDefaultInstance();
  climbtower_magic_shop_info_magic_shop_goods_info::default_instance_->InitAsDefaultInstance();
  db_hero_trial_config::default_instance_->InitAsDefaultInstance();
  level_shopid::default_instance_->InitAsDefaultInstance();
  db_strategy_info::default_instance_->InitAsDefaultInstance();
  db_strategy_vectors::default_instance_->InitAsDefaultInstance();
  db_surface_soul::default_instance_->InitAsDefaultInstance();
  db_wing_refine_soul::default_instance_->InitAsDefaultInstance();
  db_refine_surfaces::default_instance_->InitAsDefaultInstance();
  db_equip_soul::default_instance_->InitAsDefaultInstance();
  db_equip_fixed_data::default_instance_->InitAsDefaultInstance();
  db_magic_weapon::default_instance_->InitAsDefaultInstance();
  db_magic_weapon_property::default_instance_->InitAsDefaultInstance();
  db_magic_weapon_refine_group::default_instance_->InitAsDefaultInstance();
  db_magic_weapon_refine_group_refine::default_instance_->InitAsDefaultInstance();
  db_magic_weapons::default_instance_->InitAsDefaultInstance();
  db_general_soul::default_instance_->InitAsDefaultInstance();
  db_general_souls::default_instance_->InitAsDefaultInstance();
  wine_game_history::default_instance_->InitAsDefaultInstance();
  pixiu_service_buy_record::default_instance_->InitAsDefaultInstance();
  npt_test::default_instance_->InitAsDefaultInstance();
  npt_response::default_instance_->InitAsDefaultInstance();
  npt_corps_appoint::default_instance_->InitAsDefaultInstance();
  npt_apply_corps::default_instance_->InitAsDefaultInstance();
  npt_corps_data::default_instance_->InitAsDefaultInstance();
  name_ruid::default_instance_->InitAsDefaultInstance();
  npt_common_search::default_instance_->InitAsDefaultInstance();
  npt_common_search_search_corps_key::default_instance_->InitAsDefaultInstance();
  npt_common_search_search_player_key::default_instance_->InitAsDefaultInstance();
  npt_zhaojiling::default_instance_->InitAsDefaultInstance();
  npt_sync_mirror_info::default_instance_->InitAsDefaultInstance();
  npt_sync_nation_war_info::default_instance_->InitAsDefaultInstance();
  npt_sync_nation_war_info_nwar_npc_info::default_instance_->InitAsDefaultInstance();
  npt_get_corp_name::default_instance_->InitAsDefaultInstance();
  npt_nation_war_operate::default_instance_->InitAsDefaultInstance();
  npt_nation_war_operate_info::default_instance_->InitAsDefaultInstance();
  npt_nation_war_operate_info_re::default_instance_->InitAsDefaultInstance();
  npt_team_invite::default_instance_->InitAsDefaultInstance();
  npt_friend_invite::default_instance_->InitAsDefaultInstance();
  npt_team_info::default_instance_->InitAsDefaultInstance();
  npt_team_info_team_info::default_instance_->InitAsDefaultInstance();
  other_player_profile::default_instance_->InitAsDefaultInstance();
  npt_get_player_profile::default_instance_->InitAsDefaultInstance();
  npt_blessing_info::default_instance_->InitAsDefaultInstance();
  npt_nationwar_event::default_instance_->InitAsDefaultInstance();
  npt_nation_shutup::default_instance_->InitAsDefaultInstance();
  npt_nation_shutup_info::default_instance_->InitAsDefaultInstance();
  npt_nation_commander_appoint::default_instance_->InitAsDefaultInstance();
  npt_nation_commander_notify::default_instance_->InitAsDefaultInstance();
  npt_nation_war_history::default_instance_->InitAsDefaultInstance();
  npt_request_info::default_instance_->InitAsDefaultInstance();
  npt_nation_shutup_reply::default_instance_->InitAsDefaultInstance();
  npt_greeting_info_sync::default_instance_->InitAsDefaultInstance();
  npt_greeting_reply::default_instance_->InitAsDefaultInstance();
  npt_ask_help::default_instance_->InitAsDefaultInstance();
  npt_send_server_midas_info::default_instance_->InitAsDefaultInstance();
  npt_send_tencent_secure_info::default_instance_->InitAsDefaultInstance();
  npt_send_client_midas_info::default_instance_->InitAsDefaultInstance();
  npt_send_midas_bad_token::default_instance_->InitAsDefaultInstance();
  npt_officer_gift_get::default_instance_->InitAsDefaultInstance();
  npt_officer_gift_notify::default_instance_->InitAsDefaultInstance();
  npt_weak_nation_gift_get::default_instance_->InitAsDefaultInstance();
  npt_weak_nation_gift_notify::default_instance_->InitAsDefaultInstance();
  npt_server_info_notify::default_instance_->InitAsDefaultInstance();
  npt_team_recruit_operate::default_instance_->InitAsDefaultInstance();
  recruit_info::default_instance_->InitAsDefaultInstance();
  npt_team_recruit_operate_reply::default_instance_->InitAsDefaultInstance();
  npt_update_grc_info::default_instance_->InitAsDefaultInstance();
  npt_grc_get_friend_info::default_instance_->InitAsDefaultInstance();
  npt_grc_send_gift::default_instance_->InitAsDefaultInstance();
  npt_grc_rcv_gift::default_instance_->InitAsDefaultInstance();
  grc_friend_info::default_instance_->InitAsDefaultInstance();
  npt_grc_friend_list::default_instance_->InitAsDefaultInstance();
  grc_gift_info::default_instance_->InitAsDefaultInstance();
  grc_user_gift_info::default_instance_->InitAsDefaultInstance();
  npt_grc_gift_list::default_instance_->InitAsDefaultInstance();
  npt_grc_send_gift_re::default_instance_->InitAsDefaultInstance();
  npt_grc_rcv_gift_re::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PB_2fnet_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PB_2fnet_5fcommon_2eproto {
  StaticDescriptorInitializer_PB_2fnet_5fcommon_2eproto() {
    protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  }
} static_descriptor_initializer_PB_2fnet_5fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* GPS_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPS_TYPE_descriptor_;
}
bool GPS_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CORPS_POSITION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CORPS_POSITION_descriptor_;
}
bool CORPS_POSITION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MIRROR_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MIRROR_STATE_descriptor_;
}
bool MIRROR_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ask_help_info_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ask_help_info_type_descriptor_;
}
bool ask_help_info_type_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NET_PROTOCBUF_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NET_PROTOCBUF_TYPE_descriptor_;
}
bool NET_PROTOCBUF_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int a3d_pos::kXFieldNumber;
const int a3d_pos::kZFieldNumber;
const int a3d_pos::kYFieldNumber;
#endif  // !_MSC_VER

a3d_pos::a3d_pos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void a3d_pos::InitAsDefaultInstance() {
}

a3d_pos::a3d_pos(const a3d_pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void a3d_pos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  z_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

a3d_pos::~a3d_pos() {
  SharedDtor();
}

void a3d_pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void a3d_pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* a3d_pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return a3d_pos_descriptor_;
}

const a3d_pos& a3d_pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

a3d_pos* a3d_pos::default_instance_ = NULL;

a3d_pos* a3d_pos::New() const {
  return new a3d_pos;
}

void a3d_pos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    z_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool a3d_pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_z;
        break;
      }

      // required float z = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // optional float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void a3d_pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float z = 2;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->z(), output);
  }

  // optional float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* a3d_pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float z = 2;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->z(), target);
  }

  // optional float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int a3d_pos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float z = 2;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void a3d_pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const a3d_pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const a3d_pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void a3d_pos::MergeFrom(const a3d_pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void a3d_pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void a3d_pos::CopyFrom(const a3d_pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool a3d_pos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void a3d_pos::Swap(a3d_pos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(z_, other->z_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata a3d_pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = a3d_pos_descriptor_;
  metadata.reflection = a3d_pos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_id_name::kIdFieldNumber;
const int player_id_name::kNameFieldNumber;
#endif  // !_MSC_VER

player_id_name::player_id_name()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_id_name::InitAsDefaultInstance() {
}

player_id_name::player_id_name(const player_id_name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_id_name::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_id_name::~player_id_name() {
  SharedDtor();
}

void player_id_name::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void player_id_name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_id_name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_id_name_descriptor_;
}

const player_id_name& player_id_name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

player_id_name* player_id_name::default_instance_ = NULL;

player_id_name* player_id_name::New() const {
  return new player_id_name;
}

void player_id_name::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_id_name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_id_name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_id_name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_id_name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_id_name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_id_name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_id_name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_id_name::MergeFrom(const player_id_name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_id_name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_id_name::CopyFrom(const player_id_name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_id_name::IsInitialized() const {

  return true;
}

void player_id_name::Swap(player_id_name* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_id_name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_id_name_descriptor_;
  metadata.reflection = player_id_name_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int general_list_item_data::kTidFieldNumber;
const int general_list_item_data::kStarFieldNumber;
const int general_list_item_data::kLockedFieldNumber;
#endif  // !_MSC_VER

general_list_item_data::general_list_item_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void general_list_item_data::InitAsDefaultInstance() {
}

general_list_item_data::general_list_item_data(const general_list_item_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void general_list_item_data::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  star_ = 0;
  locked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

general_list_item_data::~general_list_item_data() {
  SharedDtor();
}

void general_list_item_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void general_list_item_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* general_list_item_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return general_list_item_data_descriptor_;
}

const general_list_item_data& general_list_item_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

general_list_item_data* general_list_item_data::default_instance_ = NULL;

general_list_item_data* general_list_item_data::New() const {
  return new general_list_item_data;
}

void general_list_item_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tid_ = 0;
    star_ = 0;
    locked_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool general_list_item_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_locked;
        break;
      }

      // optional bool locked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void general_list_item_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // optional bool locked = 3;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->locked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* general_list_item_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  // optional bool locked = 3;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->locked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int general_list_item_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional bool locked = 3;
    if (has_locked()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void general_list_item_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const general_list_item_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const general_list_item_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void general_list_item_data::MergeFrom(const general_list_item_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void general_list_item_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void general_list_item_data::CopyFrom(const general_list_item_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool general_list_item_data::IsInitialized() const {

  return true;
}

void general_list_item_data::Swap(general_list_item_data* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(star_, other->star_);
    std::swap(locked_, other->locked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata general_list_item_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = general_list_item_data_descriptor_;
  metadata.reflection = general_list_item_data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int general_list::kItemListFieldNumber;
#endif  // !_MSC_VER

general_list::general_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void general_list::InitAsDefaultInstance() {
}

general_list::general_list(const general_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void general_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

general_list::~general_list() {
  SharedDtor();
}

void general_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void general_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* general_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return general_list_descriptor_;
}

const general_list& general_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

general_list* general_list::default_instance_ = NULL;

general_list* general_list::New() const {
  return new general_list;
}

void general_list::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool general_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.general_list.item_data item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void general_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.general_list.item_data item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* general_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.general_list.item_data item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int general_list::ByteSize() const {
  int total_size = 0;

  // repeated .PB.general_list.item_data item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void general_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const general_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const general_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void general_list::MergeFrom(const general_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void general_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void general_list::CopyFrom(const general_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool general_list::IsInitialized() const {

  return true;
}

void general_list::Swap(general_list* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata general_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = general_list_descriptor_;
  metadata.reflection = general_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int simple_list::kKeyFieldNumber;
const int simple_list::kValueFieldNumber;
const int simple_list::kNameFieldNumber;
#endif  // !_MSC_VER

simple_list::simple_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void simple_list::InitAsDefaultInstance() {
}

simple_list::simple_list(const simple_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void simple_list::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_LONGLONG(0);
  value_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

simple_list::~simple_list() {
  SharedDtor();
}

void simple_list::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void simple_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* simple_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return simple_list_descriptor_;
}

const simple_list& simple_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

simple_list* simple_list::default_instance_ = NULL;

simple_list* simple_list::New() const {
  return new simple_list;
}

void simple_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_LONGLONG(0);
    value_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool simple_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void simple_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* simple_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int simple_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void simple_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const simple_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const simple_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void simple_list::MergeFrom(const simple_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void simple_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void simple_list::CopyFrom(const simple_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool simple_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void simple_list::Swap(simple_list* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata simple_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = simple_list_descriptor_;
  metadata.reflection = simple_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_data::kTypeFieldNumber;
const int test_data::kParamsFieldNumber;
const int test_data::kParam2FieldNumber;
const int test_data::kInfoFieldNumber;
#endif  // !_MSC_VER

test_data::test_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_data::InitAsDefaultInstance() {
}

test_data::test_data(const test_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  param2_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_data::~test_data() {
  SharedDtor();
}

void test_data::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void test_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_data_descriptor_;
}

const test_data& test_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

test_data* test_data::default_instance_ = NULL;

test_data* test_data::New() const {
  return new test_data;
}

void test_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    param2_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.GPS_TYPE type = 1 [default = GUT_TEST_DATA];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::GPS_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::GPS_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_params;
        break;
      }

      // repeated int64 params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_params;
        if (input->ExpectTag(24)) goto parse_param2;
        break;
      }

      // optional int32 param2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional bytes info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_TEST_DATA];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated int64 params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->params(i), output);
  }

  // optional int32 param2 = 3;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param2(), output);
  }

  // optional bytes info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_TEST_DATA];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated int64 params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->params(i), target);
  }

  // optional int32 param2 = 3;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param2(), target);
  }

  // optional bytes info = 4;
  if (has_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.GPS_TYPE type = 1 [default = GUT_TEST_DATA];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 param2 = 3;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param2());
    }

    // optional bytes info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info());
    }

  }
  // repeated int64 params = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_data::MergeFrom(const test_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_data::CopyFrom(const test_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_data::IsInitialized() const {

  return true;
}

void test_data::Swap(test_data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    params_.Swap(&other->params_);
    std::swap(param2_, other->param2_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_data_descriptor_;
  metadata.reflection = test_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int other_player_profile_from_gs::kAchievementGradeFieldNumber;
const int other_player_profile_from_gs::kAchievementCountFieldNumber;
#endif  // !_MSC_VER

other_player_profile_from_gs::other_player_profile_from_gs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void other_player_profile_from_gs::InitAsDefaultInstance() {
}

other_player_profile_from_gs::other_player_profile_from_gs(const other_player_profile_from_gs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void other_player_profile_from_gs::SharedCtor() {
  _cached_size_ = 0;
  achievement_grade_ = 0u;
  achievement_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

other_player_profile_from_gs::~other_player_profile_from_gs() {
  SharedDtor();
}

void other_player_profile_from_gs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void other_player_profile_from_gs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* other_player_profile_from_gs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return other_player_profile_from_gs_descriptor_;
}

const other_player_profile_from_gs& other_player_profile_from_gs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

other_player_profile_from_gs* other_player_profile_from_gs::default_instance_ = NULL;

other_player_profile_from_gs* other_player_profile_from_gs::New() const {
  return new other_player_profile_from_gs;
}

void other_player_profile_from_gs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achievement_grade_ = 0u;
    achievement_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool other_player_profile_from_gs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achievement_grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_grade_)));
          set_has_achievement_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_achievement_count;
        break;
      }

      // optional uint32 achievement_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievement_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_count_)));
          set_has_achievement_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void other_player_profile_from_gs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 achievement_grade = 1;
  if (has_achievement_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievement_grade(), output);
  }

  // optional uint32 achievement_count = 2;
  if (has_achievement_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->achievement_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* other_player_profile_from_gs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 achievement_grade = 1;
  if (has_achievement_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievement_grade(), target);
  }

  // optional uint32 achievement_count = 2;
  if (has_achievement_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->achievement_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int other_player_profile_from_gs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 achievement_grade = 1;
    if (has_achievement_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_grade());
    }

    // optional uint32 achievement_count = 2;
    if (has_achievement_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void other_player_profile_from_gs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const other_player_profile_from_gs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const other_player_profile_from_gs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void other_player_profile_from_gs::MergeFrom(const other_player_profile_from_gs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievement_grade()) {
      set_achievement_grade(from.achievement_grade());
    }
    if (from.has_achievement_count()) {
      set_achievement_count(from.achievement_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void other_player_profile_from_gs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void other_player_profile_from_gs::CopyFrom(const other_player_profile_from_gs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool other_player_profile_from_gs::IsInitialized() const {

  return true;
}

void other_player_profile_from_gs::Swap(other_player_profile_from_gs* other) {
  if (other != this) {
    std::swap(achievement_grade_, other->achievement_grade_);
    std::swap(achievement_count_, other->achievement_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata other_player_profile_from_gs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = other_player_profile_from_gs_descriptor_;
  metadata.reflection = other_player_profile_from_gs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int corp_chariot_chariot_info::kExpFieldNumber;
const int corp_chariot_chariot_info::kDriverFieldNumber;
const int corp_chariot_chariot_info::kRentTimestampFieldNumber;
const int corp_chariot_chariot_info::kLevelFieldNumber;
const int corp_chariot_chariot_info::kTidFieldNumber;
const int corp_chariot_chariot_info::kIsUpgradeFieldNumber;
#endif  // !_MSC_VER

corp_chariot_chariot_info::corp_chariot_chariot_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void corp_chariot_chariot_info::InitAsDefaultInstance() {
  driver_ = const_cast< ::PB::player_id_name*>(&::PB::player_id_name::default_instance());
}

corp_chariot_chariot_info::corp_chariot_chariot_info(const corp_chariot_chariot_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void corp_chariot_chariot_info::SharedCtor() {
  _cached_size_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  driver_ = NULL;
  rent_timestamp_ = 0;
  level_ = 0;
  tid_ = 0;
  is_upgrade_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

corp_chariot_chariot_info::~corp_chariot_chariot_info() {
  SharedDtor();
}

void corp_chariot_chariot_info::SharedDtor() {
  if (this != default_instance_) {
    delete driver_;
  }
}

void corp_chariot_chariot_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* corp_chariot_chariot_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return corp_chariot_chariot_info_descriptor_;
}

const corp_chariot_chariot_info& corp_chariot_chariot_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

corp_chariot_chariot_info* corp_chariot_chariot_info::default_instance_ = NULL;

corp_chariot_chariot_info* corp_chariot_chariot_info::New() const {
  return new corp_chariot_chariot_info;
}

void corp_chariot_chariot_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = GOOGLE_LONGLONG(0);
    if (has_driver()) {
      if (driver_ != NULL) driver_->::PB::player_id_name::Clear();
    }
    rent_timestamp_ = 0;
    level_ = 0;
    tid_ = 0;
    is_upgrade_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool corp_chariot_chariot_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_driver;
        break;
      }

      // optional .PB.player_id_name driver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_driver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_driver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rent_timestamp;
        break;
      }

      // optional int32 rent_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rent_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rent_timestamp_)));
          set_has_rent_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tid;
        break;
      }

      // optional int32 tid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_upgrade;
        break;
      }

      // optional bool is_upgrade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_upgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_upgrade_)));
          set_has_is_upgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void corp_chariot_chariot_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->exp(), output);
  }

  // optional .PB.player_id_name driver = 2;
  if (has_driver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->driver(), output);
  }

  // optional int32 rent_timestamp = 3;
  if (has_rent_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rent_timestamp(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 tid = 5;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tid(), output);
  }

  // optional bool is_upgrade = 7;
  if (has_is_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_upgrade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* corp_chariot_chariot_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->exp(), target);
  }

  // optional .PB.player_id_name driver = 2;
  if (has_driver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->driver(), target);
  }

  // optional int32 rent_timestamp = 3;
  if (has_rent_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rent_timestamp(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 tid = 5;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tid(), target);
  }

  // optional bool is_upgrade = 7;
  if (has_is_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_upgrade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int corp_chariot_chariot_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional .PB.player_id_name driver = 2;
    if (has_driver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->driver());
    }

    // optional int32 rent_timestamp = 3;
    if (has_rent_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rent_timestamp());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 tid = 5;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional bool is_upgrade = 7;
    if (has_is_upgrade()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void corp_chariot_chariot_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const corp_chariot_chariot_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const corp_chariot_chariot_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void corp_chariot_chariot_info::MergeFrom(const corp_chariot_chariot_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_driver()) {
      mutable_driver()->::PB::player_id_name::MergeFrom(from.driver());
    }
    if (from.has_rent_timestamp()) {
      set_rent_timestamp(from.rent_timestamp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_is_upgrade()) {
      set_is_upgrade(from.is_upgrade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void corp_chariot_chariot_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void corp_chariot_chariot_info::CopyFrom(const corp_chariot_chariot_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool corp_chariot_chariot_info::IsInitialized() const {

  return true;
}

void corp_chariot_chariot_info::Swap(corp_chariot_chariot_info* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(driver_, other->driver_);
    std::swap(rent_timestamp_, other->rent_timestamp_);
    std::swap(level_, other->level_);
    std::swap(tid_, other->tid_);
    std::swap(is_upgrade_, other->is_upgrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata corp_chariot_chariot_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = corp_chariot_chariot_info_descriptor_;
  metadata.reflection = corp_chariot_chariot_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int corp_chariot::kLevelFieldNumber;
const int corp_chariot::kChariotsFieldNumber;
#endif  // !_MSC_VER

corp_chariot::corp_chariot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void corp_chariot::InitAsDefaultInstance() {
}

corp_chariot::corp_chariot(const corp_chariot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void corp_chariot::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

corp_chariot::~corp_chariot() {
  SharedDtor();
}

void corp_chariot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void corp_chariot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* corp_chariot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return corp_chariot_descriptor_;
}

const corp_chariot& corp_chariot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

corp_chariot* corp_chariot::default_instance_ = NULL;

corp_chariot* corp_chariot::New() const {
  return new corp_chariot;
}

void corp_chariot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  chariots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool corp_chariot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chariots;
        break;
      }

      // repeated .PB.corp_chariot.chariot_info chariots = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chariots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chariots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chariots;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void corp_chariot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // repeated .PB.corp_chariot.chariot_info chariots = 2;
  for (int i = 0; i < this->chariots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chariots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* corp_chariot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // repeated .PB.corp_chariot.chariot_info chariots = 2;
  for (int i = 0; i < this->chariots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chariots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int corp_chariot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated .PB.corp_chariot.chariot_info chariots = 2;
  total_size += 1 * this->chariots_size();
  for (int i = 0; i < this->chariots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chariots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void corp_chariot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const corp_chariot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const corp_chariot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void corp_chariot::MergeFrom(const corp_chariot& from) {
  GOOGLE_CHECK_NE(&from, this);
  chariots_.MergeFrom(from.chariots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void corp_chariot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void corp_chariot::CopyFrom(const corp_chariot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool corp_chariot::IsInitialized() const {

  return true;
}

void corp_chariot::Swap(corp_chariot* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    chariots_.Swap(&other->chariots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata corp_chariot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = corp_chariot_descriptor_;
  metadata.reflection = corp_chariot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int corp_repu::kKeyFieldNumber;
const int corp_repu::kValueFieldNumber;
const int corp_repu::kTimeFieldNumber;
#endif  // !_MSC_VER

corp_repu::corp_repu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void corp_repu::InitAsDefaultInstance() {
}

corp_repu::corp_repu(const corp_repu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void corp_repu::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_LONGLONG(0);
  value_ = GOOGLE_LONGLONG(0);
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

corp_repu::~corp_repu() {
  SharedDtor();
}

void corp_repu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void corp_repu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* corp_repu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return corp_repu_descriptor_;
}

const corp_repu& corp_repu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

corp_repu* corp_repu::default_instance_ = NULL;

corp_repu* corp_repu::New() const {
  return new corp_repu;
}

void corp_repu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_LONGLONG(0);
    value_ = GOOGLE_LONGLONG(0);
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool corp_repu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void corp_repu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* corp_repu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int corp_repu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void corp_repu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const corp_repu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const corp_repu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void corp_repu::MergeFrom(const corp_repu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void corp_repu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void corp_repu::CopyFrom(const corp_repu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool corp_repu::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void corp_repu::Swap(corp_repu* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata corp_repu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = corp_repu_descriptor_;
  metadata.reflection = corp_repu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ipt_mirror_info::kMirroridFieldNumber;
const int ipt_mirror_info::kStateFieldNumber;
const int ipt_mirror_info::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

ipt_mirror_info::ipt_mirror_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ipt_mirror_info::InitAsDefaultInstance() {
}

ipt_mirror_info::ipt_mirror_info(const ipt_mirror_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ipt_mirror_info::SharedCtor() {
  _cached_size_ = 0;
  mirrorid_ = 0u;
  state_ = 1;
  create_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ipt_mirror_info::~ipt_mirror_info() {
  SharedDtor();
}

void ipt_mirror_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ipt_mirror_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipt_mirror_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ipt_mirror_info_descriptor_;
}

const ipt_mirror_info& ipt_mirror_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

ipt_mirror_info* ipt_mirror_info::default_instance_ = NULL;

ipt_mirror_info* ipt_mirror_info::New() const {
  return new ipt_mirror_info;
}

void ipt_mirror_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mirrorid_ = 0u;
    state_ = 1;
    create_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ipt_mirror_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mirrorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mirrorid_)));
          set_has_mirrorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .PB.MIRROR_STATE state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::MIRROR_STATE_IsValid(value)) {
            set_state(static_cast< ::PB::MIRROR_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ipt_mirror_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mirrorid = 1;
  if (has_mirrorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mirrorid(), output);
  }

  // required .PB.MIRROR_STATE state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional uint32 create_time = 3;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ipt_mirror_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mirrorid = 1;
  if (has_mirrorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mirrorid(), target);
  }

  // required .PB.MIRROR_STATE state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional uint32 create_time = 3;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ipt_mirror_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mirrorid = 1;
    if (has_mirrorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mirrorid());
    }

    // required .PB.MIRROR_STATE state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 create_time = 3;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipt_mirror_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ipt_mirror_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ipt_mirror_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ipt_mirror_info::MergeFrom(const ipt_mirror_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mirrorid()) {
      set_mirrorid(from.mirrorid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ipt_mirror_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipt_mirror_info::CopyFrom(const ipt_mirror_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipt_mirror_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ipt_mirror_info::Swap(ipt_mirror_info* other) {
  if (other != this) {
    std::swap(mirrorid_, other->mirrorid_);
    std::swap(state_, other->state_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ipt_mirror_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ipt_mirror_info_descriptor_;
  metadata.reflection = ipt_mirror_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* zhaojiling_info_ZHAOJI_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zhaojiling_info_ZHAOJI_TYPE_descriptor_;
}
bool zhaojiling_info_ZHAOJI_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const zhaojiling_info_ZHAOJI_TYPE zhaojiling_info::ZT_ITEM;
const zhaojiling_info_ZHAOJI_TYPE zhaojiling_info::ZT_NATION_WAR_START;
const zhaojiling_info_ZHAOJI_TYPE zhaojiling_info::ZT_NATION_WAR_ROLE;
const zhaojiling_info_ZHAOJI_TYPE zhaojiling_info::ZT_SUCCOR;
const zhaojiling_info_ZHAOJI_TYPE zhaojiling_info::ZHAOJI_TYPE_MIN;
const zhaojiling_info_ZHAOJI_TYPE zhaojiling_info::ZHAOJI_TYPE_MAX;
const int zhaojiling_info::ZHAOJI_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int zhaojiling_info::kSrcFieldNumber;
const int zhaojiling_info::kSrcNameFieldNumber;
const int zhaojiling_info::kReasonFieldNumber;
const int zhaojiling_info::kDelayTimeFieldNumber;
const int zhaojiling_info::kSceneTagFieldNumber;
const int zhaojiling_info::kPosFieldNumber;
const int zhaojiling_info::kRandomRadiusFieldNumber;
const int zhaojiling_info::kZhaojilingIdFieldNumber;
const int zhaojiling_info::kSrcCorpPositionFieldNumber;
const int zhaojiling_info::kSrcNationPositionFieldNumber;
const int zhaojiling_info::kMirrorIdFieldNumber;
const int zhaojiling_info::kTypeFieldNumber;
const int zhaojiling_info::kParam1FieldNumber;
const int zhaojiling_info::kInstTidFieldNumber;
#endif  // !_MSC_VER

zhaojiling_info::zhaojiling_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void zhaojiling_info::InitAsDefaultInstance() {
  pos_ = const_cast< ::PB::a3d_pos*>(&::PB::a3d_pos::default_instance());
}

zhaojiling_info::zhaojiling_info(const zhaojiling_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void zhaojiling_info::SharedCtor() {
  _cached_size_ = 0;
  src_ = GOOGLE_ULONGLONG(0);
  src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delay_time_ = 0;
  scene_tag_ = 0;
  pos_ = NULL;
  random_radius_ = 0;
  zhaojiling_id_ = 0;
  src_corp_position_ = 0;
  src_nation_position_ = 0;
  mirror_id_ = 0;
  type_ = 0;
  param1_ = 0;
  inst_tid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

zhaojiling_info::~zhaojiling_info() {
  SharedDtor();
}

void zhaojiling_info::SharedDtor() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void zhaojiling_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zhaojiling_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zhaojiling_info_descriptor_;
}

const zhaojiling_info& zhaojiling_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

zhaojiling_info* zhaojiling_info::default_instance_ = NULL;

zhaojiling_info* zhaojiling_info::New() const {
  return new zhaojiling_info;
}

void zhaojiling_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_ = GOOGLE_ULONGLONG(0);
    if (has_src_name()) {
      if (src_name_ != &::google::protobuf::internal::kEmptyString) {
        src_name_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
    delay_time_ = 0;
    scene_tag_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::PB::a3d_pos::Clear();
    }
    random_radius_ = 0;
    zhaojiling_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    src_corp_position_ = 0;
    src_nation_position_ = 0;
    mirror_id_ = 0;
    type_ = 0;
    param1_ = 0;
    inst_tid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool zhaojiling_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_src_name;
        break;
      }

      // optional bytes src_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // optional bytes reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delay_time;
        break;
      }

      // optional int32 delay_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_time_)));
          set_has_delay_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_tag;
        break;
      }

      // required int32 scene_tag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_tag_)));
          set_has_scene_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pos;
        break;
      }

      // required .PB.a3d_pos pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_random_radius;
        break;
      }

      // optional int32 random_radius = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_radius_)));
          set_has_random_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_zhaojiling_id;
        break;
      }

      // optional int32 zhaojiling_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhaojiling_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhaojiling_id_)));
          set_has_zhaojiling_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_src_corp_position;
        break;
      }

      // optional int32 src_corp_position = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_corp_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_corp_position_)));
          set_has_src_corp_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_src_nation_position;
        break;
      }

      // optional int32 src_nation_position = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_nation_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_nation_position_)));
          set_has_src_nation_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mirror_id;
        break;
      }

      // optional int32 mirror_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mirror_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mirror_id_)));
          set_has_mirror_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional .PB.zhaojiling_info.ZHAOJI_TYPE type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::zhaojiling_info_ZHAOJI_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::zhaojiling_info_ZHAOJI_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_param1;
        break;
      }

      // optional int32 param1 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_inst_tid;
        break;
      }

      // optional int32 inst_tid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inst_tid_)));
          set_has_inst_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void zhaojiling_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src(), output);
  }

  // optional bytes src_name = 2;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->src_name(), output);
  }

  // optional bytes reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->reason(), output);
  }

  // optional int32 delay_time = 4;
  if (has_delay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->delay_time(), output);
  }

  // required int32 scene_tag = 5;
  if (has_scene_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scene_tag(), output);
  }

  // required .PB.a3d_pos pos = 6;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pos(), output);
  }

  // optional int32 random_radius = 7;
  if (has_random_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->random_radius(), output);
  }

  // optional int32 zhaojiling_id = 8;
  if (has_zhaojiling_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->zhaojiling_id(), output);
  }

  // optional int32 src_corp_position = 9;
  if (has_src_corp_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->src_corp_position(), output);
  }

  // optional int32 src_nation_position = 10;
  if (has_src_nation_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->src_nation_position(), output);
  }

  // optional int32 mirror_id = 11;
  if (has_mirror_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mirror_id(), output);
  }

  // optional .PB.zhaojiling_info.ZHAOJI_TYPE type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->type(), output);
  }

  // optional int32 param1 = 13;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->param1(), output);
  }

  // optional int32 inst_tid = 14;
  if (has_inst_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->inst_tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* zhaojiling_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src(), target);
  }

  // optional bytes src_name = 2;
  if (has_src_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->src_name(), target);
  }

  // optional bytes reason = 3;
  if (has_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->reason(), target);
  }

  // optional int32 delay_time = 4;
  if (has_delay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->delay_time(), target);
  }

  // required int32 scene_tag = 5;
  if (has_scene_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scene_tag(), target);
  }

  // required .PB.a3d_pos pos = 6;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pos(), target);
  }

  // optional int32 random_radius = 7;
  if (has_random_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->random_radius(), target);
  }

  // optional int32 zhaojiling_id = 8;
  if (has_zhaojiling_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->zhaojiling_id(), target);
  }

  // optional int32 src_corp_position = 9;
  if (has_src_corp_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->src_corp_position(), target);
  }

  // optional int32 src_nation_position = 10;
  if (has_src_nation_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->src_nation_position(), target);
  }

  // optional int32 mirror_id = 11;
  if (has_mirror_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mirror_id(), target);
  }

  // optional .PB.zhaojiling_info.ZHAOJI_TYPE type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->type(), target);
  }

  // optional int32 param1 = 13;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->param1(), target);
  }

  // optional int32 inst_tid = 14;
  if (has_inst_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->inst_tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int zhaojiling_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src());
    }

    // optional bytes src_name = 2;
    if (has_src_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_name());
    }

    // optional bytes reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reason());
    }

    // optional int32 delay_time = 4;
    if (has_delay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay_time());
    }

    // required int32 scene_tag = 5;
    if (has_scene_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_tag());
    }

    // required .PB.a3d_pos pos = 6;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional int32 random_radius = 7;
    if (has_random_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_radius());
    }

    // optional int32 zhaojiling_id = 8;
    if (has_zhaojiling_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhaojiling_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 src_corp_position = 9;
    if (has_src_corp_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_corp_position());
    }

    // optional int32 src_nation_position = 10;
    if (has_src_nation_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_nation_position());
    }

    // optional int32 mirror_id = 11;
    if (has_mirror_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mirror_id());
    }

    // optional .PB.zhaojiling_info.ZHAOJI_TYPE type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 param1 = 13;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

    // optional int32 inst_tid = 14;
    if (has_inst_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inst_tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zhaojiling_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const zhaojiling_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const zhaojiling_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void zhaojiling_info::MergeFrom(const zhaojiling_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_src_name()) {
      set_src_name(from.src_name());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_delay_time()) {
      set_delay_time(from.delay_time());
    }
    if (from.has_scene_tag()) {
      set_scene_tag(from.scene_tag());
    }
    if (from.has_pos()) {
      mutable_pos()->::PB::a3d_pos::MergeFrom(from.pos());
    }
    if (from.has_random_radius()) {
      set_random_radius(from.random_radius());
    }
    if (from.has_zhaojiling_id()) {
      set_zhaojiling_id(from.zhaojiling_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_src_corp_position()) {
      set_src_corp_position(from.src_corp_position());
    }
    if (from.has_src_nation_position()) {
      set_src_nation_position(from.src_nation_position());
    }
    if (from.has_mirror_id()) {
      set_mirror_id(from.mirror_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_inst_tid()) {
      set_inst_tid(from.inst_tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void zhaojiling_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zhaojiling_info::CopyFrom(const zhaojiling_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zhaojiling_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000031) != 0x00000031) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void zhaojiling_info::Swap(zhaojiling_info* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(src_name_, other->src_name_);
    std::swap(reason_, other->reason_);
    std::swap(delay_time_, other->delay_time_);
    std::swap(scene_tag_, other->scene_tag_);
    std::swap(pos_, other->pos_);
    std::swap(random_radius_, other->random_radius_);
    std::swap(zhaojiling_id_, other->zhaojiling_id_);
    std::swap(src_corp_position_, other->src_corp_position_);
    std::swap(src_nation_position_, other->src_nation_position_);
    std::swap(mirror_id_, other->mirror_id_);
    std::swap(type_, other->type_);
    std::swap(param1_, other->param1_);
    std::swap(inst_tid_, other->inst_tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata zhaojiling_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zhaojiling_info_descriptor_;
  metadata.reflection = zhaojiling_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int corps_member::kTypeFieldNumber;
const int corps_member::kRoleidFieldNumber;
const int corps_member::kPosFieldNumber;
const int corps_member::kNameFieldNumber;
const int corps_member::kJoinTimeFieldNumber;
const int corps_member::kLevelFieldNumber;
const int corps_member::kIdphotoFieldNumber;
const int corps_member::kContriFieldNumber;
const int corps_member::kContriCumulateFieldNumber;
const int corps_member::kLeaveTimeFieldNumber;
const int corps_member::kProfFieldNumber;
const int corps_member::kOnlineTimeTodayFieldNumber;
const int corps_member::kBossFeedRewardFieldNumber;
const int corps_member::kElixirFieldNumber;
const int corps_member::kFightcapacityFieldNumber;
#endif  // !_MSC_VER

corps_member::corps_member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void corps_member::InitAsDefaultInstance() {
}

corps_member::corps_member(const corps_member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void corps_member::SharedCtor() {
  _cached_size_ = 0;
  type_ = 3;
  roleid_ = GOOGLE_LONGLONG(0);
  pos_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  join_time_ = 0;
  level_ = 0;
  idphoto_ = 0;
  contri_ = GOOGLE_LONGLONG(0);
  contri_cumulate_ = GOOGLE_LONGLONG(0);
  leave_time_ = 0;
  prof_ = 0;
  online_time_today_ = 0;
  fightcapacity_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

corps_member::~corps_member() {
  SharedDtor();
}

void corps_member::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void corps_member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* corps_member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return corps_member_descriptor_;
}

const corps_member& corps_member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

corps_member* corps_member::default_instance_ = NULL;

corps_member* corps_member::New() const {
  return new corps_member;
}

void corps_member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 3;
    roleid_ = GOOGLE_LONGLONG(0);
    pos_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    join_time_ = 0;
    level_ = 0;
    idphoto_ = 0;
    contri_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    contri_cumulate_ = GOOGLE_LONGLONG(0);
    leave_time_ = 0;
    prof_ = 0;
    online_time_today_ = 0;
    fightcapacity_ = GOOGLE_LONGLONG(0);
  }
  boss_feed_reward_.Clear();
  elixir_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool corps_member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_MEMBER];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::GPS_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::GPS_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // required int64 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // required int32 pos = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_join_time;
        break;
      }

      // required int32 join_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &join_time_)));
          set_has_join_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_idphoto;
        break;
      }

      // required int32 idphoto = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idphoto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idphoto_)));
          set_has_idphoto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_contri;
        break;
      }

      // optional int64 contri = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contri_)));
          set_has_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_contri_cumulate;
        break;
      }

      // optional int64 contri_cumulate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contri_cumulate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contri_cumulate_)));
          set_has_contri_cumulate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_leave_time;
        break;
      }

      // optional int32 leave_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leave_time_)));
          set_has_leave_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_prof;
        break;
      }

      // required int32 prof = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_online_time_today;
        break;
      }

      // optional int32 online_time_today = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_time_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_time_today_)));
          set_has_online_time_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_boss_feed_reward;
        break;
      }

      // repeated int32 boss_feed_reward = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_feed_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_boss_feed_reward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_boss_feed_reward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_boss_feed_reward;
        if (input->ExpectTag(128)) goto parse_elixir;
        break;
      }

      // repeated int32 elixir = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elixir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_elixir())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_elixir())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_elixir;
        if (input->ExpectTag(136)) goto parse_fightcapacity;
        break;
      }

      // optional int64 fightcapacity = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightcapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fightcapacity_)));
          set_has_fightcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void corps_member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_MEMBER];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int64 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roleid(), output);
  }

  // required int32 pos = 3 [default = 0];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  // required int32 join_time = 5;
  if (has_join_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->join_time(), output);
  }

  // required int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // required int32 idphoto = 7;
  if (has_idphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->idphoto(), output);
  }

  // optional int64 contri = 10;
  if (has_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->contri(), output);
  }

  // optional int64 contri_cumulate = 11;
  if (has_contri_cumulate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->contri_cumulate(), output);
  }

  // optional int32 leave_time = 12;
  if (has_leave_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->leave_time(), output);
  }

  // required int32 prof = 13;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->prof(), output);
  }

  // optional int32 online_time_today = 14;
  if (has_online_time_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->online_time_today(), output);
  }

  // repeated int32 boss_feed_reward = 15;
  for (int i = 0; i < this->boss_feed_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->boss_feed_reward(i), output);
  }

  // repeated int32 elixir = 16;
  for (int i = 0; i < this->elixir_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->elixir(i), output);
  }

  // optional int64 fightcapacity = 17;
  if (has_fightcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->fightcapacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* corps_member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_MEMBER];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int64 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roleid(), target);
  }

  // required int32 pos = 3 [default = 0];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // required int32 join_time = 5;
  if (has_join_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->join_time(), target);
  }

  // required int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // required int32 idphoto = 7;
  if (has_idphoto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->idphoto(), target);
  }

  // optional int64 contri = 10;
  if (has_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->contri(), target);
  }

  // optional int64 contri_cumulate = 11;
  if (has_contri_cumulate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->contri_cumulate(), target);
  }

  // optional int32 leave_time = 12;
  if (has_leave_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->leave_time(), target);
  }

  // required int32 prof = 13;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->prof(), target);
  }

  // optional int32 online_time_today = 14;
  if (has_online_time_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->online_time_today(), target);
  }

  // repeated int32 boss_feed_reward = 15;
  for (int i = 0; i < this->boss_feed_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->boss_feed_reward(i), target);
  }

  // repeated int32 elixir = 16;
  for (int i = 0; i < this->elixir_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->elixir(i), target);
  }

  // optional int64 fightcapacity = 17;
  if (has_fightcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->fightcapacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int corps_member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_MEMBER];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required int32 pos = 3 [default = 0];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int32 join_time = 5;
    if (has_join_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->join_time());
    }

    // required int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 idphoto = 7;
    if (has_idphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idphoto());
    }

    // optional int64 contri = 10;
    if (has_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contri());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 contri_cumulate = 11;
    if (has_contri_cumulate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contri_cumulate());
    }

    // optional int32 leave_time = 12;
    if (has_leave_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leave_time());
    }

    // required int32 prof = 13;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 online_time_today = 14;
    if (has_online_time_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_time_today());
    }

    // optional int64 fightcapacity = 17;
    if (has_fightcapacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fightcapacity());
    }

  }
  // repeated int32 boss_feed_reward = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->boss_feed_reward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->boss_feed_reward(i));
    }
    total_size += 1 * this->boss_feed_reward_size() + data_size;
  }

  // repeated int32 elixir = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->elixir_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->elixir(i));
    }
    total_size += 2 * this->elixir_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void corps_member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const corps_member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const corps_member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void corps_member::MergeFrom(const corps_member& from) {
  GOOGLE_CHECK_NE(&from, this);
  boss_feed_reward_.MergeFrom(from.boss_feed_reward_);
  elixir_.MergeFrom(from.elixir_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_join_time()) {
      set_join_time(from.join_time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_idphoto()) {
      set_idphoto(from.idphoto());
    }
    if (from.has_contri()) {
      set_contri(from.contri());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_contri_cumulate()) {
      set_contri_cumulate(from.contri_cumulate());
    }
    if (from.has_leave_time()) {
      set_leave_time(from.leave_time());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_online_time_today()) {
      set_online_time_today(from.online_time_today());
    }
    if (from.has_fightcapacity()) {
      set_fightcapacity(from.fightcapacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void corps_member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void corps_member::CopyFrom(const corps_member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool corps_member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000476) != 0x00000476) return false;

  return true;
}

void corps_member::Swap(corps_member* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(roleid_, other->roleid_);
    std::swap(pos_, other->pos_);
    std::swap(name_, other->name_);
    std::swap(join_time_, other->join_time_);
    std::swap(level_, other->level_);
    std::swap(idphoto_, other->idphoto_);
    std::swap(contri_, other->contri_);
    std::swap(contri_cumulate_, other->contri_cumulate_);
    std::swap(leave_time_, other->leave_time_);
    std::swap(prof_, other->prof_);
    std::swap(online_time_today_, other->online_time_today_);
    boss_feed_reward_.Swap(&other->boss_feed_reward_);
    elixir_.Swap(&other->elixir_);
    std::swap(fightcapacity_, other->fightcapacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata corps_member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = corps_member_descriptor_;
  metadata.reflection = corps_member_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int corps_apply_t::kRoleidFieldNumber;
const int corps_apply_t::kNameFieldNumber;
const int corps_apply_t::kApplyTimeFieldNumber;
const int corps_apply_t::kLevelFieldNumber;
const int corps_apply_t::kProfFieldNumber;
#endif  // !_MSC_VER

corps_apply_t::corps_apply_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void corps_apply_t::InitAsDefaultInstance() {
}

corps_apply_t::corps_apply_t(const corps_apply_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void corps_apply_t::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apply_time_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  prof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

corps_apply_t::~corps_apply_t() {
  SharedDtor();
}

void corps_apply_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void corps_apply_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* corps_apply_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return corps_apply_t_descriptor_;
}

const corps_apply_t& corps_apply_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

corps_apply_t* corps_apply_t::default_instance_ = NULL;

corps_apply_t* corps_apply_t::New() const {
  return new corps_apply_t;
}

void corps_apply_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    apply_time_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    prof_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool corps_apply_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apply_time;
        break;
      }

      // required int64 apply_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_time_)));
          set_has_apply_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prof;
        break;
      }

      // optional int32 prof = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void corps_apply_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required int64 apply_time = 3;
  if (has_apply_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->apply_time(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 prof = 5;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* corps_apply_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int64 apply_time = 3;
  if (has_apply_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->apply_time(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 prof = 5;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int corps_apply_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int64 apply_time = 3;
    if (has_apply_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apply_time());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 prof = 5;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void corps_apply_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const corps_apply_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const corps_apply_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void corps_apply_t::MergeFrom(const corps_apply_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_apply_time()) {
      set_apply_time(from.apply_time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void corps_apply_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void corps_apply_t::CopyFrom(const corps_apply_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool corps_apply_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void corps_apply_t::Swap(corps_apply_t* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(apply_time_, other->apply_time_);
    std::swap(level_, other->level_);
    std::swap(prof_, other->prof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata corps_apply_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = corps_apply_t_descriptor_;
  metadata.reflection = corps_apply_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int corp_attribute_corp_skill_room::kAddonLevelFieldNumber;
#endif  // !_MSC_VER

corp_attribute_corp_skill_room::corp_attribute_corp_skill_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void corp_attribute_corp_skill_room::InitAsDefaultInstance() {
}

corp_attribute_corp_skill_room::corp_attribute_corp_skill_room(const corp_attribute_corp_skill_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void corp_attribute_corp_skill_room::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

corp_attribute_corp_skill_room::~corp_attribute_corp_skill_room() {
  SharedDtor();
}

void corp_attribute_corp_skill_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void corp_attribute_corp_skill_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* corp_attribute_corp_skill_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return corp_attribute_corp_skill_room_descriptor_;
}

const corp_attribute_corp_skill_room& corp_attribute_corp_skill_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

corp_attribute_corp_skill_room* corp_attribute_corp_skill_room::default_instance_ = NULL;

corp_attribute_corp_skill_room* corp_attribute_corp_skill_room::New() const {
  return new corp_attribute_corp_skill_room;
}

void corp_attribute_corp_skill_room::Clear() {
  addon_level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool corp_attribute_corp_skill_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 addon_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addon_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_addon_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_addon_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_addon_level;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void corp_attribute_corp_skill_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 addon_level = 1;
  for (int i = 0; i < this->addon_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->addon_level(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* corp_attribute_corp_skill_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 addon_level = 1;
  for (int i = 0; i < this->addon_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->addon_level(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int corp_attribute_corp_skill_room::ByteSize() const {
  int total_size = 0;

  // repeated uint32 addon_level = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->addon_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->addon_level(i));
    }
    total_size += 1 * this->addon_level_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void corp_attribute_corp_skill_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const corp_attribute_corp_skill_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const corp_attribute_corp_skill_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void corp_attribute_corp_skill_room::MergeFrom(const corp_attribute_corp_skill_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  addon_level_.MergeFrom(from.addon_level_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void corp_attribute_corp_skill_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void corp_attribute_corp_skill_room::CopyFrom(const corp_attribute_corp_skill_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool corp_attribute_corp_skill_room::IsInitialized() const {

  return true;
}

void corp_attribute_corp_skill_room::Swap(corp_attribute_corp_skill_room* other) {
  if (other != this) {
    addon_level_.Swap(&other->addon_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata corp_attribute_corp_skill_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = corp_attribute_corp_skill_room_descriptor_;
  metadata.reflection = corp_attribute_corp_skill_room_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int corp_attribute::kSkillRoomFieldNumber;
const int corp_attribute::kShopLevelFieldNumber;
const int corp_attribute::kCorpRepuFieldNumber;
const int corp_attribute::kBossFeedToplistFieldNumber;
const int corp_attribute::kChariotFieldNumber;
#endif  // !_MSC_VER

corp_attribute::corp_attribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void corp_attribute::InitAsDefaultInstance() {
  chariot_ = const_cast< ::PB::corp_chariot*>(&::PB::corp_chariot::default_instance());
}

corp_attribute::corp_attribute(const corp_attribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void corp_attribute::SharedCtor() {
  _cached_size_ = 0;
  shop_level_ = 0u;
  chariot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

corp_attribute::~corp_attribute() {
  SharedDtor();
}

void corp_attribute::SharedDtor() {
  if (this != default_instance_) {
    delete chariot_;
  }
}

void corp_attribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* corp_attribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return corp_attribute_descriptor_;
}

const corp_attribute& corp_attribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

corp_attribute* corp_attribute::default_instance_ = NULL;

corp_attribute* corp_attribute::New() const {
  return new corp_attribute;
}

void corp_attribute::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    shop_level_ = 0u;
    if (has_chariot()) {
      if (chariot_ != NULL) chariot_->::PB::corp_chariot::Clear();
    }
  }
  skill_room_.Clear();
  corp_repu_.Clear();
  boss_feed_toplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool corp_attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.corp_attribute.corp_skill_room skill_room = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skill_room;
        if (input->ExpectTag(16)) goto parse_shop_level;
        break;
      }

      // optional uint32 shop_level = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_level_)));
          set_has_shop_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_corp_repu;
        break;
      }

      // repeated .PB.corp_repu corp_repu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corp_repu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_corp_repu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_corp_repu;
        if (input->ExpectTag(34)) goto parse_boss_feed_toplist;
        break;
      }

      // repeated .PB.simple_list boss_feed_toplist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_feed_toplist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boss_feed_toplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_boss_feed_toplist;
        if (input->ExpectTag(42)) goto parse_chariot;
        break;
      }

      // optional .PB.corp_chariot chariot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chariot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chariot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void corp_attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.corp_attribute.corp_skill_room skill_room = 1;
  for (int i = 0; i < this->skill_room_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill_room(i), output);
  }

  // optional uint32 shop_level = 2 [default = 0];
  if (has_shop_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shop_level(), output);
  }

  // repeated .PB.corp_repu corp_repu = 3;
  for (int i = 0; i < this->corp_repu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->corp_repu(i), output);
  }

  // repeated .PB.simple_list boss_feed_toplist = 4;
  for (int i = 0; i < this->boss_feed_toplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->boss_feed_toplist(i), output);
  }

  // optional .PB.corp_chariot chariot = 5;
  if (has_chariot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->chariot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* corp_attribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.corp_attribute.corp_skill_room skill_room = 1;
  for (int i = 0; i < this->skill_room_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill_room(i), target);
  }

  // optional uint32 shop_level = 2 [default = 0];
  if (has_shop_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shop_level(), target);
  }

  // repeated .PB.corp_repu corp_repu = 3;
  for (int i = 0; i < this->corp_repu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->corp_repu(i), target);
  }

  // repeated .PB.simple_list boss_feed_toplist = 4;
  for (int i = 0; i < this->boss_feed_toplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->boss_feed_toplist(i), target);
  }

  // optional .PB.corp_chariot chariot = 5;
  if (has_chariot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->chariot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int corp_attribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 shop_level = 2 [default = 0];
    if (has_shop_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_level());
    }

    // optional .PB.corp_chariot chariot = 5;
    if (has_chariot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chariot());
    }

  }
  // repeated .PB.corp_attribute.corp_skill_room skill_room = 1;
  total_size += 1 * this->skill_room_size();
  for (int i = 0; i < this->skill_room_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_room(i));
  }

  // repeated .PB.corp_repu corp_repu = 3;
  total_size += 1 * this->corp_repu_size();
  for (int i = 0; i < this->corp_repu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->corp_repu(i));
  }

  // repeated .PB.simple_list boss_feed_toplist = 4;
  total_size += 1 * this->boss_feed_toplist_size();
  for (int i = 0; i < this->boss_feed_toplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boss_feed_toplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void corp_attribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const corp_attribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const corp_attribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void corp_attribute::MergeFrom(const corp_attribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_room_.MergeFrom(from.skill_room_);
  corp_repu_.MergeFrom(from.corp_repu_);
  boss_feed_toplist_.MergeFrom(from.boss_feed_toplist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_shop_level()) {
      set_shop_level(from.shop_level());
    }
    if (from.has_chariot()) {
      mutable_chariot()->::PB::corp_chariot::MergeFrom(from.chariot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void corp_attribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void corp_attribute::CopyFrom(const corp_attribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool corp_attribute::IsInitialized() const {

  for (int i = 0; i < corp_repu_size(); i++) {
    if (!this->corp_repu(i).IsInitialized()) return false;
  }
  for (int i = 0; i < boss_feed_toplist_size(); i++) {
    if (!this->boss_feed_toplist(i).IsInitialized()) return false;
  }
  return true;
}

void corp_attribute::Swap(corp_attribute* other) {
  if (other != this) {
    skill_room_.Swap(&other->skill_room_);
    std::swap(shop_level_, other->shop_level_);
    corp_repu_.Swap(&other->corp_repu_);
    boss_feed_toplist_.Swap(&other->boss_feed_toplist_);
    std::swap(chariot_, other->chariot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata corp_attribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = corp_attribute_descriptor_;
  metadata.reflection = corp_attribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int corps_struct::kTypeFieldNumber;
const int corps_struct::kIdFieldNumber;
const int corps_struct::kNameFieldNumber;
const int corps_struct::kCreateTimeFieldNumber;
const int corps_struct::kLevelFieldNumber;
const int corps_struct::kStatusFieldNumber;
const int corps_struct::kAnnounceFieldNumber;
const int corps_struct::kAnnounceTimeFieldNumber;
const int corps_struct::kContriFieldNumber;
const int corps_struct::kContriCumulateFieldNumber;
const int corps_struct::kMoneyFieldNumber;
const int corps_struct::kApplyFieldNumber;
const int corps_struct::kNationFieldNumber;
const int corps_struct::kLastResumeTimeFieldNumber;
const int corps_struct::kAttrFieldNumber;
const int corps_struct::kCorpPowerFieldNumber;
const int corps_struct::kQqgroupOpenidFieldNumber;
const int corps_struct::kQqgroupNameFieldNumber;
const int corps_struct::kQqgroupJoinkeyFieldNumber;
const int corps_struct::kLoginTimeFieldNumber;
#endif  // !_MSC_VER

corps_struct::corps_struct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void corps_struct::InitAsDefaultInstance() {
  attr_ = const_cast< ::PB::corp_attribute*>(&::PB::corp_attribute::default_instance());
}

corps_struct::corps_struct(const corps_struct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void corps_struct::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_ = 0;
  level_ = 0;
  status_ = GOOGLE_ULONGLONG(0);
  announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  announce_time_ = GOOGLE_LONGLONG(0);
  contri_ = GOOGLE_LONGLONG(0);
  contri_cumulate_ = GOOGLE_LONGLONG(0);
  money_ = GOOGLE_LONGLONG(0);
  nation_ = 0;
  last_resume_time_ = GOOGLE_LONGLONG(0);
  attr_ = NULL;
  corp_power_ = 0;
  qqgroup_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qqgroup_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qqgroup_joinkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

corps_struct::~corps_struct() {
  SharedDtor();
}

void corps_struct::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (announce_ != &::google::protobuf::internal::kEmptyString) {
    delete announce_;
  }
  if (qqgroup_openid_ != &::google::protobuf::internal::kEmptyString) {
    delete qqgroup_openid_;
  }
  if (qqgroup_name_ != &::google::protobuf::internal::kEmptyString) {
    delete qqgroup_name_;
  }
  if (qqgroup_joinkey_ != &::google::protobuf::internal::kEmptyString) {
    delete qqgroup_joinkey_;
  }
  if (this != default_instance_) {
    delete attr_;
  }
}

void corps_struct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* corps_struct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return corps_struct_descriptor_;
}

const corps_struct& corps_struct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

corps_struct* corps_struct::default_instance_ = NULL;

corps_struct* corps_struct::New() const {
  return new corps_struct;
}

void corps_struct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 2;
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    create_time_ = 0;
    level_ = 0;
    status_ = GOOGLE_ULONGLONG(0);
    if (has_announce()) {
      if (announce_ != &::google::protobuf::internal::kEmptyString) {
        announce_->clear();
      }
    }
    announce_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    contri_ = GOOGLE_LONGLONG(0);
    contri_cumulate_ = GOOGLE_LONGLONG(0);
    money_ = GOOGLE_LONGLONG(0);
    nation_ = 0;
    last_resume_time_ = GOOGLE_LONGLONG(0);
    if (has_attr()) {
      if (attr_ != NULL) attr_->::PB::corp_attribute::Clear();
    }
    corp_power_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_qqgroup_openid()) {
      if (qqgroup_openid_ != &::google::protobuf::internal::kEmptyString) {
        qqgroup_openid_->clear();
      }
    }
    if (has_qqgroup_name()) {
      if (qqgroup_name_ != &::google::protobuf::internal::kEmptyString) {
        qqgroup_name_->clear();
      }
    }
    if (has_qqgroup_joinkey()) {
      if (qqgroup_joinkey_ != &::google::protobuf::internal::kEmptyString) {
        qqgroup_joinkey_->clear();
      }
    }
    login_time_ = 0;
  }
  apply_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool corps_struct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_STRUCT];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::GPS_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::GPS_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // required int32 create_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // required uint64 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_announce;
        break;
      }

      // optional bytes announce = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_announce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_announce()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_announce_time;
        break;
      }

      // optional int64 announce_time = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_announce_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &announce_time_)));
          set_has_announce_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_contri;
        break;
      }

      // optional int64 contri = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contri_)));
          set_has_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_contri_cumulate;
        break;
      }

      // optional int64 contri_cumulate = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contri_cumulate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contri_cumulate_)));
          set_has_contri_cumulate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_money;
        break;
      }

      // optional int64 money = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_apply;
        break;
      }

      // repeated .PB.corps_apply_t apply = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_apply;
        if (input->ExpectTag(112)) goto parse_nation;
        break;
      }

      // required int32 nation = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_)));
          set_has_nation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_last_resume_time;
        break;
      }

      // optional int64 last_resume_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_resume_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_resume_time_)));
          set_has_last_resume_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_attr;
        break;
      }

      // optional .PB.corp_attribute attr = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_corp_power;
        break;
      }

      // optional float corp_power = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_corp_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &corp_power_)));
          set_has_corp_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_qqgroup_openid;
        break;
      }

      // optional bytes qqgroup_openid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qqgroup_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qqgroup_openid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_qqgroup_name;
        break;
      }

      // optional bytes qqgroup_name = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qqgroup_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qqgroup_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_qqgroup_joinkey;
        break;
      }

      // optional bytes qqgroup_joinkey = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qqgroup_joinkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qqgroup_joinkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_login_time;
        break;
      }

      // optional int32 login_time = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void corps_struct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_STRUCT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  // required int32 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->create_time(), output);
  }

  // required int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // required uint64 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->status(), output);
  }

  // optional bytes announce = 8;
  if (has_announce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->announce(), output);
  }

  // optional int64 announce_time = 9 [default = 0];
  if (has_announce_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->announce_time(), output);
  }

  // optional int64 contri = 10 [default = 0];
  if (has_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->contri(), output);
  }

  // optional int64 contri_cumulate = 11 [default = 0];
  if (has_contri_cumulate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->contri_cumulate(), output);
  }

  // optional int64 money = 12 [default = 0];
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->money(), output);
  }

  // repeated .PB.corps_apply_t apply = 13;
  for (int i = 0; i < this->apply_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->apply(i), output);
  }

  // required int32 nation = 14;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->nation(), output);
  }

  // optional int64 last_resume_time = 15;
  if (has_last_resume_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->last_resume_time(), output);
  }

  // optional .PB.corp_attribute attr = 16;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->attr(), output);
  }

  // optional float corp_power = 17;
  if (has_corp_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->corp_power(), output);
  }

  // optional bytes qqgroup_openid = 18;
  if (has_qqgroup_openid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->qqgroup_openid(), output);
  }

  // optional bytes qqgroup_name = 19;
  if (has_qqgroup_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      19, this->qqgroup_name(), output);
  }

  // optional bytes qqgroup_joinkey = 20;
  if (has_qqgroup_joinkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->qqgroup_joinkey(), output);
  }

  // optional int32 login_time = 21;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->login_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* corps_struct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_STRUCT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // required int32 create_time = 5;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->create_time(), target);
  }

  // required int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // required uint64 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->status(), target);
  }

  // optional bytes announce = 8;
  if (has_announce()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->announce(), target);
  }

  // optional int64 announce_time = 9 [default = 0];
  if (has_announce_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->announce_time(), target);
  }

  // optional int64 contri = 10 [default = 0];
  if (has_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->contri(), target);
  }

  // optional int64 contri_cumulate = 11 [default = 0];
  if (has_contri_cumulate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->contri_cumulate(), target);
  }

  // optional int64 money = 12 [default = 0];
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->money(), target);
  }

  // repeated .PB.corps_apply_t apply = 13;
  for (int i = 0; i < this->apply_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->apply(i), target);
  }

  // required int32 nation = 14;
  if (has_nation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->nation(), target);
  }

  // optional int64 last_resume_time = 15;
  if (has_last_resume_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->last_resume_time(), target);
  }

  // optional .PB.corp_attribute attr = 16;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->attr(), target);
  }

  // optional float corp_power = 17;
  if (has_corp_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->corp_power(), target);
  }

  // optional bytes qqgroup_openid = 18;
  if (has_qqgroup_openid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->qqgroup_openid(), target);
  }

  // optional bytes qqgroup_name = 19;
  if (has_qqgroup_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->qqgroup_name(), target);
  }

  // optional bytes qqgroup_joinkey = 20;
  if (has_qqgroup_joinkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->qqgroup_joinkey(), target);
  }

  // optional int32 login_time = 21;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->login_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int corps_struct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.GPS_TYPE type = 1 [default = GUT_CORPS_STRUCT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int32 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // required int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required uint64 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->status());
    }

    // optional bytes announce = 8;
    if (has_announce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->announce());
    }

    // optional int64 announce_time = 9 [default = 0];
    if (has_announce_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->announce_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 contri = 10 [default = 0];
    if (has_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contri());
    }

    // optional int64 contri_cumulate = 11 [default = 0];
    if (has_contri_cumulate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contri_cumulate());
    }

    // optional int64 money = 12 [default = 0];
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // required int32 nation = 14;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation());
    }

    // optional int64 last_resume_time = 15;
    if (has_last_resume_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_resume_time());
    }

    // optional .PB.corp_attribute attr = 16;
    if (has_attr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

    // optional float corp_power = 17;
    if (has_corp_power()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes qqgroup_openid = 18;
    if (has_qqgroup_openid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qqgroup_openid());
    }

    // optional bytes qqgroup_name = 19;
    if (has_qqgroup_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qqgroup_name());
    }

    // optional bytes qqgroup_joinkey = 20;
    if (has_qqgroup_joinkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qqgroup_joinkey());
    }

    // optional int32 login_time = 21;
    if (has_login_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_time());
    }

  }
  // repeated .PB.corps_apply_t apply = 13;
  total_size += 1 * this->apply_size();
  for (int i = 0; i < this->apply_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void corps_struct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const corps_struct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const corps_struct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void corps_struct::MergeFrom(const corps_struct& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_.MergeFrom(from.apply_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_announce()) {
      set_announce(from.announce());
    }
    if (from.has_announce_time()) {
      set_announce_time(from.announce_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_contri()) {
      set_contri(from.contri());
    }
    if (from.has_contri_cumulate()) {
      set_contri_cumulate(from.contri_cumulate());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_last_resume_time()) {
      set_last_resume_time(from.last_resume_time());
    }
    if (from.has_attr()) {
      mutable_attr()->::PB::corp_attribute::MergeFrom(from.attr());
    }
    if (from.has_corp_power()) {
      set_corp_power(from.corp_power());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_qqgroup_openid()) {
      set_qqgroup_openid(from.qqgroup_openid());
    }
    if (from.has_qqgroup_name()) {
      set_qqgroup_name(from.qqgroup_name());
    }
    if (from.has_qqgroup_joinkey()) {
      set_qqgroup_joinkey(from.qqgroup_joinkey());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void corps_struct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void corps_struct::CopyFrom(const corps_struct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool corps_struct::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000103a) != 0x0000103a) return false;

  for (int i = 0; i < apply_size(); i++) {
    if (!this->apply(i).IsInitialized()) return false;
  }
  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  return true;
}

void corps_struct::Swap(corps_struct* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(create_time_, other->create_time_);
    std::swap(level_, other->level_);
    std::swap(status_, other->status_);
    std::swap(announce_, other->announce_);
    std::swap(announce_time_, other->announce_time_);
    std::swap(contri_, other->contri_);
    std::swap(contri_cumulate_, other->contri_cumulate_);
    std::swap(money_, other->money_);
    apply_.Swap(&other->apply_);
    std::swap(nation_, other->nation_);
    std::swap(last_resume_time_, other->last_resume_time_);
    std::swap(attr_, other->attr_);
    std::swap(corp_power_, other->corp_power_);
    std::swap(qqgroup_openid_, other->qqgroup_openid_);
    std::swap(qqgroup_name_, other->qqgroup_name_);
    std::swap(qqgroup_joinkey_, other->qqgroup_joinkey_);
    std::swap(login_time_, other->login_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata corps_struct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = corps_struct_descriptor_;
  metadata.reflection = corps_struct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facebook_str::kIdFieldNumber;
const int facebook_str::kPosFieldNumber;
const int facebook_str::kParamFieldNumber;
const int facebook_str::kNameFieldNumber;
const int facebook_str::kName2FieldNumber;
const int facebook_str::kLeaveCorpsTimeFieldNumber;
const int facebook_str::kLevelFieldNumber;
#endif  // !_MSC_VER

facebook_str::facebook_str()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facebook_str::InitAsDefaultInstance() {
}

facebook_str::facebook_str(const facebook_str& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facebook_str::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  pos_ = 0;
  param_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leave_corps_time_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facebook_str::~facebook_str() {
  SharedDtor();
}

void facebook_str::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (this != default_instance_) {
  }
}

void facebook_str::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facebook_str::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facebook_str_descriptor_;
}

const facebook_str& facebook_str::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

facebook_str* facebook_str::default_instance_ = NULL;

facebook_str* facebook_str::New() const {
  return new facebook_str;
}

void facebook_str::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    pos_ = 0;
    param_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_name2()) {
      if (name2_ != &::google::protobuf::internal::kEmptyString) {
        name2_->clear();
      }
    }
    leave_corps_time_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facebook_str::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }

      // optional int64 param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name2;
        break;
      }

      // optional bytes name2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_leave_corps_time;
        break;
      }

      // optional int32 leave_corps_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_corps_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leave_corps_time_)));
          set_has_leave_corps_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facebook_str::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // optional int64 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->param(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  // optional bytes name2 = 5;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->name2(), output);
  }

  // optional int32 leave_corps_time = 6;
  if (has_leave_corps_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->leave_corps_time(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facebook_str::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // optional int64 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->param(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // optional bytes name2 = 5;
  if (has_name2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name2(), target);
  }

  // optional int32 leave_corps_time = 6;
  if (has_leave_corps_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->leave_corps_time(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facebook_str::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int64 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes name2 = 5;
    if (has_name2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name2());
    }

    // optional int32 leave_corps_time = 6;
    if (has_leave_corps_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leave_corps_time());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facebook_str::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facebook_str* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facebook_str*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facebook_str::MergeFrom(const facebook_str& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_name2()) {
      set_name2(from.name2());
    }
    if (from.has_leave_corps_time()) {
      set_leave_corps_time(from.leave_corps_time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facebook_str::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facebook_str::CopyFrom(const facebook_str& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facebook_str::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void facebook_str::Swap(facebook_str* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(param_, other->param_);
    std::swap(name_, other->name_);
    std::swap(name2_, other->name2_);
    std::swap(leave_corps_time_, other->leave_corps_time_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facebook_str::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facebook_str_descriptor_;
  metadata.reflection = facebook_str_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int face_book::kTypeFieldNumber;
const int face_book::kCorpsFieldNumber;
#endif  // !_MSC_VER

face_book::face_book()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void face_book::InitAsDefaultInstance() {
  corps_ = const_cast< ::PB::facebook_str*>(&::PB::facebook_str::default_instance());
}

face_book::face_book(const face_book& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void face_book::SharedCtor() {
  _cached_size_ = 0;
  type_ = 4;
  corps_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

face_book::~face_book() {
  SharedDtor();
}

void face_book::SharedDtor() {
  if (this != default_instance_) {
    delete corps_;
  }
}

void face_book::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* face_book::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return face_book_descriptor_;
}

const face_book& face_book::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

face_book* face_book::default_instance_ = NULL;

face_book* face_book::New() const {
  return new face_book;
}

void face_book::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 4;
    if (has_corps()) {
      if (corps_ != NULL) corps_->::PB::facebook_str::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool face_book::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.GPS_TYPE type = 1 [default = GUT_FACEBOOK];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::GPS_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::GPS_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_corps;
        break;
      }

      // optional .PB.facebook_str corps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_corps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void face_book::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_FACEBOOK];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PB.facebook_str corps = 2;
  if (has_corps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->corps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* face_book::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_FACEBOOK];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PB.facebook_str corps = 2;
  if (has_corps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->corps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int face_book::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.GPS_TYPE type = 1 [default = GUT_FACEBOOK];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PB.facebook_str corps = 2;
    if (has_corps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->corps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void face_book::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const face_book* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const face_book*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void face_book::MergeFrom(const face_book& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_corps()) {
      mutable_corps()->::PB::facebook_str::MergeFrom(from.corps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void face_book::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void face_book::CopyFrom(const face_book& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool face_book::IsInitialized() const {

  if (has_corps()) {
    if (!this->corps().IsInitialized()) return false;
  }
  return true;
}

void face_book::Swap(face_book* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(corps_, other->corps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata face_book::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = face_book_descriptor_;
  metadata.reflection = face_book_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int idip_role_info::kMoneyFieldNumber;
const int idip_role_info::kVipExpFieldNumber;
const int idip_role_info::kVipLevelFieldNumber;
const int idip_role_info::kRoleExpFieldNumber;
const int idip_role_info::kRideExpFieldNumber;
const int idip_role_info::kRideLevelFieldNumber;
const int idip_role_info::kPkValueFieldNumber;
const int idip_role_info::kOnlineTimeFieldNumber;
const int idip_role_info::kFriendsCountFieldNumber;
#endif  // !_MSC_VER

idip_role_info::idip_role_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void idip_role_info::InitAsDefaultInstance() {
}

idip_role_info::idip_role_info(const idip_role_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void idip_role_info::SharedCtor() {
  _cached_size_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  vip_exp_ = GOOGLE_LONGLONG(0);
  vip_level_ = 0;
  role_exp_ = GOOGLE_LONGLONG(0);
  ride_exp_ = GOOGLE_LONGLONG(0);
  ride_level_ = 0;
  pk_value_ = 0;
  online_time_ = 0;
  friends_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

idip_role_info::~idip_role_info() {
  SharedDtor();
}

void idip_role_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void idip_role_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* idip_role_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return idip_role_info_descriptor_;
}

const idip_role_info& idip_role_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

idip_role_info* idip_role_info::default_instance_ = NULL;

idip_role_info* idip_role_info::New() const {
  return new idip_role_info;
}

void idip_role_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = GOOGLE_LONGLONG(0);
    vip_exp_ = GOOGLE_LONGLONG(0);
    vip_level_ = 0;
    role_exp_ = GOOGLE_LONGLONG(0);
    ride_exp_ = GOOGLE_LONGLONG(0);
    ride_level_ = 0;
    pk_value_ = 0;
    online_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    friends_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool idip_role_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip_exp;
        break;
      }

      // optional int64 vip_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_exp;
        break;
      }

      // optional int64 role_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_exp_)));
          set_has_role_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ride_exp;
        break;
      }

      // optional int64 ride_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ride_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ride_exp_)));
          set_has_ride_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ride_level;
        break;
      }

      // optional int32 ride_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ride_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ride_level_)));
          set_has_ride_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pk_value;
        break;
      }

      // optional int32 pk_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pk_value_)));
          set_has_pk_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_online_time;
        break;
      }

      // optional int32 online_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_time_)));
          set_has_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_friends_count;
        break;
      }

      // optional int32 friends_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friends_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friends_count_)));
          set_has_friends_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void idip_role_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->money(), output);
  }

  // optional int64 vip_exp = 2;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->vip_exp(), output);
  }

  // optional int32 vip_level = 3;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vip_level(), output);
  }

  // optional int64 role_exp = 4;
  if (has_role_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->role_exp(), output);
  }

  // optional int64 ride_exp = 5;
  if (has_ride_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ride_exp(), output);
  }

  // optional int32 ride_level = 6;
  if (has_ride_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ride_level(), output);
  }

  // optional int32 pk_value = 7;
  if (has_pk_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pk_value(), output);
  }

  // optional int32 online_time = 8;
  if (has_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->online_time(), output);
  }

  // optional int32 friends_count = 9;
  if (has_friends_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->friends_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* idip_role_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->money(), target);
  }

  // optional int64 vip_exp = 2;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->vip_exp(), target);
  }

  // optional int32 vip_level = 3;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vip_level(), target);
  }

  // optional int64 role_exp = 4;
  if (has_role_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->role_exp(), target);
  }

  // optional int64 ride_exp = 5;
  if (has_ride_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ride_exp(), target);
  }

  // optional int32 ride_level = 6;
  if (has_ride_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ride_level(), target);
  }

  // optional int32 pk_value = 7;
  if (has_pk_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pk_value(), target);
  }

  // optional int32 online_time = 8;
  if (has_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->online_time(), target);
  }

  // optional int32 friends_count = 9;
  if (has_friends_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->friends_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int idip_role_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int64 vip_exp = 2;
    if (has_vip_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vip_exp());
    }

    // optional int32 vip_level = 3;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional int64 role_exp = 4;
    if (has_role_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_exp());
    }

    // optional int64 ride_exp = 5;
    if (has_ride_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ride_exp());
    }

    // optional int32 ride_level = 6;
    if (has_ride_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ride_level());
    }

    // optional int32 pk_value = 7;
    if (has_pk_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pk_value());
    }

    // optional int32 online_time = 8;
    if (has_online_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 friends_count = 9;
    if (has_friends_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friends_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void idip_role_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const idip_role_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const idip_role_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void idip_role_info::MergeFrom(const idip_role_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_role_exp()) {
      set_role_exp(from.role_exp());
    }
    if (from.has_ride_exp()) {
      set_ride_exp(from.ride_exp());
    }
    if (from.has_ride_level()) {
      set_ride_level(from.ride_level());
    }
    if (from.has_pk_value()) {
      set_pk_value(from.pk_value());
    }
    if (from.has_online_time()) {
      set_online_time(from.online_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_friends_count()) {
      set_friends_count(from.friends_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void idip_role_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void idip_role_info::CopyFrom(const idip_role_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool idip_role_info::IsInitialized() const {

  return true;
}

void idip_role_info::Swap(idip_role_info* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(role_exp_, other->role_exp_);
    std::swap(ride_exp_, other->ride_exp_);
    std::swap(ride_level_, other->ride_level_);
    std::swap(pk_value_, other->pk_value_);
    std::swap(online_time_, other->online_time_);
    std::swap(friends_count_, other->friends_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata idip_role_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = idip_role_info_descriptor_;
  metadata.reflection = idip_role_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_list_custom::kFashionFieldNumber;
const int role_list_custom::kMagicWeaponTidFieldNumber;
#endif  // !_MSC_VER

role_list_custom::role_list_custom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_list_custom::InitAsDefaultInstance() {
}

role_list_custom::role_list_custom(const role_list_custom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_list_custom::SharedCtor() {
  _cached_size_ = 0;
  fashion_ = false;
  magic_weapon_tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_list_custom::~role_list_custom() {
  SharedDtor();
}

void role_list_custom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_list_custom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_list_custom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_list_custom_descriptor_;
}

const role_list_custom& role_list_custom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

role_list_custom* role_list_custom::default_instance_ = NULL;

role_list_custom* role_list_custom::New() const {
  return new role_list_custom;
}

void role_list_custom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fashion_ = false;
    magic_weapon_tid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_list_custom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool fashion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fashion_)));
          set_has_fashion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_magic_weapon_tid;
        break;
      }

      // optional uint32 magic_weapon_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_weapon_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_weapon_tid_)));
          set_has_magic_weapon_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_list_custom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool fashion = 1;
  if (has_fashion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->fashion(), output);
  }

  // optional uint32 magic_weapon_tid = 2;
  if (has_magic_weapon_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->magic_weapon_tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_list_custom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool fashion = 1;
  if (has_fashion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->fashion(), target);
  }

  // optional uint32 magic_weapon_tid = 2;
  if (has_magic_weapon_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->magic_weapon_tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_list_custom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool fashion = 1;
    if (has_fashion()) {
      total_size += 1 + 1;
    }

    // optional uint32 magic_weapon_tid = 2;
    if (has_magic_weapon_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_weapon_tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_list_custom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_list_custom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_list_custom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_list_custom::MergeFrom(const role_list_custom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fashion()) {
      set_fashion(from.fashion());
    }
    if (from.has_magic_weapon_tid()) {
      set_magic_weapon_tid(from.magic_weapon_tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_list_custom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_list_custom::CopyFrom(const role_list_custom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_list_custom::IsInitialized() const {

  return true;
}

void role_list_custom::Swap(role_list_custom* other) {
  if (other != this) {
    std::swap(fashion_, other->fashion_);
    std::swap(magic_weapon_tid_, other->magic_weapon_tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_list_custom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_list_custom_descriptor_;
  metadata.reflection = role_list_custom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_role_mutable_data::kTypeFieldNumber;
const int gs_role_mutable_data::kVipLevelFieldNumber;
const int gs_role_mutable_data::kFightcapacityFieldNumber;
const int gs_role_mutable_data::kShowPropertyFieldNumber;
const int gs_role_mutable_data::kProFieldNumber;
const int gs_role_mutable_data::kIdipInfoFieldNumber;
const int gs_role_mutable_data::kCustomFieldNumber;
#endif  // !_MSC_VER

gs_role_mutable_data::gs_role_mutable_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_role_mutable_data::InitAsDefaultInstance() {
  pro_ = const_cast< ::PB::other_player_profile_from_gs*>(&::PB::other_player_profile_from_gs::default_instance());
  idip_info_ = const_cast< ::PB::idip_role_info*>(&::PB::idip_role_info::default_instance());
  custom_ = const_cast< ::PB::role_list_custom*>(&::PB::role_list_custom::default_instance());
}

gs_role_mutable_data::gs_role_mutable_data(const gs_role_mutable_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_role_mutable_data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 9;
  vip_level_ = 0u;
  fightcapacity_ = 0u;
  show_property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pro_ = NULL;
  idip_info_ = NULL;
  custom_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_role_mutable_data::~gs_role_mutable_data() {
  SharedDtor();
}

void gs_role_mutable_data::SharedDtor() {
  if (show_property_ != &::google::protobuf::internal::kEmptyString) {
    delete show_property_;
  }
  if (this != default_instance_) {
    delete pro_;
    delete idip_info_;
    delete custom_;
  }
}

void gs_role_mutable_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_role_mutable_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_role_mutable_data_descriptor_;
}

const gs_role_mutable_data& gs_role_mutable_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

gs_role_mutable_data* gs_role_mutable_data::default_instance_ = NULL;

gs_role_mutable_data* gs_role_mutable_data::New() const {
  return new gs_role_mutable_data;
}

void gs_role_mutable_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 9;
    vip_level_ = 0u;
    fightcapacity_ = 0u;
    if (has_show_property()) {
      if (show_property_ != &::google::protobuf::internal::kEmptyString) {
        show_property_->clear();
      }
    }
    if (has_pro()) {
      if (pro_ != NULL) pro_->::PB::other_player_profile_from_gs::Clear();
    }
    if (has_idip_info()) {
      if (idip_info_ != NULL) idip_info_->::PB::idip_role_info::Clear();
    }
    if (has_custom()) {
      if (custom_ != NULL) custom_->::PB::role_list_custom::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_role_mutable_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.GPS_TYPE type = 1 [default = GUT_ROLE_PBINFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::GPS_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::GPS_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fightcapacity;
        break;
      }

      // optional uint32 fightcapacity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightcapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightcapacity_)));
          set_has_fightcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_show_property;
        break;
      }

      // optional bytes show_property = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_show_property()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pro;
        break;
      }

      // optional .PB.other_player_profile_from_gs pro = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_idip_info;
        break;
      }

      // optional .PB.idip_role_info idip_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idip_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_idip_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_custom;
        break;
      }

      // optional .PB.role_list_custom custom = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_role_mutable_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_ROLE_PBINFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 vip_level = 2;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vip_level(), output);
  }

  // optional uint32 fightcapacity = 3;
  if (has_fightcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fightcapacity(), output);
  }

  // optional bytes show_property = 4;
  if (has_show_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->show_property(), output);
  }

  // optional .PB.other_player_profile_from_gs pro = 8;
  if (has_pro()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pro(), output);
  }

  // optional .PB.idip_role_info idip_info = 9;
  if (has_idip_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->idip_info(), output);
  }

  // optional .PB.role_list_custom custom = 10;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->custom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_role_mutable_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_ROLE_PBINFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 vip_level = 2;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vip_level(), target);
  }

  // optional uint32 fightcapacity = 3;
  if (has_fightcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fightcapacity(), target);
  }

  // optional bytes show_property = 4;
  if (has_show_property()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->show_property(), target);
  }

  // optional .PB.other_player_profile_from_gs pro = 8;
  if (has_pro()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pro(), target);
  }

  // optional .PB.idip_role_info idip_info = 9;
  if (has_idip_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->idip_info(), target);
  }

  // optional .PB.role_list_custom custom = 10;
  if (has_custom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->custom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_role_mutable_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.GPS_TYPE type = 1 [default = GUT_ROLE_PBINFO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 vip_level = 2;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint32 fightcapacity = 3;
    if (has_fightcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightcapacity());
    }

    // optional bytes show_property = 4;
    if (has_show_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->show_property());
    }

    // optional .PB.other_player_profile_from_gs pro = 8;
    if (has_pro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pro());
    }

    // optional .PB.idip_role_info idip_info = 9;
    if (has_idip_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->idip_info());
    }

    // optional .PB.role_list_custom custom = 10;
    if (has_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->custom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_role_mutable_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_role_mutable_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_role_mutable_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_role_mutable_data::MergeFrom(const gs_role_mutable_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_fightcapacity()) {
      set_fightcapacity(from.fightcapacity());
    }
    if (from.has_show_property()) {
      set_show_property(from.show_property());
    }
    if (from.has_pro()) {
      mutable_pro()->::PB::other_player_profile_from_gs::MergeFrom(from.pro());
    }
    if (from.has_idip_info()) {
      mutable_idip_info()->::PB::idip_role_info::MergeFrom(from.idip_info());
    }
    if (from.has_custom()) {
      mutable_custom()->::PB::role_list_custom::MergeFrom(from.custom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_role_mutable_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_role_mutable_data::CopyFrom(const gs_role_mutable_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_role_mutable_data::IsInitialized() const {

  return true;
}

void gs_role_mutable_data::Swap(gs_role_mutable_data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(fightcapacity_, other->fightcapacity_);
    std::swap(show_property_, other->show_property_);
    std::swap(pro_, other->pro_);
    std::swap(idip_info_, other->idip_info_);
    std::swap(custom_, other->custom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_role_mutable_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_role_mutable_data_descriptor_;
  metadata.reflection = gs_role_mutable_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nation_war_history::kFinishTimeFieldNumber;
const int nation_war_history::kNationAttackFieldNumber;
const int nation_war_history::kNationDefendFieldNumber;
const int nation_war_history::kResultFieldNumber;
#endif  // !_MSC_VER

nation_war_history::nation_war_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void nation_war_history::InitAsDefaultInstance() {
}

nation_war_history::nation_war_history(const nation_war_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nation_war_history::SharedCtor() {
  _cached_size_ = 0;
  finish_time_ = 0;
  nation_attack_ = 0;
  nation_defend_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nation_war_history::~nation_war_history() {
  SharedDtor();
}

void nation_war_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nation_war_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nation_war_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nation_war_history_descriptor_;
}

const nation_war_history& nation_war_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

nation_war_history* nation_war_history::default_instance_ = NULL;

nation_war_history* nation_war_history::New() const {
  return new nation_war_history;
}

void nation_war_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    finish_time_ = 0;
    nation_attack_ = 0;
    nation_defend_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nation_war_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 finish_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_time_)));
          set_has_finish_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nation_attack;
        break;
      }

      // required int32 nation_attack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nation_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_attack_)));
          set_has_nation_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nation_defend;
        break;
      }

      // required int32 nation_defend = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nation_defend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_defend_)));
          set_has_nation_defend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // required int32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nation_war_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 finish_time = 1;
  if (has_finish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->finish_time(), output);
  }

  // required int32 nation_attack = 2;
  if (has_nation_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nation_attack(), output);
  }

  // required int32 nation_defend = 3;
  if (has_nation_defend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nation_defend(), output);
  }

  // required int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* nation_war_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 finish_time = 1;
  if (has_finish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->finish_time(), target);
  }

  // required int32 nation_attack = 2;
  if (has_nation_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nation_attack(), target);
  }

  // required int32 nation_defend = 3;
  if (has_nation_defend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nation_defend(), target);
  }

  // required int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nation_war_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 finish_time = 1;
    if (has_finish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish_time());
    }

    // required int32 nation_attack = 2;
    if (has_nation_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation_attack());
    }

    // required int32 nation_defend = 3;
    if (has_nation_defend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation_defend());
    }

    // required int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nation_war_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nation_war_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const nation_war_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nation_war_history::MergeFrom(const nation_war_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_finish_time()) {
      set_finish_time(from.finish_time());
    }
    if (from.has_nation_attack()) {
      set_nation_attack(from.nation_attack());
    }
    if (from.has_nation_defend()) {
      set_nation_defend(from.nation_defend());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nation_war_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nation_war_history::CopyFrom(const nation_war_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nation_war_history::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void nation_war_history::Swap(nation_war_history* other) {
  if (other != this) {
    std::swap(finish_time_, other->finish_time_);
    std::swap(nation_attack_, other->nation_attack_);
    std::swap(nation_defend_, other->nation_defend_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata nation_war_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nation_war_history_descriptor_;
  metadata.reflection = nation_war_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blessing_info::kPaddingFieldNumber;
const int blessing_info::kSrcFieldNumber;
const int blessing_info::kSrcNameFieldNumber;
const int blessing_info::kDstFieldNumber;
const int blessing_info::kDstNameFieldNumber;
const int blessing_info::kRepuIdFieldNumber;
const int blessing_info::kRepuCountFieldNumber;
const int blessing_info::kItemTidFieldNumber;
const int blessing_info::kItemCountFieldNumber;
const int blessing_info::kTxnidFieldNumber;
const int blessing_info::kResultFieldNumber;
#endif  // !_MSC_VER

blessing_info::blessing_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void blessing_info::InitAsDefaultInstance() {
}

blessing_info::blessing_info(const blessing_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void blessing_info::SharedCtor() {
  _cached_size_ = 0;
  padding_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_ = GOOGLE_ULONGLONG(0);
  src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = GOOGLE_ULONGLONG(0);
  dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  repu_id_ = 0u;
  repu_count_ = 0u;
  item_tid_ = 0u;
  item_count_ = 0u;
  txnid_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blessing_info::~blessing_info() {
  SharedDtor();
}

void blessing_info::SharedDtor() {
  if (padding_ != &::google::protobuf::internal::kEmptyString) {
    delete padding_;
  }
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (this != default_instance_) {
  }
}

void blessing_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blessing_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blessing_info_descriptor_;
}

const blessing_info& blessing_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

blessing_info* blessing_info::default_instance_ = NULL;

blessing_info* blessing_info::New() const {
  return new blessing_info;
}

void blessing_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_padding()) {
      if (padding_ != &::google::protobuf::internal::kEmptyString) {
        padding_->clear();
      }
    }
    src_ = GOOGLE_ULONGLONG(0);
    if (has_src_name()) {
      if (src_name_ != &::google::protobuf::internal::kEmptyString) {
        src_name_->clear();
      }
    }
    dst_ = GOOGLE_ULONGLONG(0);
    if (has_dst_name()) {
      if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
        dst_name_->clear();
      }
    }
    repu_id_ = 0u;
    repu_count_ = 0u;
    item_tid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    item_count_ = 0u;
    txnid_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blessing_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes padding = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_padding()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src;
        break;
      }

      // optional uint64 src = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_src_name;
        break;
      }

      // optional bytes src_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst;
        break;
      }

      // optional uint64 dst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_)));
          set_has_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dst_name;
        break;
      }

      // optional bytes dst_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dst_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repu_id;
        break;
      }

      // optional uint32 repu_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repu_id_)));
          set_has_repu_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_repu_count;
        break;
      }

      // optional uint32 repu_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repu_count_)));
          set_has_repu_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_item_tid;
        break;
      }

      // optional uint32 item_tid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_tid_)));
          set_has_item_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_txnid;
        break;
      }

      // optional uint32 txnid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txnid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txnid_)));
          set_has_txnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_result;
        break;
      }

      // optional int32 result = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void blessing_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes padding = 1;
  if (has_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->padding(), output);
  }

  // optional uint64 src = 2;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->src(), output);
  }

  // optional bytes src_name = 3;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->src_name(), output);
  }

  // optional uint64 dst = 4;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dst(), output);
  }

  // optional bytes dst_name = 5;
  if (has_dst_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->dst_name(), output);
  }

  // optional uint32 repu_id = 6;
  if (has_repu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repu_id(), output);
  }

  // optional uint32 repu_count = 7;
  if (has_repu_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->repu_count(), output);
  }

  // optional uint32 item_tid = 8;
  if (has_item_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->item_tid(), output);
  }

  // optional uint32 item_count = 9;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->item_count(), output);
  }

  // optional uint32 txnid = 10;
  if (has_txnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->txnid(), output);
  }

  // optional int32 result = 11;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* blessing_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes padding = 1;
  if (has_padding()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->padding(), target);
  }

  // optional uint64 src = 2;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->src(), target);
  }

  // optional bytes src_name = 3;
  if (has_src_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->src_name(), target);
  }

  // optional uint64 dst = 4;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dst(), target);
  }

  // optional bytes dst_name = 5;
  if (has_dst_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->dst_name(), target);
  }

  // optional uint32 repu_id = 6;
  if (has_repu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repu_id(), target);
  }

  // optional uint32 repu_count = 7;
  if (has_repu_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->repu_count(), target);
  }

  // optional uint32 item_tid = 8;
  if (has_item_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->item_tid(), target);
  }

  // optional uint32 item_count = 9;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->item_count(), target);
  }

  // optional uint32 txnid = 10;
  if (has_txnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->txnid(), target);
  }

  // optional int32 result = 11;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int blessing_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes padding = 1;
    if (has_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->padding());
    }

    // optional uint64 src = 2;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src());
    }

    // optional bytes src_name = 3;
    if (has_src_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_name());
    }

    // optional uint64 dst = 4;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst());
    }

    // optional bytes dst_name = 5;
    if (has_dst_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dst_name());
    }

    // optional uint32 repu_id = 6;
    if (has_repu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repu_id());
    }

    // optional uint32 repu_count = 7;
    if (has_repu_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repu_count());
    }

    // optional uint32 item_tid = 8;
    if (has_item_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_tid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 item_count = 9;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // optional uint32 txnid = 10;
    if (has_txnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txnid());
    }

    // optional int32 result = 11;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blessing_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blessing_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blessing_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blessing_info::MergeFrom(const blessing_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_padding()) {
      set_padding(from.padding());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_src_name()) {
      set_src_name(from.src_name());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
    if (from.has_dst_name()) {
      set_dst_name(from.dst_name());
    }
    if (from.has_repu_id()) {
      set_repu_id(from.repu_id());
    }
    if (from.has_repu_count()) {
      set_repu_count(from.repu_count());
    }
    if (from.has_item_tid()) {
      set_item_tid(from.item_tid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_txnid()) {
      set_txnid(from.txnid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blessing_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blessing_info::CopyFrom(const blessing_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blessing_info::IsInitialized() const {

  return true;
}

void blessing_info::Swap(blessing_info* other) {
  if (other != this) {
    std::swap(padding_, other->padding_);
    std::swap(src_, other->src_);
    std::swap(src_name_, other->src_name_);
    std::swap(dst_, other->dst_);
    std::swap(dst_name_, other->dst_name_);
    std::swap(repu_id_, other->repu_id_);
    std::swap(repu_count_, other->repu_count_);
    std::swap(item_tid_, other->item_tid_);
    std::swap(item_count_, other->item_count_);
    std::swap(txnid_, other->txnid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blessing_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blessing_info_descriptor_;
  metadata.reflection = blessing_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int card_info::kCardIdFieldNumber;
const int card_info::kCardCountFieldNumber;
#endif  // !_MSC_VER

card_info::card_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void card_info::InitAsDefaultInstance() {
}

card_info::card_info(const card_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void card_info::SharedCtor() {
  _cached_size_ = 0;
  card_id_ = 0;
  card_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

card_info::~card_info() {
  SharedDtor();
}

void card_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void card_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* card_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return card_info_descriptor_;
}

const card_info& card_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

card_info* card_info::default_instance_ = NULL;

card_info* card_info::New() const {
  return new card_info;
}

void card_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_id_ = 0;
    card_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool card_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 card_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_id_)));
          set_has_card_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_count;
        break;
      }

      // required int32 card_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_count_)));
          set_has_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void card_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 card_id = 1;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card_id(), output);
  }

  // required int32 card_count = 2;
  if (has_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* card_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 card_id = 1;
  if (has_card_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card_id(), target);
  }

  // required int32 card_count = 2;
  if (has_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int card_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 card_id = 1;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_id());
    }

    // required int32 card_count = 2;
    if (has_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void card_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const card_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const card_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void card_info::MergeFrom(const card_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
    if (from.has_card_count()) {
      set_card_count(from.card_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void card_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void card_info::CopyFrom(const card_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool card_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void card_info::Swap(card_info* other) {
  if (other != this) {
    std::swap(card_id_, other->card_id_);
    std::swap(card_count_, other->card_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata card_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = card_info_descriptor_;
  metadata.reflection = card_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* greeting_info_GREETING_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return greeting_info_GREETING_TYPE_descriptor_;
}
bool greeting_info_GREETING_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const greeting_info_GREETING_TYPE greeting_info::GREETING_INVITE;
const greeting_info_GREETING_TYPE greeting_info::GREETING_GRANT;
const greeting_info_GREETING_TYPE greeting_info::GREETING_THANKS;
const greeting_info_GREETING_TYPE greeting_info::GREETING_TYPE_MIN;
const greeting_info_GREETING_TYPE greeting_info::GREETING_TYPE_MAX;
const int greeting_info::GREETING_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int greeting_info::kTypeFieldNumber;
const int greeting_info::kInfoSeqFieldNumber;
const int greeting_info::kRoleidFieldNumber;
const int greeting_info::kNameFieldNumber;
const int greeting_info::kParam1FieldNumber;
const int greeting_info::kParam2FieldNumber;
const int greeting_info::kParam3FieldNumber;
const int greeting_info::kGreetTidFieldNumber;
#endif  // !_MSC_VER

greeting_info::greeting_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void greeting_info::InitAsDefaultInstance() {
}

greeting_info::greeting_info(const greeting_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void greeting_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  info_seq_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param_1_ = 0;
  param_2_ = 0;
  param_3_ = 0;
  greet_tid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

greeting_info::~greeting_info() {
  SharedDtor();
}

void greeting_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void greeting_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* greeting_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return greeting_info_descriptor_;
}

const greeting_info& greeting_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

greeting_info* greeting_info::default_instance_ = NULL;

greeting_info* greeting_info::New() const {
  return new greeting_info;
}

void greeting_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    info_seq_ = 0;
    roleid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    param_1_ = 0;
    param_2_ = 0;
    param_3_ = 0;
    greet_tid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool greeting_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.greeting_info.GREETING_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::greeting_info_GREETING_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::greeting_info_GREETING_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_seq;
        break;
      }

      // optional int32 info_seq = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &info_seq_)));
          set_has_info_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleid;
        break;
      }

      // optional int64 roleid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param_1;
        break;
      }

      // optional int32 param_1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_1_)));
          set_has_param_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_param_2;
        break;
      }

      // optional int32 param_2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_2_)));
          set_has_param_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_param_3;
        break;
      }

      // optional int32 param_3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_3_)));
          set_has_param_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_greet_tid;
        break;
      }

      // optional int32 greet_tid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_greet_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &greet_tid_)));
          set_has_greet_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void greeting_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.greeting_info.GREETING_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 info_seq = 2 [default = 0];
  if (has_info_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->info_seq(), output);
  }

  // optional int64 roleid = 3;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roleid(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  // optional int32 param_1 = 5;
  if (has_param_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->param_1(), output);
  }

  // optional int32 param_2 = 6;
  if (has_param_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->param_2(), output);
  }

  // optional int32 param_3 = 7;
  if (has_param_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->param_3(), output);
  }

  // optional int32 greet_tid = 8;
  if (has_greet_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->greet_tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* greeting_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.greeting_info.GREETING_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 info_seq = 2 [default = 0];
  if (has_info_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->info_seq(), target);
  }

  // optional int64 roleid = 3;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roleid(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // optional int32 param_1 = 5;
  if (has_param_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->param_1(), target);
  }

  // optional int32 param_2 = 6;
  if (has_param_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->param_2(), target);
  }

  // optional int32 param_3 = 7;
  if (has_param_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->param_3(), target);
  }

  // optional int32 greet_tid = 8;
  if (has_greet_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->greet_tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int greeting_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.greeting_info.GREETING_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 info_seq = 2 [default = 0];
    if (has_info_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->info_seq());
    }

    // optional int64 roleid = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 param_1 = 5;
    if (has_param_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_1());
    }

    // optional int32 param_2 = 6;
    if (has_param_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_2());
    }

    // optional int32 param_3 = 7;
    if (has_param_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_3());
    }

    // optional int32 greet_tid = 8;
    if (has_greet_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->greet_tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void greeting_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const greeting_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const greeting_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void greeting_info::MergeFrom(const greeting_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info_seq()) {
      set_info_seq(from.info_seq());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_param_1()) {
      set_param_1(from.param_1());
    }
    if (from.has_param_2()) {
      set_param_2(from.param_2());
    }
    if (from.has_param_3()) {
      set_param_3(from.param_3());
    }
    if (from.has_greet_tid()) {
      set_greet_tid(from.greet_tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void greeting_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void greeting_info::CopyFrom(const greeting_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool greeting_info::IsInitialized() const {

  return true;
}

void greeting_info::Swap(greeting_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_seq_, other->info_seq_);
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(param_1_, other->param_1_);
    std::swap(param_2_, other->param_2_);
    std::swap(param_3_, other->param_3_);
    std::swap(greet_tid_, other->greet_tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata greeting_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = greeting_info_descriptor_;
  metadata.reflection = greeting_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ask_help_info_relation_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ask_help_info_relation_type_descriptor_;
}
bool ask_help_info_relation_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ask_help_info_relation_type ask_help_info::RT_STRANGER;
const ask_help_info_relation_type ask_help_info::RT_CORP;
const ask_help_info_relation_type ask_help_info::RT_NATION;
const ask_help_info_relation_type ask_help_info::relation_type_MIN;
const ask_help_info_relation_type ask_help_info::relation_type_MAX;
const int ask_help_info::relation_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ask_help_info::kSrcFieldNumber;
const int ask_help_info::kSrcNameFieldNumber;
const int ask_help_info::kSceneTagFieldNumber;
const int ask_help_info::kMirrorIdFieldNumber;
const int ask_help_info::kPosFieldNumber;
const int ask_help_info::kEndTimestampFieldNumber;
const int ask_help_info::kInfoTypeFieldNumber;
const int ask_help_info::kRelationFieldNumber;
const int ask_help_info::kCertificateFieldNumber;
const int ask_help_info::kSrcNationFieldNumber;
const int ask_help_info::kCorpIdFieldNumber;
#endif  // !_MSC_VER

ask_help_info::ask_help_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ask_help_info::InitAsDefaultInstance() {
  pos_ = const_cast< ::PB::a3d_pos*>(&::PB::a3d_pos::default_instance());
}

ask_help_info::ask_help_info(const ask_help_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ask_help_info::SharedCtor() {
  _cached_size_ = 0;
  src_ = GOOGLE_ULONGLONG(0);
  src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scene_tag_ = 0;
  mirror_id_ = 0;
  pos_ = NULL;
  end_timestamp_ = 0;
  info_type_ = 0;
  relation_ = 0;
  certificate_ = 0;
  src_nation_ = 0;
  corp_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ask_help_info::~ask_help_info() {
  SharedDtor();
}

void ask_help_info::SharedDtor() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void ask_help_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ask_help_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ask_help_info_descriptor_;
}

const ask_help_info& ask_help_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

ask_help_info* ask_help_info::default_instance_ = NULL;

ask_help_info* ask_help_info::New() const {
  return new ask_help_info;
}

void ask_help_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_ = GOOGLE_ULONGLONG(0);
    if (has_src_name()) {
      if (src_name_ != &::google::protobuf::internal::kEmptyString) {
        src_name_->clear();
      }
    }
    scene_tag_ = 0;
    mirror_id_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::PB::a3d_pos::Clear();
    }
    end_timestamp_ = 0;
    info_type_ = 0;
    relation_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    certificate_ = 0;
    src_nation_ = 0;
    corp_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ask_help_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_src_name;
        break;
      }

      // optional bytes src_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_tag;
        break;
      }

      // required int32 scene_tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_tag_)));
          set_has_scene_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mirror_id;
        break;
      }

      // optional int32 mirror_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mirror_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mirror_id_)));
          set_has_mirror_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // required .PB.a3d_pos pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_timestamp;
        break;
      }

      // optional int32 end_timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_timestamp_)));
          set_has_end_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_info_type;
        break;
      }

      // optional .PB.ask_help_info_type info_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::ask_help_info_type_IsValid(value)) {
            set_info_type(static_cast< ::PB::ask_help_info_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_relation;
        break;
      }

      // optional .PB.ask_help_info.relation_type relation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::ask_help_info_relation_type_IsValid(value)) {
            set_relation(static_cast< ::PB::ask_help_info_relation_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_certificate;
        break;
      }

      // optional sint32 certificate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_certificate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &certificate_)));
          set_has_certificate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_src_nation;
        break;
      }

      // optional int32 src_nation = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_nation_)));
          set_has_src_nation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_corp_id;
        break;
      }

      // optional int32 corp_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &corp_id_)));
          set_has_corp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ask_help_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src(), output);
  }

  // optional bytes src_name = 2;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->src_name(), output);
  }

  // required int32 scene_tag = 3;
  if (has_scene_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scene_tag(), output);
  }

  // optional int32 mirror_id = 4;
  if (has_mirror_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mirror_id(), output);
  }

  // required .PB.a3d_pos pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  // optional int32 end_timestamp = 6;
  if (has_end_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->end_timestamp(), output);
  }

  // optional .PB.ask_help_info_type info_type = 7;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->info_type(), output);
  }

  // optional .PB.ask_help_info.relation_type relation = 8;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->relation(), output);
  }

  // optional sint32 certificate = 9;
  if (has_certificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->certificate(), output);
  }

  // optional int32 src_nation = 10;
  if (has_src_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->src_nation(), output);
  }

  // optional int32 corp_id = 11;
  if (has_corp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->corp_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ask_help_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src(), target);
  }

  // optional bytes src_name = 2;
  if (has_src_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->src_name(), target);
  }

  // required int32 scene_tag = 3;
  if (has_scene_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scene_tag(), target);
  }

  // optional int32 mirror_id = 4;
  if (has_mirror_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mirror_id(), target);
  }

  // required .PB.a3d_pos pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  // optional int32 end_timestamp = 6;
  if (has_end_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->end_timestamp(), target);
  }

  // optional .PB.ask_help_info_type info_type = 7;
  if (has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->info_type(), target);
  }

  // optional .PB.ask_help_info.relation_type relation = 8;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->relation(), target);
  }

  // optional sint32 certificate = 9;
  if (has_certificate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->certificate(), target);
  }

  // optional int32 src_nation = 10;
  if (has_src_nation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->src_nation(), target);
  }

  // optional int32 corp_id = 11;
  if (has_corp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->corp_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ask_help_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src());
    }

    // optional bytes src_name = 2;
    if (has_src_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_name());
    }

    // required int32 scene_tag = 3;
    if (has_scene_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_tag());
    }

    // optional int32 mirror_id = 4;
    if (has_mirror_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mirror_id());
    }

    // required .PB.a3d_pos pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional int32 end_timestamp = 6;
    if (has_end_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_timestamp());
    }

    // optional .PB.ask_help_info_type info_type = 7;
    if (has_info_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->info_type());
    }

    // optional .PB.ask_help_info.relation_type relation = 8;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 certificate = 9;
    if (has_certificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->certificate());
    }

    // optional int32 src_nation = 10;
    if (has_src_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_nation());
    }

    // optional int32 corp_id = 11;
    if (has_corp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->corp_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ask_help_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ask_help_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ask_help_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ask_help_info::MergeFrom(const ask_help_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_src_name()) {
      set_src_name(from.src_name());
    }
    if (from.has_scene_tag()) {
      set_scene_tag(from.scene_tag());
    }
    if (from.has_mirror_id()) {
      set_mirror_id(from.mirror_id());
    }
    if (from.has_pos()) {
      mutable_pos()->::PB::a3d_pos::MergeFrom(from.pos());
    }
    if (from.has_end_timestamp()) {
      set_end_timestamp(from.end_timestamp());
    }
    if (from.has_info_type()) {
      set_info_type(from.info_type());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_certificate()) {
      set_certificate(from.certificate());
    }
    if (from.has_src_nation()) {
      set_src_nation(from.src_nation());
    }
    if (from.has_corp_id()) {
      set_corp_id(from.corp_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ask_help_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ask_help_info::CopyFrom(const ask_help_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ask_help_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000015) != 0x00000015) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void ask_help_info::Swap(ask_help_info* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(src_name_, other->src_name_);
    std::swap(scene_tag_, other->scene_tag_);
    std::swap(mirror_id_, other->mirror_id_);
    std::swap(pos_, other->pos_);
    std::swap(end_timestamp_, other->end_timestamp_);
    std::swap(info_type_, other->info_type_);
    std::swap(relation_, other->relation_);
    std::swap(certificate_, other->certificate_);
    std::swap(src_nation_, other->src_nation_);
    std::swap(corp_id_, other->corp_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ask_help_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ask_help_info_descriptor_;
  metadata.reflection = ask_help_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roam_match_info::kZoneidFieldNumber;
const int roam_match_info::kNationidFieldNumber;
const int roam_match_info::kLeagueIdFieldNumber;
const int roam_match_info::kWarIdFieldNumber;
const int roam_match_info::kCampIdFieldNumber;
#endif  // !_MSC_VER

roam_match_info::roam_match_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roam_match_info::InitAsDefaultInstance() {
}

roam_match_info::roam_match_info(const roam_match_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roam_match_info::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0;
  nationid_ = 0;
  league_id_ = 0;
  war_id_ = 0;
  camp_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roam_match_info::~roam_match_info() {
  SharedDtor();
}

void roam_match_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roam_match_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roam_match_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roam_match_info_descriptor_;
}

const roam_match_info& roam_match_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

roam_match_info* roam_match_info::default_instance_ = NULL;

roam_match_info* roam_match_info::New() const {
  return new roam_match_info;
}

void roam_match_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0;
    nationid_ = 0;
    league_id_ = 0;
    war_id_ = 0;
    camp_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roam_match_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nationid;
        break;
      }

      // optional int32 nationid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nationid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nationid_)));
          set_has_nationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_league_id;
        break;
      }

      // optional int32 league_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_war_id;
        break;
      }

      // optional int32 war_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_war_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &war_id_)));
          set_has_war_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_camp_id;
        break;
      }

      // optional int32 camp_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roam_match_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zoneid(), output);
  }

  // optional int32 nationid = 2;
  if (has_nationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nationid(), output);
  }

  // optional int32 league_id = 3;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->league_id(), output);
  }

  // optional int32 war_id = 4;
  if (has_war_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->war_id(), output);
  }

  // optional int32 camp_id = 5;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->camp_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roam_match_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zoneid(), target);
  }

  // optional int32 nationid = 2;
  if (has_nationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nationid(), target);
  }

  // optional int32 league_id = 3;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->league_id(), target);
  }

  // optional int32 war_id = 4;
  if (has_war_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->war_id(), target);
  }

  // optional int32 camp_id = 5;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->camp_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roam_match_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }

    // optional int32 nationid = 2;
    if (has_nationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nationid());
    }

    // optional int32 league_id = 3;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->league_id());
    }

    // optional int32 war_id = 4;
    if (has_war_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->war_id());
    }

    // optional int32 camp_id = 5;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roam_match_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roam_match_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roam_match_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roam_match_info::MergeFrom(const roam_match_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_nationid()) {
      set_nationid(from.nationid());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_war_id()) {
      set_war_id(from.war_id());
    }
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roam_match_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roam_match_info::CopyFrom(const roam_match_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roam_match_info::IsInitialized() const {

  return true;
}

void roam_match_info::Swap(roam_match_info* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(nationid_, other->nationid_);
    std::swap(league_id_, other->league_id_);
    std::swap(war_id_, other->war_id_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roam_match_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roam_match_info_descriptor_;
  metadata.reflection = roam_match_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_roam_record_info::kZoneidFieldNumber;
const int db_roam_record_info::kNationFieldNumber;
const int db_roam_record_info::kLeagueidFieldNumber;
const int db_roam_record_info::kCampidFieldNumber;
#endif  // !_MSC_VER

db_roam_record_info::db_roam_record_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_roam_record_info::InitAsDefaultInstance() {
}

db_roam_record_info::db_roam_record_info(const db_roam_record_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_roam_record_info::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0;
  nation_ = 0;
  leagueid_ = 0;
  campid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_roam_record_info::~db_roam_record_info() {
  SharedDtor();
}

void db_roam_record_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_roam_record_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_roam_record_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_roam_record_info_descriptor_;
}

const db_roam_record_info& db_roam_record_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_roam_record_info* db_roam_record_info::default_instance_ = NULL;

db_roam_record_info* db_roam_record_info::New() const {
  return new db_roam_record_info;
}

void db_roam_record_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0;
    nation_ = 0;
    leagueid_ = 0;
    campid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_roam_record_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nation;
        break;
      }

      // optional int32 nation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_)));
          set_has_nation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leagueid;
        break;
      }

      // optional int32 leagueid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leagueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leagueid_)));
          set_has_leagueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_campid;
        break;
      }

      // optional int32 campid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_roam_record_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zoneid(), output);
  }

  // optional int32 nation = 2;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nation(), output);
  }

  // optional int32 leagueid = 3;
  if (has_leagueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leagueid(), output);
  }

  // optional int32 campid = 4;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->campid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_roam_record_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zoneid(), target);
  }

  // optional int32 nation = 2;
  if (has_nation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nation(), target);
  }

  // optional int32 leagueid = 3;
  if (has_leagueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leagueid(), target);
  }

  // optional int32 campid = 4;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->campid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_roam_record_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }

    // optional int32 nation = 2;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation());
    }

    // optional int32 leagueid = 3;
    if (has_leagueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leagueid());
    }

    // optional int32 campid = 4;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->campid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_roam_record_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_roam_record_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_roam_record_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_roam_record_info::MergeFrom(const db_roam_record_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_leagueid()) {
      set_leagueid(from.leagueid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_roam_record_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_roam_record_info::CopyFrom(const db_roam_record_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_roam_record_info::IsInitialized() const {

  return true;
}

void db_roam_record_info::Swap(db_roam_record_info* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(nation_, other->nation_);
    std::swap(leagueid_, other->leagueid_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_roam_record_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_roam_record_info_descriptor_;
  metadata.reflection = db_roam_record_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_roam_record_data::kInstidFieldNumber;
const int db_roam_record_data::kWinCampidFieldNumber;
const int db_roam_record_data::kTimestampFieldNumber;
const int db_roam_record_data::kInfoFieldNumber;
#endif  // !_MSC_VER

db_roam_record_data::db_roam_record_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_roam_record_data::InitAsDefaultInstance() {
}

db_roam_record_data::db_roam_record_data(const db_roam_record_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_roam_record_data::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  win_campid_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_roam_record_data::~db_roam_record_data() {
  SharedDtor();
}

void db_roam_record_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_roam_record_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_roam_record_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_roam_record_data_descriptor_;
}

const db_roam_record_data& db_roam_record_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_roam_record_data* db_roam_record_data::default_instance_ = NULL;

db_roam_record_data* db_roam_record_data::New() const {
  return new db_roam_record_data;
}

void db_roam_record_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
    win_campid_ = 0;
    timestamp_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_roam_record_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win_campid;
        break;
      }

      // optional int32 win_campid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_campid_)));
          set_has_win_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // repeated .PB.db_roam_record_info info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_roam_record_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instid = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  // optional int32 win_campid = 2;
  if (has_win_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win_campid(), output);
  }

  // optional int32 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timestamp(), output);
  }

  // repeated .PB.db_roam_record_info info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_roam_record_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instid = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  // optional int32 win_campid = 2;
  if (has_win_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win_campid(), target);
  }

  // optional int32 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timestamp(), target);
  }

  // repeated .PB.db_roam_record_info info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_roam_record_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instid = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

    // optional int32 win_campid = 2;
    if (has_win_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_campid());
    }

    // optional int32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  // repeated .PB.db_roam_record_info info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_roam_record_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_roam_record_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_roam_record_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_roam_record_data::MergeFrom(const db_roam_record_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
    if (from.has_win_campid()) {
      set_win_campid(from.win_campid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_roam_record_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_roam_record_data::CopyFrom(const db_roam_record_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_roam_record_data::IsInitialized() const {

  return true;
}

void db_roam_record_data::Swap(db_roam_record_data* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    std::swap(win_campid_, other->win_campid_);
    std::swap(timestamp_, other->timestamp_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_roam_record_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_roam_record_data_descriptor_;
  metadata.reflection = db_roam_record_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int instance_extend_info::kParam1FieldNumber;
const int instance_extend_info::kParam2FieldNumber;
#endif  // !_MSC_VER

instance_extend_info::instance_extend_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void instance_extend_info::InitAsDefaultInstance() {
}

instance_extend_info::instance_extend_info(const instance_extend_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void instance_extend_info::SharedCtor() {
  _cached_size_ = 0;
  param1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

instance_extend_info::~instance_extend_info() {
  SharedDtor();
}

void instance_extend_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void instance_extend_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* instance_extend_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return instance_extend_info_descriptor_;
}

const instance_extend_info& instance_extend_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

instance_extend_info* instance_extend_info::default_instance_ = NULL;

instance_extend_info* instance_extend_info::New() const {
  return new instance_extend_info;
}

void instance_extend_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param1_ = 0;
  }
  param2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool instance_extend_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 param1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param2;
        break;
      }

      // repeated int64 param2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_param2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_param2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param2;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void instance_extend_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 param1 = 1;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param1(), output);
  }

  // repeated int64 param2 = 2;
  for (int i = 0; i < this->param2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->param2(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* instance_extend_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 param1 = 1;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param1(), target);
  }

  // repeated int64 param2 = 2;
  for (int i = 0; i < this->param2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->param2(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int instance_extend_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 param1 = 1;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

  }
  // repeated int64 param2 = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->param2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->param2(i));
    }
    total_size += 1 * this->param2_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void instance_extend_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const instance_extend_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const instance_extend_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void instance_extend_info::MergeFrom(const instance_extend_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  param2_.MergeFrom(from.param2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void instance_extend_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void instance_extend_info::CopyFrom(const instance_extend_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool instance_extend_info::IsInitialized() const {

  return true;
}

void instance_extend_info::Swap(instance_extend_info* other) {
  if (other != this) {
    std::swap(param1_, other->param1_);
    param2_.Swap(&other->param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata instance_extend_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = instance_extend_info_descriptor_;
  metadata.reflection = instance_extend_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int corp_farmland::kCurPlantingTidFieldNumber;
const int corp_farmland::kStartTimeFieldNumber;
const int corp_farmland::kHarvestTimeFieldNumber;
const int corp_farmland::kCanSpeedFieldNumber;
#endif  // !_MSC_VER

corp_farmland::corp_farmland()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void corp_farmland::InitAsDefaultInstance() {
}

corp_farmland::corp_farmland(const corp_farmland& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void corp_farmland::SharedCtor() {
  _cached_size_ = 0;
  cur_planting_tid_ = 0;
  start_time_ = 0;
  harvest_time_ = 0;
  can_speed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

corp_farmland::~corp_farmland() {
  SharedDtor();
}

void corp_farmland::SharedDtor() {
  if (this != default_instance_) {
  }
}

void corp_farmland::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* corp_farmland::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return corp_farmland_descriptor_;
}

const corp_farmland& corp_farmland::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

corp_farmland* corp_farmland::default_instance_ = NULL;

corp_farmland* corp_farmland::New() const {
  return new corp_farmland;
}

void corp_farmland::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_planting_tid_ = 0;
    start_time_ = 0;
    harvest_time_ = 0;
    can_speed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool corp_farmland::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_planting_tid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_planting_tid_)));
          set_has_cur_planting_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // optional int32 start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_harvest_time;
        break;
      }

      // optional int32 harvest_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harvest_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &harvest_time_)));
          set_has_harvest_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_can_speed;
        break;
      }

      // optional bool can_speed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_speed_)));
          set_has_can_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void corp_farmland::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cur_planting_tid = 3;
  if (has_cur_planting_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_planting_tid(), output);
  }

  // optional int32 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_time(), output);
  }

  // optional int32 harvest_time = 5;
  if (has_harvest_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->harvest_time(), output);
  }

  // optional bool can_speed = 6;
  if (has_can_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->can_speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* corp_farmland::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cur_planting_tid = 3;
  if (has_cur_planting_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_planting_tid(), target);
  }

  // optional int32 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start_time(), target);
  }

  // optional int32 harvest_time = 5;
  if (has_harvest_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->harvest_time(), target);
  }

  // optional bool can_speed = 6;
  if (has_can_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->can_speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int corp_farmland::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cur_planting_tid = 3;
    if (has_cur_planting_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_planting_tid());
    }

    // optional int32 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }

    // optional int32 harvest_time = 5;
    if (has_harvest_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->harvest_time());
    }

    // optional bool can_speed = 6;
    if (has_can_speed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void corp_farmland::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const corp_farmland* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const corp_farmland*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void corp_farmland::MergeFrom(const corp_farmland& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_planting_tid()) {
      set_cur_planting_tid(from.cur_planting_tid());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_harvest_time()) {
      set_harvest_time(from.harvest_time());
    }
    if (from.has_can_speed()) {
      set_can_speed(from.can_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void corp_farmland::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void corp_farmland::CopyFrom(const corp_farmland& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool corp_farmland::IsInitialized() const {

  return true;
}

void corp_farmland::Swap(corp_farmland* other) {
  if (other != this) {
    std::swap(cur_planting_tid_, other->cur_planting_tid_);
    std::swap(start_time_, other->start_time_);
    std::swap(harvest_time_, other->harvest_time_);
    std::swap(can_speed_, other->can_speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata corp_farmland::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = corp_farmland_descriptor_;
  metadata.reflection = corp_farmland_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_instance_config_client_config::kMafiaIdFieldNumber;
const int enter_instance_config_client_config::kNameFieldNumber;
const int enter_instance_config_client_config::kPasswordFieldNumber;
const int enter_instance_config_client_config::kInfoFieldNumber;
#endif  // !_MSC_VER

enter_instance_config_client_config::enter_instance_config_client_config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_instance_config_client_config::InitAsDefaultInstance() {
  info_ = const_cast< ::PB::instance_extend_info*>(&::PB::instance_extend_info::default_instance());
}

enter_instance_config_client_config::enter_instance_config_client_config(const enter_instance_config_client_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_instance_config_client_config::SharedCtor() {
  _cached_size_ = 0;
  mafia_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_instance_config_client_config::~enter_instance_config_client_config() {
  SharedDtor();
}

void enter_instance_config_client_config::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void enter_instance_config_client_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_instance_config_client_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_instance_config_client_config_descriptor_;
}

const enter_instance_config_client_config& enter_instance_config_client_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

enter_instance_config_client_config* enter_instance_config_client_config::default_instance_ = NULL;

enter_instance_config_client_config* enter_instance_config_client_config::New() const {
  return new enter_instance_config_client_config;
}

void enter_instance_config_client_config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mafia_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_info()) {
      if (info_ != NULL) info_->::PB::instance_extend_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_instance_config_client_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mafia_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mafia_id_)));
          set_has_mafia_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional bytes password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .PB.instance_extend_info info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_instance_config_client_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mafia_id = 1;
  if (has_mafia_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mafia_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional bytes password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->password(), output);
  }

  // optional .PB.instance_extend_info info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_instance_config_client_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mafia_id = 1;
  if (has_mafia_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mafia_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes password = 3;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->password(), target);
  }

  // optional .PB.instance_extend_info info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_instance_config_client_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mafia_id = 1;
    if (has_mafia_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mafia_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional .PB.instance_extend_info info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_instance_config_client_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_instance_config_client_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_instance_config_client_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_instance_config_client_config::MergeFrom(const enter_instance_config_client_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mafia_id()) {
      set_mafia_id(from.mafia_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_info()) {
      mutable_info()->::PB::instance_extend_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_instance_config_client_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_instance_config_client_config::CopyFrom(const enter_instance_config_client_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_instance_config_client_config::IsInitialized() const {

  return true;
}

void enter_instance_config_client_config::Swap(enter_instance_config_client_config* other) {
  if (other != this) {
    std::swap(mafia_id_, other->mafia_id_);
    std::swap(name_, other->name_);
    std::swap(password_, other->password_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_instance_config_client_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_instance_config_client_config_descriptor_;
  metadata.reflection = enter_instance_config_client_config_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int enter_instance_config_server_config::kParam1FieldNumber;
const int enter_instance_config_server_config::kParam2FieldNumber;
const int enter_instance_config_server_config::kPosFieldNumber;
#endif  // !_MSC_VER

enter_instance_config_server_config::enter_instance_config_server_config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_instance_config_server_config::InitAsDefaultInstance() {
  pos_ = const_cast< ::PB::a3d_pos*>(&::PB::a3d_pos::default_instance());
}

enter_instance_config_server_config::enter_instance_config_server_config(const enter_instance_config_server_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_instance_config_server_config::SharedCtor() {
  _cached_size_ = 0;
  param1_ = 0;
  param2_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_instance_config_server_config::~enter_instance_config_server_config() {
  SharedDtor();
}

void enter_instance_config_server_config::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void enter_instance_config_server_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_instance_config_server_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_instance_config_server_config_descriptor_;
}

const enter_instance_config_server_config& enter_instance_config_server_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

enter_instance_config_server_config* enter_instance_config_server_config::default_instance_ = NULL;

enter_instance_config_server_config* enter_instance_config_server_config::New() const {
  return new enter_instance_config_server_config;
}

void enter_instance_config_server_config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param1_ = 0;
    param2_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::PB::a3d_pos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_instance_config_server_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 param1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param2;
        break;
      }

      // optional int32 param2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .PB.a3d_pos pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_instance_config_server_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 param1 = 1;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param1(), output);
  }

  // optional int32 param2 = 2;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->param2(), output);
  }

  // optional .PB.a3d_pos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_instance_config_server_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 param1 = 1;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param1(), target);
  }

  // optional int32 param2 = 2;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->param2(), target);
  }

  // optional .PB.a3d_pos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_instance_config_server_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 param1 = 1;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

    // optional int32 param2 = 2;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param2());
    }

    // optional .PB.a3d_pos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_instance_config_server_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_instance_config_server_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_instance_config_server_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_instance_config_server_config::MergeFrom(const enter_instance_config_server_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_pos()) {
      mutable_pos()->::PB::a3d_pos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_instance_config_server_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_instance_config_server_config::CopyFrom(const enter_instance_config_server_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_instance_config_server_config::IsInitialized() const {

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void enter_instance_config_server_config::Swap(enter_instance_config_server_config* other) {
  if (other != this) {
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_instance_config_server_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_instance_config_server_config_descriptor_;
  metadata.reflection = enter_instance_config_server_config_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int enter_instance_config::kClientFieldNumber;
const int enter_instance_config::kServerFieldNumber;
#endif  // !_MSC_VER

enter_instance_config::enter_instance_config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_instance_config::InitAsDefaultInstance() {
  client_ = const_cast< ::PB::enter_instance_config_client_config*>(&::PB::enter_instance_config_client_config::default_instance());
  server_ = const_cast< ::PB::enter_instance_config_server_config*>(&::PB::enter_instance_config_server_config::default_instance());
}

enter_instance_config::enter_instance_config(const enter_instance_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_instance_config::SharedCtor() {
  _cached_size_ = 0;
  client_ = NULL;
  server_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_instance_config::~enter_instance_config() {
  SharedDtor();
}

void enter_instance_config::SharedDtor() {
  if (this != default_instance_) {
    delete client_;
    delete server_;
  }
}

void enter_instance_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_instance_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_instance_config_descriptor_;
}

const enter_instance_config& enter_instance_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

enter_instance_config* enter_instance_config::default_instance_ = NULL;

enter_instance_config* enter_instance_config::New() const {
  return new enter_instance_config;
}

void enter_instance_config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_client()) {
      if (client_ != NULL) client_->::PB::enter_instance_config_client_config::Clear();
    }
    if (has_server()) {
      if (server_ != NULL) server_->::PB::enter_instance_config_server_config::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_instance_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.enter_instance_config.client_config client = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server;
        break;
      }

      // optional .PB.enter_instance_config.server_config server = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_instance_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.enter_instance_config.client_config client = 1;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->client(), output);
  }

  // optional .PB.enter_instance_config.server_config server = 2;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_instance_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.enter_instance_config.client_config client = 1;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->client(), target);
  }

  // optional .PB.enter_instance_config.server_config server = 2;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_instance_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.enter_instance_config.client_config client = 1;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client());
    }

    // optional .PB.enter_instance_config.server_config server = 2;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_instance_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_instance_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_instance_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_instance_config::MergeFrom(const enter_instance_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client()) {
      mutable_client()->::PB::enter_instance_config_client_config::MergeFrom(from.client());
    }
    if (from.has_server()) {
      mutable_server()->::PB::enter_instance_config_server_config::MergeFrom(from.server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_instance_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_instance_config::CopyFrom(const enter_instance_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_instance_config::IsInitialized() const {

  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  return true;
}

void enter_instance_config::Swap(enter_instance_config* other) {
  if (other != this) {
    std::swap(client_, other->client_);
    std::swap(server_, other->server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_instance_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_instance_config_descriptor_;
  metadata.reflection = enter_instance_config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_corps_attr_config_rent_chariot_info::kChariotHpFieldNumber;
const int player_corps_attr_config_rent_chariot_info::kChariotTidFieldNumber;
const int player_corps_attr_config_rent_chariot_info::kChariotLevelFieldNumber;
const int player_corps_attr_config_rent_chariot_info::kChariotRentTimestampFieldNumber;
#endif  // !_MSC_VER

player_corps_attr_config_rent_chariot_info::player_corps_attr_config_rent_chariot_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_corps_attr_config_rent_chariot_info::InitAsDefaultInstance() {
}

player_corps_attr_config_rent_chariot_info::player_corps_attr_config_rent_chariot_info(const player_corps_attr_config_rent_chariot_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_corps_attr_config_rent_chariot_info::SharedCtor() {
  _cached_size_ = 0;
  chariot_hp_ = 0;
  chariot_tid_ = 0;
  chariot_level_ = 0;
  chariot_rent_timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_corps_attr_config_rent_chariot_info::~player_corps_attr_config_rent_chariot_info() {
  SharedDtor();
}

void player_corps_attr_config_rent_chariot_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_corps_attr_config_rent_chariot_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_corps_attr_config_rent_chariot_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_corps_attr_config_rent_chariot_info_descriptor_;
}

const player_corps_attr_config_rent_chariot_info& player_corps_attr_config_rent_chariot_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

player_corps_attr_config_rent_chariot_info* player_corps_attr_config_rent_chariot_info::default_instance_ = NULL;

player_corps_attr_config_rent_chariot_info* player_corps_attr_config_rent_chariot_info::New() const {
  return new player_corps_attr_config_rent_chariot_info;
}

void player_corps_attr_config_rent_chariot_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chariot_hp_ = 0;
    chariot_tid_ = 0;
    chariot_level_ = 0;
    chariot_rent_timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_corps_attr_config_rent_chariot_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chariot_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chariot_hp_)));
          set_has_chariot_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chariot_tid;
        break;
      }

      // optional int32 chariot_tid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chariot_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chariot_tid_)));
          set_has_chariot_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chariot_level;
        break;
      }

      // optional int32 chariot_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chariot_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chariot_level_)));
          set_has_chariot_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chariot_rent_timestamp;
        break;
      }

      // optional int32 chariot_rent_timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chariot_rent_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chariot_rent_timestamp_)));
          set_has_chariot_rent_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_corps_attr_config_rent_chariot_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chariot_hp = 3;
  if (has_chariot_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chariot_hp(), output);
  }

  // optional int32 chariot_tid = 4;
  if (has_chariot_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chariot_tid(), output);
  }

  // optional int32 chariot_level = 5;
  if (has_chariot_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chariot_level(), output);
  }

  // optional int32 chariot_rent_timestamp = 6;
  if (has_chariot_rent_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->chariot_rent_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_corps_attr_config_rent_chariot_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chariot_hp = 3;
  if (has_chariot_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chariot_hp(), target);
  }

  // optional int32 chariot_tid = 4;
  if (has_chariot_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chariot_tid(), target);
  }

  // optional int32 chariot_level = 5;
  if (has_chariot_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chariot_level(), target);
  }

  // optional int32 chariot_rent_timestamp = 6;
  if (has_chariot_rent_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->chariot_rent_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_corps_attr_config_rent_chariot_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chariot_hp = 3;
    if (has_chariot_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chariot_hp());
    }

    // optional int32 chariot_tid = 4;
    if (has_chariot_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chariot_tid());
    }

    // optional int32 chariot_level = 5;
    if (has_chariot_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chariot_level());
    }

    // optional int32 chariot_rent_timestamp = 6;
    if (has_chariot_rent_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chariot_rent_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_corps_attr_config_rent_chariot_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_corps_attr_config_rent_chariot_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_corps_attr_config_rent_chariot_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_corps_attr_config_rent_chariot_info::MergeFrom(const player_corps_attr_config_rent_chariot_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chariot_hp()) {
      set_chariot_hp(from.chariot_hp());
    }
    if (from.has_chariot_tid()) {
      set_chariot_tid(from.chariot_tid());
    }
    if (from.has_chariot_level()) {
      set_chariot_level(from.chariot_level());
    }
    if (from.has_chariot_rent_timestamp()) {
      set_chariot_rent_timestamp(from.chariot_rent_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_corps_attr_config_rent_chariot_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_corps_attr_config_rent_chariot_info::CopyFrom(const player_corps_attr_config_rent_chariot_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_corps_attr_config_rent_chariot_info::IsInitialized() const {

  return true;
}

void player_corps_attr_config_rent_chariot_info::Swap(player_corps_attr_config_rent_chariot_info* other) {
  if (other != this) {
    std::swap(chariot_hp_, other->chariot_hp_);
    std::swap(chariot_tid_, other->chariot_tid_);
    std::swap(chariot_level_, other->chariot_level_);
    std::swap(chariot_rent_timestamp_, other->chariot_rent_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_corps_attr_config_rent_chariot_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_corps_attr_config_rent_chariot_info_descriptor_;
  metadata.reflection = player_corps_attr_config_rent_chariot_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int player_corps_attr_config::kActiveLevelFieldNumber;
const int player_corps_attr_config::kActiveIndexFieldNumber;
const int player_corps_attr_config::kChariotInfoFieldNumber;
#endif  // !_MSC_VER

player_corps_attr_config::player_corps_attr_config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_corps_attr_config::InitAsDefaultInstance() {
  chariot_info_ = const_cast< ::PB::player_corps_attr_config_rent_chariot_info*>(&::PB::player_corps_attr_config_rent_chariot_info::default_instance());
}

player_corps_attr_config::player_corps_attr_config(const player_corps_attr_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_corps_attr_config::SharedCtor() {
  _cached_size_ = 0;
  active_level_ = -1;
  active_index_ = -1;
  chariot_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_corps_attr_config::~player_corps_attr_config() {
  SharedDtor();
}

void player_corps_attr_config::SharedDtor() {
  if (this != default_instance_) {
    delete chariot_info_;
  }
}

void player_corps_attr_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_corps_attr_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_corps_attr_config_descriptor_;
}

const player_corps_attr_config& player_corps_attr_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

player_corps_attr_config* player_corps_attr_config::default_instance_ = NULL;

player_corps_attr_config* player_corps_attr_config::New() const {
  return new player_corps_attr_config;
}

void player_corps_attr_config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    active_level_ = -1;
    active_index_ = -1;
    if (has_chariot_info()) {
      if (chariot_info_ != NULL) chariot_info_->::PB::player_corps_attr_config_rent_chariot_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_corps_attr_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 active_level = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_level_)));
          set_has_active_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active_index;
        break;
      }

      // optional int32 active_index = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_index_)));
          set_has_active_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chariot_info;
        break;
      }

      // optional .PB.player_corps_attr_config.rent_chariot_info chariot_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chariot_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chariot_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_corps_attr_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 active_level = 1 [default = -1];
  if (has_active_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->active_level(), output);
  }

  // optional int32 active_index = 2 [default = -1];
  if (has_active_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->active_index(), output);
  }

  // optional .PB.player_corps_attr_config.rent_chariot_info chariot_info = 4;
  if (has_chariot_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->chariot_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_corps_attr_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 active_level = 1 [default = -1];
  if (has_active_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->active_level(), target);
  }

  // optional int32 active_index = 2 [default = -1];
  if (has_active_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->active_index(), target);
  }

  // optional .PB.player_corps_attr_config.rent_chariot_info chariot_info = 4;
  if (has_chariot_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->chariot_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_corps_attr_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 active_level = 1 [default = -1];
    if (has_active_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_level());
    }

    // optional int32 active_index = 2 [default = -1];
    if (has_active_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_index());
    }

    // optional .PB.player_corps_attr_config.rent_chariot_info chariot_info = 4;
    if (has_chariot_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chariot_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_corps_attr_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_corps_attr_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_corps_attr_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_corps_attr_config::MergeFrom(const player_corps_attr_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active_level()) {
      set_active_level(from.active_level());
    }
    if (from.has_active_index()) {
      set_active_index(from.active_index());
    }
    if (from.has_chariot_info()) {
      mutable_chariot_info()->::PB::player_corps_attr_config_rent_chariot_info::MergeFrom(from.chariot_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_corps_attr_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_corps_attr_config::CopyFrom(const player_corps_attr_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_corps_attr_config::IsInitialized() const {

  return true;
}

void player_corps_attr_config::Swap(player_corps_attr_config* other) {
  if (other != this) {
    std::swap(active_level_, other->active_level_);
    std::swap(active_index_, other->active_index_);
    std::swap(chariot_info_, other->chariot_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_corps_attr_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_corps_attr_config_descriptor_;
  metadata.reflection = player_corps_attr_config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_stune_config_player_rune_prop_config::kMasterSkillIdFieldNumber;
const int player_stune_config_player_rune_prop_config::kRuneSkillLevelFieldNumber;
#endif  // !_MSC_VER

player_stune_config_player_rune_prop_config::player_stune_config_player_rune_prop_config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_stune_config_player_rune_prop_config::InitAsDefaultInstance() {
}

player_stune_config_player_rune_prop_config::player_stune_config_player_rune_prop_config(const player_stune_config_player_rune_prop_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_stune_config_player_rune_prop_config::SharedCtor() {
  _cached_size_ = 0;
  master_skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_stune_config_player_rune_prop_config::~player_stune_config_player_rune_prop_config() {
  SharedDtor();
}

void player_stune_config_player_rune_prop_config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_stune_config_player_rune_prop_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_stune_config_player_rune_prop_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_stune_config_player_rune_prop_config_descriptor_;
}

const player_stune_config_player_rune_prop_config& player_stune_config_player_rune_prop_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

player_stune_config_player_rune_prop_config* player_stune_config_player_rune_prop_config::default_instance_ = NULL;

player_stune_config_player_rune_prop_config* player_stune_config_player_rune_prop_config::New() const {
  return new player_stune_config_player_rune_prop_config;
}

void player_stune_config_player_rune_prop_config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    master_skill_id_ = 0;
  }
  rune_skill_level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_stune_config_player_rune_prop_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 master_skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_skill_id_)));
          set_has_master_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rune_skill_level;
        break;
      }

      // repeated int32 rune_skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rune_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_rune_skill_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rune_skill_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rune_skill_level;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_stune_config_player_rune_prop_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 master_skill_id = 1;
  if (has_master_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->master_skill_id(), output);
  }

  // repeated int32 rune_skill_level = 2;
  for (int i = 0; i < this->rune_skill_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->rune_skill_level(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_stune_config_player_rune_prop_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 master_skill_id = 1;
  if (has_master_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->master_skill_id(), target);
  }

  // repeated int32 rune_skill_level = 2;
  for (int i = 0; i < this->rune_skill_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->rune_skill_level(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_stune_config_player_rune_prop_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 master_skill_id = 1;
    if (has_master_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->master_skill_id());
    }

  }
  // repeated int32 rune_skill_level = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rune_skill_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rune_skill_level(i));
    }
    total_size += 1 * this->rune_skill_level_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_stune_config_player_rune_prop_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_stune_config_player_rune_prop_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_stune_config_player_rune_prop_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_stune_config_player_rune_prop_config::MergeFrom(const player_stune_config_player_rune_prop_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  rune_skill_level_.MergeFrom(from.rune_skill_level_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_skill_id()) {
      set_master_skill_id(from.master_skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_stune_config_player_rune_prop_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_stune_config_player_rune_prop_config::CopyFrom(const player_stune_config_player_rune_prop_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_stune_config_player_rune_prop_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void player_stune_config_player_rune_prop_config::Swap(player_stune_config_player_rune_prop_config* other) {
  if (other != this) {
    std::swap(master_skill_id_, other->master_skill_id_);
    rune_skill_level_.Swap(&other->rune_skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_stune_config_player_rune_prop_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_stune_config_player_rune_prop_config_descriptor_;
  metadata.reflection = player_stune_config_player_rune_prop_config_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int player_stune_config_player_rune_config::kMasterSkillIdFieldNumber;
const int player_stune_config_player_rune_config::kActiveIndexFieldNumber;
#endif  // !_MSC_VER

player_stune_config_player_rune_config::player_stune_config_player_rune_config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_stune_config_player_rune_config::InitAsDefaultInstance() {
}

player_stune_config_player_rune_config::player_stune_config_player_rune_config(const player_stune_config_player_rune_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_stune_config_player_rune_config::SharedCtor() {
  _cached_size_ = 0;
  master_skill_id_ = 0;
  active_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_stune_config_player_rune_config::~player_stune_config_player_rune_config() {
  SharedDtor();
}

void player_stune_config_player_rune_config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_stune_config_player_rune_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_stune_config_player_rune_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_stune_config_player_rune_config_descriptor_;
}

const player_stune_config_player_rune_config& player_stune_config_player_rune_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

player_stune_config_player_rune_config* player_stune_config_player_rune_config::default_instance_ = NULL;

player_stune_config_player_rune_config* player_stune_config_player_rune_config::New() const {
  return new player_stune_config_player_rune_config;
}

void player_stune_config_player_rune_config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    master_skill_id_ = 0;
    active_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_stune_config_player_rune_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 master_skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_skill_id_)));
          set_has_master_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active_index;
        break;
      }

      // required int32 active_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_index_)));
          set_has_active_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_stune_config_player_rune_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 master_skill_id = 1;
  if (has_master_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->master_skill_id(), output);
  }

  // required int32 active_index = 2;
  if (has_active_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->active_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_stune_config_player_rune_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 master_skill_id = 1;
  if (has_master_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->master_skill_id(), target);
  }

  // required int32 active_index = 2;
  if (has_active_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->active_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_stune_config_player_rune_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 master_skill_id = 1;
    if (has_master_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->master_skill_id());
    }

    // required int32 active_index = 2;
    if (has_active_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_stune_config_player_rune_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_stune_config_player_rune_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_stune_config_player_rune_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_stune_config_player_rune_config::MergeFrom(const player_stune_config_player_rune_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_skill_id()) {
      set_master_skill_id(from.master_skill_id());
    }
    if (from.has_active_index()) {
      set_active_index(from.active_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_stune_config_player_rune_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_stune_config_player_rune_config::CopyFrom(const player_stune_config_player_rune_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_stune_config_player_rune_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void player_stune_config_player_rune_config::Swap(player_stune_config_player_rune_config* other) {
  if (other != this) {
    std::swap(master_skill_id_, other->master_skill_id_);
    std::swap(active_index_, other->active_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_stune_config_player_rune_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_stune_config_player_rune_config_descriptor_;
  metadata.reflection = player_stune_config_player_rune_config_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int player_stune_config_config_set::kSetIndexFieldNumber;
const int player_stune_config_config_set::kConfigsFieldNumber;
#endif  // !_MSC_VER

player_stune_config_config_set::player_stune_config_config_set()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_stune_config_config_set::InitAsDefaultInstance() {
}

player_stune_config_config_set::player_stune_config_config_set(const player_stune_config_config_set& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_stune_config_config_set::SharedCtor() {
  _cached_size_ = 0;
  set_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_stune_config_config_set::~player_stune_config_config_set() {
  SharedDtor();
}

void player_stune_config_config_set::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_stune_config_config_set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_stune_config_config_set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_stune_config_config_set_descriptor_;
}

const player_stune_config_config_set& player_stune_config_config_set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

player_stune_config_config_set* player_stune_config_config_set::default_instance_ = NULL;

player_stune_config_config_set* player_stune_config_config_set::New() const {
  return new player_stune_config_config_set;
}

void player_stune_config_config_set::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    set_index_ = 0;
  }
  configs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_stune_config_config_set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 set_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_index_)));
          set_has_set_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configs;
        break;
      }

      // repeated .PB.player_stune_config.player_rune_config configs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_stune_config_config_set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 set_index = 1;
  if (has_set_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->set_index(), output);
  }

  // repeated .PB.player_stune_config.player_rune_config configs = 2;
  for (int i = 0; i < this->configs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->configs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_stune_config_config_set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 set_index = 1;
  if (has_set_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->set_index(), target);
  }

  // repeated .PB.player_stune_config.player_rune_config configs = 2;
  for (int i = 0; i < this->configs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->configs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_stune_config_config_set::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 set_index = 1;
    if (has_set_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_index());
    }

  }
  // repeated .PB.player_stune_config.player_rune_config configs = 2;
  total_size += 1 * this->configs_size();
  for (int i = 0; i < this->configs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_stune_config_config_set::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_stune_config_config_set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_stune_config_config_set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_stune_config_config_set::MergeFrom(const player_stune_config_config_set& from) {
  GOOGLE_CHECK_NE(&from, this);
  configs_.MergeFrom(from.configs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_set_index()) {
      set_set_index(from.set_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_stune_config_config_set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_stune_config_config_set::CopyFrom(const player_stune_config_config_set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_stune_config_config_set::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < configs_size(); i++) {
    if (!this->configs(i).IsInitialized()) return false;
  }
  return true;
}

void player_stune_config_config_set::Swap(player_stune_config_config_set* other) {
  if (other != this) {
    std::swap(set_index_, other->set_index_);
    configs_.Swap(&other->configs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_stune_config_config_set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_stune_config_config_set_descriptor_;
  metadata.reflection = player_stune_config_config_set_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int player_stune_config::kRuneLevelFieldNumber;
const int player_stune_config::kRunePointFieldNumber;
const int player_stune_config::kRuneConfigFieldNumber;
const int player_stune_config::kAllConfigSetFieldNumber;
const int player_stune_config::kCurActiveSetFieldNumber;
const int player_stune_config::kTotalRunePointFieldNumber;
#endif  // !_MSC_VER

player_stune_config::player_stune_config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_stune_config::InitAsDefaultInstance() {
}

player_stune_config::player_stune_config(const player_stune_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_stune_config::SharedCtor() {
  _cached_size_ = 0;
  rune_level_ = 0;
  rune_point_ = 0;
  cur_active_set_ = 0;
  total_rune_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_stune_config::~player_stune_config() {
  SharedDtor();
}

void player_stune_config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_stune_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_stune_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_stune_config_descriptor_;
}

const player_stune_config& player_stune_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

player_stune_config* player_stune_config::default_instance_ = NULL;

player_stune_config* player_stune_config::New() const {
  return new player_stune_config;
}

void player_stune_config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rune_level_ = 0;
    rune_point_ = 0;
    cur_active_set_ = 0;
    total_rune_point_ = 0;
  }
  rune_config_.Clear();
  all_config_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_stune_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rune_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rune_level_)));
          set_has_rune_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rune_point;
        break;
      }

      // optional int32 rune_point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rune_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rune_point_)));
          set_has_rune_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rune_config;
        break;
      }

      // repeated .PB.player_stune_config.player_rune_prop_config rune_config = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rune_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rune_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rune_config;
        if (input->ExpectTag(34)) goto parse_all_config_set;
        break;
      }

      // repeated .PB.player_stune_config.config_set all_config_set = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_config_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_config_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_all_config_set;
        if (input->ExpectTag(40)) goto parse_cur_active_set;
        break;
      }

      // optional int32 cur_active_set = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_active_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_active_set_)));
          set_has_cur_active_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_rune_point;
        break;
      }

      // optional int32 total_rune_point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_rune_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_rune_point_)));
          set_has_total_rune_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_stune_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rune_level = 1;
  if (has_rune_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rune_level(), output);
  }

  // optional int32 rune_point = 2;
  if (has_rune_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rune_point(), output);
  }

  // repeated .PB.player_stune_config.player_rune_prop_config rune_config = 3;
  for (int i = 0; i < this->rune_config_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rune_config(i), output);
  }

  // repeated .PB.player_stune_config.config_set all_config_set = 4;
  for (int i = 0; i < this->all_config_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->all_config_set(i), output);
  }

  // optional int32 cur_active_set = 5;
  if (has_cur_active_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_active_set(), output);
  }

  // optional int32 total_rune_point = 6;
  if (has_total_rune_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_rune_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_stune_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rune_level = 1;
  if (has_rune_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rune_level(), target);
  }

  // optional int32 rune_point = 2;
  if (has_rune_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rune_point(), target);
  }

  // repeated .PB.player_stune_config.player_rune_prop_config rune_config = 3;
  for (int i = 0; i < this->rune_config_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rune_config(i), target);
  }

  // repeated .PB.player_stune_config.config_set all_config_set = 4;
  for (int i = 0; i < this->all_config_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->all_config_set(i), target);
  }

  // optional int32 cur_active_set = 5;
  if (has_cur_active_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_active_set(), target);
  }

  // optional int32 total_rune_point = 6;
  if (has_total_rune_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total_rune_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_stune_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rune_level = 1;
    if (has_rune_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rune_level());
    }

    // optional int32 rune_point = 2;
    if (has_rune_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rune_point());
    }

    // optional int32 cur_active_set = 5;
    if (has_cur_active_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_active_set());
    }

    // optional int32 total_rune_point = 6;
    if (has_total_rune_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_rune_point());
    }

  }
  // repeated .PB.player_stune_config.player_rune_prop_config rune_config = 3;
  total_size += 1 * this->rune_config_size();
  for (int i = 0; i < this->rune_config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rune_config(i));
  }

  // repeated .PB.player_stune_config.config_set all_config_set = 4;
  total_size += 1 * this->all_config_set_size();
  for (int i = 0; i < this->all_config_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_config_set(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_stune_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_stune_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_stune_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_stune_config::MergeFrom(const player_stune_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  rune_config_.MergeFrom(from.rune_config_);
  all_config_set_.MergeFrom(from.all_config_set_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rune_level()) {
      set_rune_level(from.rune_level());
    }
    if (from.has_rune_point()) {
      set_rune_point(from.rune_point());
    }
    if (from.has_cur_active_set()) {
      set_cur_active_set(from.cur_active_set());
    }
    if (from.has_total_rune_point()) {
      set_total_rune_point(from.total_rune_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_stune_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_stune_config::CopyFrom(const player_stune_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_stune_config::IsInitialized() const {

  for (int i = 0; i < rune_config_size(); i++) {
    if (!this->rune_config(i).IsInitialized()) return false;
  }
  for (int i = 0; i < all_config_set_size(); i++) {
    if (!this->all_config_set(i).IsInitialized()) return false;
  }
  return true;
}

void player_stune_config::Swap(player_stune_config* other) {
  if (other != this) {
    std::swap(rune_level_, other->rune_level_);
    std::swap(rune_point_, other->rune_point_);
    rune_config_.Swap(&other->rune_config_);
    all_config_set_.Swap(&other->all_config_set_);
    std::swap(cur_active_set_, other->cur_active_set_);
    std::swap(total_rune_point_, other->total_rune_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_stune_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_stune_config_descriptor_;
  metadata.reflection = player_stune_config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int black_shop_info_black_shop_goods_info::kStoreIdFieldNumber;
const int black_shop_info_black_shop_goods_info::kGoodsIdFieldNumber;
const int black_shop_info_black_shop_goods_info::kIsSelledFieldNumber;
const int black_shop_info_black_shop_goods_info::kGoodsPosFieldNumber;
#endif  // !_MSC_VER

black_shop_info_black_shop_goods_info::black_shop_info_black_shop_goods_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void black_shop_info_black_shop_goods_info::InitAsDefaultInstance() {
}

black_shop_info_black_shop_goods_info::black_shop_info_black_shop_goods_info(const black_shop_info_black_shop_goods_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void black_shop_info_black_shop_goods_info::SharedCtor() {
  _cached_size_ = 0;
  store_id_ = 0;
  goods_id_ = 0;
  is_selled_ = 0;
  goods_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

black_shop_info_black_shop_goods_info::~black_shop_info_black_shop_goods_info() {
  SharedDtor();
}

void black_shop_info_black_shop_goods_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void black_shop_info_black_shop_goods_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* black_shop_info_black_shop_goods_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return black_shop_info_black_shop_goods_info_descriptor_;
}

const black_shop_info_black_shop_goods_info& black_shop_info_black_shop_goods_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

black_shop_info_black_shop_goods_info* black_shop_info_black_shop_goods_info::default_instance_ = NULL;

black_shop_info_black_shop_goods_info* black_shop_info_black_shop_goods_info::New() const {
  return new black_shop_info_black_shop_goods_info;
}

void black_shop_info_black_shop_goods_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    store_id_ = 0;
    goods_id_ = 0;
    is_selled_ = 0;
    goods_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool black_shop_info_black_shop_goods_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 store_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_id;
        break;
      }

      // required int32 goods_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_selled;
        break;
      }

      // required int32 is_selled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_selled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_selled_)));
          set_has_is_selled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_goods_pos;
        break;
      }

      // required int32 goods_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_pos_)));
          set_has_goods_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void black_shop_info_black_shop_goods_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 store_id = 1;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->store_id(), output);
  }

  // required int32 goods_id = 2;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goods_id(), output);
  }

  // required int32 is_selled = 3;
  if (has_is_selled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_selled(), output);
  }

  // required int32 goods_pos = 4;
  if (has_goods_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goods_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* black_shop_info_black_shop_goods_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 store_id = 1;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->store_id(), target);
  }

  // required int32 goods_id = 2;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goods_id(), target);
  }

  // required int32 is_selled = 3;
  if (has_is_selled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_selled(), target);
  }

  // required int32 goods_pos = 4;
  if (has_goods_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goods_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int black_shop_info_black_shop_goods_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 store_id = 1;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    // required int32 goods_id = 2;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goods_id());
    }

    // required int32 is_selled = 3;
    if (has_is_selled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_selled());
    }

    // required int32 goods_pos = 4;
    if (has_goods_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goods_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void black_shop_info_black_shop_goods_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const black_shop_info_black_shop_goods_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const black_shop_info_black_shop_goods_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void black_shop_info_black_shop_goods_info::MergeFrom(const black_shop_info_black_shop_goods_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_is_selled()) {
      set_is_selled(from.is_selled());
    }
    if (from.has_goods_pos()) {
      set_goods_pos(from.goods_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void black_shop_info_black_shop_goods_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void black_shop_info_black_shop_goods_info::CopyFrom(const black_shop_info_black_shop_goods_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool black_shop_info_black_shop_goods_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void black_shop_info_black_shop_goods_info::Swap(black_shop_info_black_shop_goods_info* other) {
  if (other != this) {
    std::swap(store_id_, other->store_id_);
    std::swap(goods_id_, other->goods_id_);
    std::swap(is_selled_, other->is_selled_);
    std::swap(goods_pos_, other->goods_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata black_shop_info_black_shop_goods_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = black_shop_info_black_shop_goods_info_descriptor_;
  metadata.reflection = black_shop_info_black_shop_goods_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int black_shop_info::kShopIdFieldNumber;
const int black_shop_info::kNextRefreshTimeFieldNumber;
const int black_shop_info::kGoodsFieldNumber;
#endif  // !_MSC_VER

black_shop_info::black_shop_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void black_shop_info::InitAsDefaultInstance() {
}

black_shop_info::black_shop_info(const black_shop_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void black_shop_info::SharedCtor() {
  _cached_size_ = 0;
  shop_id_ = 0;
  next_refresh_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

black_shop_info::~black_shop_info() {
  SharedDtor();
}

void black_shop_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void black_shop_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* black_shop_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return black_shop_info_descriptor_;
}

const black_shop_info& black_shop_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

black_shop_info* black_shop_info::default_instance_ = NULL;

black_shop_info* black_shop_info::New() const {
  return new black_shop_info;
}

void black_shop_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_id_ = 0;
    next_refresh_time_ = 0;
  }
  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool black_shop_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 shop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_id_)));
          set_has_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_next_refresh_time;
        break;
      }

      // required int32 next_refresh_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_refresh_time_)));
          set_has_next_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goods;
        break;
      }

      // repeated .PB.black_shop_info.black_shop_goods_info goods = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goods;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void black_shop_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 shop_id = 1;
  if (has_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shop_id(), output);
  }

  // required int32 next_refresh_time = 2;
  if (has_next_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->next_refresh_time(), output);
  }

  // repeated .PB.black_shop_info.black_shop_goods_info goods = 3;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* black_shop_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 shop_id = 1;
  if (has_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shop_id(), target);
  }

  // required int32 next_refresh_time = 2;
  if (has_next_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->next_refresh_time(), target);
  }

  // repeated .PB.black_shop_info.black_shop_goods_info goods = 3;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int black_shop_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 shop_id = 1;
    if (has_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_id());
    }

    // required int32 next_refresh_time = 2;
    if (has_next_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_refresh_time());
    }

  }
  // repeated .PB.black_shop_info.black_shop_goods_info goods = 3;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void black_shop_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const black_shop_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const black_shop_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void black_shop_info::MergeFrom(const black_shop_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_id()) {
      set_shop_id(from.shop_id());
    }
    if (from.has_next_refresh_time()) {
      set_next_refresh_time(from.next_refresh_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void black_shop_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void black_shop_info::CopyFrom(const black_shop_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool black_shop_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < goods_size(); i++) {
    if (!this->goods(i).IsInitialized()) return false;
  }
  return true;
}

void black_shop_info::Swap(black_shop_info* other) {
  if (other != this) {
    std::swap(shop_id_, other->shop_id_);
    std::swap(next_refresh_time_, other->next_refresh_time_);
    goods_.Swap(&other->goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata black_shop_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = black_shop_info_descriptor_;
  metadata.reflection = black_shop_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int climbtower_magic_shop_info_magic_shop_goods_info::kStoreIdFieldNumber;
const int climbtower_magic_shop_info_magic_shop_goods_info::kGoodsIdFieldNumber;
const int climbtower_magic_shop_info_magic_shop_goods_info::kIsSelledFieldNumber;
const int climbtower_magic_shop_info_magic_shop_goods_info::kGoodsPosFieldNumber;
#endif  // !_MSC_VER

climbtower_magic_shop_info_magic_shop_goods_info::climbtower_magic_shop_info_magic_shop_goods_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void climbtower_magic_shop_info_magic_shop_goods_info::InitAsDefaultInstance() {
}

climbtower_magic_shop_info_magic_shop_goods_info::climbtower_magic_shop_info_magic_shop_goods_info(const climbtower_magic_shop_info_magic_shop_goods_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void climbtower_magic_shop_info_magic_shop_goods_info::SharedCtor() {
  _cached_size_ = 0;
  store_id_ = 0;
  goods_id_ = 0;
  is_selled_ = 0;
  goods_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

climbtower_magic_shop_info_magic_shop_goods_info::~climbtower_magic_shop_info_magic_shop_goods_info() {
  SharedDtor();
}

void climbtower_magic_shop_info_magic_shop_goods_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void climbtower_magic_shop_info_magic_shop_goods_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* climbtower_magic_shop_info_magic_shop_goods_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return climbtower_magic_shop_info_magic_shop_goods_info_descriptor_;
}

const climbtower_magic_shop_info_magic_shop_goods_info& climbtower_magic_shop_info_magic_shop_goods_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

climbtower_magic_shop_info_magic_shop_goods_info* climbtower_magic_shop_info_magic_shop_goods_info::default_instance_ = NULL;

climbtower_magic_shop_info_magic_shop_goods_info* climbtower_magic_shop_info_magic_shop_goods_info::New() const {
  return new climbtower_magic_shop_info_magic_shop_goods_info;
}

void climbtower_magic_shop_info_magic_shop_goods_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    store_id_ = 0;
    goods_id_ = 0;
    is_selled_ = 0;
    goods_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool climbtower_magic_shop_info_magic_shop_goods_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 store_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_id;
        break;
      }

      // required int32 goods_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_selled;
        break;
      }

      // required int32 is_selled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_selled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_selled_)));
          set_has_is_selled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_goods_pos;
        break;
      }

      // required int32 goods_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_pos_)));
          set_has_goods_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void climbtower_magic_shop_info_magic_shop_goods_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 store_id = 1;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->store_id(), output);
  }

  // required int32 goods_id = 2;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goods_id(), output);
  }

  // required int32 is_selled = 3;
  if (has_is_selled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_selled(), output);
  }

  // required int32 goods_pos = 4;
  if (has_goods_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goods_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* climbtower_magic_shop_info_magic_shop_goods_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 store_id = 1;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->store_id(), target);
  }

  // required int32 goods_id = 2;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goods_id(), target);
  }

  // required int32 is_selled = 3;
  if (has_is_selled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_selled(), target);
  }

  // required int32 goods_pos = 4;
  if (has_goods_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goods_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int climbtower_magic_shop_info_magic_shop_goods_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 store_id = 1;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    // required int32 goods_id = 2;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goods_id());
    }

    // required int32 is_selled = 3;
    if (has_is_selled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_selled());
    }

    // required int32 goods_pos = 4;
    if (has_goods_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goods_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void climbtower_magic_shop_info_magic_shop_goods_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const climbtower_magic_shop_info_magic_shop_goods_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const climbtower_magic_shop_info_magic_shop_goods_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void climbtower_magic_shop_info_magic_shop_goods_info::MergeFrom(const climbtower_magic_shop_info_magic_shop_goods_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_is_selled()) {
      set_is_selled(from.is_selled());
    }
    if (from.has_goods_pos()) {
      set_goods_pos(from.goods_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void climbtower_magic_shop_info_magic_shop_goods_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void climbtower_magic_shop_info_magic_shop_goods_info::CopyFrom(const climbtower_magic_shop_info_magic_shop_goods_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool climbtower_magic_shop_info_magic_shop_goods_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void climbtower_magic_shop_info_magic_shop_goods_info::Swap(climbtower_magic_shop_info_magic_shop_goods_info* other) {
  if (other != this) {
    std::swap(store_id_, other->store_id_);
    std::swap(goods_id_, other->goods_id_);
    std::swap(is_selled_, other->is_selled_);
    std::swap(goods_pos_, other->goods_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata climbtower_magic_shop_info_magic_shop_goods_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = climbtower_magic_shop_info_magic_shop_goods_info_descriptor_;
  metadata.reflection = climbtower_magic_shop_info_magic_shop_goods_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int climbtower_magic_shop_info::kShopIdFieldNumber;
const int climbtower_magic_shop_info::kLevelFieldNumber;
const int climbtower_magic_shop_info::kGoodsFieldNumber;
#endif  // !_MSC_VER

climbtower_magic_shop_info::climbtower_magic_shop_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void climbtower_magic_shop_info::InitAsDefaultInstance() {
}

climbtower_magic_shop_info::climbtower_magic_shop_info(const climbtower_magic_shop_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void climbtower_magic_shop_info::SharedCtor() {
  _cached_size_ = 0;
  shop_id_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

climbtower_magic_shop_info::~climbtower_magic_shop_info() {
  SharedDtor();
}

void climbtower_magic_shop_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void climbtower_magic_shop_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* climbtower_magic_shop_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return climbtower_magic_shop_info_descriptor_;
}

const climbtower_magic_shop_info& climbtower_magic_shop_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

climbtower_magic_shop_info* climbtower_magic_shop_info::default_instance_ = NULL;

climbtower_magic_shop_info* climbtower_magic_shop_info::New() const {
  return new climbtower_magic_shop_info;
}

void climbtower_magic_shop_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_id_ = 0;
    level_ = 0;
  }
  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool climbtower_magic_shop_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 shop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_id_)));
          set_has_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goods;
        break;
      }

      // repeated .PB.climbtower_magic_shop_info.magic_shop_goods_info goods = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goods;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void climbtower_magic_shop_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 shop_id = 1;
  if (has_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shop_id(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // repeated .PB.climbtower_magic_shop_info.magic_shop_goods_info goods = 3;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* climbtower_magic_shop_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 shop_id = 1;
  if (has_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shop_id(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // repeated .PB.climbtower_magic_shop_info.magic_shop_goods_info goods = 3;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int climbtower_magic_shop_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 shop_id = 1;
    if (has_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_id());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated .PB.climbtower_magic_shop_info.magic_shop_goods_info goods = 3;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void climbtower_magic_shop_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const climbtower_magic_shop_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const climbtower_magic_shop_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void climbtower_magic_shop_info::MergeFrom(const climbtower_magic_shop_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_id()) {
      set_shop_id(from.shop_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void climbtower_magic_shop_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void climbtower_magic_shop_info::CopyFrom(const climbtower_magic_shop_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool climbtower_magic_shop_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < goods_size(); i++) {
    if (!this->goods(i).IsInitialized()) return false;
  }
  return true;
}

void climbtower_magic_shop_info::Swap(climbtower_magic_shop_info* other) {
  if (other != this) {
    std::swap(shop_id_, other->shop_id_);
    std::swap(level_, other->level_);
    goods_.Swap(&other->goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata climbtower_magic_shop_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = climbtower_magic_shop_info_descriptor_;
  metadata.reflection = climbtower_magic_shop_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_hero_trial_config::kFreeRefreshTimesFieldNumber;
const int db_hero_trial_config::kPayRefreshTimesFieldNumber;
const int db_hero_trial_config::kCurHeroTidFieldNumber;
#endif  // !_MSC_VER

db_hero_trial_config::db_hero_trial_config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_hero_trial_config::InitAsDefaultInstance() {
}

db_hero_trial_config::db_hero_trial_config(const db_hero_trial_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_hero_trial_config::SharedCtor() {
  _cached_size_ = 0;
  free_refresh_times_ = 0;
  pay_refresh_times_ = 0;
  cur_hero_tid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_hero_trial_config::~db_hero_trial_config() {
  SharedDtor();
}

void db_hero_trial_config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_hero_trial_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_hero_trial_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_hero_trial_config_descriptor_;
}

const db_hero_trial_config& db_hero_trial_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_hero_trial_config* db_hero_trial_config::default_instance_ = NULL;

db_hero_trial_config* db_hero_trial_config::New() const {
  return new db_hero_trial_config;
}

void db_hero_trial_config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    free_refresh_times_ = 0;
    pay_refresh_times_ = 0;
    cur_hero_tid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_hero_trial_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 free_refresh_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_refresh_times_)));
          set_has_free_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pay_refresh_times;
        break;
      }

      // optional int32 pay_refresh_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pay_refresh_times_)));
          set_has_pay_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_hero_tid;
        break;
      }

      // optional int32 cur_hero_tid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hero_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_hero_tid_)));
          set_has_cur_hero_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_hero_trial_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 free_refresh_times = 1;
  if (has_free_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->free_refresh_times(), output);
  }

  // optional int32 pay_refresh_times = 2;
  if (has_pay_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pay_refresh_times(), output);
  }

  // optional int32 cur_hero_tid = 3;
  if (has_cur_hero_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_hero_tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_hero_trial_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 free_refresh_times = 1;
  if (has_free_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->free_refresh_times(), target);
  }

  // optional int32 pay_refresh_times = 2;
  if (has_pay_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pay_refresh_times(), target);
  }

  // optional int32 cur_hero_tid = 3;
  if (has_cur_hero_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_hero_tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_hero_trial_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 free_refresh_times = 1;
    if (has_free_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_refresh_times());
    }

    // optional int32 pay_refresh_times = 2;
    if (has_pay_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pay_refresh_times());
    }

    // optional int32 cur_hero_tid = 3;
    if (has_cur_hero_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_hero_tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_hero_trial_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_hero_trial_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_hero_trial_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_hero_trial_config::MergeFrom(const db_hero_trial_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_free_refresh_times()) {
      set_free_refresh_times(from.free_refresh_times());
    }
    if (from.has_pay_refresh_times()) {
      set_pay_refresh_times(from.pay_refresh_times());
    }
    if (from.has_cur_hero_tid()) {
      set_cur_hero_tid(from.cur_hero_tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_hero_trial_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_hero_trial_config::CopyFrom(const db_hero_trial_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_hero_trial_config::IsInitialized() const {

  return true;
}

void db_hero_trial_config::Swap(db_hero_trial_config* other) {
  if (other != this) {
    std::swap(free_refresh_times_, other->free_refresh_times_);
    std::swap(pay_refresh_times_, other->pay_refresh_times_);
    std::swap(cur_hero_tid_, other->cur_hero_tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_hero_trial_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_hero_trial_config_descriptor_;
  metadata.reflection = db_hero_trial_config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int level_shopid::kLevelFieldNumber;
const int level_shopid::kShopIdFieldNumber;
#endif  // !_MSC_VER

level_shopid::level_shopid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void level_shopid::InitAsDefaultInstance() {
}

level_shopid::level_shopid(const level_shopid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void level_shopid::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  shop_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

level_shopid::~level_shopid() {
  SharedDtor();
}

void level_shopid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void level_shopid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* level_shopid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return level_shopid_descriptor_;
}

const level_shopid& level_shopid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

level_shopid* level_shopid::default_instance_ = NULL;

level_shopid* level_shopid::New() const {
  return new level_shopid;
}

void level_shopid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    shop_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool level_shopid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_id;
        break;
      }

      // required int32 shop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_id_)));
          set_has_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void level_shopid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 shop_id = 2;
  if (has_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shop_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* level_shopid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 shop_id = 2;
  if (has_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shop_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int level_shopid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 shop_id = 2;
    if (has_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void level_shopid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const level_shopid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const level_shopid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void level_shopid::MergeFrom(const level_shopid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_shop_id()) {
      set_shop_id(from.shop_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void level_shopid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void level_shopid::CopyFrom(const level_shopid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool level_shopid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void level_shopid::Swap(level_shopid* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(shop_id_, other->shop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata level_shopid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = level_shopid_descriptor_;
  metadata.reflection = level_shopid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_strategy_info::kStrategyTidFieldNumber;
const int db_strategy_info::kLevelFieldNumber;
const int db_strategy_info::kChipCountFieldNumber;
const int db_strategy_info::kStarLevelFieldNumber;
const int db_strategy_info::kBlessingNumFieldNumber;
#endif  // !_MSC_VER

db_strategy_info::db_strategy_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_strategy_info::InitAsDefaultInstance() {
}

db_strategy_info::db_strategy_info(const db_strategy_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_strategy_info::SharedCtor() {
  _cached_size_ = 0;
  strategy_tid_ = 0;
  level_ = 0;
  chip_count_ = 0;
  star_level_ = 0;
  blessing_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_strategy_info::~db_strategy_info() {
  SharedDtor();
}

void db_strategy_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_strategy_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_strategy_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_strategy_info_descriptor_;
}

const db_strategy_info& db_strategy_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_strategy_info* db_strategy_info::default_instance_ = NULL;

db_strategy_info* db_strategy_info::New() const {
  return new db_strategy_info;
}

void db_strategy_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    strategy_tid_ = 0;
    level_ = 0;
    chip_count_ = 0;
    star_level_ = 0;
    blessing_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_strategy_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 strategy_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strategy_tid_)));
          set_has_strategy_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chip_count;
        break;
      }

      // optional int32 chip_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chip_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chip_count_)));
          set_has_chip_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star_level;
        break;
      }

      // optional int32 star_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_level_)));
          set_has_star_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_blessing_num;
        break;
      }

      // optional int32 blessing_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blessing_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blessing_num_)));
          set_has_blessing_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_strategy_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 strategy_tid = 1;
  if (has_strategy_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->strategy_tid(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 chip_count = 3;
  if (has_chip_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chip_count(), output);
  }

  // optional int32 star_level = 4;
  if (has_star_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star_level(), output);
  }

  // optional int32 blessing_num = 5;
  if (has_blessing_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->blessing_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_strategy_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 strategy_tid = 1;
  if (has_strategy_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->strategy_tid(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 chip_count = 3;
  if (has_chip_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chip_count(), target);
  }

  // optional int32 star_level = 4;
  if (has_star_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star_level(), target);
  }

  // optional int32 blessing_num = 5;
  if (has_blessing_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->blessing_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_strategy_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 strategy_tid = 1;
    if (has_strategy_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strategy_tid());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 chip_count = 3;
    if (has_chip_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chip_count());
    }

    // optional int32 star_level = 4;
    if (has_star_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_level());
    }

    // optional int32 blessing_num = 5;
    if (has_blessing_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blessing_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_strategy_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_strategy_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_strategy_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_strategy_info::MergeFrom(const db_strategy_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strategy_tid()) {
      set_strategy_tid(from.strategy_tid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_chip_count()) {
      set_chip_count(from.chip_count());
    }
    if (from.has_star_level()) {
      set_star_level(from.star_level());
    }
    if (from.has_blessing_num()) {
      set_blessing_num(from.blessing_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_strategy_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_strategy_info::CopyFrom(const db_strategy_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_strategy_info::IsInitialized() const {

  return true;
}

void db_strategy_info::Swap(db_strategy_info* other) {
  if (other != this) {
    std::swap(strategy_tid_, other->strategy_tid_);
    std::swap(level_, other->level_);
    std::swap(chip_count_, other->chip_count_);
    std::swap(star_level_, other->star_level_);
    std::swap(blessing_num_, other->blessing_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_strategy_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_strategy_info_descriptor_;
  metadata.reflection = db_strategy_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_strategy_vectors::kTypeFieldNumber;
const int db_strategy_vectors::kStrategiesFieldNumber;
#endif  // !_MSC_VER

db_strategy_vectors::db_strategy_vectors()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_strategy_vectors::InitAsDefaultInstance() {
}

db_strategy_vectors::db_strategy_vectors(const db_strategy_vectors& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_strategy_vectors::SharedCtor() {
  _cached_size_ = 0;
  type_ = 25;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_strategy_vectors::~db_strategy_vectors() {
  SharedDtor();
}

void db_strategy_vectors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_strategy_vectors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_strategy_vectors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_strategy_vectors_descriptor_;
}

const db_strategy_vectors& db_strategy_vectors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_strategy_vectors* db_strategy_vectors::default_instance_ = NULL;

db_strategy_vectors* db_strategy_vectors::New() const {
  return new db_strategy_vectors;
}

void db_strategy_vectors::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 25;
  }
  strategies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_strategy_vectors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.GPS_TYPE type = 1 [default = GUT_STRATEGIES];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::GPS_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::GPS_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strategies;
        break;
      }

      // repeated .PB.db_strategy_info strategies = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strategies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strategies;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_strategy_vectors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_STRATEGIES];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .PB.db_strategy_info strategies = 2;
  for (int i = 0; i < this->strategies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strategies(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_strategy_vectors::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_STRATEGIES];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .PB.db_strategy_info strategies = 2;
  for (int i = 0; i < this->strategies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strategies(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_strategy_vectors::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.GPS_TYPE type = 1 [default = GUT_STRATEGIES];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .PB.db_strategy_info strategies = 2;
  total_size += 1 * this->strategies_size();
  for (int i = 0; i < this->strategies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strategies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_strategy_vectors::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_strategy_vectors* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_strategy_vectors*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_strategy_vectors::MergeFrom(const db_strategy_vectors& from) {
  GOOGLE_CHECK_NE(&from, this);
  strategies_.MergeFrom(from.strategies_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_strategy_vectors::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_strategy_vectors::CopyFrom(const db_strategy_vectors& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_strategy_vectors::IsInitialized() const {

  return true;
}

void db_strategy_vectors::Swap(db_strategy_vectors* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    strategies_.Swap(&other->strategies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_strategy_vectors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_strategy_vectors_descriptor_;
  metadata.reflection = db_strategy_vectors_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_surface_soul::kSoulTidFieldNumber;
const int db_surface_soul::kTrainValueFieldNumber;
#endif  // !_MSC_VER

db_surface_soul::db_surface_soul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_surface_soul::InitAsDefaultInstance() {
}

db_surface_soul::db_surface_soul(const db_surface_soul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_surface_soul::SharedCtor() {
  _cached_size_ = 0;
  soul_tid_ = 0;
  train_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_surface_soul::~db_surface_soul() {
  SharedDtor();
}

void db_surface_soul::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_surface_soul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_surface_soul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_surface_soul_descriptor_;
}

const db_surface_soul& db_surface_soul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_surface_soul* db_surface_soul::default_instance_ = NULL;

db_surface_soul* db_surface_soul::New() const {
  return new db_surface_soul;
}

void db_surface_soul::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    soul_tid_ = 0;
    train_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_surface_soul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 soul_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soul_tid_)));
          set_has_soul_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_train_value;
        break;
      }

      // optional int32 train_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_value_)));
          set_has_train_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_surface_soul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 soul_tid = 1;
  if (has_soul_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->soul_tid(), output);
  }

  // optional int32 train_value = 2;
  if (has_train_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->train_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_surface_soul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 soul_tid = 1;
  if (has_soul_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->soul_tid(), target);
  }

  // optional int32 train_value = 2;
  if (has_train_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->train_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_surface_soul::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 soul_tid = 1;
    if (has_soul_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soul_tid());
    }

    // optional int32 train_value = 2;
    if (has_train_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_surface_soul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_surface_soul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_surface_soul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_surface_soul::MergeFrom(const db_surface_soul& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_soul_tid()) {
      set_soul_tid(from.soul_tid());
    }
    if (from.has_train_value()) {
      set_train_value(from.train_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_surface_soul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_surface_soul::CopyFrom(const db_surface_soul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_surface_soul::IsInitialized() const {

  return true;
}

void db_surface_soul::Swap(db_surface_soul* other) {
  if (other != this) {
    std::swap(soul_tid_, other->soul_tid_);
    std::swap(train_value_, other->train_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_surface_soul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_surface_soul_descriptor_;
  metadata.reflection = db_surface_soul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_wing_refine_soul::kSurfaceTidFieldNumber;
const int db_wing_refine_soul::kTrainLevelFieldNumber;
const int db_wing_refine_soul::kSoulsFieldNumber;
#endif  // !_MSC_VER

db_wing_refine_soul::db_wing_refine_soul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_wing_refine_soul::InitAsDefaultInstance() {
}

db_wing_refine_soul::db_wing_refine_soul(const db_wing_refine_soul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_wing_refine_soul::SharedCtor() {
  _cached_size_ = 0;
  surface_tid_ = 0;
  train_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_wing_refine_soul::~db_wing_refine_soul() {
  SharedDtor();
}

void db_wing_refine_soul::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_wing_refine_soul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_wing_refine_soul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_wing_refine_soul_descriptor_;
}

const db_wing_refine_soul& db_wing_refine_soul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_wing_refine_soul* db_wing_refine_soul::default_instance_ = NULL;

db_wing_refine_soul* db_wing_refine_soul::New() const {
  return new db_wing_refine_soul;
}

void db_wing_refine_soul::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    surface_tid_ = 0;
    train_level_ = 0;
  }
  souls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_wing_refine_soul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 surface_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surface_tid_)));
          set_has_surface_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_train_level;
        break;
      }

      // optional int32 train_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_level_)));
          set_has_train_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_souls;
        break;
      }

      // repeated .PB.db_surface_soul souls = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_souls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_souls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_souls;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_wing_refine_soul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 surface_tid = 1;
  if (has_surface_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->surface_tid(), output);
  }

  // optional int32 train_level = 2;
  if (has_train_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->train_level(), output);
  }

  // repeated .PB.db_surface_soul souls = 3;
  for (int i = 0; i < this->souls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->souls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_wing_refine_soul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 surface_tid = 1;
  if (has_surface_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->surface_tid(), target);
  }

  // optional int32 train_level = 2;
  if (has_train_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->train_level(), target);
  }

  // repeated .PB.db_surface_soul souls = 3;
  for (int i = 0; i < this->souls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->souls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_wing_refine_soul::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 surface_tid = 1;
    if (has_surface_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surface_tid());
    }

    // optional int32 train_level = 2;
    if (has_train_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_level());
    }

  }
  // repeated .PB.db_surface_soul souls = 3;
  total_size += 1 * this->souls_size();
  for (int i = 0; i < this->souls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->souls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_wing_refine_soul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_wing_refine_soul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_wing_refine_soul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_wing_refine_soul::MergeFrom(const db_wing_refine_soul& from) {
  GOOGLE_CHECK_NE(&from, this);
  souls_.MergeFrom(from.souls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_surface_tid()) {
      set_surface_tid(from.surface_tid());
    }
    if (from.has_train_level()) {
      set_train_level(from.train_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_wing_refine_soul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_wing_refine_soul::CopyFrom(const db_wing_refine_soul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_wing_refine_soul::IsInitialized() const {

  return true;
}

void db_wing_refine_soul::Swap(db_wing_refine_soul* other) {
  if (other != this) {
    std::swap(surface_tid_, other->surface_tid_);
    std::swap(train_level_, other->train_level_);
    souls_.Swap(&other->souls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_wing_refine_soul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_wing_refine_soul_descriptor_;
  metadata.reflection = db_wing_refine_soul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_refine_surfaces::kTypeFieldNumber;
const int db_refine_surfaces::kSurfacesFieldNumber;
#endif  // !_MSC_VER

db_refine_surfaces::db_refine_surfaces()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_refine_surfaces::InitAsDefaultInstance() {
}

db_refine_surfaces::db_refine_surfaces(const db_refine_surfaces& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_refine_surfaces::SharedCtor() {
  _cached_size_ = 0;
  type_ = 26;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_refine_surfaces::~db_refine_surfaces() {
  SharedDtor();
}

void db_refine_surfaces::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_refine_surfaces::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_refine_surfaces::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_refine_surfaces_descriptor_;
}

const db_refine_surfaces& db_refine_surfaces::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_refine_surfaces* db_refine_surfaces::default_instance_ = NULL;

db_refine_surfaces* db_refine_surfaces::New() const {
  return new db_refine_surfaces;
}

void db_refine_surfaces::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 26;
  }
  surfaces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_refine_surfaces::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.GPS_TYPE type = 1 [default = GUT_WING_REFINE_SOUL];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::GPS_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::GPS_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_surfaces;
        break;
      }

      // repeated .PB.db_wing_refine_soul surfaces = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_surfaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_surfaces()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_surfaces;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_refine_surfaces::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_WING_REFINE_SOUL];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .PB.db_wing_refine_soul surfaces = 2;
  for (int i = 0; i < this->surfaces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->surfaces(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_refine_surfaces::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.GPS_TYPE type = 1 [default = GUT_WING_REFINE_SOUL];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .PB.db_wing_refine_soul surfaces = 2;
  for (int i = 0; i < this->surfaces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->surfaces(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_refine_surfaces::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.GPS_TYPE type = 1 [default = GUT_WING_REFINE_SOUL];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .PB.db_wing_refine_soul surfaces = 2;
  total_size += 1 * this->surfaces_size();
  for (int i = 0; i < this->surfaces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->surfaces(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_refine_surfaces::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_refine_surfaces* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_refine_surfaces*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_refine_surfaces::MergeFrom(const db_refine_surfaces& from) {
  GOOGLE_CHECK_NE(&from, this);
  surfaces_.MergeFrom(from.surfaces_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_refine_surfaces::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_refine_surfaces::CopyFrom(const db_refine_surfaces& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_refine_surfaces::IsInitialized() const {

  return true;
}

void db_refine_surfaces::Swap(db_refine_surfaces* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    surfaces_.Swap(&other->surfaces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_refine_surfaces::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_refine_surfaces_descriptor_;
  metadata.reflection = db_refine_surfaces_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_equip_soul::kPropertyTidFieldNumber;
const int db_equip_soul::kExpFieldNumber;
const int db_equip_soul::kLevelFieldNumber;
#endif  // !_MSC_VER

db_equip_soul::db_equip_soul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_equip_soul::InitAsDefaultInstance() {
}

db_equip_soul::db_equip_soul(const db_equip_soul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_equip_soul::SharedCtor() {
  _cached_size_ = 0;
  property_tid_ = 0;
  exp_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_equip_soul::~db_equip_soul() {
  SharedDtor();
}

void db_equip_soul::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_equip_soul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_equip_soul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_equip_soul_descriptor_;
}

const db_equip_soul& db_equip_soul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_equip_soul* db_equip_soul::default_instance_ = NULL;

db_equip_soul* db_equip_soul::New() const {
  return new db_equip_soul;
}

void db_equip_soul::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    property_tid_ = 0;
    exp_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_equip_soul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 property_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_tid_)));
          set_has_property_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_equip_soul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 property_tid = 1;
  if (has_property_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->property_tid(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_equip_soul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 property_tid = 1;
  if (has_property_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->property_tid(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_equip_soul::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 property_tid = 1;
    if (has_property_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property_tid());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_equip_soul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_equip_soul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_equip_soul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_equip_soul::MergeFrom(const db_equip_soul& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_tid()) {
      set_property_tid(from.property_tid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_equip_soul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_equip_soul::CopyFrom(const db_equip_soul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_equip_soul::IsInitialized() const {

  return true;
}

void db_equip_soul::Swap(db_equip_soul* other) {
  if (other != this) {
    std::swap(property_tid_, other->property_tid_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_equip_soul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_equip_soul_descriptor_;
  metadata.reflection = db_equip_soul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_equip_fixed_data::kRankFieldNumber;
const int db_equip_fixed_data::kMingwensFieldNumber;
const int db_equip_fixed_data::kSoulsFieldNumber;
#endif  // !_MSC_VER

db_equip_fixed_data::db_equip_fixed_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_equip_fixed_data::InitAsDefaultInstance() {
}

db_equip_fixed_data::db_equip_fixed_data(const db_equip_fixed_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_equip_fixed_data::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_equip_fixed_data::~db_equip_fixed_data() {
  SharedDtor();
}

void db_equip_fixed_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_equip_fixed_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_equip_fixed_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_equip_fixed_data_descriptor_;
}

const db_equip_fixed_data& db_equip_fixed_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_equip_fixed_data* db_equip_fixed_data::default_instance_ = NULL;

db_equip_fixed_data* db_equip_fixed_data::New() const {
  return new db_equip_fixed_data;
}

void db_equip_fixed_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
  }
  mingwens_.Clear();
  souls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_equip_fixed_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mingwens;
        break;
      }

      // repeated int32 mingwens = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mingwens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_mingwens())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mingwens())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mingwens;
        if (input->ExpectTag(26)) goto parse_souls;
        break;
      }

      // repeated .PB.db_equip_soul souls = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_souls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_souls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_souls;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_equip_fixed_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // repeated int32 mingwens = 2;
  for (int i = 0; i < this->mingwens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->mingwens(i), output);
  }

  // repeated .PB.db_equip_soul souls = 3;
  for (int i = 0; i < this->souls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->souls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_equip_fixed_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // repeated int32 mingwens = 2;
  for (int i = 0; i < this->mingwens_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->mingwens(i), target);
  }

  // repeated .PB.db_equip_soul souls = 3;
  for (int i = 0; i < this->souls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->souls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_equip_fixed_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  // repeated int32 mingwens = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mingwens_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mingwens(i));
    }
    total_size += 1 * this->mingwens_size() + data_size;
  }

  // repeated .PB.db_equip_soul souls = 3;
  total_size += 1 * this->souls_size();
  for (int i = 0; i < this->souls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->souls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_equip_fixed_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_equip_fixed_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_equip_fixed_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_equip_fixed_data::MergeFrom(const db_equip_fixed_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  mingwens_.MergeFrom(from.mingwens_);
  souls_.MergeFrom(from.souls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_equip_fixed_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_equip_fixed_data::CopyFrom(const db_equip_fixed_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_equip_fixed_data::IsInitialized() const {

  return true;
}

void db_equip_fixed_data::Swap(db_equip_fixed_data* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    mingwens_.Swap(&other->mingwens_);
    souls_.Swap(&other->souls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_equip_fixed_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_equip_fixed_data_descriptor_;
  metadata.reflection = db_equip_fixed_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_magic_weapon_property::kPropertyTidFieldNumber;
const int db_magic_weapon_property::kExpValueFieldNumber;
const int db_magic_weapon_property::kLevelFieldNumber;
const int db_magic_weapon_property::kEndTimeFieldNumber;
const int db_magic_weapon_property::kMultimeFieldNumber;
#endif  // !_MSC_VER

db_magic_weapon_property::db_magic_weapon_property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_magic_weapon_property::InitAsDefaultInstance() {
}

db_magic_weapon_property::db_magic_weapon_property(const db_magic_weapon_property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_magic_weapon_property::SharedCtor() {
  _cached_size_ = 0;
  property_tid_ = 0;
  exp_value_ = 0;
  level_ = 0;
  end_time_ = 0;
  multime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_magic_weapon_property::~db_magic_weapon_property() {
  SharedDtor();
}

void db_magic_weapon_property::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_magic_weapon_property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_magic_weapon_property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_magic_weapon_property_descriptor_;
}

const db_magic_weapon_property& db_magic_weapon_property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_magic_weapon_property* db_magic_weapon_property::default_instance_ = NULL;

db_magic_weapon_property* db_magic_weapon_property::New() const {
  return new db_magic_weapon_property;
}

void db_magic_weapon_property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    property_tid_ = 0;
    exp_value_ = 0;
    level_ = 0;
    end_time_ = 0;
    multime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_magic_weapon_property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 property_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_tid_)));
          set_has_property_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp_value;
        break;
      }

      // optional int32 exp_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_value_)));
          set_has_exp_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // optional int32 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_multime;
        break;
      }

      // optional int32 multime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multime_)));
          set_has_multime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_magic_weapon_property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 property_tid = 1;
  if (has_property_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->property_tid(), output);
  }

  // optional int32 exp_value = 2;
  if (has_exp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp_value(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_time(), output);
  }

  // optional int32 multime = 5;
  if (has_multime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->multime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_magic_weapon_property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 property_tid = 1;
  if (has_property_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->property_tid(), target);
  }

  // optional int32 exp_value = 2;
  if (has_exp_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp_value(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_time(), target);
  }

  // optional int32 multime = 5;
  if (has_multime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->multime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_magic_weapon_property::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 property_tid = 1;
    if (has_property_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property_tid());
    }

    // optional int32 exp_value = 2;
    if (has_exp_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_value());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }

    // optional int32 multime = 5;
    if (has_multime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_magic_weapon_property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_magic_weapon_property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_magic_weapon_property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_magic_weapon_property::MergeFrom(const db_magic_weapon_property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_tid()) {
      set_property_tid(from.property_tid());
    }
    if (from.has_exp_value()) {
      set_exp_value(from.exp_value());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_multime()) {
      set_multime(from.multime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_magic_weapon_property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_magic_weapon_property::CopyFrom(const db_magic_weapon_property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_magic_weapon_property::IsInitialized() const {

  return true;
}

void db_magic_weapon_property::Swap(db_magic_weapon_property* other) {
  if (other != this) {
    std::swap(property_tid_, other->property_tid_);
    std::swap(exp_value_, other->exp_value_);
    std::swap(level_, other->level_);
    std::swap(end_time_, other->end_time_);
    std::swap(multime_, other->multime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_magic_weapon_property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_magic_weapon_property_descriptor_;
  metadata.reflection = db_magic_weapon_property_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_magic_weapon_refine_group_refine::kTrainLevelFieldNumber;
const int db_magic_weapon_refine_group_refine::kBlessingValueFieldNumber;
#endif  // !_MSC_VER

db_magic_weapon_refine_group_refine::db_magic_weapon_refine_group_refine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_magic_weapon_refine_group_refine::InitAsDefaultInstance() {
}

db_magic_weapon_refine_group_refine::db_magic_weapon_refine_group_refine(const db_magic_weapon_refine_group_refine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_magic_weapon_refine_group_refine::SharedCtor() {
  _cached_size_ = 0;
  train_level_ = 0;
  blessing_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_magic_weapon_refine_group_refine::~db_magic_weapon_refine_group_refine() {
  SharedDtor();
}

void db_magic_weapon_refine_group_refine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_magic_weapon_refine_group_refine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_magic_weapon_refine_group_refine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_magic_weapon_refine_group_refine_descriptor_;
}

const db_magic_weapon_refine_group_refine& db_magic_weapon_refine_group_refine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_magic_weapon_refine_group_refine* db_magic_weapon_refine_group_refine::default_instance_ = NULL;

db_magic_weapon_refine_group_refine* db_magic_weapon_refine_group_refine::New() const {
  return new db_magic_weapon_refine_group_refine;
}

void db_magic_weapon_refine_group_refine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    train_level_ = 0;
    blessing_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_magic_weapon_refine_group_refine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 train_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_level_)));
          set_has_train_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blessing_value;
        break;
      }

      // optional int32 blessing_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blessing_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blessing_value_)));
          set_has_blessing_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_magic_weapon_refine_group_refine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 train_level = 1;
  if (has_train_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->train_level(), output);
  }

  // optional int32 blessing_value = 2;
  if (has_blessing_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->blessing_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_magic_weapon_refine_group_refine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 train_level = 1;
  if (has_train_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->train_level(), target);
  }

  // optional int32 blessing_value = 2;
  if (has_blessing_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->blessing_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_magic_weapon_refine_group_refine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 train_level = 1;
    if (has_train_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_level());
    }

    // optional int32 blessing_value = 2;
    if (has_blessing_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blessing_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_magic_weapon_refine_group_refine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_magic_weapon_refine_group_refine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_magic_weapon_refine_group_refine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_magic_weapon_refine_group_refine::MergeFrom(const db_magic_weapon_refine_group_refine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_train_level()) {
      set_train_level(from.train_level());
    }
    if (from.has_blessing_value()) {
      set_blessing_value(from.blessing_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_magic_weapon_refine_group_refine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_magic_weapon_refine_group_refine::CopyFrom(const db_magic_weapon_refine_group_refine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_magic_weapon_refine_group_refine::IsInitialized() const {

  return true;
}

void db_magic_weapon_refine_group_refine::Swap(db_magic_weapon_refine_group_refine* other) {
  if (other != this) {
    std::swap(train_level_, other->train_level_);
    std::swap(blessing_value_, other->blessing_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_magic_weapon_refine_group_refine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_magic_weapon_refine_group_refine_descriptor_;
  metadata.reflection = db_magic_weapon_refine_group_refine_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_magic_weapon_refine_group::kRefinesFieldNumber;
#endif  // !_MSC_VER

db_magic_weapon_refine_group::db_magic_weapon_refine_group()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_magic_weapon_refine_group::InitAsDefaultInstance() {
}

db_magic_weapon_refine_group::db_magic_weapon_refine_group(const db_magic_weapon_refine_group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_magic_weapon_refine_group::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_magic_weapon_refine_group::~db_magic_weapon_refine_group() {
  SharedDtor();
}

void db_magic_weapon_refine_group::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_magic_weapon_refine_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_magic_weapon_refine_group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_magic_weapon_refine_group_descriptor_;
}

const db_magic_weapon_refine_group& db_magic_weapon_refine_group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_magic_weapon_refine_group* db_magic_weapon_refine_group::default_instance_ = NULL;

db_magic_weapon_refine_group* db_magic_weapon_refine_group::New() const {
  return new db_magic_weapon_refine_group;
}

void db_magic_weapon_refine_group::Clear() {
  refines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_magic_weapon_refine_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.db_magic_weapon.refine_group.refine refines = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_refines;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_magic_weapon_refine_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.db_magic_weapon.refine_group.refine refines = 1;
  for (int i = 0; i < this->refines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->refines(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_magic_weapon_refine_group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.db_magic_weapon.refine_group.refine refines = 1;
  for (int i = 0; i < this->refines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->refines(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_magic_weapon_refine_group::ByteSize() const {
  int total_size = 0;

  // repeated .PB.db_magic_weapon.refine_group.refine refines = 1;
  total_size += 1 * this->refines_size();
  for (int i = 0; i < this->refines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refines(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_magic_weapon_refine_group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_magic_weapon_refine_group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_magic_weapon_refine_group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_magic_weapon_refine_group::MergeFrom(const db_magic_weapon_refine_group& from) {
  GOOGLE_CHECK_NE(&from, this);
  refines_.MergeFrom(from.refines_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_magic_weapon_refine_group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_magic_weapon_refine_group::CopyFrom(const db_magic_weapon_refine_group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_magic_weapon_refine_group::IsInitialized() const {

  return true;
}

void db_magic_weapon_refine_group::Swap(db_magic_weapon_refine_group* other) {
  if (other != this) {
    refines_.Swap(&other->refines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_magic_weapon_refine_group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_magic_weapon_refine_group_descriptor_;
  metadata.reflection = db_magic_weapon_refine_group_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_magic_weapon::kMagicTidFieldNumber;
const int db_magic_weapon::kActiveFieldNumber;
const int db_magic_weapon::kPropertiesFieldNumber;
const int db_magic_weapon::kRefineGroupsFieldNumber;
#endif  // !_MSC_VER

db_magic_weapon::db_magic_weapon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_magic_weapon::InitAsDefaultInstance() {
}

db_magic_weapon::db_magic_weapon(const db_magic_weapon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_magic_weapon::SharedCtor() {
  _cached_size_ = 0;
  magic_tid_ = 0;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_magic_weapon::~db_magic_weapon() {
  SharedDtor();
}

void db_magic_weapon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_magic_weapon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_magic_weapon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_magic_weapon_descriptor_;
}

const db_magic_weapon& db_magic_weapon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_magic_weapon* db_magic_weapon::default_instance_ = NULL;

db_magic_weapon* db_magic_weapon::New() const {
  return new db_magic_weapon;
}

void db_magic_weapon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    magic_tid_ = 0;
    active_ = false;
  }
  properties_.Clear();
  refine_groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_magic_weapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 magic_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_tid_)));
          set_has_magic_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active;
        break;
      }

      // optional bool active = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_properties;
        break;
      }

      // repeated .PB.db_magic_weapon.property properties = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_properties;
        if (input->ExpectTag(34)) goto parse_refine_groups;
        break;
      }

      // repeated .PB.db_magic_weapon.refine_group refine_groups = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refine_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refine_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_refine_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_magic_weapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 magic_tid = 1;
  if (has_magic_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->magic_tid(), output);
  }

  // optional bool active = 2;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  // repeated .PB.db_magic_weapon.property properties = 3;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->properties(i), output);
  }

  // repeated .PB.db_magic_weapon.refine_group refine_groups = 4;
  for (int i = 0; i < this->refine_groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->refine_groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_magic_weapon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 magic_tid = 1;
  if (has_magic_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->magic_tid(), target);
  }

  // optional bool active = 2;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  // repeated .PB.db_magic_weapon.property properties = 3;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->properties(i), target);
  }

  // repeated .PB.db_magic_weapon.refine_group refine_groups = 4;
  for (int i = 0; i < this->refine_groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->refine_groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_magic_weapon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 magic_tid = 1;
    if (has_magic_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic_tid());
    }

    // optional bool active = 2;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  // repeated .PB.db_magic_weapon.property properties = 3;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  // repeated .PB.db_magic_weapon.refine_group refine_groups = 4;
  total_size += 1 * this->refine_groups_size();
  for (int i = 0; i < this->refine_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refine_groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_magic_weapon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_magic_weapon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_magic_weapon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_magic_weapon::MergeFrom(const db_magic_weapon& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  refine_groups_.MergeFrom(from.refine_groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_magic_tid()) {
      set_magic_tid(from.magic_tid());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_magic_weapon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_magic_weapon::CopyFrom(const db_magic_weapon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_magic_weapon::IsInitialized() const {

  return true;
}

void db_magic_weapon::Swap(db_magic_weapon* other) {
  if (other != this) {
    std::swap(magic_tid_, other->magic_tid_);
    std::swap(active_, other->active_);
    properties_.Swap(&other->properties_);
    refine_groups_.Swap(&other->refine_groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_magic_weapon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_magic_weapon_descriptor_;
  metadata.reflection = db_magic_weapon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_magic_weapons::kWeaponsFieldNumber;
const int db_magic_weapons::kSummonedWeaponTidFieldNumber;
#endif  // !_MSC_VER

db_magic_weapons::db_magic_weapons()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_magic_weapons::InitAsDefaultInstance() {
}

db_magic_weapons::db_magic_weapons(const db_magic_weapons& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_magic_weapons::SharedCtor() {
  _cached_size_ = 0;
  summoned_weapon_tid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_magic_weapons::~db_magic_weapons() {
  SharedDtor();
}

void db_magic_weapons::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_magic_weapons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_magic_weapons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_magic_weapons_descriptor_;
}

const db_magic_weapons& db_magic_weapons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_magic_weapons* db_magic_weapons::default_instance_ = NULL;

db_magic_weapons* db_magic_weapons::New() const {
  return new db_magic_weapons;
}

void db_magic_weapons::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    summoned_weapon_tid_ = 0;
  }
  weapons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_magic_weapons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.db_magic_weapon weapons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weapons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weapons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_weapons;
        if (input->ExpectTag(16)) goto parse_summoned_weapon_tid;
        break;
      }

      // optional int32 summoned_weapon_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_summoned_weapon_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &summoned_weapon_tid_)));
          set_has_summoned_weapon_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_magic_weapons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.db_magic_weapon weapons = 1;
  for (int i = 0; i < this->weapons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->weapons(i), output);
  }

  // optional int32 summoned_weapon_tid = 2;
  if (has_summoned_weapon_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->summoned_weapon_tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_magic_weapons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.db_magic_weapon weapons = 1;
  for (int i = 0; i < this->weapons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->weapons(i), target);
  }

  // optional int32 summoned_weapon_tid = 2;
  if (has_summoned_weapon_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->summoned_weapon_tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_magic_weapons::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 summoned_weapon_tid = 2;
    if (has_summoned_weapon_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->summoned_weapon_tid());
    }

  }
  // repeated .PB.db_magic_weapon weapons = 1;
  total_size += 1 * this->weapons_size();
  for (int i = 0; i < this->weapons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weapons(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_magic_weapons::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_magic_weapons* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_magic_weapons*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_magic_weapons::MergeFrom(const db_magic_weapons& from) {
  GOOGLE_CHECK_NE(&from, this);
  weapons_.MergeFrom(from.weapons_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_summoned_weapon_tid()) {
      set_summoned_weapon_tid(from.summoned_weapon_tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_magic_weapons::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_magic_weapons::CopyFrom(const db_magic_weapons& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_magic_weapons::IsInitialized() const {

  return true;
}

void db_magic_weapons::Swap(db_magic_weapons* other) {
  if (other != this) {
    weapons_.Swap(&other->weapons_);
    std::swap(summoned_weapon_tid_, other->summoned_weapon_tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_magic_weapons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_magic_weapons_descriptor_;
  metadata.reflection = db_magic_weapons_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_general_soul::kGeneralTidFieldNumber;
const int db_general_soul::kLevelFieldNumber;
const int db_general_soul::kExperienceFieldNumber;
const int db_general_soul::kInventoryFieldNumber;
const int db_general_soul::kSoulHolesFieldNumber;
#endif  // !_MSC_VER

db_general_soul::db_general_soul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_general_soul::InitAsDefaultInstance() {
  inventory_ = const_cast< ::PB::general_list*>(&::PB::general_list::default_instance());
  soul_holes_ = const_cast< ::PB::general_list*>(&::PB::general_list::default_instance());
}

db_general_soul::db_general_soul(const db_general_soul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_general_soul::SharedCtor() {
  _cached_size_ = 0;
  general_tid_ = 0;
  level_ = 0;
  experience_ = 0;
  inventory_ = NULL;
  soul_holes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_general_soul::~db_general_soul() {
  SharedDtor();
}

void db_general_soul::SharedDtor() {
  if (this != default_instance_) {
    delete inventory_;
    delete soul_holes_;
  }
}

void db_general_soul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_general_soul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_general_soul_descriptor_;
}

const db_general_soul& db_general_soul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_general_soul* db_general_soul::default_instance_ = NULL;

db_general_soul* db_general_soul::New() const {
  return new db_general_soul;
}

void db_general_soul::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    general_tid_ = 0;
    level_ = 0;
    experience_ = 0;
    if (has_inventory()) {
      if (inventory_ != NULL) inventory_->::PB::general_list::Clear();
    }
    if (has_soul_holes()) {
      if (soul_holes_ != NULL) soul_holes_->::PB::general_list::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_general_soul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 general_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &general_tid_)));
          set_has_general_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_experience;
        break;
      }

      // optional int32 experience = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_inventory;
        break;
      }

      // optional .PB.general_list inventory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inventory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inventory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_soul_holes;
        break;
      }

      // optional .PB.general_list soul_holes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soul_holes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soul_holes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_general_soul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 general_tid = 1;
  if (has_general_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->general_tid(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 experience = 3;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->experience(), output);
  }

  // optional .PB.general_list inventory = 4;
  if (has_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->inventory(), output);
  }

  // optional .PB.general_list soul_holes = 5;
  if (has_soul_holes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->soul_holes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_general_soul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 general_tid = 1;
  if (has_general_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->general_tid(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 experience = 3;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->experience(), target);
  }

  // optional .PB.general_list inventory = 4;
  if (has_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->inventory(), target);
  }

  // optional .PB.general_list soul_holes = 5;
  if (has_soul_holes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->soul_holes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_general_soul::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 general_tid = 1;
    if (has_general_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->general_tid());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 experience = 3;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience());
    }

    // optional .PB.general_list inventory = 4;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inventory());
    }

    // optional .PB.general_list soul_holes = 5;
    if (has_soul_holes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soul_holes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_general_soul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_general_soul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_general_soul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_general_soul::MergeFrom(const db_general_soul& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_general_tid()) {
      set_general_tid(from.general_tid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_inventory()) {
      mutable_inventory()->::PB::general_list::MergeFrom(from.inventory());
    }
    if (from.has_soul_holes()) {
      mutable_soul_holes()->::PB::general_list::MergeFrom(from.soul_holes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_general_soul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_general_soul::CopyFrom(const db_general_soul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_general_soul::IsInitialized() const {

  return true;
}

void db_general_soul::Swap(db_general_soul* other) {
  if (other != this) {
    std::swap(general_tid_, other->general_tid_);
    std::swap(level_, other->level_);
    std::swap(experience_, other->experience_);
    std::swap(inventory_, other->inventory_);
    std::swap(soul_holes_, other->soul_holes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_general_soul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_general_soul_descriptor_;
  metadata.reflection = db_general_soul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_general_souls::kGeneralsFieldNumber;
#endif  // !_MSC_VER

db_general_souls::db_general_souls()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_general_souls::InitAsDefaultInstance() {
}

db_general_souls::db_general_souls(const db_general_souls& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_general_souls::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_general_souls::~db_general_souls() {
  SharedDtor();
}

void db_general_souls::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_general_souls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_general_souls::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_general_souls_descriptor_;
}

const db_general_souls& db_general_souls::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

db_general_souls* db_general_souls::default_instance_ = NULL;

db_general_souls* db_general_souls::New() const {
  return new db_general_souls;
}

void db_general_souls::Clear() {
  generals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_general_souls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.db_general_soul generals = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_generals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_generals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_general_souls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.db_general_soul generals = 1;
  for (int i = 0; i < this->generals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->generals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_general_souls::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.db_general_soul generals = 1;
  for (int i = 0; i < this->generals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->generals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_general_souls::ByteSize() const {
  int total_size = 0;

  // repeated .PB.db_general_soul generals = 1;
  total_size += 1 * this->generals_size();
  for (int i = 0; i < this->generals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->generals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_general_souls::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_general_souls* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_general_souls*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_general_souls::MergeFrom(const db_general_souls& from) {
  GOOGLE_CHECK_NE(&from, this);
  generals_.MergeFrom(from.generals_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_general_souls::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_general_souls::CopyFrom(const db_general_souls& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_general_souls::IsInitialized() const {

  return true;
}

void db_general_souls::Swap(db_general_souls* other) {
  if (other != this) {
    generals_.Swap(&other->generals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_general_souls::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_general_souls_descriptor_;
  metadata.reflection = db_general_souls_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wine_game_history::kGameTimeFieldNumber;
const int wine_game_history::kMineStatusFieldNumber;
const int wine_game_history::kPeerStatusFieldNumber;
const int wine_game_history::kGameResultFieldNumber;
const int wine_game_history::kPeerInfoFieldNumber;
#endif  // !_MSC_VER

wine_game_history::wine_game_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wine_game_history::InitAsDefaultInstance() {
  peer_info_ = const_cast< ::PB::player_id_name*>(&::PB::player_id_name::default_instance());
}

wine_game_history::wine_game_history(const wine_game_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wine_game_history::SharedCtor() {
  _cached_size_ = 0;
  game_time_ = 0;
  mine_status_ = 0;
  peer_status_ = 0;
  game_result_ = 0;
  peer_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wine_game_history::~wine_game_history() {
  SharedDtor();
}

void wine_game_history::SharedDtor() {
  if (this != default_instance_) {
    delete peer_info_;
  }
}

void wine_game_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wine_game_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wine_game_history_descriptor_;
}

const wine_game_history& wine_game_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

wine_game_history* wine_game_history::default_instance_ = NULL;

wine_game_history* wine_game_history::New() const {
  return new wine_game_history;
}

void wine_game_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_time_ = 0;
    mine_status_ = 0;
    peer_status_ = 0;
    game_result_ = 0;
    if (has_peer_info()) {
      if (peer_info_ != NULL) peer_info_->::PB::player_id_name::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wine_game_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mine_status;
        break;
      }

      // optional int32 mine_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mine_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mine_status_)));
          set_has_mine_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_peer_status;
        break;
      }

      // optional int32 peer_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peer_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peer_status_)));
          set_has_peer_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_result;
        break;
      }

      // optional int32 game_result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_result_)));
          set_has_game_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_peer_info;
        break;
      }

      // optional .PB.player_id_name peer_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wine_game_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_time = 1;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_time(), output);
  }

  // optional int32 mine_status = 2;
  if (has_mine_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mine_status(), output);
  }

  // optional int32 peer_status = 3;
  if (has_peer_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->peer_status(), output);
  }

  // optional int32 game_result = 4;
  if (has_game_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_result(), output);
  }

  // optional .PB.player_id_name peer_info = 5;
  if (has_peer_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->peer_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wine_game_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_time = 1;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_time(), target);
  }

  // optional int32 mine_status = 2;
  if (has_mine_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mine_status(), target);
  }

  // optional int32 peer_status = 3;
  if (has_peer_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->peer_status(), target);
  }

  // optional int32 game_result = 4;
  if (has_game_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_result(), target);
  }

  // optional .PB.player_id_name peer_info = 5;
  if (has_peer_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->peer_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wine_game_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_time = 1;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional int32 mine_status = 2;
    if (has_mine_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mine_status());
    }

    // optional int32 peer_status = 3;
    if (has_peer_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peer_status());
    }

    // optional int32 game_result = 4;
    if (has_game_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_result());
    }

    // optional .PB.player_id_name peer_info = 5;
    if (has_peer_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peer_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wine_game_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wine_game_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wine_game_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wine_game_history::MergeFrom(const wine_game_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_mine_status()) {
      set_mine_status(from.mine_status());
    }
    if (from.has_peer_status()) {
      set_peer_status(from.peer_status());
    }
    if (from.has_game_result()) {
      set_game_result(from.game_result());
    }
    if (from.has_peer_info()) {
      mutable_peer_info()->::PB::player_id_name::MergeFrom(from.peer_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wine_game_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wine_game_history::CopyFrom(const wine_game_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wine_game_history::IsInitialized() const {

  return true;
}

void wine_game_history::Swap(wine_game_history* other) {
  if (other != this) {
    std::swap(game_time_, other->game_time_);
    std::swap(mine_status_, other->mine_status_);
    std::swap(peer_status_, other->peer_status_);
    std::swap(game_result_, other->game_result_);
    std::swap(peer_info_, other->peer_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wine_game_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wine_game_history_descriptor_;
  metadata.reflection = wine_game_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pixiu_service_buy_record::kProductIdFieldNumber;
const int pixiu_service_buy_record::kCountsFieldNumber;
#endif  // !_MSC_VER

pixiu_service_buy_record::pixiu_service_buy_record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pixiu_service_buy_record::InitAsDefaultInstance() {
}

pixiu_service_buy_record::pixiu_service_buy_record(const pixiu_service_buy_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pixiu_service_buy_record::SharedCtor() {
  _cached_size_ = 0;
  product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  counts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pixiu_service_buy_record::~pixiu_service_buy_record() {
  SharedDtor();
}

void pixiu_service_buy_record::SharedDtor() {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    delete product_id_;
  }
  if (this != default_instance_) {
  }
}

void pixiu_service_buy_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pixiu_service_buy_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pixiu_service_buy_record_descriptor_;
}

const pixiu_service_buy_record& pixiu_service_buy_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

pixiu_service_buy_record* pixiu_service_buy_record::default_instance_ = NULL;

pixiu_service_buy_record* pixiu_service_buy_record::New() const {
  return new pixiu_service_buy_record;
}

void pixiu_service_buy_record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_product_id()) {
      if (product_id_ != &::google::protobuf::internal::kEmptyString) {
        product_id_->clear();
      }
    }
    counts_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pixiu_service_buy_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes product_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_product_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional int32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pixiu_service_buy_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes product_id = 1;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->product_id(), output);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->counts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pixiu_service_buy_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes product_id = 1;
  if (has_product_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->product_id(), target);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pixiu_service_buy_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes product_id = 1;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->product_id());
    }

    // optional int32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pixiu_service_buy_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pixiu_service_buy_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pixiu_service_buy_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pixiu_service_buy_record::MergeFrom(const pixiu_service_buy_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_product_id()) {
      set_product_id(from.product_id());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pixiu_service_buy_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pixiu_service_buy_record::CopyFrom(const pixiu_service_buy_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pixiu_service_buy_record::IsInitialized() const {

  return true;
}

void pixiu_service_buy_record::Swap(pixiu_service_buy_record* other) {
  if (other != this) {
    std::swap(product_id_, other->product_id_);
    std::swap(counts_, other->counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pixiu_service_buy_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pixiu_service_buy_record_descriptor_;
  metadata.reflection = pixiu_service_buy_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_test::kTypeFieldNumber;
#endif  // !_MSC_VER

npt_test::npt_test()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_test::InitAsDefaultInstance() {
}

npt_test::npt_test(const npt_test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_test::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_test::~npt_test() {
  SharedDtor();
}

void npt_test::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_test_descriptor_;
}

const npt_test& npt_test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_test* npt_test::default_instance_ = NULL;

npt_test* npt_test::New() const {
  return new npt_test;
}

void npt_test::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEST];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEST];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEST];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_test::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEST];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_test::MergeFrom(const npt_test& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_test::CopyFrom(const npt_test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_test::IsInitialized() const {

  return true;
}

void npt_test::Swap(npt_test* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_test_descriptor_;
  metadata.reflection = npt_test_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_response::kTypeFieldNumber;
const int npt_response::kRetcodeFieldNumber;
const int npt_response::kRequestTypeFieldNumber;
const int npt_response::kParam1FieldNumber;
#endif  // !_MSC_VER

npt_response::npt_response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_response::InitAsDefaultInstance() {
}

npt_response::npt_response(const npt_response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_response::SharedCtor() {
  _cached_size_ = 0;
  type_ = 3;
  retcode_ = 0;
  request_type_ = 0;
  param1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_response::~npt_response() {
  SharedDtor();
}

void npt_response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_response_descriptor_;
}

const npt_response& npt_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_response* npt_response::default_instance_ = NULL;

npt_response* npt_response::New() const {
  return new npt_response;
}

void npt_response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 3;
    retcode_ = 0;
    request_type_ = 0;
    param1_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RESPONSE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retcode;
        break;
      }

      // required int32 retcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param1;
        break;
      }

      // optional int32 param1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RESPONSE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 retcode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retcode(), output);
  }

  // optional int32 request_type = 3;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_type(), output);
  }

  // optional int32 param1 = 4;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->param1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RESPONSE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 retcode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retcode(), target);
  }

  // optional int32 request_type = 3;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_type(), target);
  }

  // optional int32 param1 = 4;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->param1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_RESPONSE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 retcode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 request_type = 3;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional int32 param1 = 4;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_response::MergeFrom(const npt_response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_response::CopyFrom(const npt_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void npt_response::Swap(npt_response* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(retcode_, other->retcode_);
    std::swap(request_type_, other->request_type_);
    std::swap(param1_, other->param1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_response_descriptor_;
  metadata.reflection = npt_response_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* npt_corps_appoint_CORPS_APPOINT_OP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_corps_appoint_CORPS_APPOINT_OP_descriptor_;
}
bool npt_corps_appoint_CORPS_APPOINT_OP_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_ADD;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_DEL;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_APPOINT;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_DISMISS;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_QUIT;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_ANNOUNCE;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_UPGRADE;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_ABDICATE;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_ACTIVITY;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_INVITE;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_REJECT;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_AGREE;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_GETDATA;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_BRIEF;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_CONTRI;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_UPGRADE_SKILL;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_UPGRADE_SHOP;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_UPGRADE_SKILL2;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_ATTR;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_SUMMON;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_FIRE;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_CHARIOT;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_UP_CHA;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_RECL_CHA;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_APPOINT_OP_MIN;
const npt_corps_appoint_CORPS_APPOINT_OP npt_corps_appoint::CORPS_APPOINT_OP_MAX;
const int npt_corps_appoint::CORPS_APPOINT_OP_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int npt_corps_appoint::kTypeFieldNumber;
const int npt_corps_appoint::kDstFieldNumber;
const int npt_corps_appoint::kOpFieldNumber;
const int npt_corps_appoint::kPosFieldNumber;
const int npt_corps_appoint::kAnnounceFieldNumber;
const int npt_corps_appoint::kSrcnameFieldNumber;
const int npt_corps_appoint::kDstnameFieldNumber;
const int npt_corps_appoint::kSrcFieldNumber;
const int npt_corps_appoint::kCorpsnameFieldNumber;
const int npt_corps_appoint::kMemberFieldNumber;
const int npt_corps_appoint::kContriMoneyFieldNumber;
const int npt_corps_appoint::kCurMoneyFieldNumber;
const int npt_corps_appoint::kSkillLevelFieldNumber;
const int npt_corps_appoint::kSkillIndexFieldNumber;
const int npt_corps_appoint::kCorpsIdFieldNumber;
const int npt_corps_appoint::kAttrFieldNumber;
const int npt_corps_appoint::kTidFieldNumber;
const int npt_corps_appoint::kIndexFieldNumber;
const int npt_corps_appoint::kMoneyFieldNumber;
#endif  // !_MSC_VER

npt_corps_appoint::npt_corps_appoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_corps_appoint::InitAsDefaultInstance() {
  member_ = const_cast< ::PB::corps_member*>(&::PB::corps_member::default_instance());
  attr_ = const_cast< ::PB::corp_attribute*>(&::PB::corp_attribute::default_instance());
}

npt_corps_appoint::npt_corps_appoint(const npt_corps_appoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_corps_appoint::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  dst_ = GOOGLE_LONGLONG(0);
  op_ = 1;
  pos_ = 0;
  announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_ = GOOGLE_LONGLONG(0);
  corpsname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  member_ = NULL;
  contri_money_ = GOOGLE_LONGLONG(0);
  cur_money_ = GOOGLE_LONGLONG(0);
  skill_level_ = 0u;
  skill_index_ = 0u;
  corps_id_ = 0u;
  attr_ = NULL;
  tid_ = 0;
  index_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_corps_appoint::~npt_corps_appoint() {
  SharedDtor();
}

void npt_corps_appoint::SharedDtor() {
  if (announce_ != &::google::protobuf::internal::kEmptyString) {
    delete announce_;
  }
  if (srcname_ != &::google::protobuf::internal::kEmptyString) {
    delete srcname_;
  }
  if (dstname_ != &::google::protobuf::internal::kEmptyString) {
    delete dstname_;
  }
  if (corpsname_ != &::google::protobuf::internal::kEmptyString) {
    delete corpsname_;
  }
  if (this != default_instance_) {
    delete member_;
    delete attr_;
  }
}

void npt_corps_appoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_corps_appoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_corps_appoint_descriptor_;
}

const npt_corps_appoint& npt_corps_appoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_corps_appoint* npt_corps_appoint::default_instance_ = NULL;

npt_corps_appoint* npt_corps_appoint::New() const {
  return new npt_corps_appoint;
}

void npt_corps_appoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 2;
    dst_ = GOOGLE_LONGLONG(0);
    op_ = 1;
    pos_ = 0;
    if (has_announce()) {
      if (announce_ != &::google::protobuf::internal::kEmptyString) {
        announce_->clear();
      }
    }
    if (has_srcname()) {
      if (srcname_ != &::google::protobuf::internal::kEmptyString) {
        srcname_->clear();
      }
    }
    if (has_dstname()) {
      if (dstname_ != &::google::protobuf::internal::kEmptyString) {
        dstname_->clear();
      }
    }
    src_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_corpsname()) {
      if (corpsname_ != &::google::protobuf::internal::kEmptyString) {
        corpsname_->clear();
      }
    }
    if (has_member()) {
      if (member_ != NULL) member_->::PB::corps_member::Clear();
    }
    contri_money_ = GOOGLE_LONGLONG(0);
    cur_money_ = GOOGLE_LONGLONG(0);
    skill_level_ = 0u;
    skill_index_ = 0u;
    corps_id_ = 0u;
    if (has_attr()) {
      if (attr_ != NULL) attr_->::PB::corp_attribute::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tid_ = 0;
    index_ = 0;
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_corps_appoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_APPOINT];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst;
        break;
      }

      // required int64 dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_)));
          set_has_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_op;
        break;
      }

      // required .PB.npt_corps_appoint.CORPS_APPOINT_OP op = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::npt_corps_appoint_CORPS_APPOINT_OP_IsValid(value)) {
            set_op(static_cast< ::PB::npt_corps_appoint_CORPS_APPOINT_OP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional int32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_announce;
        break;
      }

      // optional bytes announce = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_announce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_announce()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_srcname;
        break;
      }

      // optional bytes srcname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srcname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_srcname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dstname;
        break;
      }

      // optional bytes dstname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dstname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dstname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_src;
        break;
      }

      // optional int64 src = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_corpsname;
        break;
      }

      // optional bytes corpsname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corpsname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_corpsname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_member;
        break;
      }

      // optional .PB.corps_member member = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_contri_money;
        break;
      }

      // optional int64 contri_money = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contri_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contri_money_)));
          set_has_contri_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cur_money;
        break;
      }

      // optional int64 cur_money = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_money_)));
          set_has_cur_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_skill_level;
        break;
      }

      // optional uint32 skill_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_skill_index;
        break;
      }

      // optional uint32 skill_index = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_index_)));
          set_has_skill_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_corps_id;
        break;
      }

      // optional uint32 corps_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_id_)));
          set_has_corps_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_attr;
        break;
      }

      // optional .PB.corp_attribute attr = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_tid;
        break;
      }

      // optional int32 tid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_index;
        break;
      }

      // optional int32 index = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_money;
        break;
      }

      // optional int64 money = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_corps_appoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_APPOINT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int64 dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dst(), output);
  }

  // required .PB.npt_corps_appoint.CORPS_APPOINT_OP op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->op(), output);
  }

  // optional int32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos(), output);
  }

  // optional bytes announce = 5;
  if (has_announce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->announce(), output);
  }

  // optional bytes srcname = 6;
  if (has_srcname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->srcname(), output);
  }

  // optional bytes dstname = 7;
  if (has_dstname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->dstname(), output);
  }

  // optional int64 src = 8;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->src(), output);
  }

  // optional bytes corpsname = 9;
  if (has_corpsname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->corpsname(), output);
  }

  // optional .PB.corps_member member = 10;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->member(), output);
  }

  // optional int64 contri_money = 11;
  if (has_contri_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->contri_money(), output);
  }

  // optional int64 cur_money = 12;
  if (has_cur_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->cur_money(), output);
  }

  // optional uint32 skill_level = 13;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->skill_level(), output);
  }

  // optional uint32 skill_index = 14;
  if (has_skill_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->skill_index(), output);
  }

  // optional uint32 corps_id = 15;
  if (has_corps_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->corps_id(), output);
  }

  // optional .PB.corp_attribute attr = 16;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->attr(), output);
  }

  // optional int32 tid = 17;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->tid(), output);
  }

  // optional int32 index = 18;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->index(), output);
  }

  // optional int64 money = 19;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_corps_appoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_APPOINT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int64 dst = 2;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dst(), target);
  }

  // required .PB.npt_corps_appoint.CORPS_APPOINT_OP op = 3;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->op(), target);
  }

  // optional int32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos(), target);
  }

  // optional bytes announce = 5;
  if (has_announce()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->announce(), target);
  }

  // optional bytes srcname = 6;
  if (has_srcname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->srcname(), target);
  }

  // optional bytes dstname = 7;
  if (has_dstname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->dstname(), target);
  }

  // optional int64 src = 8;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->src(), target);
  }

  // optional bytes corpsname = 9;
  if (has_corpsname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->corpsname(), target);
  }

  // optional .PB.corps_member member = 10;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->member(), target);
  }

  // optional int64 contri_money = 11;
  if (has_contri_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->contri_money(), target);
  }

  // optional int64 cur_money = 12;
  if (has_cur_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->cur_money(), target);
  }

  // optional uint32 skill_level = 13;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->skill_level(), target);
  }

  // optional uint32 skill_index = 14;
  if (has_skill_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->skill_index(), target);
  }

  // optional uint32 corps_id = 15;
  if (has_corps_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->corps_id(), target);
  }

  // optional .PB.corp_attribute attr = 16;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->attr(), target);
  }

  // optional int32 tid = 17;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->tid(), target);
  }

  // optional int32 index = 18;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->index(), target);
  }

  // optional int64 money = 19;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_corps_appoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_APPOINT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst());
    }

    // required .PB.npt_corps_appoint.CORPS_APPOINT_OP op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // optional int32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional bytes announce = 5;
    if (has_announce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->announce());
    }

    // optional bytes srcname = 6;
    if (has_srcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->srcname());
    }

    // optional bytes dstname = 7;
    if (has_dstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dstname());
    }

    // optional int64 src = 8;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes corpsname = 9;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->corpsname());
    }

    // optional .PB.corps_member member = 10;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

    // optional int64 contri_money = 11;
    if (has_contri_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contri_money());
    }

    // optional int64 cur_money = 12;
    if (has_cur_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_money());
    }

    // optional uint32 skill_level = 13;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional uint32 skill_index = 14;
    if (has_skill_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_index());
    }

    // optional uint32 corps_id = 15;
    if (has_corps_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps_id());
    }

    // optional .PB.corp_attribute attr = 16;
    if (has_attr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 tid = 17;
    if (has_tid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 index = 18;
    if (has_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int64 money = 19;
    if (has_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_corps_appoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_corps_appoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_corps_appoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_corps_appoint::MergeFrom(const npt_corps_appoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_announce()) {
      set_announce(from.announce());
    }
    if (from.has_srcname()) {
      set_srcname(from.srcname());
    }
    if (from.has_dstname()) {
      set_dstname(from.dstname());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_corpsname()) {
      set_corpsname(from.corpsname());
    }
    if (from.has_member()) {
      mutable_member()->::PB::corps_member::MergeFrom(from.member());
    }
    if (from.has_contri_money()) {
      set_contri_money(from.contri_money());
    }
    if (from.has_cur_money()) {
      set_cur_money(from.cur_money());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_skill_index()) {
      set_skill_index(from.skill_index());
    }
    if (from.has_corps_id()) {
      set_corps_id(from.corps_id());
    }
    if (from.has_attr()) {
      mutable_attr()->::PB::corp_attribute::MergeFrom(from.attr());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_corps_appoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_corps_appoint::CopyFrom(const npt_corps_appoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_corps_appoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_member()) {
    if (!this->member().IsInitialized()) return false;
  }
  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  return true;
}

void npt_corps_appoint::Swap(npt_corps_appoint* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(dst_, other->dst_);
    std::swap(op_, other->op_);
    std::swap(pos_, other->pos_);
    std::swap(announce_, other->announce_);
    std::swap(srcname_, other->srcname_);
    std::swap(dstname_, other->dstname_);
    std::swap(src_, other->src_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(member_, other->member_);
    std::swap(contri_money_, other->contri_money_);
    std::swap(cur_money_, other->cur_money_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(skill_index_, other->skill_index_);
    std::swap(corps_id_, other->corps_id_);
    std::swap(attr_, other->attr_);
    std::swap(tid_, other->tid_);
    std::swap(index_, other->index_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_corps_appoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_corps_appoint_descriptor_;
  metadata.reflection = npt_corps_appoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_apply_corps::kTypeFieldNumber;
const int npt_apply_corps::kIdFieldNumber;
const int npt_apply_corps::kApplyFieldNumber;
#endif  // !_MSC_VER

npt_apply_corps::npt_apply_corps()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_apply_corps::InitAsDefaultInstance() {
  apply_ = const_cast< ::PB::corps_apply_t*>(&::PB::corps_apply_t::default_instance());
}

npt_apply_corps::npt_apply_corps(const npt_apply_corps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_apply_corps::SharedCtor() {
  _cached_size_ = 0;
  type_ = 4;
  id_ = 0;
  apply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_apply_corps::~npt_apply_corps() {
  SharedDtor();
}

void npt_apply_corps::SharedDtor() {
  if (this != default_instance_) {
    delete apply_;
  }
}

void npt_apply_corps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_apply_corps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_apply_corps_descriptor_;
}

const npt_apply_corps& npt_apply_corps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_apply_corps* npt_apply_corps::default_instance_ = NULL;

npt_apply_corps* npt_apply_corps::New() const {
  return new npt_apply_corps;
}

void npt_apply_corps::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 4;
    id_ = 0;
    if (has_apply()) {
      if (apply_ != NULL) apply_->::PB::corps_apply_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_apply_corps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_APPLY_CORPS];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_apply;
        break;
      }

      // optional .PB.corps_apply_t apply = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_apply_corps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_APPLY_CORPS];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .PB.corps_apply_t apply = 3;
  if (has_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->apply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_apply_corps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_APPLY_CORPS];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .PB.corps_apply_t apply = 3;
  if (has_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->apply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_apply_corps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_APPLY_CORPS];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .PB.corps_apply_t apply = 3;
    if (has_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_apply_corps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_apply_corps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_apply_corps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_apply_corps::MergeFrom(const npt_apply_corps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_apply()) {
      mutable_apply()->::PB::corps_apply_t::MergeFrom(from.apply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_apply_corps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_apply_corps::CopyFrom(const npt_apply_corps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_apply_corps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_apply()) {
    if (!this->apply().IsInitialized()) return false;
  }
  return true;
}

void npt_apply_corps::Swap(npt_apply_corps* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(apply_, other->apply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_apply_corps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_apply_corps_descriptor_;
  metadata.reflection = npt_apply_corps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_corps_data::kTypeFieldNumber;
const int npt_corps_data::kDataFieldNumber;
const int npt_corps_data::kMembersFieldNumber;
const int npt_corps_data::kMembersCountFieldNumber;
#endif  // !_MSC_VER

npt_corps_data::npt_corps_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_corps_data::InitAsDefaultInstance() {
  data_ = const_cast< ::PB::corps_struct*>(&::PB::corps_struct::default_instance());
}

npt_corps_data::npt_corps_data(const npt_corps_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_corps_data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 5;
  data_ = NULL;
  members_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_corps_data::~npt_corps_data() {
  SharedDtor();
}

void npt_corps_data::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void npt_corps_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_corps_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_corps_data_descriptor_;
}

const npt_corps_data& npt_corps_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_corps_data* npt_corps_data::default_instance_ = NULL;

npt_corps_data* npt_corps_data::New() const {
  return new npt_corps_data;
}

void npt_corps_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 5;
    if (has_data()) {
      if (data_ != NULL) data_->::PB::corps_struct::Clear();
    }
    members_count_ = 0;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_corps_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_DATA];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .PB.corps_struct data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        break;
      }

      // repeated .PB.corps_member members = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        if (input->ExpectTag(32)) goto parse_members_count;
        break;
      }

      // optional int32 members_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_members_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &members_count_)));
          set_has_members_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_corps_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_DATA];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .PB.corps_struct data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // repeated .PB.corps_member members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->members(i), output);
  }

  // optional int32 members_count = 4;
  if (has_members_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->members_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_corps_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_DATA];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .PB.corps_struct data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // repeated .PB.corps_member members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->members(i), target);
  }

  // optional int32 members_count = 4;
  if (has_members_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->members_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_corps_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_CORPS_DATA];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .PB.corps_struct data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int32 members_count = 4;
    if (has_members_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->members_count());
    }

  }
  // repeated .PB.corps_member members = 3;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_corps_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_corps_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_corps_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_corps_data::MergeFrom(const npt_corps_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::PB::corps_struct::MergeFrom(from.data());
    }
    if (from.has_members_count()) {
      set_members_count(from.members_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_corps_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_corps_data::CopyFrom(const npt_corps_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_corps_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  for (int i = 0; i < members_size(); i++) {
    if (!this->members(i).IsInitialized()) return false;
  }
  return true;
}

void npt_corps_data::Swap(npt_corps_data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    members_.Swap(&other->members_);
    std::swap(members_count_, other->members_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_corps_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_corps_data_descriptor_;
  metadata.reflection = npt_corps_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int name_ruid::kIdFieldNumber;
const int name_ruid::kNameFieldNumber;
#endif  // !_MSC_VER

name_ruid::name_ruid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void name_ruid::InitAsDefaultInstance() {
}

name_ruid::name_ruid(const name_ruid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void name_ruid::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

name_ruid::~name_ruid() {
  SharedDtor();
}

void name_ruid::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void name_ruid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* name_ruid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return name_ruid_descriptor_;
}

const name_ruid& name_ruid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

name_ruid* name_ruid::default_instance_ = NULL;

name_ruid* name_ruid::New() const {
  return new name_ruid;
}

void name_ruid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool name_ruid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void name_ruid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* name_ruid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int name_ruid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void name_ruid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const name_ruid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const name_ruid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void name_ruid::MergeFrom(const name_ruid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void name_ruid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void name_ruid::CopyFrom(const name_ruid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool name_ruid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void name_ruid::Swap(name_ruid* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata name_ruid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = name_ruid_descriptor_;
  metadata.reflection = name_ruid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_common_search_search_corps_key::kHasValueFieldNumber;
const int npt_common_search_search_corps_key::kLevelFieldNumber;
const int npt_common_search_search_corps_key::kNationFieldNumber;
const int npt_common_search_search_corps_key::kNameFieldNumber;
#endif  // !_MSC_VER

npt_common_search_search_corps_key::npt_common_search_search_corps_key()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_common_search_search_corps_key::InitAsDefaultInstance() {
}

npt_common_search_search_corps_key::npt_common_search_search_corps_key(const npt_common_search_search_corps_key& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_common_search_search_corps_key::SharedCtor() {
  _cached_size_ = 0;
  has_value_ = false;
  level_ = 0;
  nation_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_common_search_search_corps_key::~npt_common_search_search_corps_key() {
  SharedDtor();
}

void npt_common_search_search_corps_key::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void npt_common_search_search_corps_key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_common_search_search_corps_key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_common_search_search_corps_key_descriptor_;
}

const npt_common_search_search_corps_key& npt_common_search_search_corps_key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_common_search_search_corps_key* npt_common_search_search_corps_key::default_instance_ = NULL;

npt_common_search_search_corps_key* npt_common_search_search_corps_key::New() const {
  return new npt_common_search_search_corps_key;
}

void npt_common_search_search_corps_key::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    has_value_ = false;
    level_ = 0;
    nation_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_common_search_search_corps_key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool has_value = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_value_)));
          set_has_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nation;
        break;
      }

      // optional int32 nation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_)));
          set_has_nation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_common_search_search_corps_key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool has_value = 1 [default = false];
  if (has_has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_value(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 nation = 3;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nation(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_common_search_search_corps_key::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool has_value = 1 [default = false];
  if (has_has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_value(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 nation = 3;
  if (has_nation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nation(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_common_search_search_corps_key::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool has_value = 1 [default = false];
    if (has_has_value()) {
      total_size += 1 + 1;
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 nation = 3;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_common_search_search_corps_key::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_common_search_search_corps_key* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_common_search_search_corps_key*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_common_search_search_corps_key::MergeFrom(const npt_common_search_search_corps_key& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_has_value()) {
      set_has_value(from.has_value());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_common_search_search_corps_key::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_common_search_search_corps_key::CopyFrom(const npt_common_search_search_corps_key& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_common_search_search_corps_key::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void npt_common_search_search_corps_key::Swap(npt_common_search_search_corps_key* other) {
  if (other != this) {
    std::swap(has_value_, other->has_value_);
    std::swap(level_, other->level_);
    std::swap(nation_, other->nation_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_common_search_search_corps_key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_common_search_search_corps_key_descriptor_;
  metadata.reflection = npt_common_search_search_corps_key_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int npt_common_search_search_player_key::kNameFieldNumber;
const int npt_common_search_search_player_key::kNationFieldNumber;
const int npt_common_search_search_player_key::kIsOnlineFieldNumber;
#endif  // !_MSC_VER

npt_common_search_search_player_key::npt_common_search_search_player_key()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_common_search_search_player_key::InitAsDefaultInstance() {
}

npt_common_search_search_player_key::npt_common_search_search_player_key(const npt_common_search_search_player_key& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_common_search_search_player_key::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nation_ = 0;
  is_online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_common_search_search_player_key::~npt_common_search_search_player_key() {
  SharedDtor();
}

void npt_common_search_search_player_key::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void npt_common_search_search_player_key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_common_search_search_player_key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_common_search_search_player_key_descriptor_;
}

const npt_common_search_search_player_key& npt_common_search_search_player_key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_common_search_search_player_key* npt_common_search_search_player_key::default_instance_ = NULL;

npt_common_search_search_player_key* npt_common_search_search_player_key::New() const {
  return new npt_common_search_search_player_key;
}

void npt_common_search_search_player_key::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    nation_ = 0;
    is_online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_common_search_search_player_key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nation;
        break;
      }

      // optional int32 nation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_)));
          set_has_nation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_online;
        break;
      }

      // optional bool is_online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_common_search_search_player_key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional int32 nation = 2;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nation(), output);
  }

  // optional bool is_online = 3;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_common_search_search_player_key::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 nation = 2;
  if (has_nation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nation(), target);
  }

  // optional bool is_online = 3;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_common_search_search_player_key::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 nation = 2;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation());
    }

    // optional bool is_online = 3;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_common_search_search_player_key::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_common_search_search_player_key* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_common_search_search_player_key*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_common_search_search_player_key::MergeFrom(const npt_common_search_search_player_key& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_common_search_search_player_key::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_common_search_search_player_key::CopyFrom(const npt_common_search_search_player_key& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_common_search_search_player_key::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void npt_common_search_search_player_key::Swap(npt_common_search_search_player_key* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(nation_, other->nation_);
    std::swap(is_online_, other->is_online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_common_search_search_player_key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_common_search_search_player_key_descriptor_;
  metadata.reflection = npt_common_search_search_player_key_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int npt_common_search::kTypeFieldNumber;
const int npt_common_search::kPosFieldNumber;
const int npt_common_search::kLenFieldNumber;
const int npt_common_search::kCorpsKeyFieldNumber;
const int npt_common_search::kRetcodeFieldNumber;
const int npt_common_search::kTotalCountFieldNumber;
const int npt_common_search::kCorpsFieldNumber;
const int npt_common_search::kPlayerKeyFieldNumber;
const int npt_common_search::kPlayersFieldNumber;
const int npt_common_search::kSearchTimeFieldNumber;
#endif  // !_MSC_VER

npt_common_search::npt_common_search()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_common_search::InitAsDefaultInstance() {
  corps_key_ = const_cast< ::PB::npt_common_search_search_corps_key*>(&::PB::npt_common_search_search_corps_key::default_instance());
  player_key_ = const_cast< ::PB::npt_common_search_search_player_key*>(&::PB::npt_common_search_search_player_key::default_instance());
}

npt_common_search::npt_common_search(const npt_common_search& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_common_search::SharedCtor() {
  _cached_size_ = 0;
  type_ = 6;
  pos_ = 0u;
  len_ = 0u;
  corps_key_ = NULL;
  retcode_ = 0;
  total_count_ = 0;
  player_key_ = NULL;
  search_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_common_search::~npt_common_search() {
  SharedDtor();
}

void npt_common_search::SharedDtor() {
  if (this != default_instance_) {
    delete corps_key_;
    delete player_key_;
  }
}

void npt_common_search::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_common_search::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_common_search_descriptor_;
}

const npt_common_search& npt_common_search::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_common_search* npt_common_search::default_instance_ = NULL;

npt_common_search* npt_common_search::New() const {
  return new npt_common_search;
}

void npt_common_search::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 6;
    pos_ = 0u;
    len_ = 0u;
    if (has_corps_key()) {
      if (corps_key_ != NULL) corps_key_->::PB::npt_common_search_search_corps_key::Clear();
    }
    retcode_ = 0;
    total_count_ = 0;
    if (has_player_key()) {
      if (player_key_ != NULL) player_key_->::PB::npt_common_search_search_player_key::Clear();
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    search_time_ = 0;
  }
  corps_.Clear();
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_common_search::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_COMMON_SEARCH];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // required uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_len;
        break;
      }

      // required uint32 len = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_corps_key;
        break;
      }

      // optional .PB.npt_common_search.search_corps_key corps_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corps_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_corps_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_retcode;
        break;
      }

      // optional int32 retcode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_count;
        break;
      }

      // optional int32 total_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_corps;
        break;
      }

      // repeated .PB.npt_corps_data corps = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_corps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_corps;
        if (input->ExpectTag(74)) goto parse_player_key;
        break;
      }

      // optional .PB.npt_common_search.search_player_key player_key = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_players;
        break;
      }

      // repeated .PB.name_ruid players = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_players;
        if (input->ExpectTag(88)) goto parse_search_time;
        break;
      }

      // optional int32 search_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &search_time_)));
          set_has_search_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_common_search::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_COMMON_SEARCH];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // required uint32 len = 4;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->len(), output);
  }

  // optional .PB.npt_common_search.search_corps_key corps_key = 5;
  if (has_corps_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->corps_key(), output);
  }

  // optional int32 retcode = 6;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->retcode(), output);
  }

  // optional int32 total_count = 7;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->total_count(), output);
  }

  // repeated .PB.npt_corps_data corps = 8;
  for (int i = 0; i < this->corps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->corps(i), output);
  }

  // optional .PB.npt_common_search.search_player_key player_key = 9;
  if (has_player_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->player_key(), output);
  }

  // repeated .PB.name_ruid players = 10;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->players(i), output);
  }

  // optional int32 search_time = 11;
  if (has_search_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->search_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_common_search::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_COMMON_SEARCH];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  // required uint32 len = 4;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->len(), target);
  }

  // optional .PB.npt_common_search.search_corps_key corps_key = 5;
  if (has_corps_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->corps_key(), target);
  }

  // optional int32 retcode = 6;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->retcode(), target);
  }

  // optional int32 total_count = 7;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->total_count(), target);
  }

  // repeated .PB.npt_corps_data corps = 8;
  for (int i = 0; i < this->corps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->corps(i), target);
  }

  // optional .PB.npt_common_search.search_player_key player_key = 9;
  if (has_player_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->player_key(), target);
  }

  // repeated .PB.name_ruid players = 10;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->players(i), target);
  }

  // optional int32 search_time = 11;
  if (has_search_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->search_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_common_search::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_COMMON_SEARCH];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 len = 4;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

    // optional .PB.npt_common_search.search_corps_key corps_key = 5;
    if (has_corps_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->corps_key());
    }

    // optional int32 retcode = 6;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 total_count = 7;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_count());
    }

    // optional .PB.npt_common_search.search_player_key player_key = 9;
    if (has_player_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_key());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 search_time = 11;
    if (has_search_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->search_time());
    }

  }
  // repeated .PB.npt_corps_data corps = 8;
  total_size += 1 * this->corps_size();
  for (int i = 0; i < this->corps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->corps(i));
  }

  // repeated .PB.name_ruid players = 10;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_common_search::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_common_search* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_common_search*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_common_search::MergeFrom(const npt_common_search& from) {
  GOOGLE_CHECK_NE(&from, this);
  corps_.MergeFrom(from.corps_);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_corps_key()) {
      mutable_corps_key()->::PB::npt_common_search_search_corps_key::MergeFrom(from.corps_key());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
    if (from.has_player_key()) {
      mutable_player_key()->::PB::npt_common_search_search_player_key::MergeFrom(from.player_key());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_search_time()) {
      set_search_time(from.search_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_common_search::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_common_search::CopyFrom(const npt_common_search& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_common_search::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_corps_key()) {
    if (!this->corps_key().IsInitialized()) return false;
  }
  for (int i = 0; i < corps_size(); i++) {
    if (!this->corps(i).IsInitialized()) return false;
  }
  if (has_player_key()) {
    if (!this->player_key().IsInitialized()) return false;
  }
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void npt_common_search::Swap(npt_common_search* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(len_, other->len_);
    std::swap(corps_key_, other->corps_key_);
    std::swap(retcode_, other->retcode_);
    std::swap(total_count_, other->total_count_);
    corps_.Swap(&other->corps_);
    std::swap(player_key_, other->player_key_);
    players_.Swap(&other->players_);
    std::swap(search_time_, other->search_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_common_search::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_common_search_descriptor_;
  metadata.reflection = npt_common_search_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_zhaojiling::kTypeFieldNumber;
const int npt_zhaojiling::kBaseinfoFieldNumber;
#endif  // !_MSC_VER

npt_zhaojiling::npt_zhaojiling()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_zhaojiling::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::PB::zhaojiling_info*>(&::PB::zhaojiling_info::default_instance());
}

npt_zhaojiling::npt_zhaojiling(const npt_zhaojiling& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_zhaojiling::SharedCtor() {
  _cached_size_ = 0;
  type_ = 7;
  baseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_zhaojiling::~npt_zhaojiling() {
  SharedDtor();
}

void npt_zhaojiling::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void npt_zhaojiling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_zhaojiling::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_zhaojiling_descriptor_;
}

const npt_zhaojiling& npt_zhaojiling::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_zhaojiling* npt_zhaojiling::default_instance_ = NULL;

npt_zhaojiling* npt_zhaojiling::New() const {
  return new npt_zhaojiling;
}

void npt_zhaojiling::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 7;
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::PB::zhaojiling_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_zhaojiling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ZHAOJILING];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baseinfo;
        break;
      }

      // optional .PB.zhaojiling_info baseinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_zhaojiling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ZHAOJILING];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PB.zhaojiling_info baseinfo = 2;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->baseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_zhaojiling::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ZHAOJILING];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PB.zhaojiling_info baseinfo = 2;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->baseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_zhaojiling::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ZHAOJILING];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PB.zhaojiling_info baseinfo = 2;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_zhaojiling::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_zhaojiling* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_zhaojiling*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_zhaojiling::MergeFrom(const npt_zhaojiling& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::PB::zhaojiling_info::MergeFrom(from.baseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_zhaojiling::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_zhaojiling::CopyFrom(const npt_zhaojiling& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_zhaojiling::IsInitialized() const {

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  return true;
}

void npt_zhaojiling::Swap(npt_zhaojiling* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_zhaojiling::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_zhaojiling_descriptor_;
  metadata.reflection = npt_zhaojiling_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_sync_mirror_info_MIRROR_STATE_MASK_descriptor_;
}
bool npt_sync_mirror_info_MIRROR_STATE_MASK_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const npt_sync_mirror_info_MIRROR_STATE_MASK npt_sync_mirror_info::MS_FORBIT_MIRROR_STATE;
const npt_sync_mirror_info_MIRROR_STATE_MASK npt_sync_mirror_info::MS_IN_NATION_WAR;
const npt_sync_mirror_info_MIRROR_STATE_MASK npt_sync_mirror_info::MIRROR_STATE_MASK_MIN;
const npt_sync_mirror_info_MIRROR_STATE_MASK npt_sync_mirror_info::MIRROR_STATE_MASK_MAX;
const int npt_sync_mirror_info::MIRROR_STATE_MASK_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int npt_sync_mirror_info::kTypeFieldNumber;
const int npt_sync_mirror_info::kInfosFieldNumber;
const int npt_sync_mirror_info::kStateMaskFieldNumber;
#endif  // !_MSC_VER

npt_sync_mirror_info::npt_sync_mirror_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_sync_mirror_info::InitAsDefaultInstance() {
}

npt_sync_mirror_info::npt_sync_mirror_info(const npt_sync_mirror_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_sync_mirror_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 8;
  state_mask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_sync_mirror_info::~npt_sync_mirror_info() {
  SharedDtor();
}

void npt_sync_mirror_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_sync_mirror_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_sync_mirror_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_sync_mirror_info_descriptor_;
}

const npt_sync_mirror_info& npt_sync_mirror_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_sync_mirror_info* npt_sync_mirror_info::default_instance_ = NULL;

npt_sync_mirror_info* npt_sync_mirror_info::New() const {
  return new npt_sync_mirror_info;
}

void npt_sync_mirror_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 8;
    state_mask_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_sync_mirror_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_MIRROR_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .PB.ipt_mirror_info infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(24)) goto parse_state_mask;
        break;
      }

      // optional uint32 state_mask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_mask_)));
          set_has_state_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_sync_mirror_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_MIRROR_INFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .PB.ipt_mirror_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional uint32 state_mask = 3;
  if (has_state_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state_mask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_sync_mirror_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_MIRROR_INFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .PB.ipt_mirror_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  // optional uint32 state_mask = 3;
  if (has_state_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state_mask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_sync_mirror_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_MIRROR_INFO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 state_mask = 3;
    if (has_state_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_mask());
    }

  }
  // repeated .PB.ipt_mirror_info infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_sync_mirror_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_sync_mirror_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_sync_mirror_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_sync_mirror_info::MergeFrom(const npt_sync_mirror_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state_mask()) {
      set_state_mask(from.state_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_sync_mirror_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_sync_mirror_info::CopyFrom(const npt_sync_mirror_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_sync_mirror_info::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void npt_sync_mirror_info::Swap(npt_sync_mirror_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(state_mask_, other->state_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_sync_mirror_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_sync_mirror_info_descriptor_;
  metadata.reflection = npt_sync_mirror_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_sync_nation_war_info_nwar_npc_info::kNpcTidFieldNumber;
const int npt_sync_nation_war_info_nwar_npc_info::kNpcNationFieldNumber;
const int npt_sync_nation_war_info_nwar_npc_info::kNpcHpFieldNumber;
const int npt_sync_nation_war_info_nwar_npc_info::kNpcBornFieldNumber;
#endif  // !_MSC_VER

npt_sync_nation_war_info_nwar_npc_info::npt_sync_nation_war_info_nwar_npc_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_sync_nation_war_info_nwar_npc_info::InitAsDefaultInstance() {
}

npt_sync_nation_war_info_nwar_npc_info::npt_sync_nation_war_info_nwar_npc_info(const npt_sync_nation_war_info_nwar_npc_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_sync_nation_war_info_nwar_npc_info::SharedCtor() {
  _cached_size_ = 0;
  npc_tid_ = 0u;
  npc_nation_ = 0u;
  npc_hp_ = 0u;
  npc_born_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_sync_nation_war_info_nwar_npc_info::~npt_sync_nation_war_info_nwar_npc_info() {
  SharedDtor();
}

void npt_sync_nation_war_info_nwar_npc_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_sync_nation_war_info_nwar_npc_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_sync_nation_war_info_nwar_npc_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_sync_nation_war_info_nwar_npc_info_descriptor_;
}

const npt_sync_nation_war_info_nwar_npc_info& npt_sync_nation_war_info_nwar_npc_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_sync_nation_war_info_nwar_npc_info* npt_sync_nation_war_info_nwar_npc_info::default_instance_ = NULL;

npt_sync_nation_war_info_nwar_npc_info* npt_sync_nation_war_info_nwar_npc_info::New() const {
  return new npt_sync_nation_war_info_nwar_npc_info;
}

void npt_sync_nation_war_info_nwar_npc_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_tid_ = 0u;
    npc_nation_ = 0u;
    npc_hp_ = 0u;
    npc_born_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_sync_nation_war_info_nwar_npc_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 npc_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_tid_)));
          set_has_npc_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npc_nation;
        break;
      }

      // required uint32 npc_nation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_nation_)));
          set_has_npc_nation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_npc_hp;
        break;
      }

      // required uint32 npc_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_hp_)));
          set_has_npc_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_npc_born;
        break;
      }

      // required uint32 npc_born = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_born:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_born_)));
          set_has_npc_born();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_sync_nation_war_info_nwar_npc_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 npc_tid = 1;
  if (has_npc_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npc_tid(), output);
  }

  // required uint32 npc_nation = 2;
  if (has_npc_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npc_nation(), output);
  }

  // required uint32 npc_hp = 3;
  if (has_npc_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->npc_hp(), output);
  }

  // required uint32 npc_born = 4;
  if (has_npc_born()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->npc_born(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_sync_nation_war_info_nwar_npc_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 npc_tid = 1;
  if (has_npc_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npc_tid(), target);
  }

  // required uint32 npc_nation = 2;
  if (has_npc_nation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npc_nation(), target);
  }

  // required uint32 npc_hp = 3;
  if (has_npc_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->npc_hp(), target);
  }

  // required uint32 npc_born = 4;
  if (has_npc_born()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->npc_born(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_sync_nation_war_info_nwar_npc_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 npc_tid = 1;
    if (has_npc_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_tid());
    }

    // required uint32 npc_nation = 2;
    if (has_npc_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_nation());
    }

    // required uint32 npc_hp = 3;
    if (has_npc_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_hp());
    }

    // required uint32 npc_born = 4;
    if (has_npc_born()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_born());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_sync_nation_war_info_nwar_npc_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_sync_nation_war_info_nwar_npc_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_sync_nation_war_info_nwar_npc_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_sync_nation_war_info_nwar_npc_info::MergeFrom(const npt_sync_nation_war_info_nwar_npc_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_tid()) {
      set_npc_tid(from.npc_tid());
    }
    if (from.has_npc_nation()) {
      set_npc_nation(from.npc_nation());
    }
    if (from.has_npc_hp()) {
      set_npc_hp(from.npc_hp());
    }
    if (from.has_npc_born()) {
      set_npc_born(from.npc_born());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_sync_nation_war_info_nwar_npc_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_sync_nation_war_info_nwar_npc_info::CopyFrom(const npt_sync_nation_war_info_nwar_npc_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_sync_nation_war_info_nwar_npc_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void npt_sync_nation_war_info_nwar_npc_info::Swap(npt_sync_nation_war_info_nwar_npc_info* other) {
  if (other != this) {
    std::swap(npc_tid_, other->npc_tid_);
    std::swap(npc_nation_, other->npc_nation_);
    std::swap(npc_hp_, other->npc_hp_);
    std::swap(npc_born_, other->npc_born_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_sync_nation_war_info_nwar_npc_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_sync_nation_war_info_nwar_npc_info_descriptor_;
  metadata.reflection = npt_sync_nation_war_info_nwar_npc_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int npt_sync_nation_war_info::kTypeFieldNumber;
const int npt_sync_nation_war_info::kWarEndTimeFieldNumber;
const int npt_sync_nation_war_info::kNpcInfoFieldNumber;
const int npt_sync_nation_war_info::kWangchengReviveFactionFieldNumber;
#endif  // !_MSC_VER

npt_sync_nation_war_info::npt_sync_nation_war_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_sync_nation_war_info::InitAsDefaultInstance() {
}

npt_sync_nation_war_info::npt_sync_nation_war_info(const npt_sync_nation_war_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_sync_nation_war_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 9;
  war_end_time_ = 0u;
  wangcheng_revive_faction_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_sync_nation_war_info::~npt_sync_nation_war_info() {
  SharedDtor();
}

void npt_sync_nation_war_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_sync_nation_war_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_sync_nation_war_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_sync_nation_war_info_descriptor_;
}

const npt_sync_nation_war_info& npt_sync_nation_war_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_sync_nation_war_info* npt_sync_nation_war_info::default_instance_ = NULL;

npt_sync_nation_war_info* npt_sync_nation_war_info::New() const {
  return new npt_sync_nation_war_info;
}

void npt_sync_nation_war_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 9;
    war_end_time_ = 0u;
    wangcheng_revive_faction_ = 0u;
  }
  npc_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_sync_nation_war_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_NATION_WAR_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_war_end_time;
        break;
      }

      // required uint32 war_end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_war_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &war_end_time_)));
          set_has_war_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_npc_info;
        break;
      }

      // repeated .PB.npt_sync_nation_war_info.nwar_npc_info npc_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npc_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npc_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_npc_info;
        if (input->ExpectTag(32)) goto parse_wangcheng_revive_faction;
        break;
      }

      // optional uint32 wangcheng_revive_faction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wangcheng_revive_faction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wangcheng_revive_faction_)));
          set_has_wangcheng_revive_faction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_sync_nation_war_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_NATION_WAR_INFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 war_end_time = 2;
  if (has_war_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->war_end_time(), output);
  }

  // repeated .PB.npt_sync_nation_war_info.nwar_npc_info npc_info = 3;
  for (int i = 0; i < this->npc_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->npc_info(i), output);
  }

  // optional uint32 wangcheng_revive_faction = 4;
  if (has_wangcheng_revive_faction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wangcheng_revive_faction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_sync_nation_war_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_NATION_WAR_INFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 war_end_time = 2;
  if (has_war_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->war_end_time(), target);
  }

  // repeated .PB.npt_sync_nation_war_info.nwar_npc_info npc_info = 3;
  for (int i = 0; i < this->npc_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->npc_info(i), target);
  }

  // optional uint32 wangcheng_revive_faction = 4;
  if (has_wangcheng_revive_faction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wangcheng_revive_faction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_sync_nation_war_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SYNC_NATION_WAR_INFO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 war_end_time = 2;
    if (has_war_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->war_end_time());
    }

    // optional uint32 wangcheng_revive_faction = 4;
    if (has_wangcheng_revive_faction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wangcheng_revive_faction());
    }

  }
  // repeated .PB.npt_sync_nation_war_info.nwar_npc_info npc_info = 3;
  total_size += 1 * this->npc_info_size();
  for (int i = 0; i < this->npc_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npc_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_sync_nation_war_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_sync_nation_war_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_sync_nation_war_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_sync_nation_war_info::MergeFrom(const npt_sync_nation_war_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  npc_info_.MergeFrom(from.npc_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_war_end_time()) {
      set_war_end_time(from.war_end_time());
    }
    if (from.has_wangcheng_revive_faction()) {
      set_wangcheng_revive_faction(from.wangcheng_revive_faction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_sync_nation_war_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_sync_nation_war_info::CopyFrom(const npt_sync_nation_war_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_sync_nation_war_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < npc_info_size(); i++) {
    if (!this->npc_info(i).IsInitialized()) return false;
  }
  return true;
}

void npt_sync_nation_war_info::Swap(npt_sync_nation_war_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(war_end_time_, other->war_end_time_);
    npc_info_.Swap(&other->npc_info_);
    std::swap(wangcheng_revive_faction_, other->wangcheng_revive_faction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_sync_nation_war_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_sync_nation_war_info_descriptor_;
  metadata.reflection = npt_sync_nation_war_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_get_corp_name::kTypeFieldNumber;
const int npt_get_corp_name::kCorpIdFieldNumber;
const int npt_get_corp_name::kNameFieldNumber;
#endif  // !_MSC_VER

npt_get_corp_name::npt_get_corp_name()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_get_corp_name::InitAsDefaultInstance() {
}

npt_get_corp_name::npt_get_corp_name(const npt_get_corp_name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_get_corp_name::SharedCtor() {
  _cached_size_ = 0;
  type_ = 11;
  corp_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_get_corp_name::~npt_get_corp_name() {
  SharedDtor();
}

void npt_get_corp_name::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void npt_get_corp_name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_get_corp_name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_get_corp_name_descriptor_;
}

const npt_get_corp_name& npt_get_corp_name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_get_corp_name* npt_get_corp_name::default_instance_ = NULL;

npt_get_corp_name* npt_get_corp_name::New() const {
  return new npt_get_corp_name;
}

void npt_get_corp_name::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 11;
    corp_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_get_corp_name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_CORP_NAME];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_corp_id;
        break;
      }

      // required uint32 corp_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corp_id_)));
          set_has_corp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_get_corp_name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_CORP_NAME];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 corp_id = 2;
  if (has_corp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->corp_id(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_get_corp_name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_CORP_NAME];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 corp_id = 2;
  if (has_corp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->corp_id(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_get_corp_name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_CORP_NAME];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 corp_id = 2;
    if (has_corp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corp_id());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_get_corp_name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_get_corp_name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_get_corp_name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_get_corp_name::MergeFrom(const npt_get_corp_name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_corp_id()) {
      set_corp_id(from.corp_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_get_corp_name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_get_corp_name::CopyFrom(const npt_get_corp_name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_get_corp_name::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void npt_get_corp_name::Swap(npt_get_corp_name* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(corp_id_, other->corp_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_get_corp_name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_get_corp_name_descriptor_;
  metadata.reflection = npt_get_corp_name_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_nation_war_operate::kTypeFieldNumber;
const int npt_nation_war_operate::kOperTypeFieldNumber;
const int npt_nation_war_operate::kOperParam1FieldNumber;
#endif  // !_MSC_VER

npt_nation_war_operate::npt_nation_war_operate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_nation_war_operate::InitAsDefaultInstance() {
}

npt_nation_war_operate::npt_nation_war_operate(const npt_nation_war_operate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_nation_war_operate::SharedCtor() {
  _cached_size_ = 0;
  type_ = 10;
  oper_type_ = 0u;
  oper_param1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_nation_war_operate::~npt_nation_war_operate() {
  SharedDtor();
}

void npt_nation_war_operate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_nation_war_operate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_nation_war_operate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_nation_war_operate_descriptor_;
}

const npt_nation_war_operate& npt_nation_war_operate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_nation_war_operate* npt_nation_war_operate::default_instance_ = NULL;

npt_nation_war_operate* npt_nation_war_operate::New() const {
  return new npt_nation_war_operate;
}

void npt_nation_war_operate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 10;
    oper_type_ = 0u;
    oper_param1_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_nation_war_operate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oper_type;
        break;
      }

      // required uint32 oper_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_type_)));
          set_has_oper_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oper_param1;
        break;
      }

      // required uint32 oper_param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_param1_)));
          set_has_oper_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_nation_war_operate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 oper_type = 2;
  if (has_oper_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oper_type(), output);
  }

  // required uint32 oper_param1 = 3;
  if (has_oper_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oper_param1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_nation_war_operate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 oper_type = 2;
  if (has_oper_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oper_type(), target);
  }

  // required uint32 oper_param1 = 3;
  if (has_oper_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oper_param1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_nation_war_operate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 oper_type = 2;
    if (has_oper_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_type());
    }

    // required uint32 oper_param1 = 3;
    if (has_oper_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_param1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_nation_war_operate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_nation_war_operate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_nation_war_operate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_nation_war_operate::MergeFrom(const npt_nation_war_operate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_oper_type()) {
      set_oper_type(from.oper_type());
    }
    if (from.has_oper_param1()) {
      set_oper_param1(from.oper_param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_nation_war_operate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_nation_war_operate::CopyFrom(const npt_nation_war_operate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_nation_war_operate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void npt_nation_war_operate::Swap(npt_nation_war_operate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(oper_type_, other->oper_type_);
    std::swap(oper_param1_, other->oper_param1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_nation_war_operate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_nation_war_operate_descriptor_;
  metadata.reflection = npt_nation_war_operate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_nation_war_operate_info::kTypeFieldNumber;
const int npt_nation_war_operate_info::kWarIdFieldNumber;
#endif  // !_MSC_VER

npt_nation_war_operate_info::npt_nation_war_operate_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_nation_war_operate_info::InitAsDefaultInstance() {
}

npt_nation_war_operate_info::npt_nation_war_operate_info(const npt_nation_war_operate_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_nation_war_operate_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 12;
  war_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_nation_war_operate_info::~npt_nation_war_operate_info() {
  SharedDtor();
}

void npt_nation_war_operate_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_nation_war_operate_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_nation_war_operate_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_nation_war_operate_info_descriptor_;
}

const npt_nation_war_operate_info& npt_nation_war_operate_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_nation_war_operate_info* npt_nation_war_operate_info::default_instance_ = NULL;

npt_nation_war_operate_info* npt_nation_war_operate_info::New() const {
  return new npt_nation_war_operate_info;
}

void npt_nation_war_operate_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 12;
    war_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_nation_war_operate_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_war_id;
        break;
      }

      // required uint32 war_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_war_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &war_id_)));
          set_has_war_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_nation_war_operate_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 war_id = 2;
  if (has_war_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->war_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_nation_war_operate_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 war_id = 2;
  if (has_war_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->war_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_nation_war_operate_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 war_id = 2;
    if (has_war_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->war_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_nation_war_operate_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_nation_war_operate_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_nation_war_operate_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_nation_war_operate_info::MergeFrom(const npt_nation_war_operate_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_war_id()) {
      set_war_id(from.war_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_nation_war_operate_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_nation_war_operate_info::CopyFrom(const npt_nation_war_operate_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_nation_war_operate_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void npt_nation_war_operate_info::Swap(npt_nation_war_operate_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(war_id_, other->war_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_nation_war_operate_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_nation_war_operate_info_descriptor_;
  metadata.reflection = npt_nation_war_operate_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_nation_war_operate_info_re::kTypeFieldNumber;
const int npt_nation_war_operate_info_re::kAttackZhaojiFieldNumber;
const int npt_nation_war_operate_info_re::kDefendZhaojiFieldNumber;
const int npt_nation_war_operate_info_re::kAttackYanshiFieldNumber;
const int npt_nation_war_operate_info_re::kDefendJiaxueFieldNumber;
const int npt_nation_war_operate_info_re::kAttackJihuoFieldNumber;
const int npt_nation_war_operate_info_re::kDefendJihuoFieldNumber;
const int npt_nation_war_operate_info_re::kQuickTransferFieldNumber;
#endif  // !_MSC_VER

npt_nation_war_operate_info_re::npt_nation_war_operate_info_re()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_nation_war_operate_info_re::InitAsDefaultInstance() {
}

npt_nation_war_operate_info_re::npt_nation_war_operate_info_re(const npt_nation_war_operate_info_re& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_nation_war_operate_info_re::SharedCtor() {
  _cached_size_ = 0;
  type_ = 13;
  attack_zhaoji_ = 0u;
  defend_zhaoji_ = 0u;
  attack_yanshi_ = 0u;
  defend_jiaxue_ = 0u;
  attack_jihuo_ = 0u;
  defend_jihuo_ = 0u;
  quick_transfer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_nation_war_operate_info_re::~npt_nation_war_operate_info_re() {
  SharedDtor();
}

void npt_nation_war_operate_info_re::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_nation_war_operate_info_re::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_nation_war_operate_info_re::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_nation_war_operate_info_re_descriptor_;
}

const npt_nation_war_operate_info_re& npt_nation_war_operate_info_re::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_nation_war_operate_info_re* npt_nation_war_operate_info_re::default_instance_ = NULL;

npt_nation_war_operate_info_re* npt_nation_war_operate_info_re::New() const {
  return new npt_nation_war_operate_info_re;
}

void npt_nation_war_operate_info_re::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 13;
    attack_zhaoji_ = 0u;
    defend_zhaoji_ = 0u;
    attack_yanshi_ = 0u;
    defend_jiaxue_ = 0u;
    attack_jihuo_ = 0u;
    defend_jihuo_ = 0u;
    quick_transfer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_nation_war_operate_info_re::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO_RE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attack_zhaoji;
        break;
      }

      // required uint32 attack_zhaoji = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_zhaoji:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_zhaoji_)));
          set_has_attack_zhaoji();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defend_zhaoji;
        break;
      }

      // required uint32 defend_zhaoji = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defend_zhaoji:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defend_zhaoji_)));
          set_has_defend_zhaoji();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attack_yanshi;
        break;
      }

      // required uint32 attack_yanshi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_yanshi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_yanshi_)));
          set_has_attack_yanshi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_defend_jiaxue;
        break;
      }

      // required uint32 defend_jiaxue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defend_jiaxue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defend_jiaxue_)));
          set_has_defend_jiaxue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attack_jihuo;
        break;
      }

      // required uint32 attack_jihuo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_jihuo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_jihuo_)));
          set_has_attack_jihuo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_defend_jihuo;
        break;
      }

      // required uint32 defend_jihuo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defend_jihuo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defend_jihuo_)));
          set_has_defend_jihuo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_quick_transfer;
        break;
      }

      // required uint32 quick_transfer = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quick_transfer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quick_transfer_)));
          set_has_quick_transfer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_nation_war_operate_info_re::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO_RE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 attack_zhaoji = 2;
  if (has_attack_zhaoji()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attack_zhaoji(), output);
  }

  // required uint32 defend_zhaoji = 3;
  if (has_defend_zhaoji()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->defend_zhaoji(), output);
  }

  // required uint32 attack_yanshi = 4;
  if (has_attack_yanshi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attack_yanshi(), output);
  }

  // required uint32 defend_jiaxue = 5;
  if (has_defend_jiaxue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->defend_jiaxue(), output);
  }

  // required uint32 attack_jihuo = 6;
  if (has_attack_jihuo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->attack_jihuo(), output);
  }

  // required uint32 defend_jihuo = 7;
  if (has_defend_jihuo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->defend_jihuo(), output);
  }

  // required uint32 quick_transfer = 8;
  if (has_quick_transfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->quick_transfer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_nation_war_operate_info_re::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO_RE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 attack_zhaoji = 2;
  if (has_attack_zhaoji()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attack_zhaoji(), target);
  }

  // required uint32 defend_zhaoji = 3;
  if (has_defend_zhaoji()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->defend_zhaoji(), target);
  }

  // required uint32 attack_yanshi = 4;
  if (has_attack_yanshi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attack_yanshi(), target);
  }

  // required uint32 defend_jiaxue = 5;
  if (has_defend_jiaxue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->defend_jiaxue(), target);
  }

  // required uint32 attack_jihuo = 6;
  if (has_attack_jihuo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->attack_jihuo(), target);
  }

  // required uint32 defend_jihuo = 7;
  if (has_defend_jihuo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->defend_jihuo(), target);
  }

  // required uint32 quick_transfer = 8;
  if (has_quick_transfer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->quick_transfer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_nation_war_operate_info_re::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_OPERATE_INFO_RE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 attack_zhaoji = 2;
    if (has_attack_zhaoji()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_zhaoji());
    }

    // required uint32 defend_zhaoji = 3;
    if (has_defend_zhaoji()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defend_zhaoji());
    }

    // required uint32 attack_yanshi = 4;
    if (has_attack_yanshi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_yanshi());
    }

    // required uint32 defend_jiaxue = 5;
    if (has_defend_jiaxue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defend_jiaxue());
    }

    // required uint32 attack_jihuo = 6;
    if (has_attack_jihuo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_jihuo());
    }

    // required uint32 defend_jihuo = 7;
    if (has_defend_jihuo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defend_jihuo());
    }

    // required uint32 quick_transfer = 8;
    if (has_quick_transfer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quick_transfer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_nation_war_operate_info_re::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_nation_war_operate_info_re* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_nation_war_operate_info_re*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_nation_war_operate_info_re::MergeFrom(const npt_nation_war_operate_info_re& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_attack_zhaoji()) {
      set_attack_zhaoji(from.attack_zhaoji());
    }
    if (from.has_defend_zhaoji()) {
      set_defend_zhaoji(from.defend_zhaoji());
    }
    if (from.has_attack_yanshi()) {
      set_attack_yanshi(from.attack_yanshi());
    }
    if (from.has_defend_jiaxue()) {
      set_defend_jiaxue(from.defend_jiaxue());
    }
    if (from.has_attack_jihuo()) {
      set_attack_jihuo(from.attack_jihuo());
    }
    if (from.has_defend_jihuo()) {
      set_defend_jihuo(from.defend_jihuo());
    }
    if (from.has_quick_transfer()) {
      set_quick_transfer(from.quick_transfer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_nation_war_operate_info_re::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_nation_war_operate_info_re::CopyFrom(const npt_nation_war_operate_info_re& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_nation_war_operate_info_re::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fe) != 0x000000fe) return false;

  return true;
}

void npt_nation_war_operate_info_re::Swap(npt_nation_war_operate_info_re* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(attack_zhaoji_, other->attack_zhaoji_);
    std::swap(defend_zhaoji_, other->defend_zhaoji_);
    std::swap(attack_yanshi_, other->attack_yanshi_);
    std::swap(defend_jiaxue_, other->defend_jiaxue_);
    std::swap(attack_jihuo_, other->attack_jihuo_);
    std::swap(defend_jihuo_, other->defend_jihuo_);
    std::swap(quick_transfer_, other->quick_transfer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_nation_war_operate_info_re::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_nation_war_operate_info_re_descriptor_;
  metadata.reflection = npt_nation_war_operate_info_re_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_team_invite::kTypeFieldNumber;
const int npt_team_invite::kNameFieldNumber;
const int npt_team_invite::kAssignRuleFieldNumber;
const int npt_team_invite::kAutoAdmitFieldNumber;
const int npt_team_invite::kOpenInviteFieldNumber;
const int npt_team_invite::kLevelFieldNumber;
const int npt_team_invite::kProfessionFieldNumber;
const int npt_team_invite::kLineidFieldNumber;
#endif  // !_MSC_VER

npt_team_invite::npt_team_invite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_team_invite::InitAsDefaultInstance() {
}

npt_team_invite::npt_team_invite(const npt_team_invite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_team_invite::SharedCtor() {
  _cached_size_ = 0;
  type_ = 14;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assign_rule_ = 0;
  auto_admit_ = 0;
  open_invite_ = 0;
  level_ = 0;
  profession_ = 0;
  lineid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_team_invite::~npt_team_invite() {
  SharedDtor();
}

void npt_team_invite::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void npt_team_invite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_team_invite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_team_invite_descriptor_;
}

const npt_team_invite& npt_team_invite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_team_invite* npt_team_invite::default_instance_ = NULL;

npt_team_invite* npt_team_invite::New() const {
  return new npt_team_invite;
}

void npt_team_invite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 14;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    assign_rule_ = 0;
    auto_admit_ = 0;
    open_invite_ = 0;
    level_ = 0;
    profession_ = 0;
    lineid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_team_invite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INVITE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_assign_rule;
        break;
      }

      // optional int32 assign_rule = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assign_rule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assign_rule_)));
          set_has_assign_rule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_auto_admit;
        break;
      }

      // optional int32 auto_admit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_admit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_admit_)));
          set_has_auto_admit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_open_invite;
        break;
      }

      // optional int32 open_invite = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_invite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_invite_)));
          set_has_open_invite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_profession;
        break;
      }

      // optional int32 profession = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lineid;
        break;
      }

      // optional int32 lineid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineid_)));
          set_has_lineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_team_invite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INVITE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 assign_rule = 3;
  if (has_assign_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->assign_rule(), output);
  }

  // optional int32 auto_admit = 4;
  if (has_auto_admit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->auto_admit(), output);
  }

  // optional int32 open_invite = 5;
  if (has_open_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->open_invite(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 profession = 7;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->profession(), output);
  }

  // optional int32 lineid = 8;
  if (has_lineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lineid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_team_invite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INVITE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 assign_rule = 3;
  if (has_assign_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->assign_rule(), target);
  }

  // optional int32 auto_admit = 4;
  if (has_auto_admit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->auto_admit(), target);
  }

  // optional int32 open_invite = 5;
  if (has_open_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->open_invite(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 profession = 7;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->profession(), target);
  }

  // optional int32 lineid = 8;
  if (has_lineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lineid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_team_invite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INVITE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 assign_rule = 3;
    if (has_assign_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assign_rule());
    }

    // optional int32 auto_admit = 4;
    if (has_auto_admit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_admit());
    }

    // optional int32 open_invite = 5;
    if (has_open_invite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_invite());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 profession = 7;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 lineid = 8;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_team_invite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_team_invite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_team_invite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_team_invite::MergeFrom(const npt_team_invite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_assign_rule()) {
      set_assign_rule(from.assign_rule());
    }
    if (from.has_auto_admit()) {
      set_auto_admit(from.auto_admit());
    }
    if (from.has_open_invite()) {
      set_open_invite(from.open_invite());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_lineid()) {
      set_lineid(from.lineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_team_invite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_team_invite::CopyFrom(const npt_team_invite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_team_invite::IsInitialized() const {

  return true;
}

void npt_team_invite::Swap(npt_team_invite* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(assign_rule_, other->assign_rule_);
    std::swap(auto_admit_, other->auto_admit_);
    std::swap(open_invite_, other->open_invite_);
    std::swap(level_, other->level_);
    std::swap(profession_, other->profession_);
    std::swap(lineid_, other->lineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_team_invite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_team_invite_descriptor_;
  metadata.reflection = npt_team_invite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_friend_invite::kTypeFieldNumber;
const int npt_friend_invite::kNameFieldNumber;
const int npt_friend_invite::kLevelFieldNumber;
const int npt_friend_invite::kProfessionFieldNumber;
const int npt_friend_invite::kGroupFieldNumber;
#endif  // !_MSC_VER

npt_friend_invite::npt_friend_invite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_friend_invite::InitAsDefaultInstance() {
}

npt_friend_invite::npt_friend_invite(const npt_friend_invite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_friend_invite::SharedCtor() {
  _cached_size_ = 0;
  type_ = 16;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  profession_ = 0;
  group_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_friend_invite::~npt_friend_invite() {
  SharedDtor();
}

void npt_friend_invite::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void npt_friend_invite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_friend_invite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_friend_invite_descriptor_;
}

const npt_friend_invite& npt_friend_invite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_friend_invite* npt_friend_invite::default_instance_ = NULL;

npt_friend_invite* npt_friend_invite::New() const {
  return new npt_friend_invite;
}

void npt_friend_invite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 16;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    profession_ = 0;
    group_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_friend_invite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_FRIEND_INVITE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // optional int32 profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group;
        break;
      }

      // optional int32 group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_friend_invite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_FRIEND_INVITE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->profession(), output);
  }

  // optional int32 group = 5;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_friend_invite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_FRIEND_INVITE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->profession(), target);
  }

  // optional int32 group = 5;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_friend_invite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_FRIEND_INVITE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 group = 5;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_friend_invite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_friend_invite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_friend_invite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_friend_invite::MergeFrom(const npt_friend_invite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_friend_invite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_friend_invite::CopyFrom(const npt_friend_invite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_friend_invite::IsInitialized() const {

  return true;
}

void npt_friend_invite::Swap(npt_friend_invite* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(profession_, other->profession_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_friend_invite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_friend_invite_descriptor_;
  metadata.reflection = npt_friend_invite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_team_info_team_info::kTeamidFieldNumber;
const int npt_team_info_team_info::kLeaderFieldNumber;
const int npt_team_info_team_info::kNameFieldNumber;
const int npt_team_info_team_info::kLevelFieldNumber;
const int npt_team_info_team_info::kCapacityFieldNumber;
const int npt_team_info_team_info::kProfFieldNumber;
const int npt_team_info_team_info::kMembersFieldNumber;
#endif  // !_MSC_VER

npt_team_info_team_info::npt_team_info_team_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_team_info_team_info::InitAsDefaultInstance() {
}

npt_team_info_team_info::npt_team_info_team_info(const npt_team_info_team_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_team_info_team_info::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0;
  leader_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  capacity_ = 0;
  prof_ = 0;
  members_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_team_info_team_info::~npt_team_info_team_info() {
  SharedDtor();
}

void npt_team_info_team_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void npt_team_info_team_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_team_info_team_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_team_info_team_info_descriptor_;
}

const npt_team_info_team_info& npt_team_info_team_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_team_info_team_info* npt_team_info_team_info::default_instance_ = NULL;

npt_team_info_team_info* npt_team_info_team_info::New() const {
  return new npt_team_info_team_info;
}

void npt_team_info_team_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0;
    leader_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    capacity_ = 0;
    prof_ = 0;
    members_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_team_info_team_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leader;
        break;
      }

      // required int64 leader = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_capacity;
        break;
      }

      // optional int32 capacity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_prof;
        break;
      }

      // optional int32 prof = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_members;
        break;
      }

      // required int32 members = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &members_)));
          set_has_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_team_info_team_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamid(), output);
  }

  // required int64 leader = 2;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->leader(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 capacity = 5;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->capacity(), output);
  }

  // optional int32 prof = 6;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->prof(), output);
  }

  // required int32 members = 7;
  if (has_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->members(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_team_info_team_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->teamid(), target);
  }

  // required int64 leader = 2;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->leader(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 capacity = 5;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->capacity(), target);
  }

  // optional int32 prof = 6;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->prof(), target);
  }

  // required int32 members = 7;
  if (has_members()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->members(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_team_info_team_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // required int64 leader = 2;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 capacity = 5;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capacity());
    }

    // optional int32 prof = 6;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // required int32 members = 7;
    if (has_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->members());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_team_info_team_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_team_info_team_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_team_info_team_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_team_info_team_info::MergeFrom(const npt_team_info_team_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_members()) {
      set_members(from.members());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_team_info_team_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_team_info_team_info::CopyFrom(const npt_team_info_team_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_team_info_team_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;

  return true;
}

void npt_team_info_team_info::Swap(npt_team_info_team_info* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(leader_, other->leader_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(capacity_, other->capacity_);
    std::swap(prof_, other->prof_);
    std::swap(members_, other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_team_info_team_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_team_info_team_info_descriptor_;
  metadata.reflection = npt_team_info_team_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int npt_team_info::kTypeFieldNumber;
const int npt_team_info::kTeamidsFieldNumber;
const int npt_team_info::kTeamsFieldNumber;
#endif  // !_MSC_VER

npt_team_info::npt_team_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_team_info::InitAsDefaultInstance() {
}

npt_team_info::npt_team_info(const npt_team_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_team_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 15;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_team_info::~npt_team_info() {
  SharedDtor();
}

void npt_team_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_team_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_team_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_team_info_descriptor_;
}

const npt_team_info& npt_team_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_team_info* npt_team_info::default_instance_ = NULL;

npt_team_info* npt_team_info::New() const {
  return new npt_team_info;
}

void npt_team_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 15;
  }
  teamids_.Clear();
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_team_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamids;
        break;
      }

      // repeated int32 teamids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_teamids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_teamids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamids;
        if (input->ExpectTag(26)) goto parse_teams;
        break;
      }

      // repeated .PB.npt_team_info.team_info teams = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_teams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_team_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated int32 teamids = 2;
  for (int i = 0; i < this->teamids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->teamids(i), output);
  }

  // repeated .PB.npt_team_info.team_info teams = 3;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_team_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated int32 teamids = 2;
  for (int i = 0; i < this->teamids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->teamids(i), target);
  }

  // repeated .PB.npt_team_info.team_info teams = 3;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_team_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_INFO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated int32 teamids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->teamids(i));
    }
    total_size += 1 * this->teamids_size() + data_size;
  }

  // repeated .PB.npt_team_info.team_info teams = 3;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_team_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_team_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_team_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_team_info::MergeFrom(const npt_team_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamids_.MergeFrom(from.teamids_);
  teams_.MergeFrom(from.teams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_team_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_team_info::CopyFrom(const npt_team_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_team_info::IsInitialized() const {

  for (int i = 0; i < teams_size(); i++) {
    if (!this->teams(i).IsInitialized()) return false;
  }
  return true;
}

void npt_team_info::Swap(npt_team_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    teamids_.Swap(&other->teamids_);
    teams_.Swap(&other->teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_team_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_team_info_descriptor_;
  metadata.reflection = npt_team_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int other_player_profile::kPbFacebookFieldNumber;
const int other_player_profile::kNationFieldNumber;
const int other_player_profile::kNationPosFieldNumber;
const int other_player_profile::kDukeLevelFieldNumber;
const int other_player_profile::kFashionFieldNumber;
const int other_player_profile::kMagicWeaponTidFieldNumber;
#endif  // !_MSC_VER

other_player_profile::other_player_profile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void other_player_profile::InitAsDefaultInstance() {
  pb_facebook_ = const_cast< ::PB::face_book*>(&::PB::face_book::default_instance());
}

other_player_profile::other_player_profile(const other_player_profile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void other_player_profile::SharedCtor() {
  _cached_size_ = 0;
  pb_facebook_ = NULL;
  nation_ = 0u;
  nation_pos_ = 0u;
  duke_level_ = 0u;
  fashion_ = false;
  magic_weapon_tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

other_player_profile::~other_player_profile() {
  SharedDtor();
}

void other_player_profile::SharedDtor() {
  if (this != default_instance_) {
    delete pb_facebook_;
  }
}

void other_player_profile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* other_player_profile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return other_player_profile_descriptor_;
}

const other_player_profile& other_player_profile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

other_player_profile* other_player_profile::default_instance_ = NULL;

other_player_profile* other_player_profile::New() const {
  return new other_player_profile;
}

void other_player_profile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pb_facebook()) {
      if (pb_facebook_ != NULL) pb_facebook_->::PB::face_book::Clear();
    }
    nation_ = 0u;
    nation_pos_ = 0u;
    duke_level_ = 0u;
    fashion_ = false;
    magic_weapon_tid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool other_player_profile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.face_book pb_facebook = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_facebook()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nation;
        break;
      }

      // optional uint32 nation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nation_)));
          set_has_nation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nation_pos;
        break;
      }

      // optional uint32 nation_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nation_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nation_pos_)));
          set_has_nation_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duke_level;
        break;
      }

      // optional uint32 duke_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duke_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duke_level_)));
          set_has_duke_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fashion;
        break;
      }

      // optional bool fashion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fashion_)));
          set_has_fashion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_magic_weapon_tid;
        break;
      }

      // optional uint32 magic_weapon_tid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_weapon_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_weapon_tid_)));
          set_has_magic_weapon_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void other_player_profile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.face_book pb_facebook = 1;
  if (has_pb_facebook()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_facebook(), output);
  }

  // optional uint32 nation = 2;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nation(), output);
  }

  // optional uint32 nation_pos = 3;
  if (has_nation_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nation_pos(), output);
  }

  // optional uint32 duke_level = 4;
  if (has_duke_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duke_level(), output);
  }

  // optional bool fashion = 5;
  if (has_fashion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fashion(), output);
  }

  // optional uint32 magic_weapon_tid = 6;
  if (has_magic_weapon_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->magic_weapon_tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* other_player_profile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.face_book pb_facebook = 1;
  if (has_pb_facebook()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pb_facebook(), target);
  }

  // optional uint32 nation = 2;
  if (has_nation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nation(), target);
  }

  // optional uint32 nation_pos = 3;
  if (has_nation_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nation_pos(), target);
  }

  // optional uint32 duke_level = 4;
  if (has_duke_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duke_level(), target);
  }

  // optional bool fashion = 5;
  if (has_fashion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fashion(), target);
  }

  // optional uint32 magic_weapon_tid = 6;
  if (has_magic_weapon_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->magic_weapon_tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int other_player_profile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.face_book pb_facebook = 1;
    if (has_pb_facebook()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_facebook());
    }

    // optional uint32 nation = 2;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nation());
    }

    // optional uint32 nation_pos = 3;
    if (has_nation_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nation_pos());
    }

    // optional uint32 duke_level = 4;
    if (has_duke_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duke_level());
    }

    // optional bool fashion = 5;
    if (has_fashion()) {
      total_size += 1 + 1;
    }

    // optional uint32 magic_weapon_tid = 6;
    if (has_magic_weapon_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_weapon_tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void other_player_profile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const other_player_profile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const other_player_profile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void other_player_profile::MergeFrom(const other_player_profile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pb_facebook()) {
      mutable_pb_facebook()->::PB::face_book::MergeFrom(from.pb_facebook());
    }
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_nation_pos()) {
      set_nation_pos(from.nation_pos());
    }
    if (from.has_duke_level()) {
      set_duke_level(from.duke_level());
    }
    if (from.has_fashion()) {
      set_fashion(from.fashion());
    }
    if (from.has_magic_weapon_tid()) {
      set_magic_weapon_tid(from.magic_weapon_tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void other_player_profile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void other_player_profile::CopyFrom(const other_player_profile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool other_player_profile::IsInitialized() const {

  if (has_pb_facebook()) {
    if (!this->pb_facebook().IsInitialized()) return false;
  }
  return true;
}

void other_player_profile::Swap(other_player_profile* other) {
  if (other != this) {
    std::swap(pb_facebook_, other->pb_facebook_);
    std::swap(nation_, other->nation_);
    std::swap(nation_pos_, other->nation_pos_);
    std::swap(duke_level_, other->duke_level_);
    std::swap(fashion_, other->fashion_);
    std::swap(magic_weapon_tid_, other->magic_weapon_tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata other_player_profile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = other_player_profile_descriptor_;
  metadata.reflection = other_player_profile_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* npt_get_player_profile_GET_PROFILE_MASK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_get_player_profile_GET_PROFILE_MASK_descriptor_;
}
bool npt_get_player_profile_GET_PROFILE_MASK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const npt_get_player_profile_GET_PROFILE_MASK npt_get_player_profile::GET_ALL_PROFILE;
const npt_get_player_profile_GET_PROFILE_MASK npt_get_player_profile::GET_SNS;
const npt_get_player_profile_GET_PROFILE_MASK npt_get_player_profile::GET_EQUIP;
const npt_get_player_profile_GET_PROFILE_MASK npt_get_player_profile::GET_PROPERTY;
const npt_get_player_profile_GET_PROFILE_MASK npt_get_player_profile::GET_PROFILE_MASK_MIN;
const npt_get_player_profile_GET_PROFILE_MASK npt_get_player_profile::GET_PROFILE_MASK_MAX;
const int npt_get_player_profile::GET_PROFILE_MASK_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int npt_get_player_profile::kTypeFieldNumber;
const int npt_get_player_profile::kRoleidFieldNumber;
const int npt_get_player_profile::kGetProfileMaskFieldNumber;
const int npt_get_player_profile::kSnsinfoFieldNumber;
const int npt_get_player_profile::kPropertyFieldNumber;
const int npt_get_player_profile::kEquipmentsFieldNumber;
const int npt_get_player_profile::kOthersFieldNumber;
#endif  // !_MSC_VER

npt_get_player_profile::npt_get_player_profile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_get_player_profile::InitAsDefaultInstance() {
  property_ = const_cast< ::PB::gs_role_mutable_data*>(&::PB::gs_role_mutable_data::default_instance());
  others_ = const_cast< ::PB::other_player_profile*>(&::PB::other_player_profile::default_instance());
}

npt_get_player_profile::npt_get_player_profile(const npt_get_player_profile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_get_player_profile::SharedCtor() {
  _cached_size_ = 0;
  type_ = 18;
  roleid_ = GOOGLE_LONGLONG(0);
  get_profile_mask_ = 0u;
  snsinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  property_ = NULL;
  equipments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  others_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_get_player_profile::~npt_get_player_profile() {
  SharedDtor();
}

void npt_get_player_profile::SharedDtor() {
  if (snsinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete snsinfo_;
  }
  if (equipments_ != &::google::protobuf::internal::kEmptyString) {
    delete equipments_;
  }
  if (this != default_instance_) {
    delete property_;
    delete others_;
  }
}

void npt_get_player_profile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_get_player_profile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_get_player_profile_descriptor_;
}

const npt_get_player_profile& npt_get_player_profile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_get_player_profile* npt_get_player_profile::default_instance_ = NULL;

npt_get_player_profile* npt_get_player_profile::New() const {
  return new npt_get_player_profile;
}

void npt_get_player_profile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 18;
    roleid_ = GOOGLE_LONGLONG(0);
    get_profile_mask_ = 0u;
    if (has_snsinfo()) {
      if (snsinfo_ != &::google::protobuf::internal::kEmptyString) {
        snsinfo_->clear();
      }
    }
    if (has_property()) {
      if (property_ != NULL) property_->::PB::gs_role_mutable_data::Clear();
    }
    if (has_equipments()) {
      if (equipments_ != &::google::protobuf::internal::kEmptyString) {
        equipments_->clear();
      }
    }
    if (has_others()) {
      if (others_ != NULL) others_->::PB::other_player_profile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_get_player_profile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_PLAYER_PROFILE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // required int64 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_get_profile_mask;
        break;
      }

      // optional uint32 get_profile_mask = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_profile_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_profile_mask_)));
          set_has_get_profile_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_snsinfo;
        break;
      }

      // optional bytes snsinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snsinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_snsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_property;
        break;
      }

      // optional .PB.gs_role_mutable_data property = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_equipments;
        break;
      }

      // optional bytes equipments = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_equipments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_others;
        break;
      }

      // optional .PB.other_player_profile others = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_others:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_others()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_get_player_profile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_PLAYER_PROFILE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int64 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roleid(), output);
  }

  // optional uint32 get_profile_mask = 3 [default = 0];
  if (has_get_profile_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->get_profile_mask(), output);
  }

  // optional bytes snsinfo = 4;
  if (has_snsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->snsinfo(), output);
  }

  // optional .PB.gs_role_mutable_data property = 5;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->property(), output);
  }

  // optional bytes equipments = 6;
  if (has_equipments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->equipments(), output);
  }

  // optional .PB.other_player_profile others = 7;
  if (has_others()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->others(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_get_player_profile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_PLAYER_PROFILE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int64 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roleid(), target);
  }

  // optional uint32 get_profile_mask = 3 [default = 0];
  if (has_get_profile_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->get_profile_mask(), target);
  }

  // optional bytes snsinfo = 4;
  if (has_snsinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->snsinfo(), target);
  }

  // optional .PB.gs_role_mutable_data property = 5;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->property(), target);
  }

  // optional bytes equipments = 6;
  if (has_equipments()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->equipments(), target);
  }

  // optional .PB.other_player_profile others = 7;
  if (has_others()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->others(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_get_player_profile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GET_PLAYER_PROFILE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // optional uint32 get_profile_mask = 3 [default = 0];
    if (has_get_profile_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_profile_mask());
    }

    // optional bytes snsinfo = 4;
    if (has_snsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->snsinfo());
    }

    // optional .PB.gs_role_mutable_data property = 5;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property());
    }

    // optional bytes equipments = 6;
    if (has_equipments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->equipments());
    }

    // optional .PB.other_player_profile others = 7;
    if (has_others()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->others());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_get_player_profile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_get_player_profile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_get_player_profile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_get_player_profile::MergeFrom(const npt_get_player_profile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_get_profile_mask()) {
      set_get_profile_mask(from.get_profile_mask());
    }
    if (from.has_snsinfo()) {
      set_snsinfo(from.snsinfo());
    }
    if (from.has_property()) {
      mutable_property()->::PB::gs_role_mutable_data::MergeFrom(from.property());
    }
    if (from.has_equipments()) {
      set_equipments(from.equipments());
    }
    if (from.has_others()) {
      mutable_others()->::PB::other_player_profile::MergeFrom(from.others());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_get_player_profile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_get_player_profile::CopyFrom(const npt_get_player_profile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_get_player_profile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_others()) {
    if (!this->others().IsInitialized()) return false;
  }
  return true;
}

void npt_get_player_profile::Swap(npt_get_player_profile* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(roleid_, other->roleid_);
    std::swap(get_profile_mask_, other->get_profile_mask_);
    std::swap(snsinfo_, other->snsinfo_);
    std::swap(property_, other->property_);
    std::swap(equipments_, other->equipments_);
    std::swap(others_, other->others_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_get_player_profile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_get_player_profile_descriptor_;
  metadata.reflection = npt_get_player_profile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_blessing_info::kTypeFieldNumber;
const int npt_blessing_info::kInfoFieldNumber;
const int npt_blessing_info::kTanksgiverFieldNumber;
#endif  // !_MSC_VER

npt_blessing_info::npt_blessing_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_blessing_info::InitAsDefaultInstance() {
  info_ = const_cast< ::PB::blessing_info*>(&::PB::blessing_info::default_instance());
}

npt_blessing_info::npt_blessing_info(const npt_blessing_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_blessing_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 21;
  info_ = NULL;
  tanksgiver_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_blessing_info::~npt_blessing_info() {
  SharedDtor();
}

void npt_blessing_info::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void npt_blessing_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_blessing_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_blessing_info_descriptor_;
}

const npt_blessing_info& npt_blessing_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_blessing_info* npt_blessing_info::default_instance_ = NULL;

npt_blessing_info* npt_blessing_info::New() const {
  return new npt_blessing_info;
}

void npt_blessing_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 21;
    if (has_info()) {
      if (info_ != NULL) info_->::PB::blessing_info::Clear();
    }
    tanksgiver_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_blessing_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BLESSING_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .PB.blessing_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tanksgiver;
        break;
      }

      // optional bool tanksgiver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tanksgiver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tanksgiver_)));
          set_has_tanksgiver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_blessing_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BLESSING_INFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PB.blessing_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional bool tanksgiver = 3;
  if (has_tanksgiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->tanksgiver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_blessing_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BLESSING_INFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PB.blessing_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional bool tanksgiver = 3;
  if (has_tanksgiver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->tanksgiver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_blessing_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_BLESSING_INFO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PB.blessing_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional bool tanksgiver = 3;
    if (has_tanksgiver()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_blessing_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_blessing_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_blessing_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_blessing_info::MergeFrom(const npt_blessing_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::PB::blessing_info::MergeFrom(from.info());
    }
    if (from.has_tanksgiver()) {
      set_tanksgiver(from.tanksgiver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_blessing_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_blessing_info::CopyFrom(const npt_blessing_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_blessing_info::IsInitialized() const {

  return true;
}

void npt_blessing_info::Swap(npt_blessing_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(tanksgiver_, other->tanksgiver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_blessing_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_blessing_info_descriptor_;
  metadata.reflection = npt_blessing_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* npt_nationwar_event_NNE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_nationwar_event_NNE_TYPE_descriptor_;
}
bool npt_nationwar_event_NNE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const npt_nationwar_event_NNE_TYPE npt_nationwar_event::NATION_WAR_KILL_COUNT;
const npt_nationwar_event_NNE_TYPE npt_nationwar_event::NATION_WAR_JIHUO;
const npt_nationwar_event_NNE_TYPE npt_nationwar_event::NATION_WAR_JIHUO_COOLDOWN;
const npt_nationwar_event_NNE_TYPE npt_nationwar_event::NNE_TYPE_MIN;
const npt_nationwar_event_NNE_TYPE npt_nationwar_event::NNE_TYPE_MAX;
const int npt_nationwar_event::NNE_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int npt_nationwar_event::kTypeFieldNumber;
const int npt_nationwar_event::kEventTypeFieldNumber;
const int npt_nationwar_event::kEventParamFieldNumber;
#endif  // !_MSC_VER

npt_nationwar_event::npt_nationwar_event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_nationwar_event::InitAsDefaultInstance() {
}

npt_nationwar_event::npt_nationwar_event(const npt_nationwar_event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_nationwar_event::SharedCtor() {
  _cached_size_ = 0;
  type_ = 22;
  event_type_ = 1;
  event_param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_nationwar_event::~npt_nationwar_event() {
  SharedDtor();
}

void npt_nationwar_event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_nationwar_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_nationwar_event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_nationwar_event_descriptor_;
}

const npt_nationwar_event& npt_nationwar_event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_nationwar_event* npt_nationwar_event::default_instance_ = NULL;

npt_nationwar_event* npt_nationwar_event::New() const {
  return new npt_nationwar_event;
}

void npt_nationwar_event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 22;
    event_type_ = 1;
    event_param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_nationwar_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATIONWAR_EVENT];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_type;
        break;
      }

      // optional .PB.npt_nationwar_event.NNE_TYPE event_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::npt_nationwar_event_NNE_TYPE_IsValid(value)) {
            set_event_type(static_cast< ::PB::npt_nationwar_event_NNE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_param;
        break;
      }

      // optional int32 event_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_param_)));
          set_has_event_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_nationwar_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATIONWAR_EVENT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PB.npt_nationwar_event.NNE_TYPE event_type = 2;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // optional int32 event_param = 3;
  if (has_event_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->event_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_nationwar_event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATIONWAR_EVENT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PB.npt_nationwar_event.NNE_TYPE event_type = 2;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_type(), target);
  }

  // optional int32 event_param = 3;
  if (has_event_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->event_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_nationwar_event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATIONWAR_EVENT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PB.npt_nationwar_event.NNE_TYPE event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional int32 event_param = 3;
    if (has_event_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_nationwar_event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_nationwar_event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_nationwar_event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_nationwar_event::MergeFrom(const npt_nationwar_event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_event_param()) {
      set_event_param(from.event_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_nationwar_event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_nationwar_event::CopyFrom(const npt_nationwar_event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_nationwar_event::IsInitialized() const {

  return true;
}

void npt_nationwar_event::Swap(npt_nationwar_event* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(event_type_, other->event_type_);
    std::swap(event_param_, other->event_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_nationwar_event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_nationwar_event_descriptor_;
  metadata.reflection = npt_nationwar_event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_nation_shutup::kTypeFieldNumber;
const int npt_nation_shutup::kDstRoleidFieldNumber;
#endif  // !_MSC_VER

npt_nation_shutup::npt_nation_shutup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_nation_shutup::InitAsDefaultInstance() {
}

npt_nation_shutup::npt_nation_shutup(const npt_nation_shutup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_nation_shutup::SharedCtor() {
  _cached_size_ = 0;
  type_ = 23;
  dst_roleid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_nation_shutup::~npt_nation_shutup() {
  SharedDtor();
}

void npt_nation_shutup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_nation_shutup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_nation_shutup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_nation_shutup_descriptor_;
}

const npt_nation_shutup& npt_nation_shutup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_nation_shutup* npt_nation_shutup::default_instance_ = NULL;

npt_nation_shutup* npt_nation_shutup::New() const {
  return new npt_nation_shutup;
}

void npt_nation_shutup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 23;
    dst_roleid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_nation_shutup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_roleid;
        break;
      }

      // required int64 dst_roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_roleid_)));
          set_has_dst_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_nation_shutup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int64 dst_roleid = 2;
  if (has_dst_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dst_roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_nation_shutup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int64 dst_roleid = 2;
  if (has_dst_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dst_roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_nation_shutup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 dst_roleid = 2;
    if (has_dst_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst_roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_nation_shutup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_nation_shutup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_nation_shutup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_nation_shutup::MergeFrom(const npt_nation_shutup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dst_roleid()) {
      set_dst_roleid(from.dst_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_nation_shutup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_nation_shutup::CopyFrom(const npt_nation_shutup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_nation_shutup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void npt_nation_shutup::Swap(npt_nation_shutup* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(dst_roleid_, other->dst_roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_nation_shutup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_nation_shutup_descriptor_;
  metadata.reflection = npt_nation_shutup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_nation_shutup_info::kTypeFieldNumber;
const int npt_nation_shutup_info::kUseTimesFieldNumber;
const int npt_nation_shutup_info::kRemainTimesFieldNumber;
#endif  // !_MSC_VER

npt_nation_shutup_info::npt_nation_shutup_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_nation_shutup_info::InitAsDefaultInstance() {
}

npt_nation_shutup_info::npt_nation_shutup_info(const npt_nation_shutup_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_nation_shutup_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 24;
  use_times_ = 0;
  remain_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_nation_shutup_info::~npt_nation_shutup_info() {
  SharedDtor();
}

void npt_nation_shutup_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_nation_shutup_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_nation_shutup_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_nation_shutup_info_descriptor_;
}

const npt_nation_shutup_info& npt_nation_shutup_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_nation_shutup_info* npt_nation_shutup_info::default_instance_ = NULL;

npt_nation_shutup_info* npt_nation_shutup_info::New() const {
  return new npt_nation_shutup_info;
}

void npt_nation_shutup_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 24;
    use_times_ = 0;
    remain_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_nation_shutup_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_times;
        break;
      }

      // required int32 use_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_times_)));
          set_has_use_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remain_times;
        break;
      }

      // required int32 remain_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_times_)));
          set_has_remain_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_nation_shutup_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_INFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 use_times = 2;
  if (has_use_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->use_times(), output);
  }

  // required int32 remain_times = 3;
  if (has_remain_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remain_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_nation_shutup_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_INFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 use_times = 2;
  if (has_use_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->use_times(), target);
  }

  // required int32 remain_times = 3;
  if (has_remain_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remain_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_nation_shutup_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_INFO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 use_times = 2;
    if (has_use_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_times());
    }

    // required int32 remain_times = 3;
    if (has_remain_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_nation_shutup_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_nation_shutup_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_nation_shutup_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_nation_shutup_info::MergeFrom(const npt_nation_shutup_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_use_times()) {
      set_use_times(from.use_times());
    }
    if (from.has_remain_times()) {
      set_remain_times(from.remain_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_nation_shutup_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_nation_shutup_info::CopyFrom(const npt_nation_shutup_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_nation_shutup_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void npt_nation_shutup_info::Swap(npt_nation_shutup_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(use_times_, other->use_times_);
    std::swap(remain_times_, other->remain_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_nation_shutup_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_nation_shutup_info_descriptor_;
  metadata.reflection = npt_nation_shutup_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_nation_commander_appoint::kTypeFieldNumber;
const int npt_nation_commander_appoint::kDstRoleidFieldNumber;
#endif  // !_MSC_VER

npt_nation_commander_appoint::npt_nation_commander_appoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_nation_commander_appoint::InitAsDefaultInstance() {
}

npt_nation_commander_appoint::npt_nation_commander_appoint(const npt_nation_commander_appoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_nation_commander_appoint::SharedCtor() {
  _cached_size_ = 0;
  type_ = 26;
  dst_roleid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_nation_commander_appoint::~npt_nation_commander_appoint() {
  SharedDtor();
}

void npt_nation_commander_appoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_nation_commander_appoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_nation_commander_appoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_nation_commander_appoint_descriptor_;
}

const npt_nation_commander_appoint& npt_nation_commander_appoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_nation_commander_appoint* npt_nation_commander_appoint::default_instance_ = NULL;

npt_nation_commander_appoint* npt_nation_commander_appoint::New() const {
  return new npt_nation_commander_appoint;
}

void npt_nation_commander_appoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 26;
    dst_roleid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_nation_commander_appoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_APPOINT];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_roleid;
        break;
      }

      // required int64 dst_roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_roleid_)));
          set_has_dst_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_nation_commander_appoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_APPOINT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int64 dst_roleid = 2;
  if (has_dst_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dst_roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_nation_commander_appoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_APPOINT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int64 dst_roleid = 2;
  if (has_dst_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dst_roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_nation_commander_appoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_APPOINT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 dst_roleid = 2;
    if (has_dst_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst_roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_nation_commander_appoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_nation_commander_appoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_nation_commander_appoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_nation_commander_appoint::MergeFrom(const npt_nation_commander_appoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dst_roleid()) {
      set_dst_roleid(from.dst_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_nation_commander_appoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_nation_commander_appoint::CopyFrom(const npt_nation_commander_appoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_nation_commander_appoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void npt_nation_commander_appoint::Swap(npt_nation_commander_appoint* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(dst_roleid_, other->dst_roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_nation_commander_appoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_nation_commander_appoint_descriptor_;
  metadata.reflection = npt_nation_commander_appoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_nation_commander_notify::kTypeFieldNumber;
const int npt_nation_commander_notify::kDstNameFieldNumber;
#endif  // !_MSC_VER

npt_nation_commander_notify::npt_nation_commander_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_nation_commander_notify::InitAsDefaultInstance() {
}

npt_nation_commander_notify::npt_nation_commander_notify(const npt_nation_commander_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_nation_commander_notify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 27;
  dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_nation_commander_notify::~npt_nation_commander_notify() {
  SharedDtor();
}

void npt_nation_commander_notify::SharedDtor() {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (this != default_instance_) {
  }
}

void npt_nation_commander_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_nation_commander_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_nation_commander_notify_descriptor_;
}

const npt_nation_commander_notify& npt_nation_commander_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_nation_commander_notify* npt_nation_commander_notify::default_instance_ = NULL;

npt_nation_commander_notify* npt_nation_commander_notify::New() const {
  return new npt_nation_commander_notify;
}

void npt_nation_commander_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 27;
    if (has_dst_name()) {
      if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
        dst_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_nation_commander_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_NOTIFY];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst_name;
        break;
      }

      // optional bytes dst_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dst_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_nation_commander_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_NOTIFY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes dst_name = 2;
  if (has_dst_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->dst_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_nation_commander_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_NOTIFY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes dst_name = 2;
  if (has_dst_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dst_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_nation_commander_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_COMMANDER_NOTIFY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes dst_name = 2;
    if (has_dst_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dst_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_nation_commander_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_nation_commander_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_nation_commander_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_nation_commander_notify::MergeFrom(const npt_nation_commander_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dst_name()) {
      set_dst_name(from.dst_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_nation_commander_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_nation_commander_notify::CopyFrom(const npt_nation_commander_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_nation_commander_notify::IsInitialized() const {

  return true;
}

void npt_nation_commander_notify::Swap(npt_nation_commander_notify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(dst_name_, other->dst_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_nation_commander_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_nation_commander_notify_descriptor_;
  metadata.reflection = npt_nation_commander_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_nation_war_history::kTypeFieldNumber;
const int npt_nation_war_history::kHistorysFieldNumber;
#endif  // !_MSC_VER

npt_nation_war_history::npt_nation_war_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_nation_war_history::InitAsDefaultInstance() {
}

npt_nation_war_history::npt_nation_war_history(const npt_nation_war_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_nation_war_history::SharedCtor() {
  _cached_size_ = 0;
  type_ = 28;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_nation_war_history::~npt_nation_war_history() {
  SharedDtor();
}

void npt_nation_war_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_nation_war_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_nation_war_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_nation_war_history_descriptor_;
}

const npt_nation_war_history& npt_nation_war_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_nation_war_history* npt_nation_war_history::default_instance_ = NULL;

npt_nation_war_history* npt_nation_war_history::New() const {
  return new npt_nation_war_history;
}

void npt_nation_war_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 28;
  }
  historys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_nation_war_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_HISTORY];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_historys;
        break;
      }

      // repeated .PB.nation_war_history historys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_historys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_historys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_historys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_nation_war_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_HISTORY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .PB.nation_war_history historys = 2;
  for (int i = 0; i < this->historys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->historys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_nation_war_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_HISTORY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .PB.nation_war_history historys = 2;
  for (int i = 0; i < this->historys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->historys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_nation_war_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_WAR_HISTORY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .PB.nation_war_history historys = 2;
  total_size += 1 * this->historys_size();
  for (int i = 0; i < this->historys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->historys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_nation_war_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_nation_war_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_nation_war_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_nation_war_history::MergeFrom(const npt_nation_war_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  historys_.MergeFrom(from.historys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_nation_war_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_nation_war_history::CopyFrom(const npt_nation_war_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_nation_war_history::IsInitialized() const {

  for (int i = 0; i < historys_size(); i++) {
    if (!this->historys(i).IsInitialized()) return false;
  }
  return true;
}

void npt_nation_war_history::Swap(npt_nation_war_history* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    historys_.Swap(&other->historys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_nation_war_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_nation_war_history_descriptor_;
  metadata.reflection = npt_nation_war_history_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* npt_request_info_INFO_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_request_info_INFO_TYPE_descriptor_;
}
bool npt_request_info_INFO_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const npt_request_info_INFO_TYPE npt_request_info::NATION_WAR_HISTORY;
const npt_request_info_INFO_TYPE npt_request_info::INFO_TYPE_MIN;
const npt_request_info_INFO_TYPE npt_request_info::INFO_TYPE_MAX;
const int npt_request_info::INFO_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int npt_request_info::kTypeFieldNumber;
const int npt_request_info::kRequestTypeFieldNumber;
#endif  // !_MSC_VER

npt_request_info::npt_request_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_request_info::InitAsDefaultInstance() {
}

npt_request_info::npt_request_info(const npt_request_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_request_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 29;
  request_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_request_info::~npt_request_info() {
  SharedDtor();
}

void npt_request_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_request_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_request_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_request_info_descriptor_;
}

const npt_request_info& npt_request_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_request_info* npt_request_info::default_instance_ = NULL;

npt_request_info* npt_request_info::New() const {
  return new npt_request_info;
}

void npt_request_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 29;
    request_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_request_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REQUEST_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_request_type;
        break;
      }

      // required .PB.npt_request_info.INFO_TYPE request_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::npt_request_info_INFO_TYPE_IsValid(value)) {
            set_request_type(static_cast< ::PB::npt_request_info_INFO_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_request_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REQUEST_INFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .PB.npt_request_info.INFO_TYPE request_type = 2;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->request_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_request_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REQUEST_INFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .PB.npt_request_info.INFO_TYPE request_type = 2;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->request_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_request_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_REQUEST_INFO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .PB.npt_request_info.INFO_TYPE request_type = 2;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_request_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_request_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_request_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_request_info::MergeFrom(const npt_request_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_request_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_request_info::CopyFrom(const npt_request_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_request_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void npt_request_info::Swap(npt_request_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(request_type_, other->request_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_request_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_request_info_descriptor_;
  metadata.reflection = npt_request_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* npt_nation_shutup_reply_RESULT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_nation_shutup_reply_RESULT_TYPE_descriptor_;
}
bool npt_nation_shutup_reply_RESULT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const npt_nation_shutup_reply_RESULT_TYPE npt_nation_shutup_reply::RESULT_SUCCEED;
const npt_nation_shutup_reply_RESULT_TYPE npt_nation_shutup_reply::RESULT_OFFLINE;
const npt_nation_shutup_reply_RESULT_TYPE npt_nation_shutup_reply::RESULT_ALREADY_SHUTUP;
const npt_nation_shutup_reply_RESULT_TYPE npt_nation_shutup_reply::RESULT_TYPE_MIN;
const npt_nation_shutup_reply_RESULT_TYPE npt_nation_shutup_reply::RESULT_TYPE_MAX;
const int npt_nation_shutup_reply::RESULT_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int npt_nation_shutup_reply::kTypeFieldNumber;
const int npt_nation_shutup_reply::kResultFieldNumber;
const int npt_nation_shutup_reply::kDstNameFieldNumber;
#endif  // !_MSC_VER

npt_nation_shutup_reply::npt_nation_shutup_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_nation_shutup_reply::InitAsDefaultInstance() {
}

npt_nation_shutup_reply::npt_nation_shutup_reply(const npt_nation_shutup_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_nation_shutup_reply::SharedCtor() {
  _cached_size_ = 0;
  type_ = 25;
  result_ = 1;
  dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_nation_shutup_reply::~npt_nation_shutup_reply() {
  SharedDtor();
}

void npt_nation_shutup_reply::SharedDtor() {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (this != default_instance_) {
  }
}

void npt_nation_shutup_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_nation_shutup_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_nation_shutup_reply_descriptor_;
}

const npt_nation_shutup_reply& npt_nation_shutup_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_nation_shutup_reply* npt_nation_shutup_reply::default_instance_ = NULL;

npt_nation_shutup_reply* npt_nation_shutup_reply::New() const {
  return new npt_nation_shutup_reply;
}

void npt_nation_shutup_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 25;
    result_ = 1;
    if (has_dst_name()) {
      if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
        dst_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_nation_shutup_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_REPLY];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .PB.npt_nation_shutup_reply.RESULT_TYPE result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::npt_nation_shutup_reply_RESULT_TYPE_IsValid(value)) {
            set_result(static_cast< ::PB::npt_nation_shutup_reply_RESULT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dst_name;
        break;
      }

      // optional bytes dst_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dst_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_nation_shutup_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_REPLY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .PB.npt_nation_shutup_reply.RESULT_TYPE result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional bytes dst_name = 3;
  if (has_dst_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->dst_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_nation_shutup_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_REPLY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .PB.npt_nation_shutup_reply.RESULT_TYPE result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional bytes dst_name = 3;
  if (has_dst_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->dst_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_nation_shutup_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_NATION_SHUTUP_REPLY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .PB.npt_nation_shutup_reply.RESULT_TYPE result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional bytes dst_name = 3;
    if (has_dst_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dst_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_nation_shutup_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_nation_shutup_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_nation_shutup_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_nation_shutup_reply::MergeFrom(const npt_nation_shutup_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dst_name()) {
      set_dst_name(from.dst_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_nation_shutup_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_nation_shutup_reply::CopyFrom(const npt_nation_shutup_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_nation_shutup_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void npt_nation_shutup_reply::Swap(npt_nation_shutup_reply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(dst_name_, other->dst_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_nation_shutup_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_nation_shutup_reply_descriptor_;
  metadata.reflection = npt_nation_shutup_reply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* npt_greeting_info_sync_SYNC_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_greeting_info_sync_SYNC_TYPE_descriptor_;
}
bool npt_greeting_info_sync_SYNC_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const npt_greeting_info_sync_SYNC_TYPE npt_greeting_info_sync::SYNC_ALL;
const npt_greeting_info_sync_SYNC_TYPE npt_greeting_info_sync::SYNC_ADD;
const npt_greeting_info_sync_SYNC_TYPE npt_greeting_info_sync::SYNC_DEL;
const npt_greeting_info_sync_SYNC_TYPE npt_greeting_info_sync::SYNC_TYPE_MIN;
const npt_greeting_info_sync_SYNC_TYPE npt_greeting_info_sync::SYNC_TYPE_MAX;
const int npt_greeting_info_sync::SYNC_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int npt_greeting_info_sync::kTypeFieldNumber;
const int npt_greeting_info_sync::kSyncTypeFieldNumber;
const int npt_greeting_info_sync::kGreetingListFieldNumber;
#endif  // !_MSC_VER

npt_greeting_info_sync::npt_greeting_info_sync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_greeting_info_sync::InitAsDefaultInstance() {
}

npt_greeting_info_sync::npt_greeting_info_sync(const npt_greeting_info_sync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_greeting_info_sync::SharedCtor() {
  _cached_size_ = 0;
  type_ = 19;
  sync_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_greeting_info_sync::~npt_greeting_info_sync() {
  SharedDtor();
}

void npt_greeting_info_sync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_greeting_info_sync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_greeting_info_sync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_greeting_info_sync_descriptor_;
}

const npt_greeting_info_sync& npt_greeting_info_sync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_greeting_info_sync* npt_greeting_info_sync::default_instance_ = NULL;

npt_greeting_info_sync* npt_greeting_info_sync::New() const {
  return new npt_greeting_info_sync;
}

void npt_greeting_info_sync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 19;
    sync_type_ = 1;
  }
  greeting_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_greeting_info_sync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_INFO_SYNC];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sync_type;
        break;
      }

      // optional .PB.npt_greeting_info_sync.SYNC_TYPE sync_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sync_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::npt_greeting_info_sync_SYNC_TYPE_IsValid(value)) {
            set_sync_type(static_cast< ::PB::npt_greeting_info_sync_SYNC_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_greeting_list;
        break;
      }

      // repeated .PB.greeting_info greeting_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_greeting_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_greeting_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_greeting_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_greeting_info_sync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_INFO_SYNC];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PB.npt_greeting_info_sync.SYNC_TYPE sync_type = 2;
  if (has_sync_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sync_type(), output);
  }

  // repeated .PB.greeting_info greeting_list = 3;
  for (int i = 0; i < this->greeting_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->greeting_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_greeting_info_sync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_INFO_SYNC];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PB.npt_greeting_info_sync.SYNC_TYPE sync_type = 2;
  if (has_sync_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sync_type(), target);
  }

  // repeated .PB.greeting_info greeting_list = 3;
  for (int i = 0; i < this->greeting_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->greeting_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_greeting_info_sync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_INFO_SYNC];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PB.npt_greeting_info_sync.SYNC_TYPE sync_type = 2;
    if (has_sync_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sync_type());
    }

  }
  // repeated .PB.greeting_info greeting_list = 3;
  total_size += 1 * this->greeting_list_size();
  for (int i = 0; i < this->greeting_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->greeting_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_greeting_info_sync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_greeting_info_sync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_greeting_info_sync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_greeting_info_sync::MergeFrom(const npt_greeting_info_sync& from) {
  GOOGLE_CHECK_NE(&from, this);
  greeting_list_.MergeFrom(from.greeting_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sync_type()) {
      set_sync_type(from.sync_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_greeting_info_sync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_greeting_info_sync::CopyFrom(const npt_greeting_info_sync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_greeting_info_sync::IsInitialized() const {

  return true;
}

void npt_greeting_info_sync::Swap(npt_greeting_info_sync* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(sync_type_, other->sync_type_);
    greeting_list_.Swap(&other->greeting_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_greeting_info_sync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_greeting_info_sync_descriptor_;
  metadata.reflection = npt_greeting_info_sync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_greeting_reply::kTypeFieldNumber;
const int npt_greeting_reply::kInfoSeqFieldNumber;
const int npt_greeting_reply::kDstRoleidFieldNumber;
const int npt_greeting_reply::kReplyTypeFieldNumber;
const int npt_greeting_reply::kReplyParamFieldNumber;
#endif  // !_MSC_VER

npt_greeting_reply::npt_greeting_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_greeting_reply::InitAsDefaultInstance() {
}

npt_greeting_reply::npt_greeting_reply(const npt_greeting_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_greeting_reply::SharedCtor() {
  _cached_size_ = 0;
  type_ = 20;
  info_seq_ = 0;
  dst_roleid_ = GOOGLE_LONGLONG(0);
  reply_type_ = 0;
  reply_param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_greeting_reply::~npt_greeting_reply() {
  SharedDtor();
}

void npt_greeting_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_greeting_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_greeting_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_greeting_reply_descriptor_;
}

const npt_greeting_reply& npt_greeting_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_greeting_reply* npt_greeting_reply::default_instance_ = NULL;

npt_greeting_reply* npt_greeting_reply::New() const {
  return new npt_greeting_reply;
}

void npt_greeting_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 20;
    info_seq_ = 0;
    dst_roleid_ = GOOGLE_LONGLONG(0);
    reply_type_ = 0;
    reply_param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_greeting_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_REPLY];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_seq;
        break;
      }

      // required int32 info_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &info_seq_)));
          set_has_info_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dst_roleid;
        break;
      }

      // required int64 dst_roleid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_roleid_)));
          set_has_dst_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reply_type;
        break;
      }

      // required int32 reply_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_type_)));
          set_has_reply_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reply_param;
        break;
      }

      // required int32 reply_param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_param_)));
          set_has_reply_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_greeting_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_REPLY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 info_seq = 2;
  if (has_info_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->info_seq(), output);
  }

  // required int64 dst_roleid = 3;
  if (has_dst_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dst_roleid(), output);
  }

  // required int32 reply_type = 4;
  if (has_reply_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reply_type(), output);
  }

  // required int32 reply_param = 5;
  if (has_reply_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reply_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_greeting_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_REPLY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 info_seq = 2;
  if (has_info_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->info_seq(), target);
  }

  // required int64 dst_roleid = 3;
  if (has_dst_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->dst_roleid(), target);
  }

  // required int32 reply_type = 4;
  if (has_reply_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reply_type(), target);
  }

  // required int32 reply_param = 5;
  if (has_reply_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reply_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_greeting_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GREETING_REPLY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 info_seq = 2;
    if (has_info_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->info_seq());
    }

    // required int64 dst_roleid = 3;
    if (has_dst_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst_roleid());
    }

    // required int32 reply_type = 4;
    if (has_reply_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply_type());
    }

    // required int32 reply_param = 5;
    if (has_reply_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_greeting_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_greeting_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_greeting_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_greeting_reply::MergeFrom(const npt_greeting_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info_seq()) {
      set_info_seq(from.info_seq());
    }
    if (from.has_dst_roleid()) {
      set_dst_roleid(from.dst_roleid());
    }
    if (from.has_reply_type()) {
      set_reply_type(from.reply_type());
    }
    if (from.has_reply_param()) {
      set_reply_param(from.reply_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_greeting_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_greeting_reply::CopyFrom(const npt_greeting_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_greeting_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void npt_greeting_reply::Swap(npt_greeting_reply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_seq_, other->info_seq_);
    std::swap(dst_roleid_, other->dst_roleid_);
    std::swap(reply_type_, other->reply_type_);
    std::swap(reply_param_, other->reply_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_greeting_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_greeting_reply_descriptor_;
  metadata.reflection = npt_greeting_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_ask_help::kTypeFieldNumber;
const int npt_ask_help::kInfoFieldNumber;
const int npt_ask_help::kResponseRetcodeFieldNumber;
#endif  // !_MSC_VER

npt_ask_help::npt_ask_help()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_ask_help::InitAsDefaultInstance() {
  info_ = const_cast< ::PB::ask_help_info*>(&::PB::ask_help_info::default_instance());
}

npt_ask_help::npt_ask_help(const npt_ask_help& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_ask_help::SharedCtor() {
  _cached_size_ = 0;
  type_ = 30;
  info_ = NULL;
  response_retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_ask_help::~npt_ask_help() {
  SharedDtor();
}

void npt_ask_help::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void npt_ask_help::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_ask_help::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_ask_help_descriptor_;
}

const npt_ask_help& npt_ask_help::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_ask_help* npt_ask_help::default_instance_ = NULL;

npt_ask_help* npt_ask_help::New() const {
  return new npt_ask_help;
}

void npt_ask_help::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 30;
    if (has_info()) {
      if (info_ != NULL) info_->::PB::ask_help_info::Clear();
    }
    response_retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_ask_help::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ASK_HELP];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .PB.ask_help_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_response_retcode;
        break;
      }

      // optional int32 response_retcode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_retcode_)));
          set_has_response_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_ask_help::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ASK_HELP];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PB.ask_help_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional int32 response_retcode = 3;
  if (has_response_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->response_retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_ask_help::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ASK_HELP];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PB.ask_help_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional int32 response_retcode = 3;
  if (has_response_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->response_retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_ask_help::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_ASK_HELP];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PB.ask_help_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int32 response_retcode = 3;
    if (has_response_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_ask_help::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_ask_help* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_ask_help*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_ask_help::MergeFrom(const npt_ask_help& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::PB::ask_help_info::MergeFrom(from.info());
    }
    if (from.has_response_retcode()) {
      set_response_retcode(from.response_retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_ask_help::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_ask_help::CopyFrom(const npt_ask_help& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_ask_help::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void npt_ask_help::Swap(npt_ask_help* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(response_retcode_, other->response_retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_ask_help::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_ask_help_descriptor_;
  metadata.reflection = npt_ask_help_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_send_server_midas_info::kTypeFieldNumber;
const int npt_send_server_midas_info::kRoleidFieldNumber;
const int npt_send_server_midas_info::kMidasOpenkeyFieldNumber;
const int npt_send_server_midas_info::kMidasPaytokenFieldNumber;
const int npt_send_server_midas_info::kMidasPfFieldNumber;
const int npt_send_server_midas_info::kMidasPfkeyFieldNumber;
#endif  // !_MSC_VER

npt_send_server_midas_info::npt_send_server_midas_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_send_server_midas_info::InitAsDefaultInstance() {
}

npt_send_server_midas_info::npt_send_server_midas_info(const npt_send_server_midas_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_send_server_midas_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 31;
  roleid_ = GOOGLE_LONGLONG(0);
  midas_openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  midas_paytoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  midas_pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  midas_pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_send_server_midas_info::~npt_send_server_midas_info() {
  SharedDtor();
}

void npt_send_server_midas_info::SharedDtor() {
  if (midas_openkey_ != &::google::protobuf::internal::kEmptyString) {
    delete midas_openkey_;
  }
  if (midas_paytoken_ != &::google::protobuf::internal::kEmptyString) {
    delete midas_paytoken_;
  }
  if (midas_pf_ != &::google::protobuf::internal::kEmptyString) {
    delete midas_pf_;
  }
  if (midas_pfkey_ != &::google::protobuf::internal::kEmptyString) {
    delete midas_pfkey_;
  }
  if (this != default_instance_) {
  }
}

void npt_send_server_midas_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_send_server_midas_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_send_server_midas_info_descriptor_;
}

const npt_send_server_midas_info& npt_send_server_midas_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_send_server_midas_info* npt_send_server_midas_info::default_instance_ = NULL;

npt_send_server_midas_info* npt_send_server_midas_info::New() const {
  return new npt_send_server_midas_info;
}

void npt_send_server_midas_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 31;
    roleid_ = GOOGLE_LONGLONG(0);
    if (has_midas_openkey()) {
      if (midas_openkey_ != &::google::protobuf::internal::kEmptyString) {
        midas_openkey_->clear();
      }
    }
    if (has_midas_paytoken()) {
      if (midas_paytoken_ != &::google::protobuf::internal::kEmptyString) {
        midas_paytoken_->clear();
      }
    }
    if (has_midas_pf()) {
      if (midas_pf_ != &::google::protobuf::internal::kEmptyString) {
        midas_pf_->clear();
      }
    }
    if (has_midas_pfkey()) {
      if (midas_pfkey_ != &::google::protobuf::internal::kEmptyString) {
        midas_pfkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_send_server_midas_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_SERVER_MIDAS_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // required int64 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_midas_openkey;
        break;
      }

      // optional bytes midas_openkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_midas_openkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_midas_openkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_midas_paytoken;
        break;
      }

      // optional bytes midas_paytoken = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_midas_paytoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_midas_paytoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_midas_pf;
        break;
      }

      // optional bytes midas_pf = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_midas_pf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_midas_pf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_midas_pfkey;
        break;
      }

      // optional bytes midas_pfkey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_midas_pfkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_midas_pfkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_send_server_midas_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_SERVER_MIDAS_INFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int64 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roleid(), output);
  }

  // optional bytes midas_openkey = 3;
  if (has_midas_openkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->midas_openkey(), output);
  }

  // optional bytes midas_paytoken = 4;
  if (has_midas_paytoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->midas_paytoken(), output);
  }

  // optional bytes midas_pf = 5;
  if (has_midas_pf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->midas_pf(), output);
  }

  // optional bytes midas_pfkey = 6;
  if (has_midas_pfkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->midas_pfkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_send_server_midas_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_SERVER_MIDAS_INFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int64 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roleid(), target);
  }

  // optional bytes midas_openkey = 3;
  if (has_midas_openkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->midas_openkey(), target);
  }

  // optional bytes midas_paytoken = 4;
  if (has_midas_paytoken()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->midas_paytoken(), target);
  }

  // optional bytes midas_pf = 5;
  if (has_midas_pf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->midas_pf(), target);
  }

  // optional bytes midas_pfkey = 6;
  if (has_midas_pfkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->midas_pfkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_send_server_midas_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_SERVER_MIDAS_INFO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // optional bytes midas_openkey = 3;
    if (has_midas_openkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->midas_openkey());
    }

    // optional bytes midas_paytoken = 4;
    if (has_midas_paytoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->midas_paytoken());
    }

    // optional bytes midas_pf = 5;
    if (has_midas_pf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->midas_pf());
    }

    // optional bytes midas_pfkey = 6;
    if (has_midas_pfkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->midas_pfkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_send_server_midas_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_send_server_midas_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_send_server_midas_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_send_server_midas_info::MergeFrom(const npt_send_server_midas_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_midas_openkey()) {
      set_midas_openkey(from.midas_openkey());
    }
    if (from.has_midas_paytoken()) {
      set_midas_paytoken(from.midas_paytoken());
    }
    if (from.has_midas_pf()) {
      set_midas_pf(from.midas_pf());
    }
    if (from.has_midas_pfkey()) {
      set_midas_pfkey(from.midas_pfkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_send_server_midas_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_send_server_midas_info::CopyFrom(const npt_send_server_midas_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_send_server_midas_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void npt_send_server_midas_info::Swap(npt_send_server_midas_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(roleid_, other->roleid_);
    std::swap(midas_openkey_, other->midas_openkey_);
    std::swap(midas_paytoken_, other->midas_paytoken_);
    std::swap(midas_pf_, other->midas_pf_);
    std::swap(midas_pfkey_, other->midas_pfkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_send_server_midas_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_send_server_midas_info_descriptor_;
  metadata.reflection = npt_send_server_midas_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_send_tencent_secure_info::kTypeFieldNumber;
const int npt_send_tencent_secure_info::kSecureDataFieldNumber;
#endif  // !_MSC_VER

npt_send_tencent_secure_info::npt_send_tencent_secure_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_send_tencent_secure_info::InitAsDefaultInstance() {
}

npt_send_tencent_secure_info::npt_send_tencent_secure_info(const npt_send_tencent_secure_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_send_tencent_secure_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 33;
  secure_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_send_tencent_secure_info::~npt_send_tencent_secure_info() {
  SharedDtor();
}

void npt_send_tencent_secure_info::SharedDtor() {
  if (secure_data_ != &::google::protobuf::internal::kEmptyString) {
    delete secure_data_;
  }
  if (this != default_instance_) {
  }
}

void npt_send_tencent_secure_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_send_tencent_secure_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_send_tencent_secure_info_descriptor_;
}

const npt_send_tencent_secure_info& npt_send_tencent_secure_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_send_tencent_secure_info* npt_send_tencent_secure_info::default_instance_ = NULL;

npt_send_tencent_secure_info* npt_send_tencent_secure_info::New() const {
  return new npt_send_tencent_secure_info;
}

void npt_send_tencent_secure_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 33;
    if (has_secure_data()) {
      if (secure_data_ != &::google::protobuf::internal::kEmptyString) {
        secure_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_send_tencent_secure_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_TENCENT_SECURE_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_secure_data;
        break;
      }

      // optional bytes secure_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secure_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secure_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_send_tencent_secure_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_TENCENT_SECURE_INFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes secure_data = 2;
  if (has_secure_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->secure_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_send_tencent_secure_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_TENCENT_SECURE_INFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes secure_data = 2;
  if (has_secure_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->secure_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_send_tencent_secure_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_TENCENT_SECURE_INFO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes secure_data = 2;
    if (has_secure_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secure_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_send_tencent_secure_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_send_tencent_secure_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_send_tencent_secure_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_send_tencent_secure_info::MergeFrom(const npt_send_tencent_secure_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_secure_data()) {
      set_secure_data(from.secure_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_send_tencent_secure_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_send_tencent_secure_info::CopyFrom(const npt_send_tencent_secure_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_send_tencent_secure_info::IsInitialized() const {

  return true;
}

void npt_send_tencent_secure_info::Swap(npt_send_tencent_secure_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(secure_data_, other->secure_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_send_tencent_secure_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_send_tencent_secure_info_descriptor_;
  metadata.reflection = npt_send_tencent_secure_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_send_client_midas_info::kTypeFieldNumber;
const int npt_send_client_midas_info::kMidasTotalAmountFieldNumber;
const int npt_send_client_midas_info::kMidasBindAmountFieldNumber;
const int npt_send_client_midas_info::kMidasSaveAmtFieldNumber;
#endif  // !_MSC_VER

npt_send_client_midas_info::npt_send_client_midas_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_send_client_midas_info::InitAsDefaultInstance() {
}

npt_send_client_midas_info::npt_send_client_midas_info(const npt_send_client_midas_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_send_client_midas_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 32;
  midas_total_amount_ = GOOGLE_LONGLONG(0);
  midas_bind_amount_ = GOOGLE_LONGLONG(0);
  midas_save_amt_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_send_client_midas_info::~npt_send_client_midas_info() {
  SharedDtor();
}

void npt_send_client_midas_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_send_client_midas_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_send_client_midas_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_send_client_midas_info_descriptor_;
}

const npt_send_client_midas_info& npt_send_client_midas_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_send_client_midas_info* npt_send_client_midas_info::default_instance_ = NULL;

npt_send_client_midas_info* npt_send_client_midas_info::New() const {
  return new npt_send_client_midas_info;
}

void npt_send_client_midas_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 32;
    midas_total_amount_ = GOOGLE_LONGLONG(0);
    midas_bind_amount_ = GOOGLE_LONGLONG(0);
    midas_save_amt_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_send_client_midas_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_CLIENT_MIDAS_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_midas_total_amount;
        break;
      }

      // required int64 midas_total_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_midas_total_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &midas_total_amount_)));
          set_has_midas_total_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_midas_bind_amount;
        break;
      }

      // required int64 midas_bind_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_midas_bind_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &midas_bind_amount_)));
          set_has_midas_bind_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_midas_save_amt;
        break;
      }

      // required int64 midas_save_amt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_midas_save_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &midas_save_amt_)));
          set_has_midas_save_amt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_send_client_midas_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_CLIENT_MIDAS_INFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int64 midas_total_amount = 2;
  if (has_midas_total_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->midas_total_amount(), output);
  }

  // required int64 midas_bind_amount = 3;
  if (has_midas_bind_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->midas_bind_amount(), output);
  }

  // required int64 midas_save_amt = 4;
  if (has_midas_save_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->midas_save_amt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_send_client_midas_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_CLIENT_MIDAS_INFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int64 midas_total_amount = 2;
  if (has_midas_total_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->midas_total_amount(), target);
  }

  // required int64 midas_bind_amount = 3;
  if (has_midas_bind_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->midas_bind_amount(), target);
  }

  // required int64 midas_save_amt = 4;
  if (has_midas_save_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->midas_save_amt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_send_client_midas_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_CLIENT_MIDAS_INFO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 midas_total_amount = 2;
    if (has_midas_total_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->midas_total_amount());
    }

    // required int64 midas_bind_amount = 3;
    if (has_midas_bind_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->midas_bind_amount());
    }

    // required int64 midas_save_amt = 4;
    if (has_midas_save_amt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->midas_save_amt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_send_client_midas_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_send_client_midas_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_send_client_midas_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_send_client_midas_info::MergeFrom(const npt_send_client_midas_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_midas_total_amount()) {
      set_midas_total_amount(from.midas_total_amount());
    }
    if (from.has_midas_bind_amount()) {
      set_midas_bind_amount(from.midas_bind_amount());
    }
    if (from.has_midas_save_amt()) {
      set_midas_save_amt(from.midas_save_amt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_send_client_midas_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_send_client_midas_info::CopyFrom(const npt_send_client_midas_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_send_client_midas_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void npt_send_client_midas_info::Swap(npt_send_client_midas_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(midas_total_amount_, other->midas_total_amount_);
    std::swap(midas_bind_amount_, other->midas_bind_amount_);
    std::swap(midas_save_amt_, other->midas_save_amt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_send_client_midas_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_send_client_midas_info_descriptor_;
  metadata.reflection = npt_send_client_midas_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_send_midas_bad_token::kTypeFieldNumber;
const int npt_send_midas_bad_token::kMidasOpFieldNumber;
const int npt_send_midas_bad_token::kMidasRetcodeFieldNumber;
#endif  // !_MSC_VER

npt_send_midas_bad_token::npt_send_midas_bad_token()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_send_midas_bad_token::InitAsDefaultInstance() {
}

npt_send_midas_bad_token::npt_send_midas_bad_token(const npt_send_midas_bad_token& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_send_midas_bad_token::SharedCtor() {
  _cached_size_ = 0;
  type_ = 36;
  midas_op_ = 0;
  midas_retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_send_midas_bad_token::~npt_send_midas_bad_token() {
  SharedDtor();
}

void npt_send_midas_bad_token::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_send_midas_bad_token::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_send_midas_bad_token::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_send_midas_bad_token_descriptor_;
}

const npt_send_midas_bad_token& npt_send_midas_bad_token::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_send_midas_bad_token* npt_send_midas_bad_token::default_instance_ = NULL;

npt_send_midas_bad_token* npt_send_midas_bad_token::New() const {
  return new npt_send_midas_bad_token;
}

void npt_send_midas_bad_token::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 36;
    midas_op_ = 0;
    midas_retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_send_midas_bad_token::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_MIDAS_BAD_TOKEN];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_midas_op;
        break;
      }

      // required int32 midas_op = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_midas_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &midas_op_)));
          set_has_midas_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_midas_retcode;
        break;
      }

      // required int32 midas_retcode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_midas_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &midas_retcode_)));
          set_has_midas_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_send_midas_bad_token::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_MIDAS_BAD_TOKEN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 midas_op = 2;
  if (has_midas_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->midas_op(), output);
  }

  // required int32 midas_retcode = 3;
  if (has_midas_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->midas_retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_send_midas_bad_token::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_MIDAS_BAD_TOKEN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 midas_op = 2;
  if (has_midas_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->midas_op(), target);
  }

  // required int32 midas_retcode = 3;
  if (has_midas_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->midas_retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_send_midas_bad_token::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SEND_MIDAS_BAD_TOKEN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 midas_op = 2;
    if (has_midas_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->midas_op());
    }

    // required int32 midas_retcode = 3;
    if (has_midas_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->midas_retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_send_midas_bad_token::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_send_midas_bad_token* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_send_midas_bad_token*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_send_midas_bad_token::MergeFrom(const npt_send_midas_bad_token& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_midas_op()) {
      set_midas_op(from.midas_op());
    }
    if (from.has_midas_retcode()) {
      set_midas_retcode(from.midas_retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_send_midas_bad_token::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_send_midas_bad_token::CopyFrom(const npt_send_midas_bad_token& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_send_midas_bad_token::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void npt_send_midas_bad_token::Swap(npt_send_midas_bad_token* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(midas_op_, other->midas_op_);
    std::swap(midas_retcode_, other->midas_retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_send_midas_bad_token::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_send_midas_bad_token_descriptor_;
  metadata.reflection = npt_send_midas_bad_token_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_officer_gift_get::kTypeFieldNumber;
const int npt_officer_gift_get::kGiftIdFieldNumber;
#endif  // !_MSC_VER

npt_officer_gift_get::npt_officer_gift_get()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_officer_gift_get::InitAsDefaultInstance() {
}

npt_officer_gift_get::npt_officer_gift_get(const npt_officer_gift_get& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_officer_gift_get::SharedCtor() {
  _cached_size_ = 0;
  type_ = 34;
  gift_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_officer_gift_get::~npt_officer_gift_get() {
  SharedDtor();
}

void npt_officer_gift_get::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_officer_gift_get::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_officer_gift_get::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_officer_gift_get_descriptor_;
}

const npt_officer_gift_get& npt_officer_gift_get::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_officer_gift_get* npt_officer_gift_get::default_instance_ = NULL;

npt_officer_gift_get* npt_officer_gift_get::New() const {
  return new npt_officer_gift_get;
}

void npt_officer_gift_get::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 34;
    gift_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_officer_gift_get::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_GET];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gift_id;
        break;
      }

      // optional int32 gift_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_officer_gift_get::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_GET];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 gift_id = 2;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gift_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_officer_gift_get::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_GET];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 gift_id = 2;
  if (has_gift_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gift_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_officer_gift_get::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_GET];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 gift_id = 2;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_officer_gift_get::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_officer_gift_get* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_officer_gift_get*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_officer_gift_get::MergeFrom(const npt_officer_gift_get& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_officer_gift_get::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_officer_gift_get::CopyFrom(const npt_officer_gift_get& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_officer_gift_get::IsInitialized() const {

  return true;
}

void npt_officer_gift_get::Swap(npt_officer_gift_get* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gift_id_, other->gift_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_officer_gift_get::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_officer_gift_get_descriptor_;
  metadata.reflection = npt_officer_gift_get_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_officer_gift_notify::kTypeFieldNumber;
const int npt_officer_gift_notify::kGiftIdFieldNumber;
#endif  // !_MSC_VER

npt_officer_gift_notify::npt_officer_gift_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_officer_gift_notify::InitAsDefaultInstance() {
}

npt_officer_gift_notify::npt_officer_gift_notify(const npt_officer_gift_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_officer_gift_notify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 35;
  gift_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_officer_gift_notify::~npt_officer_gift_notify() {
  SharedDtor();
}

void npt_officer_gift_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_officer_gift_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_officer_gift_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_officer_gift_notify_descriptor_;
}

const npt_officer_gift_notify& npt_officer_gift_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_officer_gift_notify* npt_officer_gift_notify::default_instance_ = NULL;

npt_officer_gift_notify* npt_officer_gift_notify::New() const {
  return new npt_officer_gift_notify;
}

void npt_officer_gift_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 35;
    gift_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_officer_gift_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_NOTIFY];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gift_id;
        break;
      }

      // optional int32 gift_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_officer_gift_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_NOTIFY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 gift_id = 2;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gift_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_officer_gift_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_NOTIFY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 gift_id = 2;
  if (has_gift_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gift_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_officer_gift_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_OFFICER_GIFT_NOTIFY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 gift_id = 2;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_officer_gift_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_officer_gift_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_officer_gift_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_officer_gift_notify::MergeFrom(const npt_officer_gift_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_officer_gift_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_officer_gift_notify::CopyFrom(const npt_officer_gift_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_officer_gift_notify::IsInitialized() const {

  return true;
}

void npt_officer_gift_notify::Swap(npt_officer_gift_notify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gift_id_, other->gift_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_officer_gift_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_officer_gift_notify_descriptor_;
  metadata.reflection = npt_officer_gift_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_weak_nation_gift_get::kTypeFieldNumber;
const int npt_weak_nation_gift_get::kGiftIdFieldNumber;
#endif  // !_MSC_VER

npt_weak_nation_gift_get::npt_weak_nation_gift_get()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_weak_nation_gift_get::InitAsDefaultInstance() {
}

npt_weak_nation_gift_get::npt_weak_nation_gift_get(const npt_weak_nation_gift_get& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_weak_nation_gift_get::SharedCtor() {
  _cached_size_ = 0;
  type_ = 50;
  gift_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_weak_nation_gift_get::~npt_weak_nation_gift_get() {
  SharedDtor();
}

void npt_weak_nation_gift_get::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_weak_nation_gift_get::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_weak_nation_gift_get::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_weak_nation_gift_get_descriptor_;
}

const npt_weak_nation_gift_get& npt_weak_nation_gift_get::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_weak_nation_gift_get* npt_weak_nation_gift_get::default_instance_ = NULL;

npt_weak_nation_gift_get* npt_weak_nation_gift_get::New() const {
  return new npt_weak_nation_gift_get;
}

void npt_weak_nation_gift_get::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 50;
    gift_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_weak_nation_gift_get::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_GET];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gift_id;
        break;
      }

      // optional int32 gift_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_weak_nation_gift_get::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_GET];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 gift_id = 2;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gift_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_weak_nation_gift_get::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_GET];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 gift_id = 2;
  if (has_gift_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gift_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_weak_nation_gift_get::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_GET];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 gift_id = 2;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_weak_nation_gift_get::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_weak_nation_gift_get* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_weak_nation_gift_get*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_weak_nation_gift_get::MergeFrom(const npt_weak_nation_gift_get& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_weak_nation_gift_get::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_weak_nation_gift_get::CopyFrom(const npt_weak_nation_gift_get& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_weak_nation_gift_get::IsInitialized() const {

  return true;
}

void npt_weak_nation_gift_get::Swap(npt_weak_nation_gift_get* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gift_id_, other->gift_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_weak_nation_gift_get::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_weak_nation_gift_get_descriptor_;
  metadata.reflection = npt_weak_nation_gift_get_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_weak_nation_gift_notify::kTypeFieldNumber;
const int npt_weak_nation_gift_notify::kGiftIdFieldNumber;
#endif  // !_MSC_VER

npt_weak_nation_gift_notify::npt_weak_nation_gift_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_weak_nation_gift_notify::InitAsDefaultInstance() {
}

npt_weak_nation_gift_notify::npt_weak_nation_gift_notify(const npt_weak_nation_gift_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_weak_nation_gift_notify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 49;
  gift_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_weak_nation_gift_notify::~npt_weak_nation_gift_notify() {
  SharedDtor();
}

void npt_weak_nation_gift_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_weak_nation_gift_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_weak_nation_gift_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_weak_nation_gift_notify_descriptor_;
}

const npt_weak_nation_gift_notify& npt_weak_nation_gift_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_weak_nation_gift_notify* npt_weak_nation_gift_notify::default_instance_ = NULL;

npt_weak_nation_gift_notify* npt_weak_nation_gift_notify::New() const {
  return new npt_weak_nation_gift_notify;
}

void npt_weak_nation_gift_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 49;
    gift_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_weak_nation_gift_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_NOTIFY];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gift_id;
        break;
      }

      // optional int32 gift_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_weak_nation_gift_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_NOTIFY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 gift_id = 2;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gift_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_weak_nation_gift_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_NOTIFY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 gift_id = 2;
  if (has_gift_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gift_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_weak_nation_gift_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_WEAK_NATION_GIFT_NOTIFY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 gift_id = 2;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_weak_nation_gift_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_weak_nation_gift_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_weak_nation_gift_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_weak_nation_gift_notify::MergeFrom(const npt_weak_nation_gift_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_weak_nation_gift_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_weak_nation_gift_notify::CopyFrom(const npt_weak_nation_gift_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_weak_nation_gift_notify::IsInitialized() const {

  return true;
}

void npt_weak_nation_gift_notify::Swap(npt_weak_nation_gift_notify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gift_id_, other->gift_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_weak_nation_gift_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_weak_nation_gift_notify_descriptor_;
  metadata.reflection = npt_weak_nation_gift_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_server_info_notify::kTypeFieldNumber;
const int npt_server_info_notify::kFreeWarLeftFieldNumber;
#endif  // !_MSC_VER

npt_server_info_notify::npt_server_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_server_info_notify::InitAsDefaultInstance() {
}

npt_server_info_notify::npt_server_info_notify(const npt_server_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_server_info_notify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 51;
  free_war_left_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_server_info_notify::~npt_server_info_notify() {
  SharedDtor();
}

void npt_server_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_server_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_server_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_server_info_notify_descriptor_;
}

const npt_server_info_notify& npt_server_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_server_info_notify* npt_server_info_notify::default_instance_ = NULL;

npt_server_info_notify* npt_server_info_notify::New() const {
  return new npt_server_info_notify;
}

void npt_server_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 51;
    free_war_left_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_server_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SERVER_INFO_NOTIFY];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_free_war_left;
        break;
      }

      // optional int32 free_war_left = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_war_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_war_left_)));
          set_has_free_war_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_server_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SERVER_INFO_NOTIFY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 free_war_left = 2;
  if (has_free_war_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->free_war_left(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_server_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SERVER_INFO_NOTIFY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 free_war_left = 2;
  if (has_free_war_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->free_war_left(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_server_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_SERVER_INFO_NOTIFY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 free_war_left = 2;
    if (has_free_war_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_war_left());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_server_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_server_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_server_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_server_info_notify::MergeFrom(const npt_server_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_free_war_left()) {
      set_free_war_left(from.free_war_left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_server_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_server_info_notify::CopyFrom(const npt_server_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_server_info_notify::IsInitialized() const {

  return true;
}

void npt_server_info_notify::Swap(npt_server_info_notify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(free_war_left_, other->free_war_left_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_server_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_server_info_notify_descriptor_;
  metadata.reflection = npt_server_info_notify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* npt_team_recruit_operate_OPERATE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_team_recruit_operate_OPERATE_TYPE_descriptor_;
}
bool npt_team_recruit_operate_OPERATE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate::CREATE;
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate::LIST;
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate::PUBLISH;
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate::CANCEL;
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate::REQ_COOLDOWN;
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate::MODIFY;
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate::REQ_LEADER_POS;
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate::GATHER;
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate::OPERATE_TYPE_MIN;
const npt_team_recruit_operate_OPERATE_TYPE npt_team_recruit_operate::OPERATE_TYPE_MAX;
const int npt_team_recruit_operate::OPERATE_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int npt_team_recruit_operate::kTypeFieldNumber;
const int npt_team_recruit_operate::kOperateTypeFieldNumber;
const int npt_team_recruit_operate::kParam1FieldNumber;
const int npt_team_recruit_operate::kParam2FieldNumber;
const int npt_team_recruit_operate::kParam3FieldNumber;
#endif  // !_MSC_VER

npt_team_recruit_operate::npt_team_recruit_operate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_team_recruit_operate::InitAsDefaultInstance() {
}

npt_team_recruit_operate::npt_team_recruit_operate(const npt_team_recruit_operate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_team_recruit_operate::SharedCtor() {
  _cached_size_ = 0;
  type_ = 37;
  operate_type_ = 0;
  param1_ = GOOGLE_LONGLONG(0);
  param2_ = GOOGLE_LONGLONG(0);
  param3_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_team_recruit_operate::~npt_team_recruit_operate() {
  SharedDtor();
}

void npt_team_recruit_operate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_team_recruit_operate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_team_recruit_operate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_team_recruit_operate_descriptor_;
}

const npt_team_recruit_operate& npt_team_recruit_operate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_team_recruit_operate* npt_team_recruit_operate::default_instance_ = NULL;

npt_team_recruit_operate* npt_team_recruit_operate::New() const {
  return new npt_team_recruit_operate;
}

void npt_team_recruit_operate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 37;
    operate_type_ = 0;
    param1_ = GOOGLE_LONGLONG(0);
    param2_ = GOOGLE_LONGLONG(0);
    param3_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_team_recruit_operate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate_type;
        break;
      }

      // optional int32 operate_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param1;
        break;
      }

      // optional int64 param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param2;
        break;
      }

      // optional int64 param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param3;
        break;
      }

      // optional int64 param3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_team_recruit_operate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 operate_type = 2;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate_type(), output);
  }

  // optional int64 param1 = 3;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->param1(), output);
  }

  // optional int64 param2 = 4;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->param2(), output);
  }

  // optional int64 param3 = 5;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->param3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_team_recruit_operate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 operate_type = 2;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate_type(), target);
  }

  // optional int64 param1 = 3;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->param1(), target);
  }

  // optional int64 param2 = 4;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->param2(), target);
  }

  // optional int64 param3 = 5;
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->param3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_team_recruit_operate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 operate_type = 2;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_type());
    }

    // optional int64 param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

    // optional int64 param2 = 4;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param2());
    }

    // optional int64 param3 = 5;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_team_recruit_operate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_team_recruit_operate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_team_recruit_operate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_team_recruit_operate::MergeFrom(const npt_team_recruit_operate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_team_recruit_operate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_team_recruit_operate::CopyFrom(const npt_team_recruit_operate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_team_recruit_operate::IsInitialized() const {

  return true;
}

void npt_team_recruit_operate::Swap(npt_team_recruit_operate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_team_recruit_operate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_team_recruit_operate_descriptor_;
  metadata.reflection = npt_team_recruit_operate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int recruit_info::kMinLevelFieldNumber;
const int recruit_info::kInstTidFieldNumber;
const int recruit_info::kTeamNumberFieldNumber;
const int recruit_info::kLeaderNameFieldNumber;
const int recruit_info::kLeaderIdFieldNumber;
#endif  // !_MSC_VER

recruit_info::recruit_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void recruit_info::InitAsDefaultInstance() {
}

recruit_info::recruit_info(const recruit_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void recruit_info::SharedCtor() {
  _cached_size_ = 0;
  min_level_ = 0;
  inst_tid_ = 0;
  team_number_ = 0;
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

recruit_info::~recruit_info() {
  SharedDtor();
}

void recruit_info::SharedDtor() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
  }
}

void recruit_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* recruit_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return recruit_info_descriptor_;
}

const recruit_info& recruit_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

recruit_info* recruit_info::default_instance_ = NULL;

recruit_info* recruit_info::New() const {
  return new recruit_info;
}

void recruit_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_level_ = 0;
    inst_tid_ = 0;
    team_number_ = 0;
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    leader_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool recruit_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 min_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inst_tid;
        break;
      }

      // optional int32 inst_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inst_tid_)));
          set_has_inst_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_number;
        break;
      }

      // optional int32 team_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_number_)));
          set_has_team_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leader_name;
        break;
      }

      // optional bytes leader_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leader_id;
        break;
      }

      // optional int64 leader_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void recruit_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 min_level = 1;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_level(), output);
  }

  // optional int32 inst_tid = 2;
  if (has_inst_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inst_tid(), output);
  }

  // optional int32 team_number = 3;
  if (has_team_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team_number(), output);
  }

  // optional bytes leader_name = 4;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->leader_name(), output);
  }

  // optional int64 leader_id = 5;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->leader_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* recruit_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 min_level = 1;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_level(), target);
  }

  // optional int32 inst_tid = 2;
  if (has_inst_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inst_tid(), target);
  }

  // optional int32 team_number = 3;
  if (has_team_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team_number(), target);
  }

  // optional bytes leader_name = 4;
  if (has_leader_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->leader_name(), target);
  }

  // optional int64 leader_id = 5;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->leader_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int recruit_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 min_level = 1;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // optional int32 inst_tid = 2;
    if (has_inst_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inst_tid());
    }

    // optional int32 team_number = 3;
    if (has_team_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_number());
    }

    // optional bytes leader_name = 4;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_name());
    }

    // optional int64 leader_id = 5;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void recruit_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const recruit_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const recruit_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void recruit_info::MergeFrom(const recruit_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_inst_tid()) {
      set_inst_tid(from.inst_tid());
    }
    if (from.has_team_number()) {
      set_team_number(from.team_number());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void recruit_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recruit_info::CopyFrom(const recruit_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recruit_info::IsInitialized() const {

  return true;
}

void recruit_info::Swap(recruit_info* other) {
  if (other != this) {
    std::swap(min_level_, other->min_level_);
    std::swap(inst_tid_, other->inst_tid_);
    std::swap(team_number_, other->team_number_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata recruit_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = recruit_info_descriptor_;
  metadata.reflection = recruit_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* npt_team_recruit_operate_reply_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_team_recruit_operate_reply_RESULT_descriptor_;
}
bool npt_team_recruit_operate_reply_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const npt_team_recruit_operate_reply_RESULT npt_team_recruit_operate_reply::SUCCEED;
const npt_team_recruit_operate_reply_RESULT npt_team_recruit_operate_reply::MAX_SIZE;
const npt_team_recruit_operate_reply_RESULT npt_team_recruit_operate_reply::MIN_LEVEL;
const npt_team_recruit_operate_reply_RESULT npt_team_recruit_operate_reply::COOLDOWN;
const npt_team_recruit_operate_reply_RESULT npt_team_recruit_operate_reply::TIME_OUT;
const npt_team_recruit_operate_reply_RESULT npt_team_recruit_operate_reply::IN_INSTANCE;
const npt_team_recruit_operate_reply_RESULT npt_team_recruit_operate_reply::RESULT_MIN;
const npt_team_recruit_operate_reply_RESULT npt_team_recruit_operate_reply::RESULT_MAX;
const int npt_team_recruit_operate_reply::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int npt_team_recruit_operate_reply::kTypeFieldNumber;
const int npt_team_recruit_operate_reply::kOperateTypeFieldNumber;
const int npt_team_recruit_operate_reply::kOperateResultFieldNumber;
const int npt_team_recruit_operate_reply::kParam1FieldNumber;
const int npt_team_recruit_operate_reply::kParam2FieldNumber;
const int npt_team_recruit_operate_reply::kParam3FieldNumber;
const int npt_team_recruit_operate_reply::kRecruitListFieldNumber;
const int npt_team_recruit_operate_reply::kParam4FieldNumber;
const int npt_team_recruit_operate_reply::kParamPosFieldNumber;
#endif  // !_MSC_VER

npt_team_recruit_operate_reply::npt_team_recruit_operate_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_team_recruit_operate_reply::InitAsDefaultInstance() {
  param_pos_ = const_cast< ::PB::a3d_pos*>(&::PB::a3d_pos::default_instance());
}

npt_team_recruit_operate_reply::npt_team_recruit_operate_reply(const npt_team_recruit_operate_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_team_recruit_operate_reply::SharedCtor() {
  _cached_size_ = 0;
  type_ = 38;
  operate_type_ = 0;
  operate_result_ = 0;
  param1_ = GOOGLE_LONGLONG(0);
  param2_ = GOOGLE_LONGLONG(0);
  param3_ = GOOGLE_LONGLONG(0);
  param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_team_recruit_operate_reply::~npt_team_recruit_operate_reply() {
  SharedDtor();
}

void npt_team_recruit_operate_reply::SharedDtor() {
  if (param4_ != &::google::protobuf::internal::kEmptyString) {
    delete param4_;
  }
  if (this != default_instance_) {
    delete param_pos_;
  }
}

void npt_team_recruit_operate_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_team_recruit_operate_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_team_recruit_operate_reply_descriptor_;
}

const npt_team_recruit_operate_reply& npt_team_recruit_operate_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_team_recruit_operate_reply* npt_team_recruit_operate_reply::default_instance_ = NULL;

npt_team_recruit_operate_reply* npt_team_recruit_operate_reply::New() const {
  return new npt_team_recruit_operate_reply;
}

void npt_team_recruit_operate_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 38;
    operate_type_ = 0;
    operate_result_ = 0;
    param1_ = GOOGLE_LONGLONG(0);
    param2_ = GOOGLE_LONGLONG(0);
    param3_ = GOOGLE_LONGLONG(0);
    if (has_param4()) {
      if (param4_ != &::google::protobuf::internal::kEmptyString) {
        param4_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_param_pos()) {
      if (param_pos_ != NULL) param_pos_->::PB::a3d_pos::Clear();
    }
  }
  recruit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_team_recruit_operate_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE_REPLY];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate_type;
        break;
      }

      // optional int32 operate_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate_result;
        break;
      }

      // optional int32 operate_result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_result_)));
          set_has_operate_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param1;
        break;
      }

      // optional int64 param1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param2;
        break;
      }

      // optional int64 param2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_param3;
        break;
      }

      // optional int64 param3 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_recruit_list;
        break;
      }

      // repeated .PB.recruit_info recruit_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recruit_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recruit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_recruit_list;
        if (input->ExpectTag(66)) goto parse_param4;
        break;
      }

      // optional bytes param4 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_param_pos;
        break;
      }

      // optional .PB.a3d_pos param_pos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_team_recruit_operate_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE_REPLY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 operate_type = 2;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate_type(), output);
  }

  // optional int32 operate_result = 3;
  if (has_operate_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operate_result(), output);
  }

  // optional int64 param1 = 4;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->param1(), output);
  }

  // optional int64 param2 = 5;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->param2(), output);
  }

  // optional int64 param3 = 6;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->param3(), output);
  }

  // repeated .PB.recruit_info recruit_list = 7;
  for (int i = 0; i < this->recruit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->recruit_list(i), output);
  }

  // optional bytes param4 = 8;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->param4(), output);
  }

  // optional .PB.a3d_pos param_pos = 9;
  if (has_param_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->param_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_team_recruit_operate_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE_REPLY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 operate_type = 2;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate_type(), target);
  }

  // optional int32 operate_result = 3;
  if (has_operate_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operate_result(), target);
  }

  // optional int64 param1 = 4;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->param1(), target);
  }

  // optional int64 param2 = 5;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->param2(), target);
  }

  // optional int64 param3 = 6;
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->param3(), target);
  }

  // repeated .PB.recruit_info recruit_list = 7;
  for (int i = 0; i < this->recruit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->recruit_list(i), target);
  }

  // optional bytes param4 = 8;
  if (has_param4()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->param4(), target);
  }

  // optional .PB.a3d_pos param_pos = 9;
  if (has_param_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->param_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_team_recruit_operate_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_TEAM_RECRUIT_OPERATE_REPLY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 operate_type = 2;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_type());
    }

    // optional int32 operate_result = 3;
    if (has_operate_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_result());
    }

    // optional int64 param1 = 4;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

    // optional int64 param2 = 5;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param2());
    }

    // optional int64 param3 = 6;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param3());
    }

    // optional bytes param4 = 8;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param4());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PB.a3d_pos param_pos = 9;
    if (has_param_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param_pos());
    }

  }
  // repeated .PB.recruit_info recruit_list = 7;
  total_size += 1 * this->recruit_list_size();
  for (int i = 0; i < this->recruit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recruit_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_team_recruit_operate_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_team_recruit_operate_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_team_recruit_operate_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_team_recruit_operate_reply::MergeFrom(const npt_team_recruit_operate_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  recruit_list_.MergeFrom(from.recruit_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_operate_result()) {
      set_operate_result(from.operate_result());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_param_pos()) {
      mutable_param_pos()->::PB::a3d_pos::MergeFrom(from.param_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_team_recruit_operate_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_team_recruit_operate_reply::CopyFrom(const npt_team_recruit_operate_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_team_recruit_operate_reply::IsInitialized() const {

  if (has_param_pos()) {
    if (!this->param_pos().IsInitialized()) return false;
  }
  return true;
}

void npt_team_recruit_operate_reply::Swap(npt_team_recruit_operate_reply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(operate_result_, other->operate_result_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    recruit_list_.Swap(&other->recruit_list_);
    std::swap(param4_, other->param4_);
    std::swap(param_pos_, other->param_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_team_recruit_operate_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_team_recruit_operate_reply_descriptor_;
  metadata.reflection = npt_team_recruit_operate_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_update_grc_info::kTypeFieldNumber;
#endif  // !_MSC_VER

npt_update_grc_info::npt_update_grc_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_update_grc_info::InitAsDefaultInstance() {
}

npt_update_grc_info::npt_update_grc_info(const npt_update_grc_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_update_grc_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 39;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_update_grc_info::~npt_update_grc_info() {
  SharedDtor();
}

void npt_update_grc_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_update_grc_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_update_grc_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_update_grc_info_descriptor_;
}

const npt_update_grc_info& npt_update_grc_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_update_grc_info* npt_update_grc_info::default_instance_ = NULL;

npt_update_grc_info* npt_update_grc_info::New() const {
  return new npt_update_grc_info;
}

void npt_update_grc_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 39;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_update_grc_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_UPDATE_GRC_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_update_grc_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_UPDATE_GRC_INFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_update_grc_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_UPDATE_GRC_INFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_update_grc_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_UPDATE_GRC_INFO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_update_grc_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_update_grc_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_update_grc_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_update_grc_info::MergeFrom(const npt_update_grc_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_update_grc_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_update_grc_info::CopyFrom(const npt_update_grc_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_update_grc_info::IsInitialized() const {

  return true;
}

void npt_update_grc_info::Swap(npt_update_grc_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_update_grc_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_update_grc_info_descriptor_;
  metadata.reflection = npt_update_grc_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_grc_get_friend_info::kTypeFieldNumber;
const int npt_grc_get_friend_info::kStartFieldNumber;
const int npt_grc_get_friend_info::kOffsetFieldNumber;
#endif  // !_MSC_VER

npt_grc_get_friend_info::npt_grc_get_friend_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_grc_get_friend_info::InitAsDefaultInstance() {
}

npt_grc_get_friend_info::npt_grc_get_friend_info(const npt_grc_get_friend_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_grc_get_friend_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 40;
  start_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_grc_get_friend_info::~npt_grc_get_friend_info() {
  SharedDtor();
}

void npt_grc_get_friend_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_grc_get_friend_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_grc_get_friend_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_grc_get_friend_info_descriptor_;
}

const npt_grc_get_friend_info& npt_grc_get_friend_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_grc_get_friend_info* npt_grc_get_friend_info::default_instance_ = NULL;

npt_grc_get_friend_info* npt_grc_get_friend_info::New() const {
  return new npt_grc_get_friend_info;
}

void npt_grc_get_friend_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 40;
    start_ = 0;
    offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_grc_get_friend_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GET_FRIEND_INFO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // required int32 start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // required int32 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_grc_get_friend_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GET_FRIEND_INFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // required int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_grc_get_friend_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GET_FRIEND_INFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start(), target);
  }

  // required int32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_grc_get_friend_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GET_FRIEND_INFO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // required int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_grc_get_friend_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_grc_get_friend_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_grc_get_friend_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_grc_get_friend_info::MergeFrom(const npt_grc_get_friend_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_grc_get_friend_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_grc_get_friend_info::CopyFrom(const npt_grc_get_friend_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_grc_get_friend_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void npt_grc_get_friend_info::Swap(npt_grc_get_friend_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(start_, other->start_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_grc_get_friend_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_grc_get_friend_info_descriptor_;
  metadata.reflection = npt_grc_get_friend_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_grc_send_gift::kTypeFieldNumber;
const int npt_grc_send_gift::kGiftTypeFieldNumber;
const int npt_grc_send_gift::kGiftCountFieldNumber;
const int npt_grc_send_gift::kToFieldNumber;
#endif  // !_MSC_VER

npt_grc_send_gift::npt_grc_send_gift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_grc_send_gift::InitAsDefaultInstance() {
}

npt_grc_send_gift::npt_grc_send_gift(const npt_grc_send_gift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_grc_send_gift::SharedCtor() {
  _cached_size_ = 0;
  type_ = 41;
  gifttype_ = 0;
  giftcount_ = GOOGLE_LONGLONG(0);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_grc_send_gift::~npt_grc_send_gift() {
  SharedDtor();
}

void npt_grc_send_gift::SharedDtor() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (this != default_instance_) {
  }
}

void npt_grc_send_gift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_grc_send_gift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_grc_send_gift_descriptor_;
}

const npt_grc_send_gift& npt_grc_send_gift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_grc_send_gift* npt_grc_send_gift::default_instance_ = NULL;

npt_grc_send_gift* npt_grc_send_gift::New() const {
  return new npt_grc_send_gift;
}

void npt_grc_send_gift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 41;
    gifttype_ = 0;
    giftcount_ = GOOGLE_LONGLONG(0);
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_grc_send_gift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_giftType;
        break;
      }

      // required int32 giftType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gifttype_)));
          set_has_gifttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_giftCount;
        break;
      }

      // required int64 giftCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &giftcount_)));
          set_has_giftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_to;
        break;
      }

      // required bytes to = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_grc_send_gift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 giftType = 2;
  if (has_gifttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gifttype(), output);
  }

  // required int64 giftCount = 3;
  if (has_giftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->giftcount(), output);
  }

  // required bytes to = 4;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_grc_send_gift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 giftType = 2;
  if (has_gifttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gifttype(), target);
  }

  // required int64 giftCount = 3;
  if (has_giftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->giftcount(), target);
  }

  // required bytes to = 4;
  if (has_to()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_grc_send_gift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 giftType = 2;
    if (has_gifttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gifttype());
    }

    // required int64 giftCount = 3;
    if (has_giftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->giftcount());
    }

    // required bytes to = 4;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_grc_send_gift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_grc_send_gift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_grc_send_gift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_grc_send_gift::MergeFrom(const npt_grc_send_gift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gifttype()) {
      set_gifttype(from.gifttype());
    }
    if (from.has_giftcount()) {
      set_giftcount(from.giftcount());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_grc_send_gift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_grc_send_gift::CopyFrom(const npt_grc_send_gift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_grc_send_gift::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void npt_grc_send_gift::Swap(npt_grc_send_gift* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gifttype_, other->gifttype_);
    std::swap(giftcount_, other->giftcount_);
    std::swap(to_, other->to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_grc_send_gift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_grc_send_gift_descriptor_;
  metadata.reflection = npt_grc_send_gift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_grc_rcv_gift::kTypeFieldNumber;
const int npt_grc_rcv_gift::kGiftTypeFieldNumber;
const int npt_grc_rcv_gift::kGiftCountFieldNumber;
const int npt_grc_rcv_gift::kTimestampFieldNumber;
const int npt_grc_rcv_gift::kFromFieldNumber;
#endif  // !_MSC_VER

npt_grc_rcv_gift::npt_grc_rcv_gift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_grc_rcv_gift::InitAsDefaultInstance() {
}

npt_grc_rcv_gift::npt_grc_rcv_gift(const npt_grc_rcv_gift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_grc_rcv_gift::SharedCtor() {
  _cached_size_ = 0;
  type_ = 42;
  gifttype_ = 0;
  giftcount_ = GOOGLE_LONGLONG(0);
  timestamp_ = GOOGLE_LONGLONG(0);
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_grc_rcv_gift::~npt_grc_rcv_gift() {
  SharedDtor();
}

void npt_grc_rcv_gift::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (this != default_instance_) {
  }
}

void npt_grc_rcv_gift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_grc_rcv_gift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_grc_rcv_gift_descriptor_;
}

const npt_grc_rcv_gift& npt_grc_rcv_gift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_grc_rcv_gift* npt_grc_rcv_gift::default_instance_ = NULL;

npt_grc_rcv_gift* npt_grc_rcv_gift::New() const {
  return new npt_grc_rcv_gift;
}

void npt_grc_rcv_gift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 42;
    gifttype_ = 0;
    giftcount_ = GOOGLE_LONGLONG(0);
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_grc_rcv_gift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_giftType;
        break;
      }

      // required int32 giftType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gifttype_)));
          set_has_gifttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_giftCount;
        break;
      }

      // required int64 giftCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &giftcount_)));
          set_has_giftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // required int64 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_from;
        break;
      }

      // required bytes from = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_grc_rcv_gift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 giftType = 2;
  if (has_gifttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gifttype(), output);
  }

  // required int64 giftCount = 3;
  if (has_giftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->giftcount(), output);
  }

  // required int64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // required bytes from = 5;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->from(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_grc_rcv_gift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 giftType = 2;
  if (has_gifttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gifttype(), target);
  }

  // required int64 giftCount = 3;
  if (has_giftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->giftcount(), target);
  }

  // required int64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // required bytes from = 5;
  if (has_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->from(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_grc_rcv_gift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 giftType = 2;
    if (has_gifttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gifttype());
    }

    // required int64 giftCount = 3;
    if (has_giftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->giftcount());
    }

    // required int64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // required bytes from = 5;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_grc_rcv_gift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_grc_rcv_gift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_grc_rcv_gift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_grc_rcv_gift::MergeFrom(const npt_grc_rcv_gift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gifttype()) {
      set_gifttype(from.gifttype());
    }
    if (from.has_giftcount()) {
      set_giftcount(from.giftcount());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_grc_rcv_gift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_grc_rcv_gift::CopyFrom(const npt_grc_rcv_gift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_grc_rcv_gift::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void npt_grc_rcv_gift::Swap(npt_grc_rcv_gift* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gifttype_, other->gifttype_);
    std::swap(giftcount_, other->giftcount_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(from_, other->from_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_grc_rcv_gift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_grc_rcv_gift_descriptor_;
  metadata.reflection = npt_grc_rcv_gift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int grc_friend_info::kOpenidFieldNumber;
const int grc_friend_info::kNicknameFieldNumber;
const int grc_friend_info::kFigureUrlFieldNumber;
const int grc_friend_info::kRoleidFieldNumber;
const int grc_friend_info::kRolenameFieldNumber;
const int grc_friend_info::kLevelFieldNumber;
const int grc_friend_info::kGenderFieldNumber;
const int grc_friend_info::kProfessionFieldNumber;
const int grc_friend_info::kNationFieldNumber;
const int grc_friend_info::kFightingcapacityFieldNumber;
const int grc_friend_info::kSameserverFieldNumber;
const int grc_friend_info::kVipinfoFieldNumber;
#endif  // !_MSC_VER

grc_friend_info::grc_friend_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void grc_friend_info::InitAsDefaultInstance() {
}

grc_friend_info::grc_friend_info(const grc_friend_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void grc_friend_info::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  figure_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  gender_ = 0;
  profession_ = 0;
  nation_ = 0;
  fightingcapacity_ = GOOGLE_LONGLONG(0);
  sameserver_ = false;
  vipinfo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

grc_friend_info::~grc_friend_info() {
  SharedDtor();
}

void grc_friend_info::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (figure_url_ != &::google::protobuf::internal::kEmptyString) {
    delete figure_url_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void grc_friend_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* grc_friend_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return grc_friend_info_descriptor_;
}

const grc_friend_info& grc_friend_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

grc_friend_info* grc_friend_info::default_instance_ = NULL;

grc_friend_info* grc_friend_info::New() const {
  return new grc_friend_info;
}

void grc_friend_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_figure_url()) {
      if (figure_url_ != &::google::protobuf::internal::kEmptyString) {
        figure_url_->clear();
      }
    }
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    level_ = 0;
    gender_ = 0;
    profession_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nation_ = 0;
    fightingcapacity_ = GOOGLE_LONGLONG(0);
    sameserver_ = false;
    vipinfo_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool grc_friend_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes openid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_openid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required bytes nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_figure_url;
        break;
      }

      // required bytes figure_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_figure_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_figure_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roleid;
        break;
      }

      // required uint64 roleid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rolename;
        break;
      }

      // required bytes rolename = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender;
        break;
      }

      // required int32 gender = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_profession;
        break;
      }

      // required int32 profession = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nation;
        break;
      }

      // required int32 nation = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_)));
          set_has_nation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fightingcapacity;
        break;
      }

      // required int64 fightingcapacity = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightingcapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fightingcapacity_)));
          set_has_fightingcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_sameserver;
        break;
      }

      // required bool sameserver = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sameserver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sameserver_)));
          set_has_sameserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vipinfo;
        break;
      }

      // required int32 vipinfo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipinfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipinfo_)));
          set_has_vipinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void grc_friend_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->openid(), output);
  }

  // required bytes nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->nickname(), output);
  }

  // required bytes figure_url = 3;
  if (has_figure_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->figure_url(), output);
  }

  // required uint64 roleid = 4;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roleid(), output);
  }

  // required bytes rolename = 5;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->rolename(), output);
  }

  // required int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // required int32 gender = 7;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender(), output);
  }

  // required int32 profession = 8;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->profession(), output);
  }

  // required int32 nation = 9;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nation(), output);
  }

  // required int64 fightingcapacity = 10;
  if (has_fightingcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->fightingcapacity(), output);
  }

  // required bool sameserver = 11;
  if (has_sameserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->sameserver(), output);
  }

  // required int32 vipinfo = 12;
  if (has_vipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->vipinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* grc_friend_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes openid = 1;
  if (has_openid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->openid(), target);
  }

  // required bytes nickname = 2;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nickname(), target);
  }

  // required bytes figure_url = 3;
  if (has_figure_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->figure_url(), target);
  }

  // required uint64 roleid = 4;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roleid(), target);
  }

  // required bytes rolename = 5;
  if (has_rolename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->rolename(), target);
  }

  // required int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // required int32 gender = 7;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender(), target);
  }

  // required int32 profession = 8;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->profession(), target);
  }

  // required int32 nation = 9;
  if (has_nation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nation(), target);
  }

  // required int64 fightingcapacity = 10;
  if (has_fightingcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->fightingcapacity(), target);
  }

  // required bool sameserver = 11;
  if (has_sameserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->sameserver(), target);
  }

  // required int32 vipinfo = 12;
  if (has_vipinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->vipinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int grc_friend_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes openid = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->openid());
    }

    // required bytes nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // required bytes figure_url = 3;
    if (has_figure_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->figure_url());
    }

    // required uint64 roleid = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // required bytes rolename = 5;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rolename());
    }

    // required int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 gender = 7;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // required int32 profession = 8;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 nation = 9;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation());
    }

    // required int64 fightingcapacity = 10;
    if (has_fightingcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fightingcapacity());
    }

    // required bool sameserver = 11;
    if (has_sameserver()) {
      total_size += 1 + 1;
    }

    // required int32 vipinfo = 12;
    if (has_vipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void grc_friend_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const grc_friend_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const grc_friend_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void grc_friend_info::MergeFrom(const grc_friend_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_figure_url()) {
      set_figure_url(from.figure_url());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_fightingcapacity()) {
      set_fightingcapacity(from.fightingcapacity());
    }
    if (from.has_sameserver()) {
      set_sameserver(from.sameserver());
    }
    if (from.has_vipinfo()) {
      set_vipinfo(from.vipinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void grc_friend_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void grc_friend_info::CopyFrom(const grc_friend_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool grc_friend_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void grc_friend_info::Swap(grc_friend_info* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(nickname_, other->nickname_);
    std::swap(figure_url_, other->figure_url_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(level_, other->level_);
    std::swap(gender_, other->gender_);
    std::swap(profession_, other->profession_);
    std::swap(nation_, other->nation_);
    std::swap(fightingcapacity_, other->fightingcapacity_);
    std::swap(sameserver_, other->sameserver_);
    std::swap(vipinfo_, other->vipinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata grc_friend_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = grc_friend_info_descriptor_;
  metadata.reflection = grc_friend_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_grc_friend_list::kTypeFieldNumber;
const int npt_grc_friend_list::kRetcodeFieldNumber;
const int npt_grc_friend_list::kTotalFriendCountFieldNumber;
const int npt_grc_friend_list::kFriendFieldNumber;
#endif  // !_MSC_VER

npt_grc_friend_list::npt_grc_friend_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_grc_friend_list::InitAsDefaultInstance() {
}

npt_grc_friend_list::npt_grc_friend_list(const npt_grc_friend_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_grc_friend_list::SharedCtor() {
  _cached_size_ = 0;
  type_ = 43;
  retcode_ = 0;
  total_friend_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_grc_friend_list::~npt_grc_friend_list() {
  SharedDtor();
}

void npt_grc_friend_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_grc_friend_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_grc_friend_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_grc_friend_list_descriptor_;
}

const npt_grc_friend_list& npt_grc_friend_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_grc_friend_list* npt_grc_friend_list::default_instance_ = NULL;

npt_grc_friend_list* npt_grc_friend_list::New() const {
  return new npt_grc_friend_list;
}

void npt_grc_friend_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 43;
    retcode_ = 0;
    total_friend_count_ = 0;
  }
  friend__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_grc_friend_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_FRIEND_LIST];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retcode;
        break;
      }

      // required int32 retcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_friend_count;
        break;
      }

      // required int32 total_friend_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_friend_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_friend_count_)));
          set_has_total_friend_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_friend;
        break;
      }

      // repeated .PB.grc_friend_info friend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_friend;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_grc_friend_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_FRIEND_LIST];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 retcode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retcode(), output);
  }

  // required int32 total_friend_count = 3;
  if (has_total_friend_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_friend_count(), output);
  }

  // repeated .PB.grc_friend_info friend = 4;
  for (int i = 0; i < this->friend__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->friend_(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_grc_friend_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_FRIEND_LIST];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 retcode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retcode(), target);
  }

  // required int32 total_friend_count = 3;
  if (has_total_friend_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_friend_count(), target);
  }

  // repeated .PB.grc_friend_info friend = 4;
  for (int i = 0; i < this->friend__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->friend_(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_grc_friend_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_FRIEND_LIST];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 retcode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 total_friend_count = 3;
    if (has_total_friend_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_friend_count());
    }

  }
  // repeated .PB.grc_friend_info friend = 4;
  total_size += 1 * this->friend__size();
  for (int i = 0; i < this->friend__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_grc_friend_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_grc_friend_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_grc_friend_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_grc_friend_list::MergeFrom(const npt_grc_friend_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend__.MergeFrom(from.friend__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_total_friend_count()) {
      set_total_friend_count(from.total_friend_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_grc_friend_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_grc_friend_list::CopyFrom(const npt_grc_friend_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_grc_friend_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < friend__size(); i++) {
    if (!this->friend_(i).IsInitialized()) return false;
  }
  return true;
}

void npt_grc_friend_list::Swap(npt_grc_friend_list* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(retcode_, other->retcode_);
    std::swap(total_friend_count_, other->total_friend_count_);
    friend__.Swap(&other->friend__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_grc_friend_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_grc_friend_list_descriptor_;
  metadata.reflection = npt_grc_friend_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int grc_gift_info::kGiftTypeFieldNumber;
const int grc_gift_info::kFromFieldNumber;
const int grc_gift_info::kToFieldNumber;
const int grc_gift_info::kCountFieldNumber;
const int grc_gift_info::kFlagFieldNumber;
const int grc_gift_info::kTimestampFieldNumber;
const int grc_gift_info::kSerialidFieldNumber;
const int grc_gift_info::kNicknameFieldNumber;
#endif  // !_MSC_VER

grc_gift_info::grc_gift_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void grc_gift_info::InitAsDefaultInstance() {
}

grc_gift_info::grc_gift_info(const grc_gift_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void grc_gift_info::SharedCtor() {
  _cached_size_ = 0;
  gift_type_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = GOOGLE_LONGLONG(0);
  flag_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  serialid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

grc_gift_info::~grc_gift_info() {
  SharedDtor();
}

void grc_gift_info::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void grc_gift_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* grc_gift_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return grc_gift_info_descriptor_;
}

const grc_gift_info& grc_gift_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

grc_gift_info* grc_gift_info::default_instance_ = NULL;

grc_gift_info* grc_gift_info::New() const {
  return new grc_gift_info;
}

void grc_gift_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gift_type_ = 0;
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    count_ = GOOGLE_LONGLONG(0);
    flag_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    serialid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool grc_gift_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gift_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_type_)));
          set_has_gift_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from;
        break;
      }

      // required bytes from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_to;
        break;
      }

      // required bytes to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required int64 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flag;
        break;
      }

      // required int32 flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }

      // required int64 timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_serialid;
        break;
      }

      // required int32 serialid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serialid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nickname;
        break;
      }

      // optional bytes nickname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void grc_gift_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gift_type = 1;
  if (has_gift_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gift_type(), output);
  }

  // required bytes from = 2;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->from(), output);
  }

  // required bytes to = 3;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->to(), output);
  }

  // required int64 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->count(), output);
  }

  // required int32 flag = 5;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flag(), output);
  }

  // required int64 timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->timestamp(), output);
  }

  // required int32 serialid = 7;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->serialid(), output);
  }

  // optional bytes nickname = 8;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* grc_gift_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gift_type = 1;
  if (has_gift_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gift_type(), target);
  }

  // required bytes from = 2;
  if (has_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->from(), target);
  }

  // required bytes to = 3;
  if (has_to()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->to(), target);
  }

  // required int64 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->count(), target);
  }

  // required int32 flag = 5;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flag(), target);
  }

  // required int64 timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->timestamp(), target);
  }

  // required int32 serialid = 7;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->serialid(), target);
  }

  // optional bytes nickname = 8;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int grc_gift_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gift_type = 1;
    if (has_gift_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_type());
    }

    // required bytes from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }

    // required bytes to = 3;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to());
    }

    // required int64 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

    // required int32 flag = 5;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // required int64 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // required int32 serialid = 7;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional bytes nickname = 8;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void grc_gift_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const grc_gift_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const grc_gift_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void grc_gift_info::MergeFrom(const grc_gift_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gift_type()) {
      set_gift_type(from.gift_type());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void grc_gift_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void grc_gift_info::CopyFrom(const grc_gift_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool grc_gift_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void grc_gift_info::Swap(grc_gift_info* other) {
  if (other != this) {
    std::swap(gift_type_, other->gift_type_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(count_, other->count_);
    std::swap(flag_, other->flag_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(serialid_, other->serialid_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata grc_gift_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = grc_gift_info_descriptor_;
  metadata.reflection = grc_gift_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int grc_user_gift_info::kGiftTypeFieldNumber;
const int grc_user_gift_info::kGiftsendFieldNumber;
const int grc_user_gift_info::kGiftreceiveTimesFieldNumber;
const int grc_user_gift_info::kGiftreceiveFieldNumber;
#endif  // !_MSC_VER

grc_user_gift_info::grc_user_gift_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void grc_user_gift_info::InitAsDefaultInstance() {
}

grc_user_gift_info::grc_user_gift_info(const grc_user_gift_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void grc_user_gift_info::SharedCtor() {
  _cached_size_ = 0;
  gift_type_ = 0;
  giftreceive_times_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

grc_user_gift_info::~grc_user_gift_info() {
  SharedDtor();
}

void grc_user_gift_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void grc_user_gift_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* grc_user_gift_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return grc_user_gift_info_descriptor_;
}

const grc_user_gift_info& grc_user_gift_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

grc_user_gift_info* grc_user_gift_info::default_instance_ = NULL;

grc_user_gift_info* grc_user_gift_info::New() const {
  return new grc_user_gift_info;
}

void grc_user_gift_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gift_type_ = 0;
    giftreceive_times_ = GOOGLE_LONGLONG(0);
  }
  giftsend_.Clear();
  giftreceive_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool grc_user_gift_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gift_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_type_)));
          set_has_gift_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_giftsend;
        break;
      }

      // repeated .PB.grc_gift_info giftsend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giftsend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giftsend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_giftsend;
        if (input->ExpectTag(24)) goto parse_giftreceive_times;
        break;
      }

      // required int64 giftreceive_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftreceive_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &giftreceive_times_)));
          set_has_giftreceive_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_giftreceive;
        break;
      }

      // repeated .PB.grc_gift_info giftreceive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giftreceive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giftreceive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_giftreceive;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void grc_user_gift_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gift_type = 1;
  if (has_gift_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gift_type(), output);
  }

  // repeated .PB.grc_gift_info giftsend = 2;
  for (int i = 0; i < this->giftsend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->giftsend(i), output);
  }

  // required int64 giftreceive_times = 3;
  if (has_giftreceive_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->giftreceive_times(), output);
  }

  // repeated .PB.grc_gift_info giftreceive = 4;
  for (int i = 0; i < this->giftreceive_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->giftreceive(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* grc_user_gift_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gift_type = 1;
  if (has_gift_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gift_type(), target);
  }

  // repeated .PB.grc_gift_info giftsend = 2;
  for (int i = 0; i < this->giftsend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->giftsend(i), target);
  }

  // required int64 giftreceive_times = 3;
  if (has_giftreceive_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->giftreceive_times(), target);
  }

  // repeated .PB.grc_gift_info giftreceive = 4;
  for (int i = 0; i < this->giftreceive_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->giftreceive(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int grc_user_gift_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gift_type = 1;
    if (has_gift_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_type());
    }

    // required int64 giftreceive_times = 3;
    if (has_giftreceive_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->giftreceive_times());
    }

  }
  // repeated .PB.grc_gift_info giftsend = 2;
  total_size += 1 * this->giftsend_size();
  for (int i = 0; i < this->giftsend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giftsend(i));
  }

  // repeated .PB.grc_gift_info giftreceive = 4;
  total_size += 1 * this->giftreceive_size();
  for (int i = 0; i < this->giftreceive_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giftreceive(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void grc_user_gift_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const grc_user_gift_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const grc_user_gift_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void grc_user_gift_info::MergeFrom(const grc_user_gift_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  giftsend_.MergeFrom(from.giftsend_);
  giftreceive_.MergeFrom(from.giftreceive_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gift_type()) {
      set_gift_type(from.gift_type());
    }
    if (from.has_giftreceive_times()) {
      set_giftreceive_times(from.giftreceive_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void grc_user_gift_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void grc_user_gift_info::CopyFrom(const grc_user_gift_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool grc_user_gift_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < giftsend_size(); i++) {
    if (!this->giftsend(i).IsInitialized()) return false;
  }
  for (int i = 0; i < giftreceive_size(); i++) {
    if (!this->giftreceive(i).IsInitialized()) return false;
  }
  return true;
}

void grc_user_gift_info::Swap(grc_user_gift_info* other) {
  if (other != this) {
    std::swap(gift_type_, other->gift_type_);
    giftsend_.Swap(&other->giftsend_);
    std::swap(giftreceive_times_, other->giftreceive_times_);
    giftreceive_.Swap(&other->giftreceive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata grc_user_gift_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = grc_user_gift_info_descriptor_;
  metadata.reflection = grc_user_gift_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_grc_gift_list::kTypeFieldNumber;
const int npt_grc_gift_list::kGiftFieldNumber;
#endif  // !_MSC_VER

npt_grc_gift_list::npt_grc_gift_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_grc_gift_list::InitAsDefaultInstance() {
}

npt_grc_gift_list::npt_grc_gift_list(const npt_grc_gift_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_grc_gift_list::SharedCtor() {
  _cached_size_ = 0;
  type_ = 44;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_grc_gift_list::~npt_grc_gift_list() {
  SharedDtor();
}

void npt_grc_gift_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npt_grc_gift_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_grc_gift_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_grc_gift_list_descriptor_;
}

const npt_grc_gift_list& npt_grc_gift_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_grc_gift_list* npt_grc_gift_list::default_instance_ = NULL;

npt_grc_gift_list* npt_grc_gift_list::New() const {
  return new npt_grc_gift_list;
}

void npt_grc_gift_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 44;
  }
  gift_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_grc_gift_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GIFT_LIST];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gift;
        break;
      }

      // repeated .PB.grc_user_gift_info gift = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gift;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_grc_gift_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GIFT_LIST];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .PB.grc_user_gift_info gift = 2;
  for (int i = 0; i < this->gift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gift(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_grc_gift_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GIFT_LIST];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .PB.grc_user_gift_info gift = 2;
  for (int i = 0; i < this->gift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gift(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_grc_gift_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_GIFT_LIST];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .PB.grc_user_gift_info gift = 2;
  total_size += 1 * this->gift_size();
  for (int i = 0; i < this->gift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gift(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_grc_gift_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_grc_gift_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_grc_gift_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_grc_gift_list::MergeFrom(const npt_grc_gift_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  gift_.MergeFrom(from.gift_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_grc_gift_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_grc_gift_list::CopyFrom(const npt_grc_gift_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_grc_gift_list::IsInitialized() const {

  for (int i = 0; i < gift_size(); i++) {
    if (!this->gift(i).IsInitialized()) return false;
  }
  return true;
}

void npt_grc_gift_list::Swap(npt_grc_gift_list* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    gift_.Swap(&other->gift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_grc_gift_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_grc_gift_list_descriptor_;
  metadata.reflection = npt_grc_gift_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_grc_send_gift_re::kTypeFieldNumber;
const int npt_grc_send_gift_re::kToFieldNumber;
const int npt_grc_send_gift_re::kRetcodeFieldNumber;
#endif  // !_MSC_VER

npt_grc_send_gift_re::npt_grc_send_gift_re()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_grc_send_gift_re::InitAsDefaultInstance() {
}

npt_grc_send_gift_re::npt_grc_send_gift_re(const npt_grc_send_gift_re& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_grc_send_gift_re::SharedCtor() {
  _cached_size_ = 0;
  type_ = 45;
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_grc_send_gift_re::~npt_grc_send_gift_re() {
  SharedDtor();
}

void npt_grc_send_gift_re::SharedDtor() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (this != default_instance_) {
  }
}

void npt_grc_send_gift_re::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_grc_send_gift_re::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_grc_send_gift_re_descriptor_;
}

const npt_grc_send_gift_re& npt_grc_send_gift_re::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_grc_send_gift_re* npt_grc_send_gift_re::default_instance_ = NULL;

npt_grc_send_gift_re* npt_grc_send_gift_re::New() const {
  return new npt_grc_send_gift_re;
}

void npt_grc_send_gift_re::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 45;
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_grc_send_gift_re::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT_RE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // required bytes to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_retcode;
        break;
      }

      // required int32 retcode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_grc_send_gift_re::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT_RE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bytes to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->to(), output);
  }

  // required int32 retcode = 3;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_grc_send_gift_re::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT_RE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bytes to = 2;
  if (has_to()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->to(), target);
  }

  // required int32 retcode = 3;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_grc_send_gift_re::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_SEND_GIFT_RE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bytes to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to());
    }

    // required int32 retcode = 3;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_grc_send_gift_re::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_grc_send_gift_re* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_grc_send_gift_re*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_grc_send_gift_re::MergeFrom(const npt_grc_send_gift_re& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_grc_send_gift_re::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_grc_send_gift_re::CopyFrom(const npt_grc_send_gift_re& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_grc_send_gift_re::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void npt_grc_send_gift_re::Swap(npt_grc_send_gift_re* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(to_, other->to_);
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_grc_send_gift_re::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_grc_send_gift_re_descriptor_;
  metadata.reflection = npt_grc_send_gift_re_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int npt_grc_rcv_gift_re::kTypeFieldNumber;
const int npt_grc_rcv_gift_re::kFromFieldNumber;
const int npt_grc_rcv_gift_re::kRetcodeFieldNumber;
#endif  // !_MSC_VER

npt_grc_rcv_gift_re::npt_grc_rcv_gift_re()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npt_grc_rcv_gift_re::InitAsDefaultInstance() {
}

npt_grc_rcv_gift_re::npt_grc_rcv_gift_re(const npt_grc_rcv_gift_re& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npt_grc_rcv_gift_re::SharedCtor() {
  _cached_size_ = 0;
  type_ = 46;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npt_grc_rcv_gift_re::~npt_grc_rcv_gift_re() {
  SharedDtor();
}

void npt_grc_rcv_gift_re::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (this != default_instance_) {
  }
}

void npt_grc_rcv_gift_re::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npt_grc_rcv_gift_re::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npt_grc_rcv_gift_re_descriptor_;
}

const npt_grc_rcv_gift_re& npt_grc_rcv_gift_re::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PB_2fnet_5fcommon_2eproto();
  return *default_instance_;
}

npt_grc_rcv_gift_re* npt_grc_rcv_gift_re::default_instance_ = NULL;

npt_grc_rcv_gift_re* npt_grc_rcv_gift_re::New() const {
  return new npt_grc_rcv_gift_re;
}

void npt_grc_rcv_gift_re::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 46;
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npt_grc_rcv_gift_re::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT_RE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::NET_PROTOCBUF_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::NET_PROTOCBUF_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from;
        break;
      }

      // required bytes from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_retcode;
        break;
      }

      // required int32 retcode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npt_grc_rcv_gift_re::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT_RE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bytes from = 2;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->from(), output);
  }

  // required int32 retcode = 3;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npt_grc_rcv_gift_re::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT_RE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bytes from = 2;
  if (has_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->from(), target);
  }

  // required int32 retcode = 3;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npt_grc_rcv_gift_re::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.NET_PROTOCBUF_TYPE type = 1 [default = NPT_GRC_RCV_GIFT_RE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bytes from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }

    // required int32 retcode = 3;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npt_grc_rcv_gift_re::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npt_grc_rcv_gift_re* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npt_grc_rcv_gift_re*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npt_grc_rcv_gift_re::MergeFrom(const npt_grc_rcv_gift_re& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npt_grc_rcv_gift_re::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npt_grc_rcv_gift_re::CopyFrom(const npt_grc_rcv_gift_re& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npt_grc_rcv_gift_re::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void npt_grc_rcv_gift_re::Swap(npt_grc_rcv_gift_re* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(from_, other->from_);
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npt_grc_rcv_gift_re::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npt_grc_rcv_gift_re_descriptor_;
  metadata.reflection = npt_grc_rcv_gift_re_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB

// @@protoc_insertion_point(global_scope)
